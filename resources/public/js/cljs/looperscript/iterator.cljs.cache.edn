{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{}, :name cljs.looperscript.iterator, :imports nil, :requires {cljs.looperscript.logging cljs.looperscript.logging, cljs.looperscript.globals cljs.looperscript.globals}, :cljs.spec/speced-vars [], :uses {current-time-hack cljs.looperscript.globals, log cljs.looperscript.logging, break-val cljs.looperscript.logging, log-> cljs.looperscript.logging, break cljs.looperscript.logging}, :defs {dethunk {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/src/cljs/looperscript/iterator.cljs", :line 23, :column 7, :end-line 23, :end-column 14, :arglists (quote ([x]))}, :name cljs.looperscript.iterator/dethunk, :variadic false, :file "src/cljs/looperscript/iterator.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, justify {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/src/cljs/looperscript/iterator.cljs", :line 56, :column 7, :end-line 56, :end-column 14, :arglists (quote ([n]))}, :name cljs.looperscript.iterator/justify, :variadic false, :file "src/cljs/looperscript/iterator.cljs", :end-column 14, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, modifier? {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/src/cljs/looperscript/iterator.cljs", :line 46, :column 7, :end-line 46, :end-column 16, :arglists (quote ([x]))}, :name cljs.looperscript.iterator/modifier?, :variadic false, :file "src/cljs/looperscript/iterator.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, timed-iterator {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/src/cljs/looperscript/iterator.cljs", :line 122, :column 7, :end-line 122, :end-column 21, :arglists (quote ([v time-v]))}, :name cljs.looperscript.iterator/timed-iterator, :variadic false, :file "src/cljs/looperscript/iterator.cljs", :end-column 21, :method-params ([v time-v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v time-v]))}, get-next-stack-val {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/src/cljs/looperscript/iterator.cljs", :line 32, :column 7, :end-line 32, :end-column 25, :arglists (quote ([stack current-time] [stack preserve-carots? current-time])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([stack current-time] [stack preserve-carots? current-time]), :arglists ([stack current-time] [stack preserve-carots? current-time]), :arglists-meta (nil nil)}}, :name cljs.looperscript.iterator/get-next-stack-val, :variadic false, :file "src/cljs/looperscript/iterator.cljs", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([stack current-time] [stack preserve-carots? current-time]), :arglists ([stack current-time] [stack preserve-carots? current-time]), :arglists-meta (nil nil)}, :method-params ([stack current-time] [stack preserve-carots? current-time]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 3, :fn-var true, :arglists ([stack current-time] [stack preserve-carots? current-time])}, modifier-fn? {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/src/cljs/looperscript/iterator.cljs", :line 49, :column 7, :end-line 49, :end-column 19, :arglists (quote ([x]))}, :name cljs.looperscript.iterator/modifier-fn?, :variadic false, :file "src/cljs/looperscript/iterator.cljs", :end-column 19, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, apply-modifiers {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/src/cljs/looperscript/iterator.cljs", :line 76, :column 7, :end-line 76, :end-column 22, :arglists (quote ([mods x]))}, :name cljs.looperscript.iterator/apply-modifiers, :variadic false, :file "src/cljs/looperscript/iterator.cljs", :end-column 22, :method-params ([mods x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mods x]))}, vec-push! {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/src/cljs/looperscript/iterator.cljs", :line 17, :column 7, :end-line 17, :end-column 16, :arglists (quote ([stack v]))}, :name cljs.looperscript.iterator/vec-push!, :variadic false, :file "src/cljs/looperscript/iterator.cljs", :end-column 16, :method-params ([stack v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists (quote ([stack v]))}, intact? {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/src/cljs/looperscript/iterator.cljs", :line 5, :column 7, :end-line 5, :end-column 14, :arglists (quote ([v]))}, :name cljs.looperscript.iterator/intact?, :variadic false, :file "src/cljs/looperscript/iterator.cljs", :end-column 14, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, iterator {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/src/cljs/looperscript/iterator.cljs", :line 87, :column 7, :end-line 87, :end-column 15, :arglists (quote ([v] [v preserve-carots?])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([v] [v preserve-carots?]), :arglists ([v] [v preserve-carots?]), :arglists-meta (nil nil)}}, :name cljs.looperscript.iterator/iterator, :variadic false, :file "src/cljs/looperscript/iterator.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([v] [v preserve-carots?]), :arglists ([v] [v preserve-carots?]), :arglists-meta (nil nil)}, :method-params ([v] [v preserve-carots?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 2, :fn-var true, :arglists ([v] [v preserve-carots?])}, pop!* {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/src/cljs/looperscript/iterator.cljs", :line 8, :column 7, :end-line 8, :end-column 12, :arglists (quote ([stack]))}, :name cljs.looperscript.iterator/pop!*, :variadic false, :file "src/cljs/looperscript/iterator.cljs", :end-column 12, :method-params ([stack]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([stack]))}, takes-current-time? {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/src/cljs/looperscript/iterator.cljs", :line 29, :column 7, :end-line 29, :end-column 26, :arglists (quote ([x]))}, :name cljs.looperscript.iterator/takes-current-time?, :variadic false, :file "src/cljs/looperscript/iterator.cljs", :end-column 26, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, push! {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/src/cljs/looperscript/iterator.cljs", :line 13, :column 7, :end-line 13, :end-column 12, :arglists (quote ([stack x]))}, :name cljs.looperscript.iterator/push!, :variadic false, :file "src/cljs/looperscript/iterator.cljs", :end-column 12, :method-params ([stack x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([stack x]))}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:takes-current-time :just :plus-mod :modifier :else :fraction :modifier-fn :intact-for-sub-time}, :order [:intact-for-sub-time :takes-current-time :modifier :modifier-fn :fraction :plus-mod :just :else]}, :doc nil}