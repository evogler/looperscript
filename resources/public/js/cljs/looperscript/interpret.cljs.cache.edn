{:rename-macros {}, :renames {}, :externs {console {log {}}, Error {}}, :use-macros {}, :excludes #{}, :name cljs.looperscript.interpret, :imports nil, :requires {cljs.reader cljs.reader, insta instaparse.core, instaparse.core instaparse.core, vec-fns cljs.looperscript.vector-fns, cljs.looperscript.vector-fns cljs.looperscript.vector-fns}, :cljs.spec/speced-vars [], :uses {read-string cljs.reader, vec-fns cljs.looperscript.vector-fns}, :defs {walk-map-applying-fn-to-vals {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/src/cljs/looperscript/interpret.cljs", :line 119, :column 7, :end-line 119, :end-column 35, :arglists (quote ([f m]))}, :name cljs.looperscript.interpret/walk-map-applying-fn-to-vals, :variadic false, :file "src/cljs/looperscript/interpret.cljs", :end-column 35, :method-params ([f m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f m]))}, log {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/src/cljs/looperscript/interpret.cljs", :line 7, :column 7, :end-line 7, :end-column 10, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.looperscript.interpret/log, :variadic true, :file "src/cljs/looperscript/interpret.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, looper-transform {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/src/cljs/looperscript/interpret.cljs", :line 172, :column 7, :end-line 172, :end-column 23, :arglists (quote ([parse-tree]))}, :name cljs.looperscript.interpret/looper-transform, :variadic false, :file "src/cljs/looperscript/interpret.cljs", :end-column 23, :method-params ([parse-tree]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 172, :end-line 172, :max-fixed-arity 1, :fn-var true, :arglists (quote ([parse-tree]))}, -process-vec {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/src/cljs/looperscript/interpret.cljs", :line 61, :column 7, :end-line 61, :end-column 19, :arglists (quote ([v invade-carots?]))}, :name cljs.looperscript.interpret/-process-vec, :variadic false, :file "src/cljs/looperscript/interpret.cljs", :end-column 19, :method-params ([v invade-carots?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v invade-carots?]))}, ratio->note {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/src/cljs/looperscript/interpret.cljs", :line 28, :column 7, :end-line 28, :end-column 18, :arglists (quote ([r]))}, :name cljs.looperscript.interpret/ratio->note, :variadic false, :file "src/cljs/looperscript/interpret.cljs", :end-column 18, :method-params ([r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([r]))}, splice {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/src/cljs/looperscript/interpret.cljs", :line 32, :column 7, :end-line 32, :end-column 13, :arglists (quote ([v]))}, :name cljs.looperscript.interpret/splice, :variadic false, :file "src/cljs/looperscript/interpret.cljs", :end-column 13, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, string->number {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/src/cljs/looperscript/interpret.cljs", :line 16, :column 7, :end-line 16, :end-column 21, :arglists (quote ([s]))}, :name cljs.looperscript.interpret/string->number, :variadic false, :file "src/cljs/looperscript/interpret.cljs", :end-column 21, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, pre-process-to-eval-!s {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/src/cljs/looperscript/interpret.cljs", :line 92, :column 7, :end-line 92, :end-column 29, :arglists (quote ([v invade-carots?]))}, :name cljs.looperscript.interpret/pre-process-to-eval-!s, :variadic false, :file "src/cljs/looperscript/interpret.cljs", :end-column 29, :method-params ([v invade-carots?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v invade-carots?]))}, grammar {:name cljs.looperscript.interpret/grammar, :file "src/cljs/looperscript/interpret.cljs", :line 127, :column 1, :end-line 127, :end-column 13, :meta {:file "/Users/Eric/Workspace/looperscript/src/cljs/looperscript/interpret.cljs", :line 127, :column 6, :end-line 127, :end-column 13}, :tag any}, remove-comments {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/src/cljs/looperscript/interpret.cljs", :line 10, :column 7, :end-line 10, :end-column 22, :arglists (quote ([s]))}, :name cljs.looperscript.interpret/remove-comments, :variadic false, :file "src/cljs/looperscript/interpret.cljs", :end-column 22, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, maybe-process-vec {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/src/cljs/looperscript/interpret.cljs", :line 55, :column 7, :end-line 55, :end-column 24, :arglists (quote ([x invade-carots?]))}, :name cljs.looperscript.interpret/maybe-process-vec, :variadic false, :file "src/cljs/looperscript/interpret.cljs", :end-column 24, :method-params ([x invade-carots?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x invade-carots?]))}, looper-parse {:name cljs.looperscript.interpret/looper-parse, :file "src/cljs/looperscript/interpret.cljs", :line 170, :column 1, :end-line 170, :end-column 18, :meta {:file "/Users/Eric/Workspace/looperscript/src/cljs/looperscript/interpret.cljs", :line 170, :column 6, :end-line 170, :end-column 18}, :tag any}, quick-test {:name cljs.looperscript.interpret/quick-test, :file "src/cljs/looperscript/interpret.cljs", :line 215, :column 1, :end-line 215, :end-column 16, :meta {:file "/Users/Eric/Workspace/looperscript/src/cljs/looperscript/interpret.cljs", :line 215, :column 6, :end-line 215, :end-column 16}, :tag number}, process-vec {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/src/cljs/looperscript/interpret.cljs", :line 109, :column 7, :end-line 109, :end-column 18, :arglists (quote ([args] [args invade-carots?])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([args] [args invade-carots?]), :arglists ([args] [args invade-carots?]), :arglists-meta (nil nil)}}, :name cljs.looperscript.interpret/process-vec, :variadic false, :file "src/cljs/looperscript/interpret.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([args] [args invade-carots?]), :arglists ([args] [args invade-carots?]), :arglists-meta (nil nil)}, :method-params ([args] [args invade-carots?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 2, :fn-var true, :arglists ([args] [args invade-carots?])}}, :cljs.spec/registry-ref [], :require-macros {cljs.reader cljs.reader}, :cljs.analyzer/constants {:seen #{:true :v :vec :splice :init :else :number :fraction :name :part :aspect-header :parts :params :string :s :keyword :ratio :mod-code :aspect-keyword :bpm :vec-code :sub-aspect-keyword :intact-for-sub-time :full-aspect-name :data}, :order [:splice :else :intact-for-sub-time :true :v :vec :init :number :fraction :part :aspect-header :parts :params :string :s :keyword :ratio :mod-code :aspect-keyword :bpm :vec-code :sub-aspect-keyword :full-aspect-name :data :name]}, :doc nil}