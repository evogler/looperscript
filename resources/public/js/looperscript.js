if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}

var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2371";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__26944__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__26944 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__26944__delegate.call(this, args);
    };
    G__26944.cljs$lang$maxFixedArity = 0;
    G__26944.cljs$lang$applyTo = function(arglist__26945) {
      var args = cljs.core.seq(arglist__26945);
      return G__26944__delegate(args);
    };
    G__26944.cljs$core$IFn$_invoke$arity$variadic = G__26944__delegate;
    return G__26944;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function some_QMARK_(x) {
  return!(x == null);
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3628__auto__ = ty;
    if (cljs.core.truth_(and__3628__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3628__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4124__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var s = temp__4124__auto__;
    return s;
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ty);
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4510__auto___26946 = len;
  var i_26947 = 0;
  while (true) {
    if (i_26947 < n__4510__auto___26946) {
      new_arr[i_26947] = arr[i_26947];
      var G__26948 = i_26947 + 1;
      i_26947 = G__26948;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__26949__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__26949 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__26949__delegate.call(this, array, i, idxs);
    };
    G__26949.cljs$lang$maxFixedArity = 2;
    G__26949.cljs$lang$applyTo = function(arglist__26950) {
      var array = cljs.core.first(arglist__26950);
      arglist__26950 = cljs.core.next(arglist__26950);
      var i = cljs.core.first(arglist__26950);
      var idxs = cljs.core.rest(arglist__26950);
      return G__26949__delegate(array, i, idxs);
    };
    G__26949.cljs$core$IFn$_invoke$arity$variadic = G__26949__delegate;
    return G__26949;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__26951__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__26951 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__26951__delegate.call(this, array, idx, idx2, idxv);
    };
    G__26951.cljs$lang$maxFixedArity = 3;
    G__26951.cljs$lang$applyTo = function(arglist__26952) {
      var array = cljs.core.first(arglist__26952);
      arglist__26952 = cljs.core.next(arglist__26952);
      var idx = cljs.core.first(arglist__26952);
      arglist__26952 = cljs.core.next(arglist__26952);
      var idx2 = cljs.core.first(arglist__26952);
      var idxv = cljs.core.rest(arglist__26952);
      return G__26951__delegate(array, idx, idx2, idxv);
    };
    G__26951.cljs$core$IFn$_invoke$arity$variadic = G__26951__delegate;
    return G__26951;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj26954 = {};
  return obj26954;
}();
cljs.core.IFn = function() {
  var obj26956 = {};
  return obj26956;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    }
  };
  var _invoke__22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$22;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return _invoke__22.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  _invoke.cljs$core$IFn$_invoke$arity$22 = _invoke__22;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj26958 = {};
  return obj26958;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3628__auto__ = value;
    if (and__3628__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4277__auto__ = value == null ? null : value;
    return function() {
      var or__3640__auto__ = cljs.core._clone[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._clone["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj26960 = {};
  return obj26960;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._count[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._count["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj26962 = {};
  return obj26962;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._empty[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._empty["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj26964 = {};
  return obj26964;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._conj[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._conj["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj26966 = {};
  return obj26966;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3628__auto__ = coll;
      if (and__3628__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4277__auto__ = coll == null ? null : coll;
      return function() {
        var or__3640__auto__ = cljs.core._nth[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._nth["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3628__auto__ = coll;
      if (and__3628__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4277__auto__ = coll == null ? null : coll;
      return function() {
        var or__3640__auto__ = cljs.core._nth[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._nth["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj26968 = {};
  return obj26968;
}();
cljs.core.ISeq = function() {
  var obj26970 = {};
  return obj26970;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._first[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._first["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._rest[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._rest["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj26972 = {};
  return obj26972;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._next[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._next["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj26974 = {};
  return obj26974;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3628__auto__ = o;
      if (and__3628__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4277__auto__ = o == null ? null : o;
      return function() {
        var or__3640__auto__ = cljs.core._lookup[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._lookup["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3628__auto__ = o;
      if (and__3628__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4277__auto__ = o == null ? null : o;
      return function() {
        var or__3640__auto__ = cljs.core._lookup[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._lookup["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj26976 = {};
  return obj26976;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._assoc[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._assoc["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj26978 = {};
  return obj26978;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._dissoc[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._dissoc["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj26980 = {};
  return obj26980;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._key[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._key["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._val[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._val["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj26982 = {};
  return obj26982;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._disjoin[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._disjoin["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj26984 = {};
  return obj26984;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._peek[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._peek["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._pop[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._pop["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj26986 = {};
  return obj26986;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._assoc_n[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj26988 = {};
  return obj26988;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3628__auto__ = o;
    if (and__3628__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4277__auto__ = o == null ? null : o;
    return function() {
      var or__3640__auto__ = cljs.core._deref[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._deref["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj26990 = {};
  return obj26990;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3628__auto__ = o;
    if (and__3628__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4277__auto__ = o == null ? null : o;
    return function() {
      var or__3640__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj26992 = {};
  return obj26992;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3628__auto__ = o;
    if (and__3628__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4277__auto__ = o == null ? null : o;
    return function() {
      var or__3640__auto__ = cljs.core._meta[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._meta["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj26994 = {};
  return obj26994;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3628__auto__ = o;
    if (and__3628__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4277__auto__ = o == null ? null : o;
    return function() {
      var or__3640__auto__ = cljs.core._with_meta[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._with_meta["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj26996 = {};
  return obj26996;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3628__auto__ = coll;
      if (and__3628__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4277__auto__ = coll == null ? null : coll;
      return function() {
        var or__3640__auto__ = cljs.core._reduce[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._reduce["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3628__auto__ = coll;
      if (and__3628__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4277__auto__ = coll == null ? null : coll;
      return function() {
        var or__3640__auto__ = cljs.core._reduce[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._reduce["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj26998 = {};
  return obj26998;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._kv_reduce[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj27000 = {};
  return obj27000;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3628__auto__ = o;
    if (and__3628__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4277__auto__ = o == null ? null : o;
    return function() {
      var or__3640__auto__ = cljs.core._equiv[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._equiv["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj27002 = {};
  return obj27002;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3628__auto__ = o;
    if (and__3628__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4277__auto__ = o == null ? null : o;
    return function() {
      var or__3640__auto__ = cljs.core._hash[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._hash["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj27004 = {};
  return obj27004;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3628__auto__ = o;
    if (and__3628__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4277__auto__ = o == null ? null : o;
    return function() {
      var or__3640__auto__ = cljs.core._seq[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._seq["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj27006 = {};
  return obj27006;
}();
cljs.core.IList = function() {
  var obj27008 = {};
  return obj27008;
}();
cljs.core.IRecord = function() {
  var obj27010 = {};
  return obj27010;
}();
cljs.core.IReversible = function() {
  var obj27012 = {};
  return obj27012;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._rseq[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._rseq["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj27014 = {};
  return obj27014;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._sorted_seq[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._entry_key[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._entry_key["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._comparator[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._comparator["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj27016 = {};
  return obj27016;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3628__auto__ = writer;
    if (and__3628__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4277__auto__ = writer == null ? null : writer;
    return function() {
      var or__3640__auto__ = cljs.core._write[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._write["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3628__auto__ = writer;
    if (and__3628__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4277__auto__ = writer == null ? null : writer;
    return function() {
      var or__3640__auto__ = cljs.core._flush[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._flush["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj27018 = {};
  return obj27018;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3628__auto__ = o;
    if (and__3628__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4277__auto__ = o == null ? null : o;
    return function() {
      var or__3640__auto__ = cljs.core._pr_writer[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj27020 = {};
  return obj27020;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3628__auto__ = d;
    if (and__3628__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4277__auto__ = d == null ? null : d;
    return function() {
      var or__3640__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj27022 = {};
  return obj27022;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3628__auto__ = this$;
    if (and__3628__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4277__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3640__auto__ = cljs.core._notify_watches[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3628__auto__ = this$;
    if (and__3628__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4277__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3640__auto__ = cljs.core._add_watch[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._add_watch["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3628__auto__ = this$;
    if (and__3628__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4277__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3640__auto__ = cljs.core._remove_watch[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj27024 = {};
  return obj27024;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._as_transient[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._as_transient["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj27026 = {};
  return obj27026;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3628__auto__ = tcoll;
    if (and__3628__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4277__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3640__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3628__auto__ = tcoll;
    if (and__3628__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4277__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3640__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj27028 = {};
  return obj27028;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3628__auto__ = tcoll;
    if (and__3628__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4277__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3640__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj27030 = {};
  return obj27030;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3628__auto__ = tcoll;
    if (and__3628__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4277__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3640__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj27032 = {};
  return obj27032;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3628__auto__ = tcoll;
    if (and__3628__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4277__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3640__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3628__auto__ = tcoll;
    if (and__3628__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4277__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3640__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj27034 = {};
  return obj27034;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3628__auto__ = tcoll;
    if (and__3628__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4277__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3640__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj27036 = {};
  return obj27036;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3628__auto__ = x;
    if (and__3628__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4277__auto__ = x == null ? null : x;
    return function() {
      var or__3640__auto__ = cljs.core._compare[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._compare["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj27038 = {};
  return obj27038;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._drop_first[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._drop_first["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj27040 = {};
  return obj27040;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._chunked_first[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._chunked_rest[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj27042 = {};
  return obj27042;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._chunked_next[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj27044 = {};
  return obj27044;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3628__auto__ = x;
    if (and__3628__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4277__auto__ = x == null ? null : x;
    return function() {
      var or__3640__auto__ = cljs.core._name[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._name["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3628__auto__ = x;
    if (and__3628__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4277__auto__ = x == null ? null : x;
    return function() {
      var or__3640__auto__ = cljs.core._namespace[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._namespace["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.IAtom = function() {
  var obj27046 = {};
  return obj27046;
}();
cljs.core.IReset = function() {
  var obj27048 = {};
  return obj27048;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__3628__auto__ = o;
    if (and__3628__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4277__auto__ = o == null ? null : o;
    return function() {
      var or__3640__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj27050 = {};
  return obj27050;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__3628__auto__ = o;
      if (and__3628__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__4277__auto__ = o == null ? null : o;
      return function() {
        var or__3640__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__3628__auto__ = o;
      if (and__3628__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__4277__auto__ = o == null ? null : o;
      return function() {
        var or__3640__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__3628__auto__ = o;
      if (and__3628__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__4277__auto__ = o == null ? null : o;
      return function() {
        var or__3640__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__3628__auto__ = o;
      if (and__3628__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__4277__auto__ = o == null ? null : o;
      return function() {
        var or__3640__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.IIterable = function() {
  var obj27052 = {};
  return obj27052;
}();
cljs.core._iterator = function _iterator(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IIterable$_iterator$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._iterator[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._iterator["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IIterable.-iterator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
};
cljs.core.int_rotate_left = function int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(Math.imul.call(null, 4294967295, 5) === 0)) {
  cljs.core.imul = function imul(a, b) {
    return Math.imul.call(null, a, b);
  };
} else {
  cljs.core.imul = function imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353;
cljs.core.m3_C2 = 461845907;
cljs.core.m3_mix_K1 = function m3_mix_K1(k1) {
  return cljs.core.imul.call(null, cljs.core.int_rotate_left.call(null, cljs.core.imul.call(null, k1, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function m3_mix_H1(h1, k1) {
  return cljs.core.imul.call(null, cljs.core.int_rotate_left.call(null, h1 ^ k1, 13), 5) + 3864292196;
};
cljs.core.m3_fmix = function m3_fmix(h1, len) {
  var h1__$1 = h1;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul.call(null, h1__$3, 2246822507);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul.call(null, h1__$5, 3266489909);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1.call(null, in$);
    var h1 = cljs.core.m3_mix_H1.call(null, cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix.call(null, h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__27053 = i + 2;
        var G__27054 = cljs.core.m3_mix_H1.call(null, h1, cljs.core.m3_mix_K1.call(null, in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__27053;
        h1 = G__27054;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1.call(null, in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix.call(null, h1__$1, cljs.core.imul.call(null, 2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj27056 = {};
  return obj27056;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__27057 = i + 1;
          var G__27058 = cljs.core.imul.call(null, 31, hash) + s.charCodeAt(i);
          i = G__27057;
          hash = G__27058;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_.call(null, k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj27062 = {};
      return obj27062;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__27064 = o;
    if (G__27064) {
      var bit__4297__auto__ = G__27064.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4297__auto__ || G__27064.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor.call(null, o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int.call(null, cljs.core.hash_string.call(null, o));
          } else {
            if (o == null) {
              return 0;
            } else {
              return cljs.core._hash.call(null, o);
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.m3_hash_unencoded_chars.call(null, sym.name), cljs.core.hash_string.call(null, sym.ns));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3628__auto__ = cljs.core.not.call(null, a.ns);
      if (and__3628__auto__) {
        return b.ns;
      } else {
        return and__3628__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        return cljs.core.compare.call(null, a.name, b.name);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__4051__auto__ = self__._hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__27066 = null;
  var G__27066__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__27066__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__27066 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__27066__2.call(this, self__, coll);
      case 3:
        return G__27066__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__27066.cljs$core$IFn$_invoke$arity$2 = G__27066__2;
  G__27066.cljs$core$IFn$_invoke$arity$3 = G__27066__3;
  return G__27066;
}();
cljs.core.Symbol.prototype.apply = function(self__, args27065) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args27065)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.iterable_QMARK_ = function iterable_QMARK_(x) {
  var G__27068 = x;
  if (G__27068) {
    var bit__4304__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3640__auto__ = bit__4304__auto__;
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return G__27068.cljs$core$IIterable$;
      }
    }())) {
      return true;
    } else {
      if (!G__27068.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIterable, G__27068);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIterable, G__27068);
  }
};
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__27070 = value;
  if (G__27070) {
    var bit__4304__auto__ = G__27070.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4304__auto__ || G__27070.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__27070.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__27070);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__27070);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__27072 = coll;
      if (G__27072) {
        var bit__4297__auto__ = G__27072.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4297__auto__ || G__27072.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll) + " is not ISeqable");
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__27074 = coll;
      if (G__27074) {
        var bit__4297__auto__ = G__27074.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4297__auto__ || G__27074.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__27076 = coll;
      if (G__27076) {
        var bit__4297__auto__ = G__27076.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4297__auto__ || G__27076.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__27078 = coll;
      if (G__27078) {
        var bit__4297__auto__ = G__27078.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4297__auto__ || G__27078.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__27079__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__27080 = y;
            var G__27081 = cljs.core.first.call(null, more);
            var G__27082 = cljs.core.next.call(null, more);
            x = G__27080;
            y = G__27081;
            more = G__27082;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__27079 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__27079__delegate.call(this, x, y, more);
    };
    G__27079.cljs$lang$maxFixedArity = 2;
    G__27079.cljs$lang$applyTo = function(arglist__27083) {
      var x = cljs.core.first(arglist__27083);
      arglist__27083 = cljs.core.next(arglist__27083);
      var y = cljs.core.first(arglist__27083);
      var more = cljs.core.rest(arglist__27083);
      return G__27079__delegate(x, y, more);
    };
    G__27079.cljs$core$IFn$_invoke$arity$variadic = G__27079__delegate;
    return G__27079;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.mix_collection_hash = function mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1.call(null, hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1.call(null, h1, k1);
  return cljs.core.m3_fmix.call(null, h1__$1, count);
};
cljs.core.hash_ordered_coll = function hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__27084 = n + 1;
      var G__27085 = cljs.core.imul.call(null, 31, hash_code) + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__27086 = cljs.core.next.call(null, coll__$1);
      n = G__27084;
      hash_code = G__27085;
      coll__$1 = G__27086;
      continue;
    } else {
      return cljs.core.mix_collection_hash.call(null, hash_code, n);
    }
    break;
  }
};
cljs.core.hash_unordered_coll = function hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__27087 = n + 1;
      var G__27088 = hash_code + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__27089 = cljs.core.next.call(null, coll__$1);
      n = G__27087;
      hash_code = G__27088;
      coll__$1 = G__27089;
      continue;
    } else {
      return cljs.core.mix_collection_hash.call(null, hash_code, n);
    }
    break;
  }
};
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__27090 = nval;
            var G__27091 = n + 1;
            val = G__27090;
            n = G__27091;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__27092 = nval;
          var G__27093 = n + 1;
          val__$1 = G__27092;
          n = G__27093;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__27094 = nval;
          var G__27095 = n + 1;
          val__$1 = G__27094;
          n = G__27095;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__27096 = nval;
            var G__27097 = n + 1;
            val = G__27096;
            n = G__27097;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__27098 = nval;
          var G__27099 = n + 1;
          val__$1 = G__27098;
          n = G__27099;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__27100 = nval;
          var G__27101 = n + 1;
          val__$1 = G__27100;
          n = G__27101;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__27103 = x;
  if (G__27103) {
    var bit__4304__auto__ = G__27103.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4304__auto__ || G__27103.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__27103.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__27103);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__27103);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__27105 = x;
  if (G__27105) {
    var bit__4304__auto__ = G__27105.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4304__auto__ || G__27105.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__27105.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__27105);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__27105);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.__GT_IndexedSeqIterator = function __GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__27106 = sn;
      s = G__27106;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__0 = function() {
    return cljs.core.PersistentVector.EMPTY;
  };
  var conj__1 = function(coll) {
    return coll;
  };
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__27107__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__27108 = conj.call(null, coll, x);
          var G__27109 = cljs.core.first.call(null, xs);
          var G__27110 = cljs.core.next.call(null, xs);
          coll = G__27108;
          x = G__27109;
          xs = G__27110;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__27107 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__27107__delegate.call(this, coll, x, xs);
    };
    G__27107.cljs$lang$maxFixedArity = 2;
    G__27107.cljs$lang$applyTo = function(arglist__27111) {
      var coll = cljs.core.first(arglist__27111);
      arglist__27111 = cljs.core.next(arglist__27111);
      var x = cljs.core.first(arglist__27111);
      var xs = cljs.core.rest(arglist__27111);
      return G__27107__delegate(coll, x, xs);
    };
    G__27107.cljs$core$IFn$_invoke$arity$variadic = G__27107__delegate;
    return G__27107;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 0:
        return conj__0.call(this);
      case 1:
        return conj__1.call(this, coll);
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$0 = conj__0;
  conj.cljs$core$IFn$_invoke$arity$1 = conj__1;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__27112 = cljs.core.next.call(null, s);
      var G__27113 = acc + 1;
      s = G__27112;
      acc = G__27113;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__27115 = coll;
      if (G__27115) {
        var bit__4297__auto__ = G__27115.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4297__auto__ || G__27115.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            return cljs.core.accumulating_seq_count.call(null, coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__27116 = cljs.core.next.call(null, coll);
              var G__27117 = n - 1;
              coll = G__27116;
              n = G__27117;
              continue;
            } else {
              throw new Error("Index out of bounds");
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__27118 = cljs.core.next.call(null, coll);
              var G__27119 = n - 1;
              var G__27120 = not_found;
              coll = G__27118;
              n = G__27119;
              not_found = G__27120;
              continue;
            } else {
              return not_found;
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number");
    } else {
      if (coll == null) {
        return coll;
      } else {
        if (function() {
          var G__27125 = coll;
          if (G__27125) {
            var bit__4297__auto__ = G__27125.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4297__auto__ || G__27125.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return null;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__27126 = coll;
                  if (G__27126) {
                    var bit__4304__auto__ = G__27126.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4304__auto__ || G__27126.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__27126.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__27126);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__27126);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                }
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number.");
    } else {
      if (coll == null) {
        return not_found;
      } else {
        if (function() {
          var G__27127 = coll;
          if (G__27127) {
            var bit__4297__auto__ = G__27127.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4297__auto__ || G__27127.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n, not_found);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return not_found;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__27128 = coll;
                  if (G__27128) {
                    var bit__4304__auto__ = G__27128.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4304__auto__ || G__27128.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__27128.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__27128);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__27128);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                }
              }
            }
          }
        }
      }
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__27131 = o;
        if (G__27131) {
          var bit__4297__auto__ = G__27131.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4297__auto__ || G__27131.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__27132 = o;
        if (G__27132) {
          var bit__4297__auto__ = G__27132.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4297__auto__ || G__27132.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              return not_found;
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays([k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__27133__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__27134 = ret;
          var G__27135 = cljs.core.first.call(null, kvs);
          var G__27136 = cljs.core.second.call(null, kvs);
          var G__27137 = cljs.core.nnext.call(null, kvs);
          coll = G__27134;
          k = G__27135;
          v = G__27136;
          kvs = G__27137;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__27133 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__27133__delegate.call(this, coll, k, v, kvs);
    };
    G__27133.cljs$lang$maxFixedArity = 3;
    G__27133.cljs$lang$applyTo = function(arglist__27138) {
      var coll = cljs.core.first(arglist__27138);
      arglist__27138 = cljs.core.next(arglist__27138);
      var k = cljs.core.first(arglist__27138);
      arglist__27138 = cljs.core.next(arglist__27138);
      var v = cljs.core.first(arglist__27138);
      var kvs = cljs.core.rest(arglist__27138);
      return G__27133__delegate(coll, k, v, kvs);
    };
    G__27133.cljs$core$IFn$_invoke$arity$variadic = G__27133__delegate;
    return G__27133;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__27139__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__27140 = ret;
            var G__27141 = cljs.core.first.call(null, ks);
            var G__27142 = cljs.core.next.call(null, ks);
            coll = G__27140;
            k = G__27141;
            ks = G__27142;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__27139 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__27139__delegate.call(this, coll, k, ks);
    };
    G__27139.cljs$lang$maxFixedArity = 2;
    G__27139.cljs$lang$applyTo = function(arglist__27143) {
      var coll = cljs.core.first(arglist__27143);
      arglist__27143 = cljs.core.next(arglist__27143);
      var k = cljs.core.first(arglist__27143);
      var ks = cljs.core.rest(arglist__27143);
      return G__27139__delegate(coll, k, ks);
    };
    G__27139.cljs$core$IFn$_invoke$arity$variadic = G__27139__delegate;
    return G__27139;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3640__auto__ = goog.isFunction(f);
  if (or__3640__auto__) {
    return or__3640__auto__;
  } else {
    var G__27147 = f;
    if (G__27147) {
      var bit__4304__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3640__auto____$1 = bit__4304__auto__;
        if (cljs.core.truth_(or__3640__auto____$1)) {
          return or__3640__auto____$1;
        } else {
          return G__27147.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__27147.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__27147);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__27147);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/MetaFn");
};
cljs.core.MetaFn.prototype.call = function() {
  var G__27149 = null;
  var G__27149__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null);
  };
  var G__27149__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a);
  };
  var G__27149__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b);
  };
  var G__27149__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c);
  };
  var G__27149__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d);
  };
  var G__27149__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e);
  };
  var G__27149__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f);
  };
  var G__27149__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g);
  };
  var G__27149__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__27149__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__27149__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__27149__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__27149__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__27149__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__27149__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__27149__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__27149__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__27149__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__27149__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__27149__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__27149__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__27149__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__27149 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__27149__1.call(this, self__);
      case 2:
        return G__27149__2.call(this, self__, a);
      case 3:
        return G__27149__3.call(this, self__, a, b);
      case 4:
        return G__27149__4.call(this, self__, a, b, c);
      case 5:
        return G__27149__5.call(this, self__, a, b, c, d);
      case 6:
        return G__27149__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__27149__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__27149__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__27149__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__27149__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__27149__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__27149__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__27149__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__27149__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__27149__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__27149__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__27149__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__27149__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__27149__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__27149__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__27149__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__27149__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__27149.cljs$core$IFn$_invoke$arity$1 = G__27149__1;
  G__27149.cljs$core$IFn$_invoke$arity$2 = G__27149__2;
  G__27149.cljs$core$IFn$_invoke$arity$3 = G__27149__3;
  G__27149.cljs$core$IFn$_invoke$arity$4 = G__27149__4;
  G__27149.cljs$core$IFn$_invoke$arity$5 = G__27149__5;
  G__27149.cljs$core$IFn$_invoke$arity$6 = G__27149__6;
  G__27149.cljs$core$IFn$_invoke$arity$7 = G__27149__7;
  G__27149.cljs$core$IFn$_invoke$arity$8 = G__27149__8;
  G__27149.cljs$core$IFn$_invoke$arity$9 = G__27149__9;
  G__27149.cljs$core$IFn$_invoke$arity$10 = G__27149__10;
  G__27149.cljs$core$IFn$_invoke$arity$11 = G__27149__11;
  G__27149.cljs$core$IFn$_invoke$arity$12 = G__27149__12;
  G__27149.cljs$core$IFn$_invoke$arity$13 = G__27149__13;
  G__27149.cljs$core$IFn$_invoke$arity$14 = G__27149__14;
  G__27149.cljs$core$IFn$_invoke$arity$15 = G__27149__15;
  G__27149.cljs$core$IFn$_invoke$arity$16 = G__27149__16;
  G__27149.cljs$core$IFn$_invoke$arity$17 = G__27149__17;
  G__27149.cljs$core$IFn$_invoke$arity$18 = G__27149__18;
  G__27149.cljs$core$IFn$_invoke$arity$19 = G__27149__19;
  G__27149.cljs$core$IFn$_invoke$arity$20 = G__27149__20;
  G__27149.cljs$core$IFn$_invoke$arity$21 = G__27149__21;
  G__27149.cljs$core$IFn$_invoke$arity$22 = G__27149__22;
  return G__27149;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args27148) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args27148)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.__GT_MetaFn = function __GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__27153 = o;
    if (G__27153) {
      var bit__4304__auto__ = G__27153.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4304__auto__ || G__27153.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__27153.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__27153);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__27153);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3628__auto__ = !(o == null);
    if (and__3628__auto__) {
      var G__27157 = o;
      if (G__27157) {
        var bit__4304__auto__ = G__27157.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4304__auto__ || G__27157.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__27157.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__27157);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__27157);
      }
    } else {
      return and__3628__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__27158__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__27159 = ret;
            var G__27160 = cljs.core.first.call(null, ks);
            var G__27161 = cljs.core.next.call(null, ks);
            coll = G__27159;
            k = G__27160;
            ks = G__27161;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__27158 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__27158__delegate.call(this, coll, k, ks);
    };
    G__27158.cljs$lang$maxFixedArity = 2;
    G__27158.cljs$lang$applyTo = function(arglist__27162) {
      var coll = cljs.core.first(arglist__27162);
      arglist__27162 = cljs.core.next(arglist__27162);
      var k = cljs.core.first(arglist__27162);
      var ks = cljs.core.rest(arglist__27162);
      return G__27158__delegate(coll, k, ks);
    };
    G__27158.cljs$core$IFn$_invoke$arity$variadic = G__27158__delegate;
    return G__27158;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__27164 = x;
    if (G__27164) {
      var bit__4304__auto__ = G__27164.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4304__auto__ || G__27164.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__27164.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__27164);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__27164);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__27166 = x;
    if (G__27166) {
      var bit__4304__auto__ = G__27166.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4304__auto__ || G__27166.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__27166.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__27166);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__27166);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__27168 = x;
  if (G__27168) {
    var bit__4304__auto__ = G__27168.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4304__auto__ || G__27168.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__27168.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__27168);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__27168);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__27170 = x;
  if (G__27170) {
    var bit__4304__auto__ = G__27170.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4304__auto__ || G__27170.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__27170.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__27170);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__27170);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__27172 = x;
  if (G__27172) {
    var bit__4304__auto__ = G__27172.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4304__auto__ || G__27172.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__27172.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__27172);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__27172);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__27174 = x;
  if (G__27174) {
    var bit__4304__auto__ = G__27174.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4304__auto__ || G__27174.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__27174.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__27174);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__27174);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__27176 = x;
    if (G__27176) {
      var bit__4304__auto__ = G__27176.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4304__auto__ || G__27176.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__27176.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__27176);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__27176);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__27178 = x;
  if (G__27178) {
    var bit__4304__auto__ = G__27178.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4304__auto__ || G__27178.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__27178.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__27178);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__27178);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__27180 = x;
  if (G__27180) {
    var bit__4297__auto__ = G__27180.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4297__auto__ || G__27180.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj27184 = {};
    return obj27184;
  };
  var js_obj__1 = function() {
    var G__27185__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__27185 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__27185__delegate.call(this, keyvals);
    };
    G__27185.cljs$lang$maxFixedArity = 0;
    G__27185.cljs$lang$applyTo = function(arglist__27186) {
      var keyvals = cljs.core.seq(arglist__27186);
      return G__27185__delegate(keyvals);
    };
    G__27185.cljs$core$IFn$_invoke$arity$variadic = G__27185__delegate;
    return G__27185;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(keys));
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__27187 = i__$1 + 1;
      var G__27188 = j__$1 + 1;
      var G__27189 = len__$1 - 1;
      i__$1 = G__27187;
      j__$1 = G__27188;
      len__$1 = G__27189;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__27190 = i__$1 - 1;
      var G__27191 = j__$1 - 1;
      var G__27192 = len__$1 - 1;
      i__$1 = G__27190;
      j__$1 = G__27191;
      len__$1 = G__27192;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj27194 = {};
  return obj27194;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__27196 = s;
    if (G__27196) {
      var bit__4304__auto__ = G__27196.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4304__auto__ || G__27196.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__27196.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__27196);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__27196);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__27198 = s;
  if (G__27198) {
    var bit__4304__auto__ = G__27198.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4304__auto__ || G__27198.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__27198.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__27198);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__27198);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3640__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__3640__auto__) {
    return or__3640__auto__;
  } else {
    var G__27202 = f;
    if (G__27202) {
      var bit__4304__auto__ = G__27202.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4304__auto__ || G__27202.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__27202.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__27202);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__27202);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && !isNaN(n) && !(n === Infinity) && parseFloat(n) === parseInt(n, 10);
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__27203__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__27204 = cljs.core.conj.call(null, s, x__$1);
              var G__27205 = etc;
              s = G__27204;
              xs = G__27205;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__27203 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__27203__delegate.call(this, x, y, more);
    };
    G__27203.cljs$lang$maxFixedArity = 2;
    G__27203.cljs$lang$applyTo = function(arglist__27206) {
      var x = cljs.core.first(arglist__27206);
      arglist__27206 = cljs.core.next(arglist__27206);
      var y = cljs.core.first(arglist__27206);
      var more = cljs.core.rest(arglist__27206);
      return G__27203__delegate(x, y, more);
    };
    G__27203.cljs$core$IFn$_invoke$arity$variadic = G__27203__delegate;
    return G__27203;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__3640__auto__ = cljs.core.seq.call(null, coll);
    if (or__3640__auto__) {
      return or__3640__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__27208 = x;
            if (G__27208) {
              var bit__4297__auto__ = G__27208.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4297__auto__ || G__27208.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          throw new Error("compare on non-nil objects of different types");
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        return compare_indexed.call(null, xs, ys, xl, 0);
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__27209 = xs;
        var G__27210 = ys;
        var G__27211 = len;
        var G__27212 = n + 1;
        xs = G__27209;
        ys = G__27210;
        len = G__27211;
        n = G__27212;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4124__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__27213 = nval;
          var G__27214 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__27213;
          coll__$1 = G__27214;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__27217 = coll;
      if (G__27217) {
        var bit__4297__auto__ = G__27217.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4297__auto__ || G__27217.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            return cljs.core.seq_reduce.call(null, f, coll);
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__27218 = coll;
      if (G__27218) {
        var bit__4297__auto__ = G__27218.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4297__auto__ || G__27218.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            return cljs.core.seq_reduce.call(null, f, val, coll);
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.completing = function() {
  var completing = null;
  var completing__1 = function(f) {
    return completing.call(null, f, cljs.core.identity);
  };
  var completing__2 = function(f, cf) {
    return function() {
      var G__27219 = null;
      var G__27219__0 = function() {
        return f.call(null);
      };
      var G__27219__1 = function(x) {
        return cf.call(null, x);
      };
      var G__27219__2 = function(x, y) {
        return f.call(null, x, y);
      };
      G__27219 = function(x, y) {
        switch(arguments.length) {
          case 0:
            return G__27219__0.call(this);
          case 1:
            return G__27219__1.call(this, x);
          case 2:
            return G__27219__2.call(this, x, y);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__27219.cljs$core$IFn$_invoke$arity$0 = G__27219__0;
      G__27219.cljs$core$IFn$_invoke$arity$1 = G__27219__1;
      G__27219.cljs$core$IFn$_invoke$arity$2 = G__27219__2;
      return G__27219;
    }();
  };
  completing = function(f, cf) {
    switch(arguments.length) {
      case 1:
        return completing__1.call(this, f);
      case 2:
        return completing__2.call(this, f, cf);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  completing.cljs$core$IFn$_invoke$arity$1 = completing__1;
  completing.cljs$core$IFn$_invoke$arity$2 = completing__2;
  return completing;
}();
cljs.core.transduce = function() {
  var transduce = null;
  var transduce__3 = function(xform, f, coll) {
    return transduce.call(null, xform, f, f.call(null), coll);
  };
  var transduce__4 = function(xform, f, init, coll) {
    var f__$1 = xform.call(null, f);
    var ret = cljs.core.reduce.call(null, f__$1, init, coll);
    return f__$1.call(null, ret);
  };
  transduce = function(xform, f, init, coll) {
    switch(arguments.length) {
      case 3:
        return transduce__3.call(this, xform, f, init);
      case 4:
        return transduce__4.call(this, xform, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transduce.cljs$core$IFn$_invoke$arity$3 = transduce__3;
  transduce.cljs$core$IFn$_invoke$arity$4 = transduce__4;
  return transduce;
}();
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__27220__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__27220 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__27220__delegate.call(this, x, y, more);
    };
    G__27220.cljs$lang$maxFixedArity = 2;
    G__27220.cljs$lang$applyTo = function(arglist__27221) {
      var x = cljs.core.first(arglist__27221);
      arglist__27221 = cljs.core.next(arglist__27221);
      var y = cljs.core.first(arglist__27221);
      var more = cljs.core.rest(arglist__27221);
      return G__27220__delegate(x, y, more);
    };
    G__27220.cljs$core$IFn$_invoke$arity$variadic = G__27220__delegate;
    return G__27220;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__27222__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__27222 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__27222__delegate.call(this, x, y, more);
    };
    G__27222.cljs$lang$maxFixedArity = 2;
    G__27222.cljs$lang$applyTo = function(arglist__27223) {
      var x = cljs.core.first(arglist__27223);
      arglist__27223 = cljs.core.next(arglist__27223);
      var y = cljs.core.first(arglist__27223);
      var more = cljs.core.rest(arglist__27223);
      return G__27222__delegate(x, y, more);
    };
    G__27222.cljs$core$IFn$_invoke$arity$variadic = G__27222__delegate;
    return G__27222;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__27224__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__27224 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__27224__delegate.call(this, x, y, more);
    };
    G__27224.cljs$lang$maxFixedArity = 2;
    G__27224.cljs$lang$applyTo = function(arglist__27225) {
      var x = cljs.core.first(arglist__27225);
      arglist__27225 = cljs.core.next(arglist__27225);
      var y = cljs.core.first(arglist__27225);
      var more = cljs.core.rest(arglist__27225);
      return G__27224__delegate(x, y, more);
    };
    G__27224.cljs$core$IFn$_invoke$arity$variadic = G__27224__delegate;
    return G__27224;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__27226__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__27226 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__27226__delegate.call(this, x, y, more);
    };
    G__27226.cljs$lang$maxFixedArity = 2;
    G__27226.cljs$lang$applyTo = function(arglist__27227) {
      var x = cljs.core.first(arglist__27227);
      arglist__27227 = cljs.core.next(arglist__27227);
      var y = cljs.core.first(arglist__27227);
      var more = cljs.core.rest(arglist__27227);
      return G__27226__delegate(x, y, more);
    };
    G__27226.cljs$core$IFn$_invoke$arity$variadic = G__27226__delegate;
    return G__27226;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__27228__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__27229 = y;
            var G__27230 = cljs.core.first.call(null, more);
            var G__27231 = cljs.core.next.call(null, more);
            x = G__27229;
            y = G__27230;
            more = G__27231;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__27228 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__27228__delegate.call(this, x, y, more);
    };
    G__27228.cljs$lang$maxFixedArity = 2;
    G__27228.cljs$lang$applyTo = function(arglist__27232) {
      var x = cljs.core.first(arglist__27232);
      arglist__27232 = cljs.core.next(arglist__27232);
      var y = cljs.core.first(arglist__27232);
      var more = cljs.core.rest(arglist__27232);
      return G__27228__delegate(x, y, more);
    };
    G__27228.cljs$core$IFn$_invoke$arity$variadic = G__27228__delegate;
    return G__27228;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__27233__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__27234 = y;
            var G__27235 = cljs.core.first.call(null, more);
            var G__27236 = cljs.core.next.call(null, more);
            x = G__27234;
            y = G__27235;
            more = G__27236;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__27233 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__27233__delegate.call(this, x, y, more);
    };
    G__27233.cljs$lang$maxFixedArity = 2;
    G__27233.cljs$lang$applyTo = function(arglist__27237) {
      var x = cljs.core.first(arglist__27237);
      arglist__27237 = cljs.core.next(arglist__27237);
      var y = cljs.core.first(arglist__27237);
      var more = cljs.core.rest(arglist__27237);
      return G__27233__delegate(x, y, more);
    };
    G__27233.cljs$core$IFn$_invoke$arity$variadic = G__27233__delegate;
    return G__27233;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__27238__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__27239 = y;
            var G__27240 = cljs.core.first.call(null, more);
            var G__27241 = cljs.core.next.call(null, more);
            x = G__27239;
            y = G__27240;
            more = G__27241;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__27238 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__27238__delegate.call(this, x, y, more);
    };
    G__27238.cljs$lang$maxFixedArity = 2;
    G__27238.cljs$lang$applyTo = function(arglist__27242) {
      var x = cljs.core.first(arglist__27242);
      arglist__27242 = cljs.core.next(arglist__27242);
      var y = cljs.core.first(arglist__27242);
      var more = cljs.core.rest(arglist__27242);
      return G__27238__delegate(x, y, more);
    };
    G__27238.cljs$core$IFn$_invoke$arity$variadic = G__27238__delegate;
    return G__27238;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__27243__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__27244 = y;
            var G__27245 = cljs.core.first.call(null, more);
            var G__27246 = cljs.core.next.call(null, more);
            x = G__27244;
            y = G__27245;
            more = G__27246;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__27243 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__27243__delegate.call(this, x, y, more);
    };
    G__27243.cljs$lang$maxFixedArity = 2;
    G__27243.cljs$lang$applyTo = function(arglist__27247) {
      var x = cljs.core.first(arglist__27247);
      arglist__27247 = cljs.core.next(arglist__27247);
      var y = cljs.core.first(arglist__27247);
      var more = cljs.core.rest(arglist__27247);
      return G__27243__delegate(x, y, more);
    };
    G__27243.cljs$core$IFn$_invoke$arity$variadic = G__27243__delegate;
    return G__27243;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__3947__auto__ = x;
    var y__3948__auto__ = y;
    return x__3947__auto__ > y__3948__auto__ ? x__3947__auto__ : y__3948__auto__;
  };
  var max__3 = function() {
    var G__27248__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3947__auto__ = x;
        var y__3948__auto__ = y;
        return x__3947__auto__ > y__3948__auto__ ? x__3947__auto__ : y__3948__auto__;
      }(), more);
    };
    var G__27248 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__27248__delegate.call(this, x, y, more);
    };
    G__27248.cljs$lang$maxFixedArity = 2;
    G__27248.cljs$lang$applyTo = function(arglist__27249) {
      var x = cljs.core.first(arglist__27249);
      arglist__27249 = cljs.core.next(arglist__27249);
      var y = cljs.core.first(arglist__27249);
      var more = cljs.core.rest(arglist__27249);
      return G__27248__delegate(x, y, more);
    };
    G__27248.cljs$core$IFn$_invoke$arity$variadic = G__27248__delegate;
    return G__27248;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__3954__auto__ = x;
    var y__3955__auto__ = y;
    return x__3954__auto__ < y__3955__auto__ ? x__3954__auto__ : y__3955__auto__;
  };
  var min__3 = function() {
    var G__27250__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3954__auto__ = x;
        var y__3955__auto__ = y;
        return x__3954__auto__ < y__3955__auto__ ? x__3954__auto__ : y__3955__auto__;
      }(), more);
    };
    var G__27250 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__27250__delegate.call(this, x, y, more);
    };
    G__27250.cljs$lang$maxFixedArity = 2;
    G__27250.cljs$lang$applyTo = function(arglist__27251) {
      var x = cljs.core.first(arglist__27251);
      arglist__27251 = cljs.core.next(arglist__27251);
      var y = cljs.core.first(arglist__27251);
      var more = cljs.core.rest(arglist__27251);
      return G__27250__delegate(x, y, more);
    };
    G__27250.cljs$core$IFn$_invoke$arity$variadic = G__27250__delegate;
    return G__27250;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__27252__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__27252 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__27252__delegate.call(this, x, y, more);
    };
    G__27252.cljs$lang$maxFixedArity = 2;
    G__27252.cljs$lang$applyTo = function(arglist__27253) {
      var x = cljs.core.first(arglist__27253);
      arglist__27253 = cljs.core.next(arglist__27253);
      var y = cljs.core.first(arglist__27253);
      var more = cljs.core.rest(arglist__27253);
      return G__27252__delegate(x, y, more);
    };
    G__27252.cljs$core$IFn$_invoke$arity$variadic = G__27252__delegate;
    return G__27252;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__27254__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__27254 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__27254__delegate.call(this, x, y, more);
    };
    G__27254.cljs$lang$maxFixedArity = 2;
    G__27254.cljs$lang$applyTo = function(arglist__27255) {
      var x = cljs.core.first(arglist__27255);
      arglist__27255 = cljs.core.next(arglist__27255);
      var y = cljs.core.first(arglist__27255);
      var more = cljs.core.rest(arglist__27255);
      return G__27254__delegate(x, y, more);
    };
    G__27254.cljs$core$IFn$_invoke$arity$variadic = G__27254__delegate;
    return G__27254;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__27256__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__27256 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__27256__delegate.call(this, x, y, more);
    };
    G__27256.cljs$lang$maxFixedArity = 2;
    G__27256.cljs$lang$applyTo = function(arglist__27257) {
      var x = cljs.core.first(arglist__27257);
      arglist__27257 = cljs.core.next(arglist__27257);
      var y = cljs.core.first(arglist__27257);
      var more = cljs.core.rest(arglist__27257);
      return G__27256__delegate(x, y, more);
    };
    G__27256.cljs$core$IFn$_invoke$arity$variadic = G__27256__delegate;
    return G__27256;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__27258__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__27258 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__27258__delegate.call(this, x, y, more);
    };
    G__27258.cljs$lang$maxFixedArity = 2;
    G__27258.cljs$lang$applyTo = function(arglist__27259) {
      var x = cljs.core.first(arglist__27259);
      arglist__27259 = cljs.core.next(arglist__27259);
      var y = cljs.core.first(arglist__27259);
      var more = cljs.core.rest(arglist__27259);
      return G__27258__delegate(x, y, more);
    };
    G__27258.cljs$core$IFn$_invoke$arity$variadic = G__27258__delegate;
    return G__27258;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__27260__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__27260 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__27260__delegate.call(this, x, y, more);
    };
    G__27260.cljs$lang$maxFixedArity = 2;
    G__27260.cljs$lang$applyTo = function(arglist__27261) {
      var x = cljs.core.first(arglist__27261);
      arglist__27261 = cljs.core.next(arglist__27261);
      var y = cljs.core.first(arglist__27261);
      var more = cljs.core.rest(arglist__27261);
      return G__27260__delegate(x, y, more);
    };
    G__27260.cljs$core$IFn$_invoke$arity$variadic = G__27260__delegate;
    return G__27260;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_subtract = function() {
  var unchecked_subtract = null;
  var unchecked_subtract__1 = function(x) {
    return-x;
  };
  var unchecked_subtract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract__3 = function() {
    var G__27262__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_subtract, x - y, more);
    };
    var G__27262 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__27262__delegate.call(this, x, y, more);
    };
    G__27262.cljs$lang$maxFixedArity = 2;
    G__27262.cljs$lang$applyTo = function(arglist__27263) {
      var x = cljs.core.first(arglist__27263);
      arglist__27263 = cljs.core.next(arglist__27263);
      var y = cljs.core.first(arglist__27263);
      var more = cljs.core.rest(arglist__27263);
      return G__27262__delegate(x, y, more);
    };
    G__27262.cljs$core$IFn$_invoke$arity$variadic = G__27262__delegate;
    return G__27262;
  }();
  unchecked_subtract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract__1.call(this, x);
      case 2:
        return unchecked_subtract__2.call(this, x, y);
      default:
        return unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract.cljs$lang$maxFixedArity = 2;
  unchecked_subtract.cljs$lang$applyTo = unchecked_subtract__3.cljs$lang$applyTo;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract__1;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract__2;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract;
}();
cljs.core.unchecked_subtract_int = function() {
  var unchecked_subtract_int = null;
  var unchecked_subtract_int__1 = function(x) {
    return-x;
  };
  var unchecked_subtract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract_int__3 = function() {
    var G__27264__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_subtract_int, x - y, more);
    };
    var G__27264 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__27264__delegate.call(this, x, y, more);
    };
    G__27264.cljs$lang$maxFixedArity = 2;
    G__27264.cljs$lang$applyTo = function(arglist__27265) {
      var x = cljs.core.first(arglist__27265);
      arglist__27265 = cljs.core.next(arglist__27265);
      var y = cljs.core.first(arglist__27265);
      var more = cljs.core.rest(arglist__27265);
      return G__27264__delegate(x, y, more);
    };
    G__27264.cljs$core$IFn$_invoke$arity$variadic = G__27264__delegate;
    return G__27264;
  }();
  unchecked_subtract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract_int__1.call(this, x);
      case 2:
        return unchecked_subtract_int__2.call(this, x, y);
      default:
        return unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
  unchecked_subtract_int.cljs$lang$applyTo = unchecked_subtract_int__3.cljs$lang$applyTo;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract_int__1;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract_int__2;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__27266__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__27267 = y;
            var G__27268 = cljs.core.first.call(null, more);
            var G__27269 = cljs.core.next.call(null, more);
            x = G__27267;
            y = G__27268;
            more = G__27269;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__27266 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__27266__delegate.call(this, x, y, more);
    };
    G__27266.cljs$lang$maxFixedArity = 2;
    G__27266.cljs$lang$applyTo = function(arglist__27270) {
      var x = cljs.core.first(arglist__27270);
      arglist__27270 = cljs.core.next(arglist__27270);
      var y = cljs.core.first(arglist__27270);
      var more = cljs.core.rest(arglist__27270);
      return G__27266__delegate(x, y, more);
    };
    G__27266.cljs$core$IFn$_invoke$arity$variadic = G__27266__delegate;
    return G__27266;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__27271 = n__$1 - 1;
      var G__27272 = cljs.core.next.call(null, xs);
      n__$1 = G__27271;
      xs = G__27272;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return "" + x;
    }
  };
  var str__2 = function() {
    var G__27273__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__27274 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__27275 = cljs.core.next.call(null, more);
          sb = G__27274;
          more = G__27275;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__27273 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__27273__delegate.call(this, x, ys);
    };
    G__27273.cljs$lang$maxFixedArity = 1;
    G__27273.cljs$lang$applyTo = function(arglist__27276) {
      var x = cljs.core.first(arglist__27276);
      var ys = cljs.core.rest(arglist__27276);
      return G__27273__delegate(x, ys);
    };
    G__27273.cljs$core$IFn$_invoke$arity$variadic = G__27273__delegate;
    return G__27273;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? cljs.core.counted_QMARK_.call(null, x) && cljs.core.counted_QMARK_.call(null, y) && !(cljs.core.count.call(null, x) === cljs.core.count.call(null, y)) ? false : function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__27277 = cljs.core.next.call(null, xs);
            var G__27278 = cljs.core.next.call(null, ys);
            xs = G__27277;
            ys = G__27278;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__27279 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__27280 = cljs.core.next.call(null, s);
        res = G__27279;
        s = G__27280;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__27281 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__27282 = cljs.core.next.call(null, s);
      h = G__27281;
      s = G__27282;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__27283 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__27284 = cljs.core.next.call(null, s__$1);
      h = G__27283;
      s__$1 = G__27284;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__27291_27297 = cljs.core.seq.call(null, fn_map);
  var chunk__27292_27298 = null;
  var count__27293_27299 = 0;
  var i__27294_27300 = 0;
  while (true) {
    if (i__27294_27300 < count__27293_27299) {
      var vec__27295_27301 = cljs.core._nth.call(null, chunk__27292_27298, i__27294_27300);
      var key_name_27302 = cljs.core.nth.call(null, vec__27295_27301, 0, null);
      var f_27303 = cljs.core.nth.call(null, vec__27295_27301, 1, null);
      var str_name_27304 = cljs.core.name.call(null, key_name_27302);
      obj[str_name_27304] = f_27303;
      var G__27305 = seq__27291_27297;
      var G__27306 = chunk__27292_27298;
      var G__27307 = count__27293_27299;
      var G__27308 = i__27294_27300 + 1;
      seq__27291_27297 = G__27305;
      chunk__27292_27298 = G__27306;
      count__27293_27299 = G__27307;
      i__27294_27300 = G__27308;
      continue;
    } else {
      var temp__4126__auto___27309 = cljs.core.seq.call(null, seq__27291_27297);
      if (temp__4126__auto___27309) {
        var seq__27291_27310__$1 = temp__4126__auto___27309;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__27291_27310__$1)) {
          var c__4410__auto___27311 = cljs.core.chunk_first.call(null, seq__27291_27310__$1);
          var G__27312 = cljs.core.chunk_rest.call(null, seq__27291_27310__$1);
          var G__27313 = c__4410__auto___27311;
          var G__27314 = cljs.core.count.call(null, c__4410__auto___27311);
          var G__27315 = 0;
          seq__27291_27297 = G__27312;
          chunk__27292_27298 = G__27313;
          count__27293_27299 = G__27314;
          i__27294_27300 = G__27315;
          continue;
        } else {
          var vec__27296_27316 = cljs.core.first.call(null, seq__27291_27310__$1);
          var key_name_27317 = cljs.core.nth.call(null, vec__27296_27316, 0, null);
          var f_27318 = cljs.core.nth.call(null, vec__27296_27316, 1, null);
          var str_name_27319 = cljs.core.name.call(null, key_name_27317);
          obj[str_name_27319] = f_27318;
          var G__27320 = cljs.core.next.call(null, seq__27291_27310__$1);
          var G__27321 = null;
          var G__27322 = 0;
          var G__27323 = 0;
          seq__27291_27297 = G__27320;
          chunk__27292_27298 = G__27321;
          count__27293_27299 = G__27322;
          i__27294_27300 = G__27323;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/List");
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__27325 = coll;
  if (G__27325) {
    var bit__4304__auto__ = G__27325.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4304__auto__ || G__27325.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__27325.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__27325);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__27325);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__27326 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__27326;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__27327 = i - 1;
        var G__27328 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__27327;
        r = G__27328;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__27329) {
    var xs = cljs.core.seq(arglist__27329);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3640__auto__ = coll == null;
    if (or__3640__auto__) {
      return or__3640__auto__;
    } else {
      var G__27333 = coll;
      if (G__27333) {
        var bit__4297__auto__ = G__27333.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4297__auto__ || G__27333.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__27335 = x;
  if (G__27335) {
    var bit__4304__auto__ = G__27335.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4304__auto__ || G__27335.cljs$core$IList$) {
      return true;
    } else {
      if (!G__27335.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__27335);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__27335);
  }
};
cljs.core.hash_keyword = function hash_keyword(k) {
  return cljs.core.hash_symbol.call(null, k) + 2654435769 | 0;
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4051__auto__ = self__._hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_keyword.call(null, this$__$1);
    self__._hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__27337 = null;
  var G__27337__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__27337__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__27337 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__27337__2.call(this, self__, coll);
      case 3:
        return G__27337__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__27337.cljs$core$IFn$_invoke$arity$2 = G__27337__2;
  G__27337.cljs$core$IFn$_invoke$arity$3 = G__27337__3;
  return G__27337;
}();
cljs.core.Keyword.prototype.apply = function(self__, args27336) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args27336)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn);
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__27339 = x;
    if (G__27339) {
      var bit__4297__auto__ = G__27339.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4297__auto__ || G__27339.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error("Doesn't support namespace: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(ns) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" : null) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__27340 = ls.sval();
        ls = G__27340;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__27342 = s;
    if (G__27342) {
      var bit__4297__auto__ = G__27342.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4297__auto__ || G__27342.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__27343 = cljs.core.next.call(null, s__$1);
      s__$1 = G__27343;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_27344 = 0;
  var xs_27345 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_27345) {
      ret[i_27344] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_27345));
      var G__27346 = i_27344 + 1;
      var G__27347 = cljs.core.next.call(null, xs_27345);
      i_27344 = G__27346;
      xs_27345 = G__27347;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__27348 = i + 1;
          var G__27349 = cljs.core.next.call(null, s__$1);
          i = G__27348;
          s__$1 = G__27349;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4510__auto___27350 = size;
      var i_27351 = 0;
      while (true) {
        if (i_27351 < n__4510__auto___27350) {
          a[i_27351] = init_val_or_seq;
          var G__27352 = i_27351 + 1;
          i_27351 = G__27352;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__27353 = i + 1;
          var G__27354 = cljs.core.next.call(null, s__$1);
          i = G__27353;
          s__$1 = G__27354;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4510__auto___27355 = size;
      var i_27356 = 0;
      while (true) {
        if (i_27356 < n__4510__auto___27355) {
          a[i_27356] = init_val_or_seq;
          var G__27357 = i_27356 + 1;
          i_27356 = G__27357;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__27358 = i + 1;
          var G__27359 = cljs.core.next.call(null, s__$1);
          i = G__27358;
          s__$1 = G__27359;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4510__auto___27360 = size;
      var i_27361 = 0;
      while (true) {
        if (i_27361 < n__4510__auto___27360) {
          a[i_27361] = init_val_or_seq;
          var G__27362 = i_27361 + 1;
          i_27361 = G__27362;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__27363 = i + 1;
          var G__27364 = cljs.core.next.call(null, s__$1);
          i = G__27363;
          s__$1 = G__27364;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4510__auto___27365 = size;
      var i_27366 = 0;
      while (true) {
        if (i_27366 < n__4510__auto___27365) {
          a[i_27366] = init_val_or_seq;
          var G__27367 = i_27366 + 1;
          i_27366 = G__27367;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__27368 = cljs.core.next.call(null, s__$1);
        var G__27369 = i - 1;
        var G__27370 = sum + 1;
        s__$1 = G__27368;
        i = G__27369;
        sum = G__27370;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__27371__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__27371 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__27371__delegate.call(this, x, y, zs);
    };
    G__27371.cljs$lang$maxFixedArity = 2;
    G__27371.cljs$lang$applyTo = function(arglist__27372) {
      var x = cljs.core.first(arglist__27372);
      arglist__27372 = cljs.core.next(arglist__27372);
      var y = cljs.core.first(arglist__27372);
      var zs = cljs.core.rest(arglist__27372);
      return G__27371__delegate(x, y, zs);
    };
    G__27371.cljs$core$IFn$_invoke$arity$variadic = G__27371__delegate;
    return G__27371;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__27373__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__27373 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__27373__delegate.call(this, a, b, c, d, more);
    };
    G__27373.cljs$lang$maxFixedArity = 4;
    G__27373.cljs$lang$applyTo = function(arglist__27374) {
      var a = cljs.core.first(arglist__27374);
      arglist__27374 = cljs.core.next(arglist__27374);
      var b = cljs.core.first(arglist__27374);
      arglist__27374 = cljs.core.next(arglist__27374);
      var c = cljs.core.first(arglist__27374);
      arglist__27374 = cljs.core.next(arglist__27374);
      var d = cljs.core.first(arglist__27374);
      var more = cljs.core.rest(arglist__27374);
      return G__27373__delegate(a, b, c, d, more);
    };
    G__27373.cljs$core$IFn$_invoke$arity$variadic = G__27373__delegate;
    return G__27373;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___0 = function() {
    return cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  };
  var conj_BANG___1 = function(coll) {
    return coll;
  };
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_.call(null, tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__27375__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__27376 = ntcoll;
          var G__27377 = cljs.core.first.call(null, vals);
          var G__27378 = cljs.core.next.call(null, vals);
          tcoll = G__27376;
          val = G__27377;
          vals = G__27378;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__27375 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__27375__delegate.call(this, tcoll, val, vals);
    };
    G__27375.cljs$lang$maxFixedArity = 2;
    G__27375.cljs$lang$applyTo = function(arglist__27379) {
      var tcoll = cljs.core.first(arglist__27379);
      arglist__27379 = cljs.core.next(arglist__27379);
      var val = cljs.core.first(arglist__27379);
      var vals = cljs.core.rest(arglist__27379);
      return G__27375__delegate(tcoll, val, vals);
    };
    G__27375.cljs$core$IFn$_invoke$arity$variadic = G__27375__delegate;
    return G__27375;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 0:
        return conj_BANG___0.call(this);
      case 1:
        return conj_BANG___1.call(this, tcoll);
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$0 = conj_BANG___0;
  conj_BANG_.cljs$core$IFn$_invoke$arity$1 = conj_BANG___1;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__27380__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_.call(null, tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__27381 = ntcoll;
          var G__27382 = cljs.core.first.call(null, kvs);
          var G__27383 = cljs.core.second.call(null, kvs);
          var G__27384 = cljs.core.nnext.call(null, kvs);
          tcoll = G__27381;
          key = G__27382;
          val = G__27383;
          kvs = G__27384;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__27380 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__27380__delegate.call(this, tcoll, key, val, kvs);
    };
    G__27380.cljs$lang$maxFixedArity = 3;
    G__27380.cljs$lang$applyTo = function(arglist__27385) {
      var tcoll = cljs.core.first(arglist__27385);
      arglist__27385 = cljs.core.next(arglist__27385);
      var key = cljs.core.first(arglist__27385);
      arglist__27385 = cljs.core.next(arglist__27385);
      var val = cljs.core.first(arglist__27385);
      var kvs = cljs.core.rest(arglist__27385);
      return G__27380__delegate(tcoll, key, val, kvs);
    };
    G__27380.cljs$core$IFn$_invoke$arity$variadic = G__27380__delegate;
    return G__27380;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_.call(null, tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__27386__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_.call(null, tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__27387 = ntcoll;
          var G__27388 = cljs.core.first.call(null, ks);
          var G__27389 = cljs.core.next.call(null, ks);
          tcoll = G__27387;
          key = G__27388;
          ks = G__27389;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__27386 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__27386__delegate.call(this, tcoll, key, ks);
    };
    G__27386.cljs$lang$maxFixedArity = 2;
    G__27386.cljs$lang$applyTo = function(arglist__27390) {
      var tcoll = cljs.core.first(arglist__27390);
      arglist__27390 = cljs.core.next(arglist__27390);
      var key = cljs.core.first(arglist__27390);
      var ks = cljs.core.rest(arglist__27390);
      return G__27386__delegate(tcoll, key, ks);
    };
    G__27386.cljs$core$IFn$_invoke$arity$variadic = G__27386__delegate;
    return G__27386;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_.call(null, tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__27391__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__27392 = ntcoll;
          var G__27393 = cljs.core.first.call(null, vals);
          var G__27394 = cljs.core.next.call(null, vals);
          tcoll = G__27392;
          val = G__27393;
          vals = G__27394;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__27391 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__27391__delegate.call(this, tcoll, val, vals);
    };
    G__27391.cljs$lang$maxFixedArity = 2;
    G__27391.cljs$lang$applyTo = function(arglist__27395) {
      var tcoll = cljs.core.first(arglist__27395);
      arglist__27395 = cljs.core.next(arglist__27395);
      var val = cljs.core.first(arglist__27395);
      var vals = cljs.core.rest(arglist__27395);
      return G__27391__delegate(tcoll, val, vals);
    };
    G__27391.cljs$core$IFn$_invoke$arity$variadic = G__27391__delegate;
    return G__27391;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a4554 = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a4554);
      } else {
        return f.call(null, a4554);
      }
    } else {
      var b4555 = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a4554, b4555);
        } else {
          return f.call(null, a4554, b4555);
        }
      } else {
        var c4556 = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a4554, b4555, c4556);
          } else {
            return f.call(null, a4554, b4555, c4556);
          }
        } else {
          var d4557 = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a4554, b4555, c4556, d4557);
            } else {
              return f.call(null, a4554, b4555, c4556, d4557);
            }
          } else {
            var e4558 = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a4554, b4555, c4556, d4557, e4558);
              } else {
                return f.call(null, a4554, b4555, c4556, d4557, e4558);
              }
            } else {
              var f4559 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a4554, b4555, c4556, d4557, e4558, f4559);
                } else {
                  return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559);
                }
              } else {
                var g4560 = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a4554, b4555, c4556, d4557, e4558, f4559, g4560);
                  } else {
                    return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560);
                  }
                } else {
                  var h4561 = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561);
                    } else {
                      return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561);
                    }
                  } else {
                    var i4562 = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562);
                      } else {
                        return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562);
                      }
                    } else {
                      var j4563 = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563);
                        } else {
                          return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563);
                        }
                      } else {
                        var k4564 = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564);
                          } else {
                            return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564);
                          }
                        } else {
                          var l4565 = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565);
                            } else {
                              return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565);
                            }
                          } else {
                            var m4566 = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566);
                              } else {
                                return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566);
                              }
                            } else {
                              var n4567 = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567);
                                } else {
                                  return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567);
                                }
                              } else {
                                var o4568 = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568);
                                  } else {
                                    return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568);
                                  }
                                } else {
                                  var p4569 = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568, p4569);
                                    } else {
                                      return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568, p4569);
                                    }
                                  } else {
                                    var q4570 = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568, p4569, q4570);
                                      } else {
                                        return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568, p4569, q4570);
                                      }
                                    } else {
                                      var r4571 = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568, p4569, q4570, r4571);
                                        } else {
                                          return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568, p4569, q4570, r4571);
                                        }
                                      } else {
                                        var s4572 = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568, p4569, q4570, r4571, s4572);
                                          } else {
                                            return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568, p4569, q4570, r4571, s4572);
                                          }
                                        } else {
                                          var t4573 = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568, p4569, q4570, r4571, s4572, t4573);
                                            } else {
                                              return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568, p4569, q4570, r4571, s4572, t4573);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__27396__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__27396 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__27396__delegate.call(this, f, a, b, c, d, args);
    };
    G__27396.cljs$lang$maxFixedArity = 5;
    G__27396.cljs$lang$applyTo = function(arglist__27397) {
      var f = cljs.core.first(arglist__27397);
      arglist__27397 = cljs.core.next(arglist__27397);
      var a = cljs.core.first(arglist__27397);
      arglist__27397 = cljs.core.next(arglist__27397);
      var b = cljs.core.first(arglist__27397);
      arglist__27397 = cljs.core.next(arglist__27397);
      var c = cljs.core.first(arglist__27397);
      arglist__27397 = cljs.core.next(arglist__27397);
      var d = cljs.core.first(arglist__27397);
      var args = cljs.core.rest(arglist__27397);
      return G__27396__delegate(f, a, b, c, d, args);
    };
    G__27396.cljs$core$IFn$_invoke$arity$variadic = G__27396__delegate;
    return G__27396;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__27398__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__27398 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__27398__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__27398.cljs$lang$maxFixedArity = 6;
    G__27398.cljs$lang$applyTo = function(arglist__27399) {
      var obj = cljs.core.first(arglist__27399);
      arglist__27399 = cljs.core.next(arglist__27399);
      var f = cljs.core.first(arglist__27399);
      arglist__27399 = cljs.core.next(arglist__27399);
      var a = cljs.core.first(arglist__27399);
      arglist__27399 = cljs.core.next(arglist__27399);
      var b = cljs.core.first(arglist__27399);
      arglist__27399 = cljs.core.next(arglist__27399);
      var c = cljs.core.first(arglist__27399);
      arglist__27399 = cljs.core.next(arglist__27399);
      var d = cljs.core.first(arglist__27399);
      var args = cljs.core.rest(arglist__27399);
      return G__27398__delegate(obj, f, a, b, c, d, args);
    };
    G__27398.cljs$core$IFn$_invoke$arity$variadic = G__27398__delegate;
    return G__27398;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__27400__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__27400 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__27400__delegate.call(this, x, y, more);
    };
    G__27400.cljs$lang$maxFixedArity = 2;
    G__27400.cljs$lang$applyTo = function(arglist__27401) {
      var x = cljs.core.first(arglist__27401);
      arglist__27401 = cljs.core.next(arglist__27401);
      var y = cljs.core.first(arglist__27401);
      var more = cljs.core.rest(arglist__27401);
      return G__27400__delegate(x, y, more);
    };
    G__27400.cljs$core$IFn$_invoke$arity$variadic = G__27400__delegate;
    return G__27400;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function nil_iter() {
  if (typeof cljs.core.t27405 !== "undefined") {
  } else {
    cljs.core.t27405 = function(nil_iter, meta27406) {
      this.nil_iter = nil_iter;
      this.meta27406 = meta27406;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.t27405.cljs$lang$type = true;
    cljs.core.t27405.cljs$lang$ctorStr = "cljs.core/t27405";
    cljs.core.t27405.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
      return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/t27405");
    };
    cljs.core.t27405.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t27405.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t27405.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t27405.prototype.cljs$core$IMeta$_meta$arity$1 = function(_27407) {
      var self__ = this;
      var _27407__$1 = this;
      return self__.meta27406;
    };
    cljs.core.t27405.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_27407, meta27406__$1) {
      var self__ = this;
      var _27407__$1 = this;
      return new cljs.core.t27405(self__.nil_iter, meta27406__$1);
    };
    cljs.core.__GT_t27405 = function __GT_t27405(nil_iter__$1, meta27406) {
      return new cljs.core.t27405(nil_iter__$1, meta27406);
    };
  }
  return new cljs.core.t27405(nil_iter, null);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/StringIter");
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.__GT_StringIter = function __GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ArrayIter");
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.__GT_ArrayIter = function __GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/SeqIter");
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq.call(null, self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next.call(null, self__._seq);
    } else {
    }
  }
  return!(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not.call(null, this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first.call(null, self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.__GT_SeqIter = function __GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter.call(null);
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_iter.call(null, coll);
      } else {
        if (cljs.core.iterable_QMARK_.call(null, coll)) {
          return cljs.core._iterator.call(null, coll);
        } else {
          if (cljs.core.seqable_QMARK_.call(null, coll)) {
            return cljs.core.seq_iter.call(null, coll);
          } else {
            throw new Error("Cannot create iterator from " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/Stepper");
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3628__auto__ = !(lt.stepper == null);
      if (and__3628__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__3628__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_.call(null, self__.xform.call(null, lt, self__.iter.next()))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.call(null, lt);
  }
};
cljs.core.__GT_Stepper = function __GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function stepper(xform, iter) {
  var stepfn = function() {
    var stepfn = null;
    var stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_.call(null, result) ? cljs.core.deref.call(null, result) : result;
      lt.stepper = null;
      return result;
    };
    var stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer.call(null, lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return stepfn__1.call(this, result);
        case 2:
          return stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
    stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
    return stepfn;
  }();
  return new cljs.core.Stepper(xform.call(null, stepfn), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/MultiStepper");
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq.call(null, self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first.call(null, iters__$1);
      if (cljs.core.not.call(null, iter.hasNext())) {
        return false;
      } else {
        var G__27408 = cljs.core.next.call(null, iters__$1);
        iters__$1 = G__27408;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__4510__auto___27409 = self__.iters.length;
  var i_27410 = 0;
  while (true) {
    if (i_27410 < n__4510__auto___27409) {
      self__.nexts[i_27410] = self__.iters[i_27410].next();
      var G__27411 = i_27410 + 1;
      i_27410 = G__27411;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.call(null, self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3628__auto__ = !(lt.stepper == null);
      if (and__3628__auto__) {
        return this$.hasNext();
      } else {
        return and__3628__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_.call(null, cljs.core.apply.call(null, self__.xform, cljs.core.cons.call(null, lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.call(null, lt);
  }
};
cljs.core.__GT_MultiStepper = function __GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function() {
  var multi_stepper = null;
  var multi_stepper__2 = function(xform, iters) {
    return multi_stepper.call(null, xform, iters, new Array(iters.length));
  };
  var multi_stepper__3 = function(xform, iters, nexts) {
    var stepfn = function() {
      var stepfn = null;
      var stepfn__1 = function(result) {
        var lt = cljs.core.reduced_QMARK_.call(null, result) ? cljs.core.deref.call(null, result) : result;
        lt.stepper = null;
        return lt;
      };
      var stepfn__2 = function(result, input) {
        var lt = result;
        lt.first = input;
        lt.rest = cljs.core.lazy_transformer.call(null, lt.stepper);
        lt.stepper = null;
        return lt.rest;
      };
      stepfn = function(result, input) {
        switch(arguments.length) {
          case 1:
            return stepfn__1.call(this, result);
          case 2:
            return stepfn__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
      stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
      return stepfn;
    }();
    return new cljs.core.MultiStepper(xform.call(null, stepfn), iters, nexts);
  };
  multi_stepper = function(xform, iters, nexts) {
    switch(arguments.length) {
      case 2:
        return multi_stepper__2.call(this, xform, iters);
      case 3:
        return multi_stepper__3.call(this, xform, iters, nexts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  multi_stepper.cljs$core$IFn$_invoke$arity$2 = multi_stepper__2;
  multi_stepper.cljs$core$IFn$_invoke$arity$3 = multi_stepper__3;
  return multi_stepper;
}();
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/LazyTransformer");
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq.call(null, self__.rest);
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq.call(null, this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential.call(null, this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_.call(null, other) && cljs.core.seq.call(null, other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, cljs.core._seq.call(null, this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.__GT_LazyTransformer = function __GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper.call(null, xform, cljs.core.iter.call(null, coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__27412_27416 = cljs.core.seq.call(null, colls);
  var chunk__27413_27417 = null;
  var count__27414_27418 = 0;
  var i__27415_27419 = 0;
  while (true) {
    if (i__27415_27419 < count__27414_27418) {
      var coll_27420 = cljs.core._nth.call(null, chunk__27413_27417, i__27415_27419);
      iters.push(cljs.core.iter.call(null, coll_27420));
      var G__27421 = seq__27412_27416;
      var G__27422 = chunk__27413_27417;
      var G__27423 = count__27414_27418;
      var G__27424 = i__27415_27419 + 1;
      seq__27412_27416 = G__27421;
      chunk__27413_27417 = G__27422;
      count__27414_27418 = G__27423;
      i__27415_27419 = G__27424;
      continue;
    } else {
      var temp__4126__auto___27425 = cljs.core.seq.call(null, seq__27412_27416);
      if (temp__4126__auto___27425) {
        var seq__27412_27426__$1 = temp__4126__auto___27425;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__27412_27426__$1)) {
          var c__4410__auto___27427 = cljs.core.chunk_first.call(null, seq__27412_27426__$1);
          var G__27428 = cljs.core.chunk_rest.call(null, seq__27412_27426__$1);
          var G__27429 = c__4410__auto___27427;
          var G__27430 = cljs.core.count.call(null, c__4410__auto___27427);
          var G__27431 = 0;
          seq__27412_27416 = G__27428;
          chunk__27413_27417 = G__27429;
          count__27414_27418 = G__27430;
          i__27415_27419 = G__27431;
          continue;
        } else {
          var coll_27432 = cljs.core.first.call(null, seq__27412_27426__$1);
          iters.push(cljs.core.iter.call(null, coll_27432));
          var G__27433 = cljs.core.next.call(null, seq__27412_27426__$1);
          var G__27434 = null;
          var G__27435 = 0;
          var G__27436 = 0;
          seq__27412_27416 = G__27433;
          chunk__27413_27417 = G__27434;
          count__27414_27418 = G__27435;
          i__27415_27419 = G__27436;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.call(null, xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function() {
  var sequence = null;
  var sequence__1 = function(coll) {
    if (cljs.core.seq_QMARK_.call(null, coll)) {
      return coll;
    } else {
      var or__3640__auto__ = cljs.core.seq.call(null, coll);
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  };
  var sequence__2 = function(xform, coll) {
    return cljs.core.LazyTransformer.create(xform, coll);
  };
  var sequence__3 = function() {
    var G__27437__delegate = function(xform, coll, colls) {
      return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array.call(null, cljs.core.cons.call(null, coll, colls)));
    };
    var G__27437 = function(xform, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__27437__delegate.call(this, xform, coll, colls);
    };
    G__27437.cljs$lang$maxFixedArity = 2;
    G__27437.cljs$lang$applyTo = function(arglist__27438) {
      var xform = cljs.core.first(arglist__27438);
      arglist__27438 = cljs.core.next(arglist__27438);
      var coll = cljs.core.first(arglist__27438);
      var colls = cljs.core.rest(arglist__27438);
      return G__27437__delegate(xform, coll, colls);
    };
    G__27437.cljs$core$IFn$_invoke$arity$variadic = G__27437__delegate;
    return G__27437;
  }();
  sequence = function(xform, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return sequence__1.call(this, xform);
      case 2:
        return sequence__2.call(this, xform, coll);
      default:
        return sequence__3.cljs$core$IFn$_invoke$arity$variadic(xform, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sequence.cljs$lang$maxFixedArity = 2;
  sequence.cljs$lang$applyTo = sequence__3.cljs$lang$applyTo;
  sequence.cljs$core$IFn$_invoke$arity$1 = sequence__1;
  sequence.cljs$core$IFn$_invoke$arity$2 = sequence__2;
  sequence.cljs$core$IFn$_invoke$arity$variadic = sequence__3.cljs$core$IFn$_invoke$arity$variadic;
  return sequence;
}();
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__27439 = pred;
        var G__27440 = cljs.core.next.call(null, coll);
        pred = G__27439;
        coll = G__27440;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__3640__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        var G__27441 = pred;
        var G__27442 = cljs.core.next.call(null, coll);
        pred = G__27441;
        coll = G__27442;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error("Argument must be an integer: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__27443 = null;
    var G__27443__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__27443__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__27443__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__27443__3 = function() {
      var G__27444__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__27444 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__27444__delegate.call(this, x, y, zs);
      };
      G__27444.cljs$lang$maxFixedArity = 2;
      G__27444.cljs$lang$applyTo = function(arglist__27445) {
        var x = cljs.core.first(arglist__27445);
        arglist__27445 = cljs.core.next(arglist__27445);
        var y = cljs.core.first(arglist__27445);
        var zs = cljs.core.rest(arglist__27445);
        return G__27444__delegate(x, y, zs);
      };
      G__27444.cljs$core$IFn$_invoke$arity$variadic = G__27444__delegate;
      return G__27444;
    }();
    G__27443 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__27443__0.call(this);
        case 1:
          return G__27443__1.call(this, x);
        case 2:
          return G__27443__2.call(this, x, y);
        default:
          return G__27443__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__27443.cljs$lang$maxFixedArity = 2;
    G__27443.cljs$lang$applyTo = G__27443__3.cljs$lang$applyTo;
    G__27443.cljs$core$IFn$_invoke$arity$0 = G__27443__0;
    G__27443.cljs$core$IFn$_invoke$arity$1 = G__27443__1;
    G__27443.cljs$core$IFn$_invoke$arity$2 = G__27443__2;
    G__27443.cljs$core$IFn$_invoke$arity$variadic = G__27443__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__27443;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__27446__delegate = function(args) {
      return x;
    };
    var G__27446 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__27446__delegate.call(this, args);
    };
    G__27446.cljs$lang$maxFixedArity = 0;
    G__27446.cljs$lang$applyTo = function(arglist__27447) {
      var args = cljs.core.seq(arglist__27447);
      return G__27446__delegate(args);
    };
    G__27446.cljs$core$IFn$_invoke$arity$variadic = G__27446__delegate;
    return G__27446;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__27448 = null;
      var G__27448__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__27448__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__27448__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__27448__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__27448__4 = function() {
        var G__27449__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__27449 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__27449__delegate.call(this, x, y, z, args);
        };
        G__27449.cljs$lang$maxFixedArity = 3;
        G__27449.cljs$lang$applyTo = function(arglist__27450) {
          var x = cljs.core.first(arglist__27450);
          arglist__27450 = cljs.core.next(arglist__27450);
          var y = cljs.core.first(arglist__27450);
          arglist__27450 = cljs.core.next(arglist__27450);
          var z = cljs.core.first(arglist__27450);
          var args = cljs.core.rest(arglist__27450);
          return G__27449__delegate(x, y, z, args);
        };
        G__27449.cljs$core$IFn$_invoke$arity$variadic = G__27449__delegate;
        return G__27449;
      }();
      G__27448 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__27448__0.call(this);
          case 1:
            return G__27448__1.call(this, x);
          case 2:
            return G__27448__2.call(this, x, y);
          case 3:
            return G__27448__3.call(this, x, y, z);
          default:
            return G__27448__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__27448.cljs$lang$maxFixedArity = 3;
      G__27448.cljs$lang$applyTo = G__27448__4.cljs$lang$applyTo;
      G__27448.cljs$core$IFn$_invoke$arity$0 = G__27448__0;
      G__27448.cljs$core$IFn$_invoke$arity$1 = G__27448__1;
      G__27448.cljs$core$IFn$_invoke$arity$2 = G__27448__2;
      G__27448.cljs$core$IFn$_invoke$arity$3 = G__27448__3;
      G__27448.cljs$core$IFn$_invoke$arity$variadic = G__27448__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__27448;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__27451 = null;
      var G__27451__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__27451__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__27451__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__27451__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__27451__4 = function() {
        var G__27452__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__27452 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__27452__delegate.call(this, x, y, z, args);
        };
        G__27452.cljs$lang$maxFixedArity = 3;
        G__27452.cljs$lang$applyTo = function(arglist__27453) {
          var x = cljs.core.first(arglist__27453);
          arglist__27453 = cljs.core.next(arglist__27453);
          var y = cljs.core.first(arglist__27453);
          arglist__27453 = cljs.core.next(arglist__27453);
          var z = cljs.core.first(arglist__27453);
          var args = cljs.core.rest(arglist__27453);
          return G__27452__delegate(x, y, z, args);
        };
        G__27452.cljs$core$IFn$_invoke$arity$variadic = G__27452__delegate;
        return G__27452;
      }();
      G__27451 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__27451__0.call(this);
          case 1:
            return G__27451__1.call(this, x);
          case 2:
            return G__27451__2.call(this, x, y);
          case 3:
            return G__27451__3.call(this, x, y, z);
          default:
            return G__27451__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__27451.cljs$lang$maxFixedArity = 3;
      G__27451.cljs$lang$applyTo = G__27451__4.cljs$lang$applyTo;
      G__27451.cljs$core$IFn$_invoke$arity$0 = G__27451__0;
      G__27451.cljs$core$IFn$_invoke$arity$1 = G__27451__1;
      G__27451.cljs$core$IFn$_invoke$arity$2 = G__27451__2;
      G__27451.cljs$core$IFn$_invoke$arity$3 = G__27451__3;
      G__27451.cljs$core$IFn$_invoke$arity$variadic = G__27451__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__27451;
    }();
  };
  var comp__4 = function() {
    var G__27454__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function(fs__$1) {
        return function() {
          var G__27455__delegate = function(args) {
            var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
            var fs__$2 = cljs.core.next.call(null, fs__$1);
            while (true) {
              if (fs__$2) {
                var G__27456 = cljs.core.first.call(null, fs__$2).call(null, ret);
                var G__27457 = cljs.core.next.call(null, fs__$2);
                ret = G__27456;
                fs__$2 = G__27457;
                continue;
              } else {
                return ret;
              }
              break;
            }
          };
          var G__27455 = function(var_args) {
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__27455__delegate.call(this, args);
          };
          G__27455.cljs$lang$maxFixedArity = 0;
          G__27455.cljs$lang$applyTo = function(arglist__27458) {
            var args = cljs.core.seq(arglist__27458);
            return G__27455__delegate(args);
          };
          G__27455.cljs$core$IFn$_invoke$arity$variadic = G__27455__delegate;
          return G__27455;
        }();
      }(fs__$1);
    };
    var G__27454 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__27454__delegate.call(this, f1, f2, f3, fs);
    };
    G__27454.cljs$lang$maxFixedArity = 3;
    G__27454.cljs$lang$applyTo = function(arglist__27459) {
      var f1 = cljs.core.first(arglist__27459);
      arglist__27459 = cljs.core.next(arglist__27459);
      var f2 = cljs.core.first(arglist__27459);
      arglist__27459 = cljs.core.next(arglist__27459);
      var f3 = cljs.core.first(arglist__27459);
      var fs = cljs.core.rest(arglist__27459);
      return G__27454__delegate(f1, f2, f3, fs);
    };
    G__27454.cljs$core$IFn$_invoke$arity$variadic = G__27454__delegate;
    return G__27454;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__27460__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__27460 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__27460__delegate.call(this, args);
      };
      G__27460.cljs$lang$maxFixedArity = 0;
      G__27460.cljs$lang$applyTo = function(arglist__27461) {
        var args = cljs.core.seq(arglist__27461);
        return G__27460__delegate(args);
      };
      G__27460.cljs$core$IFn$_invoke$arity$variadic = G__27460__delegate;
      return G__27460;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__27462__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__27462 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__27462__delegate.call(this, args);
      };
      G__27462.cljs$lang$maxFixedArity = 0;
      G__27462.cljs$lang$applyTo = function(arglist__27463) {
        var args = cljs.core.seq(arglist__27463);
        return G__27462__delegate(args);
      };
      G__27462.cljs$core$IFn$_invoke$arity$variadic = G__27462__delegate;
      return G__27462;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__27464__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__27464 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__27464__delegate.call(this, args);
      };
      G__27464.cljs$lang$maxFixedArity = 0;
      G__27464.cljs$lang$applyTo = function(arglist__27465) {
        var args = cljs.core.seq(arglist__27465);
        return G__27464__delegate(args);
      };
      G__27464.cljs$core$IFn$_invoke$arity$variadic = G__27464__delegate;
      return G__27464;
    }();
  };
  var partial__5 = function() {
    var G__27466__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__27467__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__27467 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__27467__delegate.call(this, args);
        };
        G__27467.cljs$lang$maxFixedArity = 0;
        G__27467.cljs$lang$applyTo = function(arglist__27468) {
          var args = cljs.core.seq(arglist__27468);
          return G__27467__delegate(args);
        };
        G__27467.cljs$core$IFn$_invoke$arity$variadic = G__27467__delegate;
        return G__27467;
      }();
    };
    var G__27466 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__27466__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__27466.cljs$lang$maxFixedArity = 4;
    G__27466.cljs$lang$applyTo = function(arglist__27469) {
      var f = cljs.core.first(arglist__27469);
      arglist__27469 = cljs.core.next(arglist__27469);
      var arg1 = cljs.core.first(arglist__27469);
      arglist__27469 = cljs.core.next(arglist__27469);
      var arg2 = cljs.core.first(arglist__27469);
      arglist__27469 = cljs.core.next(arglist__27469);
      var arg3 = cljs.core.first(arglist__27469);
      var more = cljs.core.rest(arglist__27469);
      return G__27466__delegate(f, arg1, arg2, arg3, more);
    };
    G__27466.cljs$core$IFn$_invoke$arity$variadic = G__27466__delegate;
    return G__27466;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__27470 = null;
      var G__27470__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__27470__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__27470__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__27470__4 = function() {
        var G__27471__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__27471 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__27471__delegate.call(this, a, b, c, ds);
        };
        G__27471.cljs$lang$maxFixedArity = 3;
        G__27471.cljs$lang$applyTo = function(arglist__27472) {
          var a = cljs.core.first(arglist__27472);
          arglist__27472 = cljs.core.next(arglist__27472);
          var b = cljs.core.first(arglist__27472);
          arglist__27472 = cljs.core.next(arglist__27472);
          var c = cljs.core.first(arglist__27472);
          var ds = cljs.core.rest(arglist__27472);
          return G__27471__delegate(a, b, c, ds);
        };
        G__27471.cljs$core$IFn$_invoke$arity$variadic = G__27471__delegate;
        return G__27471;
      }();
      G__27470 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__27470__1.call(this, a);
          case 2:
            return G__27470__2.call(this, a, b);
          case 3:
            return G__27470__3.call(this, a, b, c);
          default:
            return G__27470__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__27470.cljs$lang$maxFixedArity = 3;
      G__27470.cljs$lang$applyTo = G__27470__4.cljs$lang$applyTo;
      G__27470.cljs$core$IFn$_invoke$arity$1 = G__27470__1;
      G__27470.cljs$core$IFn$_invoke$arity$2 = G__27470__2;
      G__27470.cljs$core$IFn$_invoke$arity$3 = G__27470__3;
      G__27470.cljs$core$IFn$_invoke$arity$variadic = G__27470__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__27470;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__27473 = null;
      var G__27473__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__27473__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__27473__4 = function() {
        var G__27474__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__27474 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__27474__delegate.call(this, a, b, c, ds);
        };
        G__27474.cljs$lang$maxFixedArity = 3;
        G__27474.cljs$lang$applyTo = function(arglist__27475) {
          var a = cljs.core.first(arglist__27475);
          arglist__27475 = cljs.core.next(arglist__27475);
          var b = cljs.core.first(arglist__27475);
          arglist__27475 = cljs.core.next(arglist__27475);
          var c = cljs.core.first(arglist__27475);
          var ds = cljs.core.rest(arglist__27475);
          return G__27474__delegate(a, b, c, ds);
        };
        G__27474.cljs$core$IFn$_invoke$arity$variadic = G__27474__delegate;
        return G__27474;
      }();
      G__27473 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__27473__2.call(this, a, b);
          case 3:
            return G__27473__3.call(this, a, b, c);
          default:
            return G__27473__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__27473.cljs$lang$maxFixedArity = 3;
      G__27473.cljs$lang$applyTo = G__27473__4.cljs$lang$applyTo;
      G__27473.cljs$core$IFn$_invoke$arity$2 = G__27473__2;
      G__27473.cljs$core$IFn$_invoke$arity$3 = G__27473__3;
      G__27473.cljs$core$IFn$_invoke$arity$variadic = G__27473__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__27473;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__27476 = null;
      var G__27476__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__27476__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__27476__4 = function() {
        var G__27477__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__27477 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__27477__delegate.call(this, a, b, c, ds);
        };
        G__27477.cljs$lang$maxFixedArity = 3;
        G__27477.cljs$lang$applyTo = function(arglist__27478) {
          var a = cljs.core.first(arglist__27478);
          arglist__27478 = cljs.core.next(arglist__27478);
          var b = cljs.core.first(arglist__27478);
          arglist__27478 = cljs.core.next(arglist__27478);
          var c = cljs.core.first(arglist__27478);
          var ds = cljs.core.rest(arglist__27478);
          return G__27477__delegate(a, b, c, ds);
        };
        G__27477.cljs$core$IFn$_invoke$arity$variadic = G__27477__delegate;
        return G__27477;
      }();
      G__27476 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__27476__2.call(this, a, b);
          case 3:
            return G__27476__3.call(this, a, b, c);
          default:
            return G__27476__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__27476.cljs$lang$maxFixedArity = 3;
      G__27476.cljs$lang$applyTo = G__27476__4.cljs$lang$applyTo;
      G__27476.cljs$core$IFn$_invoke$arity$2 = G__27476__2;
      G__27476.cljs$core$IFn$_invoke$arity$3 = G__27476__3;
      G__27476.cljs$core$IFn$_invoke$arity$variadic = G__27476__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__27476;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4510__auto___27479 = size;
          var i_27480 = 0;
          while (true) {
            if (i_27480 < n__4510__auto___27479) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_27480, cljs.core._nth.call(null, c, i_27480)));
              var G__27481 = i_27480 + 1;
              i_27480 = G__27481;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function() {
  var keep = null;
  var keep__1 = function(f) {
    return function(rf) {
      return function() {
        var G__27482 = null;
        var G__27482__0 = function() {
          return rf.call(null);
        };
        var G__27482__1 = function(result) {
          return rf.call(null, result);
        };
        var G__27482__2 = function(result, input) {
          var v = f.call(null, input);
          if (v == null) {
            return result;
          } else {
            return rf.call(null, result, v);
          }
        };
        G__27482 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__27482__0.call(this);
            case 1:
              return G__27482__1.call(this, result);
            case 2:
              return G__27482__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__27482.cljs$core$IFn$_invoke$arity$0 = G__27482__0;
        G__27482.cljs$core$IFn$_invoke$arity$1 = G__27482__1;
        G__27482.cljs$core$IFn$_invoke$arity$2 = G__27482__2;
        return G__27482;
      }();
    };
  };
  var keep__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4510__auto___27483 = size;
          var i_27484 = 0;
          while (true) {
            if (i_27484 < n__4510__auto___27483) {
              var x_27485 = f.call(null, cljs.core._nth.call(null, c, i_27484));
              if (x_27485 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_27485);
              }
              var G__27486 = i_27484 + 1;
              i_27484 = G__27486;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, cljs.core.first.call(null, s));
          if (x == null) {
            return keep.call(null, f, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  keep = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep__1.call(this, f);
      case 2:
        return keep__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep.cljs$core$IFn$_invoke$arity$1 = keep__1;
  keep.cljs$core$IFn$_invoke$arity$2 = keep__2;
  return keep;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__27487 = cljs.core.seq.call(null, self__.watches);
  var chunk__27488 = null;
  var count__27489 = 0;
  var i__27490 = 0;
  while (true) {
    if (i__27490 < count__27489) {
      var vec__27491 = cljs.core._nth.call(null, chunk__27488, i__27490);
      var key = cljs.core.nth.call(null, vec__27491, 0, null);
      var f = cljs.core.nth.call(null, vec__27491, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__27493 = seq__27487;
      var G__27494 = chunk__27488;
      var G__27495 = count__27489;
      var G__27496 = i__27490 + 1;
      seq__27487 = G__27493;
      chunk__27488 = G__27494;
      count__27489 = G__27495;
      i__27490 = G__27496;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__27487);
      if (temp__4126__auto__) {
        var seq__27487__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__27487__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__27487__$1);
          var G__27497 = cljs.core.chunk_rest.call(null, seq__27487__$1);
          var G__27498 = c__4410__auto__;
          var G__27499 = cljs.core.count.call(null, c__4410__auto__);
          var G__27500 = 0;
          seq__27487 = G__27497;
          chunk__27488 = G__27498;
          count__27489 = G__27499;
          i__27490 = G__27500;
          continue;
        } else {
          var vec__27492 = cljs.core.first.call(null, seq__27487__$1);
          var key = cljs.core.nth.call(null, vec__27492, 0, null);
          var f = cljs.core.nth.call(null, vec__27492, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__27501 = cljs.core.next.call(null, seq__27487__$1);
          var G__27502 = null;
          var G__27503 = 0;
          var G__27504 = 0;
          seq__27487 = G__27501;
          chunk__27488 = G__27502;
          count__27489 = G__27503;
          i__27490 = G__27504;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__27508__delegate = function(x, p__27505) {
      var map__27507 = p__27505;
      var map__27507__$1 = cljs.core.seq_QMARK_.call(null, map__27507) ? cljs.core.apply.call(null, cljs.core.hash_map, map__27507) : map__27507;
      var validator = cljs.core.get.call(null, map__27507__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.call(null, map__27507__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__27508 = function(x, var_args) {
      var p__27505 = null;
      if (arguments.length > 1) {
        p__27505 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__27508__delegate.call(this, x, p__27505);
    };
    G__27508.cljs$lang$maxFixedArity = 1;
    G__27508.cljs$lang$applyTo = function(arglist__27509) {
      var x = cljs.core.first(arglist__27509);
      var p__27505 = cljs.core.rest(arglist__27509);
      return G__27508__delegate(x, p__27505);
    };
    G__27508.cljs$core$IFn$_invoke$arity$variadic = G__27508__delegate;
    return G__27508;
  }();
  atom = function(x, var_args) {
    var p__27505 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.call(null, new_value))) {
      } else {
        throw new Error("Assert failed: Validator rejected reference state\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null)))));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches.call(null, a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_.call(null, a, new_value);
  }
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__27510__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.call(null, a, f, x, y, more);
      }
    };
    var G__27510 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__27510__delegate.call(this, a, f, x, y, more);
    };
    G__27510.cljs$lang$maxFixedArity = 4;
    G__27510.cljs$lang$applyTo = function(arglist__27511) {
      var a = cljs.core.first(arglist__27511);
      arglist__27511 = cljs.core.next(arglist__27511);
      var f = cljs.core.first(arglist__27511);
      arglist__27511 = cljs.core.next(arglist__27511);
      var x = cljs.core.first(arglist__27511);
      arglist__27511 = cljs.core.next(arglist__27511);
      var y = cljs.core.first(arglist__27511);
      var more = cljs.core.rest(arglist__27511);
      return G__27510__delegate(a, f, x, y, more);
    };
    G__27510.cljs$core$IFn$_invoke$arity$variadic = G__27510__delegate;
    return G__27510;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.keep_indexed = function() {
  var keep_indexed = null;
  var keep_indexed__1 = function(f) {
    return function(rf) {
      var ia = cljs.core.atom.call(null, -1);
      return function(ia) {
        return function() {
          var G__27512 = null;
          var G__27512__0 = function() {
            return rf.call(null);
          };
          var G__27512__1 = function(result) {
            return rf.call(null, result);
          };
          var G__27512__2 = function(result, input) {
            var i = cljs.core.swap_BANG_.call(null, ia, cljs.core.inc);
            var v = f.call(null, i, input);
            if (v == null) {
              return result;
            } else {
              return rf.call(null, result, v);
            }
          };
          G__27512 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__27512__0.call(this);
              case 1:
                return G__27512__1.call(this, result);
              case 2:
                return G__27512__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__27512.cljs$core$IFn$_invoke$arity$0 = G__27512__0;
          G__27512.cljs$core$IFn$_invoke$arity$1 = G__27512__1;
          G__27512.cljs$core$IFn$_invoke$arity$2 = G__27512__2;
          return G__27512;
        }();
      }(ia);
    };
  };
  var keep_indexed__2 = function(f, coll) {
    var keepi = function keepi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
            var c = cljs.core.chunk_first.call(null, s);
            var size = cljs.core.count.call(null, c);
            var b = cljs.core.chunk_buffer.call(null, size);
            var n__4510__auto___27513 = size;
            var i_27514 = 0;
            while (true) {
              if (i_27514 < n__4510__auto___27513) {
                var x_27515 = f.call(null, idx + i_27514, cljs.core._nth.call(null, c, i_27514));
                if (x_27515 == null) {
                } else {
                  cljs.core.chunk_append.call(null, b, x_27515);
                }
                var G__27516 = i_27514 + 1;
                i_27514 = G__27516;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
          } else {
            var x = f.call(null, idx, cljs.core.first.call(null, s));
            if (x == null) {
              return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
            } else {
              return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
            }
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return keepi.call(null, 0, coll);
  };
  keep_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep_indexed__1.call(this, f);
      case 2:
        return keep_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep_indexed.cljs$core$IFn$_invoke$arity$1 = keep_indexed__1;
  keep_indexed.cljs$core$IFn$_invoke$arity$2 = keep_indexed__2;
  return keep_indexed;
}();
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3628__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3628__auto__)) {
            return p.call(null, y);
          } else {
            return and__3628__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3628__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3628__auto__)) {
            var and__3628__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__3628__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__3628__auto____$1;
            }
          } else {
            return and__3628__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__27523__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__27523 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__27523__delegate.call(this, x, y, z, args);
        };
        G__27523.cljs$lang$maxFixedArity = 3;
        G__27523.cljs$lang$applyTo = function(arglist__27524) {
          var x = cljs.core.first(arglist__27524);
          arglist__27524 = cljs.core.next(arglist__27524);
          var y = cljs.core.first(arglist__27524);
          arglist__27524 = cljs.core.next(arglist__27524);
          var z = cljs.core.first(arglist__27524);
          var args = cljs.core.rest(arglist__27524);
          return G__27523__delegate(x, y, z, args);
        };
        G__27523.cljs$core$IFn$_invoke$arity$variadic = G__27523__delegate;
        return G__27523;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3628__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3628__auto__)) {
            return p2.call(null, x);
          } else {
            return and__3628__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3628__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3628__auto__)) {
            var and__3628__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3628__auto____$1)) {
              var and__3628__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__3628__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__3628__auto____$2;
              }
            } else {
              return and__3628__auto____$1;
            }
          } else {
            return and__3628__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3628__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3628__auto__)) {
            var and__3628__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3628__auto____$1)) {
              var and__3628__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__3628__auto____$2)) {
                var and__3628__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__3628__auto____$3)) {
                  var and__3628__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3628__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__3628__auto____$4;
                  }
                } else {
                  return and__3628__auto____$3;
                }
              } else {
                return and__3628__auto____$2;
              }
            } else {
              return and__3628__auto____$1;
            }
          } else {
            return and__3628__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__27525__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__27517_SHARP_) {
            var and__3628__auto__ = p1.call(null, p1__27517_SHARP_);
            if (cljs.core.truth_(and__3628__auto__)) {
              return p2.call(null, p1__27517_SHARP_);
            } else {
              return and__3628__auto__;
            }
          }, args));
        };
        var G__27525 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__27525__delegate.call(this, x, y, z, args);
        };
        G__27525.cljs$lang$maxFixedArity = 3;
        G__27525.cljs$lang$applyTo = function(arglist__27526) {
          var x = cljs.core.first(arglist__27526);
          arglist__27526 = cljs.core.next(arglist__27526);
          var y = cljs.core.first(arglist__27526);
          arglist__27526 = cljs.core.next(arglist__27526);
          var z = cljs.core.first(arglist__27526);
          var args = cljs.core.rest(arglist__27526);
          return G__27525__delegate(x, y, z, args);
        };
        G__27525.cljs$core$IFn$_invoke$arity$variadic = G__27525__delegate;
        return G__27525;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3628__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3628__auto__)) {
            var and__3628__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3628__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__3628__auto____$1;
            }
          } else {
            return and__3628__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3628__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3628__auto__)) {
            var and__3628__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3628__auto____$1)) {
              var and__3628__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3628__auto____$2)) {
                var and__3628__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3628__auto____$3)) {
                  var and__3628__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3628__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__3628__auto____$4;
                  }
                } else {
                  return and__3628__auto____$3;
                }
              } else {
                return and__3628__auto____$2;
              }
            } else {
              return and__3628__auto____$1;
            }
          } else {
            return and__3628__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3628__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3628__auto__)) {
            var and__3628__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3628__auto____$1)) {
              var and__3628__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3628__auto____$2)) {
                var and__3628__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3628__auto____$3)) {
                  var and__3628__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3628__auto____$4)) {
                    var and__3628__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__3628__auto____$5)) {
                      var and__3628__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__3628__auto____$6)) {
                        var and__3628__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__3628__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__3628__auto____$7;
                        }
                      } else {
                        return and__3628__auto____$6;
                      }
                    } else {
                      return and__3628__auto____$5;
                    }
                  } else {
                    return and__3628__auto____$4;
                  }
                } else {
                  return and__3628__auto____$3;
                }
              } else {
                return and__3628__auto____$2;
              }
            } else {
              return and__3628__auto____$1;
            }
          } else {
            return and__3628__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__27527__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__27518_SHARP_) {
            var and__3628__auto__ = p1.call(null, p1__27518_SHARP_);
            if (cljs.core.truth_(and__3628__auto__)) {
              var and__3628__auto____$1 = p2.call(null, p1__27518_SHARP_);
              if (cljs.core.truth_(and__3628__auto____$1)) {
                return p3.call(null, p1__27518_SHARP_);
              } else {
                return and__3628__auto____$1;
              }
            } else {
              return and__3628__auto__;
            }
          }, args));
        };
        var G__27527 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__27527__delegate.call(this, x, y, z, args);
        };
        G__27527.cljs$lang$maxFixedArity = 3;
        G__27527.cljs$lang$applyTo = function(arglist__27528) {
          var x = cljs.core.first(arglist__27528);
          arglist__27528 = cljs.core.next(arglist__27528);
          var y = cljs.core.first(arglist__27528);
          arglist__27528 = cljs.core.next(arglist__27528);
          var z = cljs.core.first(arglist__27528);
          var args = cljs.core.rest(arglist__27528);
          return G__27527__delegate(x, y, z, args);
        };
        G__27527.cljs$core$IFn$_invoke$arity$variadic = G__27527__delegate;
        return G__27527;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__27529__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var epn = null;
          var epn__0 = function() {
            return true;
          };
          var epn__1 = function(x) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__27519_SHARP_) {
                return p1__27519_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var epn__2 = function(x, y) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__27520_SHARP_) {
                var and__3628__auto__ = p1__27520_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3628__auto__)) {
                  return p1__27520_SHARP_.call(null, y);
                } else {
                  return and__3628__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__3 = function(x, y, z) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__27521_SHARP_) {
                var and__3628__auto__ = p1__27521_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3628__auto__)) {
                  var and__3628__auto____$1 = p1__27521_SHARP_.call(null, y);
                  if (cljs.core.truth_(and__3628__auto____$1)) {
                    return p1__27521_SHARP_.call(null, z);
                  } else {
                    return and__3628__auto____$1;
                  }
                } else {
                  return and__3628__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__4 = function() {
            var G__27530__delegate = function(x, y, z, args) {
              return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(ps__$1) {
                return function(p1__27522_SHARP_) {
                  return cljs.core.every_QMARK_.call(null, p1__27522_SHARP_, args);
                };
              }(ps__$1), ps__$1));
            };
            var G__27530 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__27530__delegate.call(this, x, y, z, args);
            };
            G__27530.cljs$lang$maxFixedArity = 3;
            G__27530.cljs$lang$applyTo = function(arglist__27531) {
              var x = cljs.core.first(arglist__27531);
              arglist__27531 = cljs.core.next(arglist__27531);
              var y = cljs.core.first(arglist__27531);
              arglist__27531 = cljs.core.next(arglist__27531);
              var z = cljs.core.first(arglist__27531);
              var args = cljs.core.rest(arglist__27531);
              return G__27530__delegate(x, y, z, args);
            };
            G__27530.cljs$core$IFn$_invoke$arity$variadic = G__27530__delegate;
            return G__27530;
          }();
          epn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return epn__0.call(this);
              case 1:
                return epn__1.call(this, x);
              case 2:
                return epn__2.call(this, x, y);
              case 3:
                return epn__3.call(this, x, y, z);
              default:
                return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          epn.cljs$lang$maxFixedArity = 3;
          epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
          epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
          epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
          epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
          epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
          epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
          return epn;
        }();
      }(ps__$1);
    };
    var G__27529 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__27529__delegate.call(this, p1, p2, p3, ps);
    };
    G__27529.cljs$lang$maxFixedArity = 3;
    G__27529.cljs$lang$applyTo = function(arglist__27532) {
      var p1 = cljs.core.first(arglist__27532);
      arglist__27532 = cljs.core.next(arglist__27532);
      var p2 = cljs.core.first(arglist__27532);
      arglist__27532 = cljs.core.next(arglist__27532);
      var p3 = cljs.core.first(arglist__27532);
      var ps = cljs.core.rest(arglist__27532);
      return G__27529__delegate(p1, p2, p3, ps);
    };
    G__27529.cljs$core$IFn$_invoke$arity$variadic = G__27529__delegate;
    return G__27529;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__3640__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3640__auto__)) {
          return or__3640__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3640__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3640__auto__)) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__3640__auto____$1)) {
            return or__3640__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__27539__delegate = function(x, y, z, args) {
          var or__3640__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__3640__auto__)) {
            return or__3640__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__27539 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__27539__delegate.call(this, x, y, z, args);
        };
        G__27539.cljs$lang$maxFixedArity = 3;
        G__27539.cljs$lang$applyTo = function(arglist__27540) {
          var x = cljs.core.first(arglist__27540);
          arglist__27540 = cljs.core.next(arglist__27540);
          var y = cljs.core.first(arglist__27540);
          arglist__27540 = cljs.core.next(arglist__27540);
          var z = cljs.core.first(arglist__27540);
          var args = cljs.core.rest(arglist__27540);
          return G__27539__delegate(x, y, z, args);
        };
        G__27539.cljs$core$IFn$_invoke$arity$variadic = G__27539__delegate;
        return G__27539;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3640__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3640__auto__)) {
          return or__3640__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3640__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3640__auto__)) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3640__auto____$1)) {
            return or__3640__auto____$1;
          } else {
            var or__3640__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__3640__auto____$2)) {
              return or__3640__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3640__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3640__auto__)) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3640__auto____$1)) {
            return or__3640__auto____$1;
          } else {
            var or__3640__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__3640__auto____$2)) {
              return or__3640__auto____$2;
            } else {
              var or__3640__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__3640__auto____$3)) {
                return or__3640__auto____$3;
              } else {
                var or__3640__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3640__auto____$4)) {
                  return or__3640__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__27541__delegate = function(x, y, z, args) {
          var or__3640__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__3640__auto__)) {
            return or__3640__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3640__auto__) {
              return function(p1__27533_SHARP_) {
                var or__3640__auto____$1 = p1.call(null, p1__27533_SHARP_);
                if (cljs.core.truth_(or__3640__auto____$1)) {
                  return or__3640__auto____$1;
                } else {
                  return p2.call(null, p1__27533_SHARP_);
                }
              };
            }(or__3640__auto__), args);
          }
        };
        var G__27541 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__27541__delegate.call(this, x, y, z, args);
        };
        G__27541.cljs$lang$maxFixedArity = 3;
        G__27541.cljs$lang$applyTo = function(arglist__27542) {
          var x = cljs.core.first(arglist__27542);
          arglist__27542 = cljs.core.next(arglist__27542);
          var y = cljs.core.first(arglist__27542);
          arglist__27542 = cljs.core.next(arglist__27542);
          var z = cljs.core.first(arglist__27542);
          var args = cljs.core.rest(arglist__27542);
          return G__27541__delegate(x, y, z, args);
        };
        G__27541.cljs$core$IFn$_invoke$arity$variadic = G__27541__delegate;
        return G__27541;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3640__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3640__auto__)) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3640__auto____$1)) {
            return or__3640__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3640__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3640__auto__)) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3640__auto____$1)) {
            return or__3640__auto____$1;
          } else {
            var or__3640__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3640__auto____$2)) {
              return or__3640__auto____$2;
            } else {
              var or__3640__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3640__auto____$3)) {
                return or__3640__auto____$3;
              } else {
                var or__3640__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3640__auto____$4)) {
                  return or__3640__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3640__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3640__auto__)) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3640__auto____$1)) {
            return or__3640__auto____$1;
          } else {
            var or__3640__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3640__auto____$2)) {
              return or__3640__auto____$2;
            } else {
              var or__3640__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3640__auto____$3)) {
                return or__3640__auto____$3;
              } else {
                var or__3640__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3640__auto____$4)) {
                  return or__3640__auto____$4;
                } else {
                  var or__3640__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__3640__auto____$5)) {
                    return or__3640__auto____$5;
                  } else {
                    var or__3640__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__3640__auto____$6)) {
                      return or__3640__auto____$6;
                    } else {
                      var or__3640__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__3640__auto____$7)) {
                        return or__3640__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__27543__delegate = function(x, y, z, args) {
          var or__3640__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__3640__auto__)) {
            return or__3640__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3640__auto__) {
              return function(p1__27534_SHARP_) {
                var or__3640__auto____$1 = p1.call(null, p1__27534_SHARP_);
                if (cljs.core.truth_(or__3640__auto____$1)) {
                  return or__3640__auto____$1;
                } else {
                  var or__3640__auto____$2 = p2.call(null, p1__27534_SHARP_);
                  if (cljs.core.truth_(or__3640__auto____$2)) {
                    return or__3640__auto____$2;
                  } else {
                    return p3.call(null, p1__27534_SHARP_);
                  }
                }
              };
            }(or__3640__auto__), args);
          }
        };
        var G__27543 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__27543__delegate.call(this, x, y, z, args);
        };
        G__27543.cljs$lang$maxFixedArity = 3;
        G__27543.cljs$lang$applyTo = function(arglist__27544) {
          var x = cljs.core.first(arglist__27544);
          arglist__27544 = cljs.core.next(arglist__27544);
          var y = cljs.core.first(arglist__27544);
          arglist__27544 = cljs.core.next(arglist__27544);
          var z = cljs.core.first(arglist__27544);
          var args = cljs.core.rest(arglist__27544);
          return G__27543__delegate(x, y, z, args);
        };
        G__27543.cljs$core$IFn$_invoke$arity$variadic = G__27543__delegate;
        return G__27543;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__27545__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var spn = null;
          var spn__0 = function() {
            return null;
          };
          var spn__1 = function(x) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__27535_SHARP_) {
                return p1__27535_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var spn__2 = function(x, y) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__27536_SHARP_) {
                var or__3640__auto__ = p1__27536_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3640__auto__)) {
                  return or__3640__auto__;
                } else {
                  return p1__27536_SHARP_.call(null, y);
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__3 = function(x, y, z) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__27537_SHARP_) {
                var or__3640__auto__ = p1__27537_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3640__auto__)) {
                  return or__3640__auto__;
                } else {
                  var or__3640__auto____$1 = p1__27537_SHARP_.call(null, y);
                  if (cljs.core.truth_(or__3640__auto____$1)) {
                    return or__3640__auto____$1;
                  } else {
                    return p1__27537_SHARP_.call(null, z);
                  }
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__4 = function() {
            var G__27546__delegate = function(x, y, z, args) {
              var or__3640__auto__ = spn.call(null, x, y, z);
              if (cljs.core.truth_(or__3640__auto__)) {
                return or__3640__auto__;
              } else {
                return cljs.core.some.call(null, function(or__3640__auto__, ps__$1) {
                  return function(p1__27538_SHARP_) {
                    return cljs.core.some.call(null, p1__27538_SHARP_, args);
                  };
                }(or__3640__auto__, ps__$1), ps__$1);
              }
            };
            var G__27546 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__27546__delegate.call(this, x, y, z, args);
            };
            G__27546.cljs$lang$maxFixedArity = 3;
            G__27546.cljs$lang$applyTo = function(arglist__27547) {
              var x = cljs.core.first(arglist__27547);
              arglist__27547 = cljs.core.next(arglist__27547);
              var y = cljs.core.first(arglist__27547);
              arglist__27547 = cljs.core.next(arglist__27547);
              var z = cljs.core.first(arglist__27547);
              var args = cljs.core.rest(arglist__27547);
              return G__27546__delegate(x, y, z, args);
            };
            G__27546.cljs$core$IFn$_invoke$arity$variadic = G__27546__delegate;
            return G__27546;
          }();
          spn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return spn__0.call(this);
              case 1:
                return spn__1.call(this, x);
              case 2:
                return spn__2.call(this, x, y);
              case 3:
                return spn__3.call(this, x, y, z);
              default:
                return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          spn.cljs$lang$maxFixedArity = 3;
          spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
          spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
          spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
          spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
          spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
          spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
          return spn;
        }();
      }(ps__$1);
    };
    var G__27545 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__27545__delegate.call(this, p1, p2, p3, ps);
    };
    G__27545.cljs$lang$maxFixedArity = 3;
    G__27545.cljs$lang$applyTo = function(arglist__27548) {
      var p1 = cljs.core.first(arglist__27548);
      arglist__27548 = cljs.core.next(arglist__27548);
      var p2 = cljs.core.first(arglist__27548);
      arglist__27548 = cljs.core.next(arglist__27548);
      var p3 = cljs.core.first(arglist__27548);
      var ps = cljs.core.rest(arglist__27548);
      return G__27545__delegate(p1, p2, p3, ps);
    };
    G__27545.cljs$core$IFn$_invoke$arity$variadic = G__27545__delegate;
    return G__27545;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__1 = function(f) {
    return function(rf) {
      return function() {
        var G__27550 = null;
        var G__27550__0 = function() {
          return rf.call(null);
        };
        var G__27550__1 = function(result) {
          return rf.call(null, result);
        };
        var G__27550__2 = function(result, input) {
          return rf.call(null, result, f.call(null, input));
        };
        var G__27550__3 = function() {
          var G__27551__delegate = function(result, input, inputs) {
            return rf.call(null, result, cljs.core.apply.call(null, f, input, inputs));
          };
          var G__27551 = function(result, input, var_args) {
            var inputs = null;
            if (arguments.length > 2) {
              inputs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
            }
            return G__27551__delegate.call(this, result, input, inputs);
          };
          G__27551.cljs$lang$maxFixedArity = 2;
          G__27551.cljs$lang$applyTo = function(arglist__27552) {
            var result = cljs.core.first(arglist__27552);
            arglist__27552 = cljs.core.next(arglist__27552);
            var input = cljs.core.first(arglist__27552);
            var inputs = cljs.core.rest(arglist__27552);
            return G__27551__delegate(result, input, inputs);
          };
          G__27551.cljs$core$IFn$_invoke$arity$variadic = G__27551__delegate;
          return G__27551;
        }();
        G__27550 = function(result, input, var_args) {
          var inputs = var_args;
          switch(arguments.length) {
            case 0:
              return G__27550__0.call(this);
            case 1:
              return G__27550__1.call(this, result);
            case 2:
              return G__27550__2.call(this, result, input);
            default:
              return G__27550__3.cljs$core$IFn$_invoke$arity$variadic(result, input, cljs.core.array_seq(arguments, 2));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__27550.cljs$lang$maxFixedArity = 2;
        G__27550.cljs$lang$applyTo = G__27550__3.cljs$lang$applyTo;
        G__27550.cljs$core$IFn$_invoke$arity$0 = G__27550__0;
        G__27550.cljs$core$IFn$_invoke$arity$1 = G__27550__1;
        G__27550.cljs$core$IFn$_invoke$arity$2 = G__27550__2;
        G__27550.cljs$core$IFn$_invoke$arity$variadic = G__27550__3.cljs$core$IFn$_invoke$arity$variadic;
        return G__27550;
      }();
    };
  };
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4510__auto___27553 = size;
          var i_27554 = 0;
          while (true) {
            if (i_27554 < n__4510__auto___27553) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_27554)));
              var G__27555 = i_27554 + 1;
              i_27554 = G__27555;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && s2 && s3) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__27556__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(step) {
        return function(p1__27549_SHARP_) {
          return cljs.core.apply.call(null, f, p1__27549_SHARP_);
        };
      }(step), step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__27556 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__27556__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__27556.cljs$lang$maxFixedArity = 4;
    G__27556.cljs$lang$applyTo = function(arglist__27557) {
      var f = cljs.core.first(arglist__27557);
      arglist__27557 = cljs.core.next(arglist__27557);
      var c1 = cljs.core.first(arglist__27557);
      arglist__27557 = cljs.core.next(arglist__27557);
      var c2 = cljs.core.first(arglist__27557);
      arglist__27557 = cljs.core.next(arglist__27557);
      var c3 = cljs.core.first(arglist__27557);
      var colls = cljs.core.rest(arglist__27557);
      return G__27556__delegate(f, c1, c2, c3, colls);
    };
    G__27556.cljs$core$IFn$_invoke$arity$variadic = G__27556__delegate;
    return G__27556;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return map__1.call(this, f);
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$1 = map__1;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function() {
  var take = null;
  var take__1 = function(n) {
    return function(rf) {
      var na = cljs.core.atom.call(null, n);
      return function(na) {
        return function() {
          var G__27558 = null;
          var G__27558__0 = function() {
            return rf.call(null);
          };
          var G__27558__1 = function(result) {
            return rf.call(null, result);
          };
          var G__27558__2 = function(result, input) {
            var n__$1 = cljs.core.deref.call(null, na);
            var nn = cljs.core.swap_BANG_.call(null, na, cljs.core.dec);
            var result__$1 = n__$1 > 0 ? rf.call(null, result, input) : result;
            if (!(nn > 0)) {
              return cljs.core.reduced.call(null, result__$1);
            } else {
              return result__$1;
            }
          };
          G__27558 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__27558__0.call(this);
              case 1:
                return G__27558__1.call(this, result);
              case 2:
                return G__27558__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__27558.cljs$core$IFn$_invoke$arity$0 = G__27558__0;
          G__27558.cljs$core$IFn$_invoke$arity$1 = G__27558__1;
          G__27558.cljs$core$IFn$_invoke$arity$2 = G__27558__2;
          return G__27558;
        }();
      }(na);
    };
  };
  var take__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      if (n > 0) {
        var temp__4126__auto__ = cljs.core.seq.call(null, coll);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take__1.call(this, n);
      case 2:
        return take__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$1 = take__1;
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  return take;
}();
cljs.core.drop = function() {
  var drop = null;
  var drop__1 = function(n) {
    return function(rf) {
      var na = cljs.core.atom.call(null, n);
      return function(na) {
        return function() {
          var G__27559 = null;
          var G__27559__0 = function() {
            return rf.call(null);
          };
          var G__27559__1 = function(result) {
            return rf.call(null, result);
          };
          var G__27559__2 = function(result, input) {
            var n__$1 = cljs.core.deref.call(null, na);
            cljs.core.swap_BANG_.call(null, na, cljs.core.dec);
            if (n__$1 > 0) {
              return result;
            } else {
              return rf.call(null, result, input);
            }
          };
          G__27559 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__27559__0.call(this);
              case 1:
                return G__27559__1.call(this, result);
              case 2:
                return G__27559__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__27559.cljs$core$IFn$_invoke$arity$0 = G__27559__0;
          G__27559.cljs$core$IFn$_invoke$arity$1 = G__27559__1;
          G__27559.cljs$core$IFn$_invoke$arity$2 = G__27559__2;
          return G__27559;
        }();
      }(na);
    };
  };
  var drop__2 = function(n, coll) {
    var step = function(n__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq.call(null, coll__$1);
        if (n__$1 > 0 && s) {
          var G__27560 = n__$1 - 1;
          var G__27561 = cljs.core.rest.call(null, s);
          n__$1 = G__27560;
          coll__$1 = G__27561;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step.call(null, n, coll);
      };
    }(step), null, null);
  };
  drop = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return drop__1.call(this, n);
      case 2:
        return drop__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop.cljs$core$IFn$_invoke$arity$1 = drop__1;
  drop.cljs$core$IFn$_invoke$arity$2 = drop__2;
  return drop;
}();
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__27562 = cljs.core.next.call(null, s);
      var G__27563 = cljs.core.next.call(null, lead);
      s = G__27562;
      lead = G__27563;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function() {
  var drop_while = null;
  var drop_while__1 = function(pred) {
    return function(rf) {
      var da = cljs.core.atom.call(null, true);
      return function(da) {
        return function() {
          var G__27564 = null;
          var G__27564__0 = function() {
            return rf.call(null);
          };
          var G__27564__1 = function(result) {
            return rf.call(null, result);
          };
          var G__27564__2 = function(result, input) {
            var drop_QMARK_ = cljs.core.deref.call(null, da);
            if (cljs.core.truth_(function() {
              var and__3628__auto__ = drop_QMARK_;
              if (cljs.core.truth_(and__3628__auto__)) {
                return pred.call(null, input);
              } else {
                return and__3628__auto__;
              }
            }())) {
              return result;
            } else {
              cljs.core.reset_BANG_.call(null, da, null);
              return rf.call(null, result, input);
            }
          };
          G__27564 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__27564__0.call(this);
              case 1:
                return G__27564__1.call(this, result);
              case 2:
                return G__27564__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__27564.cljs$core$IFn$_invoke$arity$0 = G__27564__0;
          G__27564.cljs$core$IFn$_invoke$arity$1 = G__27564__1;
          G__27564.cljs$core$IFn$_invoke$arity$2 = G__27564__2;
          return G__27564;
        }();
      }(da);
    };
  };
  var drop_while__2 = function(pred, coll) {
    var step = function(pred__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq.call(null, coll__$1);
        if (cljs.core.truth_(function() {
          var and__3628__auto__ = s;
          if (and__3628__auto__) {
            return pred__$1.call(null, cljs.core.first.call(null, s));
          } else {
            return and__3628__auto__;
          }
        }())) {
          var G__27565 = pred__$1;
          var G__27566 = cljs.core.rest.call(null, s);
          pred__$1 = G__27565;
          coll__$1 = G__27566;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step.call(null, pred, coll);
      };
    }(step), null, null);
  };
  drop_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return drop_while__1.call(this, pred);
      case 2:
        return drop_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_while.cljs$core$IFn$_invoke$arity$1 = drop_while__1;
  drop_while.cljs$core$IFn$_invoke$arity$2 = drop_while__2;
  return drop_while;
}();
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__27567__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__27567 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__27567__delegate.call(this, c1, c2, colls);
    };
    G__27567.cljs$lang$maxFixedArity = 2;
    G__27567.cljs$lang$applyTo = function(arglist__27568) {
      var c1 = cljs.core.first(arglist__27568);
      arglist__27568 = cljs.core.next(arglist__27568);
      var c2 = cljs.core.first(arglist__27568);
      var colls = cljs.core.rest(arglist__27568);
      return G__27567__delegate(c1, c2, colls);
    };
    G__27567.cljs$core$IFn$_invoke$arity$variadic = G__27567__delegate;
    return G__27567;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var coll__$1 = temp__4124__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__1 = function(f) {
    return cljs.core.comp.call(null, cljs.core.map.call(null, f), cljs.core.cat);
  };
  var mapcat__2 = function() {
    var G__27569__delegate = function(f, colls) {
      return cljs.core.apply.call(null, cljs.core.concat, cljs.core.apply.call(null, cljs.core.map, f, colls));
    };
    var G__27569 = function(f, var_args) {
      var colls = null;
      if (arguments.length > 1) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__27569__delegate.call(this, f, colls);
    };
    G__27569.cljs$lang$maxFixedArity = 1;
    G__27569.cljs$lang$applyTo = function(arglist__27570) {
      var f = cljs.core.first(arglist__27570);
      var colls = cljs.core.rest(arglist__27570);
      return G__27569__delegate(f, colls);
    };
    G__27569.cljs$core$IFn$_invoke$arity$variadic = G__27569__delegate;
    return G__27569;
  }();
  mapcat = function(f, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return mapcat__1.call(this, f);
      default:
        return mapcat__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 1;
  mapcat.cljs$lang$applyTo = mapcat__2.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$1 = mapcat__1;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__2.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function() {
  var filter = null;
  var filter__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__27571 = null;
        var G__27571__0 = function() {
          return rf.call(null);
        };
        var G__27571__1 = function(result) {
          return rf.call(null, result);
        };
        var G__27571__2 = function(result, input) {
          if (cljs.core.truth_(pred.call(null, input))) {
            return rf.call(null, result, input);
          } else {
            return result;
          }
        };
        G__27571 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__27571__0.call(this);
            case 1:
              return G__27571__1.call(this, result);
            case 2:
              return G__27571__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__27571.cljs$core$IFn$_invoke$arity$0 = G__27571__0;
        G__27571.cljs$core$IFn$_invoke$arity$1 = G__27571__1;
        G__27571.cljs$core$IFn$_invoke$arity$2 = G__27571__2;
        return G__27571;
      }();
    };
  };
  var filter__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4510__auto___27572 = size;
          var i_27573 = 0;
          while (true) {
            if (i_27573 < n__4510__auto___27572) {
              if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_27573)))) {
                cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_27573));
              } else {
              }
              var G__27574 = i_27573 + 1;
              i_27573 = G__27574;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
        } else {
          var f = cljs.core.first.call(null, s);
          var r = cljs.core.rest.call(null, s);
          if (cljs.core.truth_(pred.call(null, f))) {
            return cljs.core.cons.call(null, f, filter.call(null, pred, r));
          } else {
            return filter.call(null, pred, r);
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  filter = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return filter__1.call(this, pred);
      case 2:
        return filter__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter.cljs$core$IFn$_invoke$arity$1 = filter__1;
  filter.cljs$core$IFn$_invoke$arity$2 = filter__2;
  return filter;
}();
cljs.core.remove = function() {
  var remove = null;
  var remove__1 = function(pred) {
    return cljs.core.filter.call(null, cljs.core.complement.call(null, pred));
  };
  var remove__2 = function(pred, coll) {
    return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
  };
  remove = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return remove__1.call(this, pred);
      case 2:
        return remove__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove.cljs$core$IFn$_invoke$arity$1 = remove__1;
  remove.cljs$core$IFn$_invoke$arity$2 = remove__2;
  return remove;
}();
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__27575_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__27575_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function() {
  var into = null;
  var into__2 = function(to, from) {
    if (!(to == null)) {
      if (function() {
        var G__27578 = to;
        if (G__27578) {
          var bit__4297__auto__ = G__27578.cljs$lang$protocol_mask$partition1$ & 4;
          if (bit__4297__auto__ || G__27578.cljs$core$IEditableCollection$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from)), cljs.core.meta.call(null, to));
      } else {
        return cljs.core.reduce.call(null, cljs.core._conj, to, from);
      }
    } else {
      return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
    }
  };
  var into__3 = function(to, xform, from) {
    if (function() {
      var G__27579 = to;
      if (G__27579) {
        var bit__4297__auto__ = G__27579.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4297__auto__ || G__27579.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.transduce.call(null, xform, cljs.core.conj_BANG_, cljs.core.transient$.call(null, to), from)), cljs.core.meta.call(null, to));
    } else {
      return cljs.core.transduce.call(null, xform, cljs.core.conj, to, from);
    }
  };
  into = function(to, xform, from) {
    switch(arguments.length) {
      case 2:
        return into__2.call(this, to, xform);
      case 3:
        return into__3.call(this, to, xform, from);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into.cljs$core$IFn$_invoke$arity$2 = into__2;
  into.cljs$core$IFn$_invoke$arity$3 = into__3;
  return into;
}();
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__27580__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__27580 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__27580__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__27580.cljs$lang$maxFixedArity = 4;
    G__27580.cljs$lang$applyTo = function(arglist__27581) {
      var f = cljs.core.first(arglist__27581);
      arglist__27581 = cljs.core.next(arglist__27581);
      var c1 = cljs.core.first(arglist__27581);
      arglist__27581 = cljs.core.next(arglist__27581);
      var c2 = cljs.core.first(arglist__27581);
      arglist__27581 = cljs.core.next(arglist__27581);
      var c3 = cljs.core.first(arglist__27581);
      var colls = cljs.core.rest(arglist__27581);
      return G__27580__delegate(f, c1, c2, c3, colls);
    };
    G__27580.cljs$core$IFn$_invoke$arity$variadic = G__27580__delegate;
    return G__27580;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__27583 = m__$1;
          if (G__27583) {
            var bit__4304__auto__ = G__27583.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4304__auto__ || G__27583.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__27583.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__27583);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__27583);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__27584 = sentinel;
            var G__27585 = m__$2;
            var G__27586 = cljs.core.next.call(null, ks__$1);
            sentinel = G__27584;
            m__$1 = G__27585;
            ks__$1 = G__27586;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__27587, v) {
  var vec__27589 = p__27587;
  var k = cljs.core.nth.call(null, vec__27589, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__27589, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__27590, f) {
    var vec__27600 = p__27590;
    var k = cljs.core.nth.call(null, vec__27600, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__27600, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__27591, f, a) {
    var vec__27601 = p__27591;
    var k = cljs.core.nth.call(null, vec__27601, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__27601, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__27592, f, a, b) {
    var vec__27602 = p__27592;
    var k = cljs.core.nth.call(null, vec__27602, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__27602, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__27593, f, a, b, c) {
    var vec__27603 = p__27593;
    var k = cljs.core.nth.call(null, vec__27603, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__27603, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__27605__delegate = function(m, p__27594, f, a, b, c, args) {
      var vec__27604 = p__27594;
      var k = cljs.core.nth.call(null, vec__27604, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__27604, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__27605 = function(m, p__27594, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__27605__delegate.call(this, m, p__27594, f, a, b, c, args);
    };
    G__27605.cljs$lang$maxFixedArity = 6;
    G__27605.cljs$lang$applyTo = function(arglist__27606) {
      var m = cljs.core.first(arglist__27606);
      arglist__27606 = cljs.core.next(arglist__27606);
      var p__27594 = cljs.core.first(arglist__27606);
      arglist__27606 = cljs.core.next(arglist__27606);
      var f = cljs.core.first(arglist__27606);
      arglist__27606 = cljs.core.next(arglist__27606);
      var a = cljs.core.first(arglist__27606);
      arglist__27606 = cljs.core.next(arglist__27606);
      var b = cljs.core.first(arglist__27606);
      arglist__27606 = cljs.core.next(arglist__27606);
      var c = cljs.core.first(arglist__27606);
      var args = cljs.core.rest(arglist__27606);
      return G__27605__delegate(m, p__27594, f, a, b, c, args);
    };
    G__27605.cljs$core$IFn$_invoke$arity$variadic = G__27605__delegate;
    return G__27605;
  }();
  update_in = function(m, p__27594, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__27594, f);
      case 4:
        return update_in__4.call(this, m, p__27594, f, a);
      case 5:
        return update_in__5.call(this, m, p__27594, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__27594, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__27594, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4220__auto__, writer__4221__auto__, opts__4222__auto__) {
  return cljs.core._write.call(null, writer__4221__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__27607 = ll - 5;
      var G__27608 = r;
      ll = G__27607;
      ret = G__27608;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error("No item " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(i) + " in vector of length " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cnt));
};
cljs.core.first_array_for_longvec = function first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__27609 = cljs.core.pv_aget.call(null, node, 0);
      var G__27610 = level - 5;
      node = G__27609;
      level = G__27610;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off.call(null, pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__27611 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
        var G__27612 = level - 5;
        node = G__27611;
        level = G__27612;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for.call(null, pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/RangedIterator");
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for.call(null, self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.__GT_RangedIterator = function __GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count.call(null, v) ? cljs.core.unchecked_array_for.call(null, v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = f.call(null, init__$2, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
              return init__$3;
            } else {
              var G__27614 = j + 1;
              var G__27615 = init__$3;
              j = G__27614;
              init__$2 = G__27615;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__27616 = i + len;
        var G__27617 = init__$2;
        i = G__27616;
        init__$1 = G__27617;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for.call(null, coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= n) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, val);
    } else {
      throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds  [0," + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt) + "]");
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator.call(null, this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for.call(null, coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count.call(null, other)) {
      var me_iter = cljs.core._iterator.call(null, coll__$1);
      var you_iter = cljs.core._iterator.call(null, other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.call(null, x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential.call(null, coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = f.call(null, init__$2, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
              return init__$3;
            } else {
              var G__27618 = j + 1;
              var G__27619 = init__$3;
              j = G__27618;
              init__$2 = G__27619;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__27620 = i + len;
        var G__27621 = init__$2;
        i = G__27620;
        init__$1 = G__27621;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      return cljs.core.chunked_seq.call(null, coll__$1, cljs.core.first_array_for_longvec.call(null, coll__$1), 0, 0);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4510__auto___27622 = len;
    var i_27623 = 0;
    while (true) {
      if (i_27623 < n__4510__auto___27622) {
        new_tail[i_27623] = self__.tail[i_27623];
        var G__27624 = i_27623 + 1;
        i_27623 = G__27624;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__27625 = null;
  var G__27625__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__27625__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__27625 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__27625__2.call(this, self__, k);
      case 3:
        return G__27625__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__27625.cljs$core$IFn$_invoke$arity$2 = G__27625__2;
  G__27625.cljs$core$IFn$_invoke$arity$3 = G__27625__3;
  return G__27625;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args27613) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args27613)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__27626 = i + 1;
        var G__27627 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__27626;
        out = G__27627;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray(args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__27628) {
    var args = cljs.core.seq(arglist__27628);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return null;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3947__auto__ = self__.end;
    var y__3948__auto__ = v_pos + 1;
    return x__3947__auto__ > y__3948__auto__ ? x__3947__auto__ : y__3948__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return subvec_seq.call(null, i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.call = function() {
  var G__27630 = null;
  var G__27630__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__27630__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__27630 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__27630__2.call(this, self__, k);
      case 3:
        return G__27630__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__27630.cljs$core$IFn$_invoke$arity$2 = G__27630__2;
  G__27630.cljs$core$IFn$_invoke$arity$3 = G__27630__3;
  return G__27630;
}();
cljs.core.Subvec.prototype.apply = function(self__, args27629) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args27629)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__27631 = meta;
      var G__27632 = v.v;
      var G__27633 = v.start + start;
      var G__27634 = v.start + end;
      var G__27635 = __hash;
      meta = G__27631;
      v = G__27632;
      start = G__27633;
      end = G__27634;
      __hash = G__27635;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj27639 = {};
    return obj27639;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off.call(null, tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__27640 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
        var G__27641 = level - 5;
        node = G__27640;
        level = G__27641;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__27643 = null;
  var G__27643__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__27643__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__27643 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__27643__2.call(this, self__, k);
      case 3:
        return G__27643__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__27643.cljs$core$IFn$_invoke$arity$2 = G__27643__2;
  G__27643.cljs$core$IFn$_invoke$arity$3 = G__27643__3;
  return G__27643;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args27642) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args27642)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset.call(null, node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds for TransientVector of length" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4124__auto__) {
    var f1 = temp__4124__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4124__auto__) {
      var f1 = temp__4124__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__3640__auto__ = self__.front;
    if (cljs.core.truth_(or__3640__auto__)) {
      return or__3640__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3640__auto__ = self__.rear;
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__27644 = i + incr;
        i = G__27644;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__27645 = i + 1;
      var G__27646 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__27645;
      out = G__27646;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj27650 = {};
    return obj27650;
  }();
  var l = ks.length;
  var i_27651 = 0;
  while (true) {
    if (i_27651 < l) {
      var k_27652 = ks[i_27651];
      new_obj[k_27652] = obj[k_27652];
      var G__27653 = i_27651 + 1;
      i_27651 = G__27653;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__27656 = cljs.core.rest.call(null, keys__$1);
        var G__27657 = init__$2;
        keys__$1 = G__27656;
        init__$1 = G__27657;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(coll__$1) {
      return function(p1__27654_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__27654_SHARP_, self__.strobj[p1__27654_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__27658 = null;
  var G__27658__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__27658__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__27658 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__27658__2.call(this, self__, k);
      case 3:
        return G__27658__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__27658.cljs$core$IFn$_invoke$arity$2 = G__27658__2;
  G__27658.cljs$core$IFn$_invoke$arity$3 = G__27658__3;
  return G__27658;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args27655) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args27655)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj27660 = {};
  return obj27660;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ES6Iterator");
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first.call(null, self__.s);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":x};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_ES6Iterator = function __GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq.call(null, coll));
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__27661 = cljs.core.first.call(null, self__.s);
    var k = cljs.core.nth.call(null, vec__27661, 0, null);
    var v = cljs.core.nth.call(null, vec__27661, 1, null);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":[k, v]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_ES6EntriesIterator = function __GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq.call(null, coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first.call(null, self__.s);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":[x, x]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_ES6SetEntriesIterator = function __GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq.call(null, coll));
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__27662 = i + 2;
        i = G__27662;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        var G__27663 = i + 2;
        i = G__27663;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        var G__27664 = i + 2;
        i = G__27664;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__27665 = i + 2;
        i = G__27665;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        var G__27666 = i + 2;
        i = G__27666;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_27667 = 0;
  while (true) {
    if (i_27667 < l) {
      narr[i_27667] = arr[i_27667];
      var G__27668 = i_27667 + 1;
      i_27667 = G__27668;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.__GT_PersistentArrayMapIterator = function __GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__27670 = cljs.core.seq.call(null, coll);
  var chunk__27671 = null;
  var count__27672 = 0;
  var i__27673 = 0;
  while (true) {
    if (i__27673 < count__27672) {
      var vec__27674 = cljs.core._nth.call(null, chunk__27671, i__27673);
      var k = cljs.core.nth.call(null, vec__27674, 0, null);
      var v = cljs.core.nth.call(null, vec__27674, 1, null);
      f.call(null, v, k);
      var G__27680 = seq__27670;
      var G__27681 = chunk__27671;
      var G__27682 = count__27672;
      var G__27683 = i__27673 + 1;
      seq__27670 = G__27680;
      chunk__27671 = G__27681;
      count__27672 = G__27682;
      i__27673 = G__27683;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__27670);
      if (temp__4126__auto__) {
        var seq__27670__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__27670__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__27670__$1);
          var G__27684 = cljs.core.chunk_rest.call(null, seq__27670__$1);
          var G__27685 = c__4410__auto__;
          var G__27686 = cljs.core.count.call(null, c__4410__auto__);
          var G__27687 = 0;
          seq__27670 = G__27684;
          chunk__27671 = G__27685;
          count__27672 = G__27686;
          i__27673 = G__27687;
          continue;
        } else {
          var vec__27675 = cljs.core.first.call(null, seq__27670__$1);
          var k = cljs.core.nth.call(null, vec__27675, 0, null);
          var v = cljs.core.nth.call(null, vec__27675, 1, null);
          f.call(null, v, k);
          var G__27688 = cljs.core.next.call(null, seq__27670__$1);
          var G__27689 = null;
          var G__27690 = 0;
          var G__27691 = 0;
          seq__27670 = G__27688;
          chunk__27671 = G__27689;
          count__27672 = G__27690;
          i__27673 = G__27691;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__27692 = i + 2;
        var G__27693 = init__$2;
        i = G__27692;
        init__$1 = G__27693;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (function() {
    var G__27676 = other;
    if (G__27676) {
      var bit__4297__auto__ = G__27676.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4297__auto__ || G__27676.cljs$core$IMap$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === cljs.core._count.call(null, other__$1)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = cljs.core._lookup.call(null, other__$1, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.call(null, self__.arr[i + 1], v)) {
              var G__27694 = i + 2;
              i = G__27694;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map.call(null, coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj27678 = {};
    return obj27678;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__27695 = s + 2;
            var G__27696 = d;
            s = G__27695;
            d = G__27696;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__27697 = s + 2;
            var G__27698 = d + 2;
            s = G__27697;
            d = G__27698;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__27679 = cljs.core.aclone.call(null, self__.arr);
        G__27679[idx + 1] = v;
        return G__27679;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__27699 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__27700 = cljs.core.next.call(null, es);
          ret = G__27699;
          es = G__27700;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__27701 = null;
  var G__27701__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__27701__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__27701 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__27701__2.call(this, self__, k);
      case 3:
        return G__27701__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__27701.cljs$core$IFn$_invoke$arity$2 = G__27701__2;
  G__27701.cljs$core$IFn$_invoke$arity$3 = G__27701__3;
  return G__27701;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args27669) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args27669)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__27702 = i + 2;
        var G__27703 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__27702;
        ret = G__27703;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__27704_27706 = self__.arr;
      G__27704_27706.pop();
      G__27704_27706.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__27705 = o;
      if (G__27705) {
        var bit__4304__auto__ = G__27705.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4304__auto__ || G__27705.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__27705.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__27705);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__27705);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__27707 = cljs.core.next.call(null, es);
          var G__27708 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__27707;
          tcoll__$2 = G__27708;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__27709 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__27710 = i + 2;
      out = G__27709;
      i = G__27710;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4220__auto__, writer__4221__auto__, opts__4222__auto__) {
  return cljs.core._write.call(null, writer__4221__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.call(null, key, other);
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__27713 = cljs.core.aclone.call(null, arr);
    G__27713[i] = a;
    return G__27713;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__27714 = cljs.core.aclone.call(null, arr);
    G__27714[i] = a;
    G__27714[j] = b;
    return G__27714;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__27715 = i + 2;
        var G__27716 = init__$2;
        i = G__27715;
        init__$1 = G__27716;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_27717 = 0;
        var j_27718 = 0;
        while (true) {
          if (i_27717 < 32) {
            if ((self__.bitmap >>> i_27717 & 1) === 0) {
              var G__27719 = i_27717 + 1;
              var G__27720 = j_27718;
              i_27717 = G__27719;
              j_27718 = G__27720;
              continue;
            } else {
              nodes[i_27717] = !(self__.arr[j_27718] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_27718]), self__.arr[j_27718], self__.arr[j_27718 + 1], added_leaf_QMARK_) : self__.arr[j_27718 + 1];
              var G__27721 = i_27717 + 1;
              var G__27722 = j_27718 + 2;
              i_27717 = G__27721;
              j_27718 = G__27722;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_27723 = 0;
      var j_27724 = 0;
      while (true) {
        if (i_27723 < 32) {
          if ((self__.bitmap >>> i_27723 & 1) === 0) {
            var G__27725 = i_27723 + 1;
            var G__27726 = j_27724;
            i_27723 = G__27725;
            j_27724 = G__27726;
            continue;
          } else {
            nodes[i_27723] = !(self__.arr[j_27724] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_27724]), self__.arr[j_27724], self__.arr[j_27724 + 1], added_leaf_QMARK_) : self__.arr[j_27724 + 1];
            var G__27727 = i_27723 + 1;
            var G__27728 = j_27724 + 2;
            i_27723 = G__27727;
            j_27724 = G__27728;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__27729 = i + 1;
        var G__27730 = j + 2;
        var G__27731 = bitmap | 1 << i;
        i = G__27729;
        j = G__27730;
        bitmap = G__27731;
        continue;
      } else {
        var G__27732 = i + 1;
        var G__27733 = j;
        var G__27734 = bitmap;
        i = G__27732;
        j = G__27733;
        bitmap = G__27734;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__27735 = i + 1;
          var G__27736 = init__$2;
          i = G__27735;
          init__$1 = G__27736;
          continue;
        }
      } else {
        var G__27737 = i + 1;
        var G__27738 = init__$1;
        i = G__27737;
        init__$1 = G__27738;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__27739 = i + 2;
        i = G__27739;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
    }
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4124__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var node = temp__4124__auto__;
              var temp__4124__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4124__auto____$1)) {
                var node_seq = temp__4124__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__27740 = j + 2;
                j = G__27740;
                continue;
              }
            } else {
              var G__27741 = j + 2;
              j = G__27741;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4124__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var nj = temp__4124__auto__;
            var temp__4124__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4124__auto____$1)) {
              var ns = temp__4124__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__27742 = j + 1;
              j = G__27742;
              continue;
            }
          } else {
            var G__27743 = j + 1;
            j = G__27743;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__27745 = cljs.core.seq.call(null, coll);
  var chunk__27746 = null;
  var count__27747 = 0;
  var i__27748 = 0;
  while (true) {
    if (i__27748 < count__27747) {
      var vec__27749 = cljs.core._nth.call(null, chunk__27746, i__27748);
      var k = cljs.core.nth.call(null, vec__27749, 0, null);
      var v = cljs.core.nth.call(null, vec__27749, 1, null);
      f.call(null, v, k);
      var G__27753 = seq__27745;
      var G__27754 = chunk__27746;
      var G__27755 = count__27747;
      var G__27756 = i__27748 + 1;
      seq__27745 = G__27753;
      chunk__27746 = G__27754;
      count__27747 = G__27755;
      i__27748 = G__27756;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__27745);
      if (temp__4126__auto__) {
        var seq__27745__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__27745__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__27745__$1);
          var G__27757 = cljs.core.chunk_rest.call(null, seq__27745__$1);
          var G__27758 = c__4410__auto__;
          var G__27759 = cljs.core.count.call(null, c__4410__auto__);
          var G__27760 = 0;
          seq__27745 = G__27757;
          chunk__27746 = G__27758;
          count__27747 = G__27759;
          i__27748 = G__27760;
          continue;
        } else {
          var vec__27750 = cljs.core.first.call(null, seq__27745__$1);
          var k = cljs.core.nth.call(null, vec__27750, 0, null);
          var v = cljs.core.nth.call(null, vec__27750, 1, null);
          f.call(null, v, k);
          var G__27761 = cljs.core.next.call(null, seq__27745__$1);
          var G__27762 = null;
          var G__27763 = 0;
          var G__27764 = 0;
          seq__27745 = G__27761;
          chunk__27746 = G__27762;
          count__27747 = G__27763;
          i__27748 = G__27764;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj27752 = {};
    return obj27752;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__27765 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__27766 = cljs.core.next.call(null, es);
          ret = G__27765;
          es = G__27766;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__27767 = null;
  var G__27767__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__27767__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__27767 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__27767__2.call(this, self__, k);
      case 3:
        return G__27767__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__27767.cljs$core$IFn$_invoke$arity$2 = G__27767__2;
  G__27767.cljs$core$IFn$_invoke$arity$3 = G__27767__3;
  return G__27767;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args27744) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args27744)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__27768 = i + 1;
      var G__27769 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__27768;
      out = G__27769;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__27770 = o;
      if (G__27770) {
        var bit__4304__auto__ = G__27770.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4304__auto__ || G__27770.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__27770.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__27770);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__27770);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__27771 = cljs.core.next.call(null, es);
          var G__27772 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__27771;
          tcoll__$1 = G__27772;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__27773 = ascending_QMARK_ ? t.left : t.right;
      var G__27774 = cljs.core.conj.call(null, stack__$1, t);
      t = G__27773;
      stack__$1 = G__27774;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__27776 = null;
  var G__27776__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__27776__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__27776 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__27776__2.call(this, self__, k);
      case 3:
        return G__27776__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__27776.cljs$core$IFn$_invoke$arity$2 = G__27776__2;
  G__27776.cljs$core$IFn$_invoke$arity$3 = G__27776__3;
  return G__27776;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args27775) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args27775)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__27778 = null;
  var G__27778__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__27778__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__27778 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__27778__2.call(this, self__, k);
      case 3:
        return G__27778__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__27778.cljs$core$IFn$_invoke$arity$2 = G__27778__2;
  G__27778.cljs$core$IFn$_invoke$arity$3 = G__27778__3;
  return G__27778;
}();
cljs.core.RedNode.prototype.apply = function(self__, args27777) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args27777)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = tree_map_remove.call(null, comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__27780 = cljs.core.seq.call(null, coll);
  var chunk__27781 = null;
  var count__27782 = 0;
  var i__27783 = 0;
  while (true) {
    if (i__27783 < count__27782) {
      var vec__27784 = cljs.core._nth.call(null, chunk__27781, i__27783);
      var k = cljs.core.nth.call(null, vec__27784, 0, null);
      var v = cljs.core.nth.call(null, vec__27784, 1, null);
      f.call(null, v, k);
      var G__27786 = seq__27780;
      var G__27787 = chunk__27781;
      var G__27788 = count__27782;
      var G__27789 = i__27783 + 1;
      seq__27780 = G__27786;
      chunk__27781 = G__27787;
      count__27782 = G__27788;
      i__27783 = G__27789;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__27780);
      if (temp__4126__auto__) {
        var seq__27780__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__27780__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__27780__$1);
          var G__27790 = cljs.core.chunk_rest.call(null, seq__27780__$1);
          var G__27791 = c__4410__auto__;
          var G__27792 = cljs.core.count.call(null, c__4410__auto__);
          var G__27793 = 0;
          seq__27780 = G__27790;
          chunk__27781 = G__27791;
          count__27782 = G__27792;
          i__27783 = G__27793;
          continue;
        } else {
          var vec__27785 = cljs.core.first.call(null, seq__27780__$1);
          var k = cljs.core.nth.call(null, vec__27785, 0, null);
          var v = cljs.core.nth.call(null, vec__27785, 1, null);
          f.call(null, v, k);
          var G__27794 = cljs.core.next.call(null, seq__27780__$1);
          var G__27795 = null;
          var G__27796 = 0;
          var G__27797 = 0;
          seq__27780 = G__27794;
          chunk__27781 = G__27795;
          count__27782 = G__27796;
          i__27783 = G__27797;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__27798 = t.left;
          t = G__27798;
          continue;
        } else {
          var G__27799 = t.right;
          t = G__27799;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__27800 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__27801 = cljs.core.next.call(null, es);
          ret = G__27800;
          es = G__27801;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__27802 = null;
  var G__27802__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__27802__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__27802 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__27802__2.call(this, self__, k);
      case 3:
        return G__27802__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__27802.cljs$core$IFn$_invoke$arity$2 = G__27802__2;
  G__27802.cljs$core$IFn$_invoke$arity$3 = G__27802__3;
  return G__27802;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args27779) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args27779)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__27803 = cljs.core.conj.call(null, stack, t);
              var G__27804 = t.left;
              stack = G__27803;
              t = G__27804;
              continue;
            } else {
              var G__27805 = stack;
              var G__27806 = t.right;
              stack = G__27805;
              t = G__27806;
              continue;
            }
          } else {
            if (c > 0) {
              var G__27807 = cljs.core.conj.call(null, stack, t);
              var G__27808 = t.right;
              stack = G__27807;
              t = G__27808;
              continue;
            } else {
              var G__27809 = stack;
              var G__27810 = t.left;
              stack = G__27809;
              t = G__27810;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__27811 = cljs.core.nnext.call(null, in$);
        var G__27812 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__27811;
        out = G__27812;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__27813) {
    var keyvals = cljs.core.seq(arglist__27813);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__27814) {
    var keyvals = cljs.core.seq(arglist__27814);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj27818 = {};
      return obj27818;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__27819 = cljs.core.nnext.call(null, kvs);
        kvs = G__27819;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject(ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__27820) {
    var keyvals = cljs.core.seq(arglist__27820);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__27821 = cljs.core.nnext.call(null, in$);
        var G__27822 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__27821;
        out = G__27822;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__27823) {
    var keyvals = cljs.core.seq(arglist__27823);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__27824 = cljs.core.nnext.call(null, in$);
        var G__27825 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__27824;
        out = G__27825;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__27826) {
    var comparator = cljs.core.first(arglist__27826);
    var keyvals = cljs.core.rest(arglist__27826);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__27827 = self__.mseq;
    if (G__27827) {
      var bit__4304__auto__ = G__27827.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4304__auto__ || G__27827.cljs$core$INext$) {
        return true;
      } else {
        if (!G__27827.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__27827);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__27827);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__27828 = self__.mseq;
    if (G__27828) {
      var bit__4304__auto__ = G__27828.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4304__auto__ || G__27828.cljs$core$INext$) {
        return true;
      } else {
        if (!G__27828.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__27828);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__27828);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__27829 = self__.mseq;
    if (G__27829) {
      var bit__4304__auto__ = G__27829.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4304__auto__ || G__27829.cljs$core$INext$) {
        return true;
      } else {
        if (!G__27829.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__27829);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__27829);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__27830 = self__.mseq;
    if (G__27830) {
      var bit__4304__auto__ = G__27830.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4304__auto__ || G__27830.cljs$core$INext$) {
        return true;
      } else {
        if (!G__27830.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__27830);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__27830);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__27831_SHARP_, p2__27832_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3640__auto__ = p1__27831_SHARP_;
          if (cljs.core.truth_(or__3640__auto__)) {
            return or__3640__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__27832_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__27833) {
    var maps = cljs.core.seq(arglist__27833);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3640__auto__ = m1;
            if (cljs.core.truth_(or__3640__auto__)) {
              return or__3640__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__27834) {
    var f = cljs.core.first(arglist__27834);
    var maps = cljs.core.rest(arglist__27834);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__27835 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__27836 = cljs.core.next.call(null, keys);
      ret = G__27835;
      keys = G__27836;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__27839 = cljs.core.seq.call(null, coll);
  var chunk__27840 = null;
  var count__27841 = 0;
  var i__27842 = 0;
  while (true) {
    if (i__27842 < count__27841) {
      var vec__27843 = cljs.core._nth.call(null, chunk__27840, i__27842);
      var k = cljs.core.nth.call(null, vec__27843, 0, null);
      var v = cljs.core.nth.call(null, vec__27843, 1, null);
      f.call(null, v, k);
      var G__27845 = seq__27839;
      var G__27846 = chunk__27840;
      var G__27847 = count__27841;
      var G__27848 = i__27842 + 1;
      seq__27839 = G__27845;
      chunk__27840 = G__27846;
      count__27841 = G__27847;
      i__27842 = G__27848;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__27839);
      if (temp__4126__auto__) {
        var seq__27839__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__27839__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__27839__$1);
          var G__27849 = cljs.core.chunk_rest.call(null, seq__27839__$1);
          var G__27850 = c__4410__auto__;
          var G__27851 = cljs.core.count.call(null, c__4410__auto__);
          var G__27852 = 0;
          seq__27839 = G__27849;
          chunk__27840 = G__27850;
          count__27841 = G__27851;
          i__27842 = G__27852;
          continue;
        } else {
          var vec__27844 = cljs.core.first.call(null, seq__27839__$1);
          var k = cljs.core.nth.call(null, vec__27844, 0, null);
          var v = cljs.core.nth.call(null, vec__27844, 1, null);
          f.call(null, v, k);
          var G__27853 = cljs.core.next.call(null, seq__27839__$1);
          var G__27854 = null;
          var G__27855 = 0;
          var G__27856 = 0;
          seq__27839 = G__27853;
          chunk__27840 = G__27854;
          count__27841 = G__27855;
          i__27842 = G__27856;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__27837_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__27837_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__27857 = null;
  var G__27857__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__27857__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__27857 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__27857__2.call(this, self__, k);
      case 3:
        return G__27857__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__27857.cljs$core$IFn$_invoke$arity$2 = G__27857__2;
  G__27857.cljs$core$IFn$_invoke$arity$3 = G__27857__3;
  return G__27857;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args27838) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args27838)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__27858 = i + 1;
        var G__27859 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__27858;
        out = G__27859;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__27860 = i + 1;
        var G__27861 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__27860;
        out = G__27861;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__27863 = null;
  var G__27863__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__27863__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__27863 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__27863__2.call(this, self__, k);
      case 3:
        return G__27863__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__27863.cljs$core$IFn$_invoke$arity$2 = G__27863__2;
  G__27863.cljs$core$IFn$_invoke$arity$3 = G__27863__3;
  return G__27863;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args27862) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args27862)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__27866 = cljs.core.seq.call(null, coll);
  var chunk__27867 = null;
  var count__27868 = 0;
  var i__27869 = 0;
  while (true) {
    if (i__27869 < count__27868) {
      var vec__27870 = cljs.core._nth.call(null, chunk__27867, i__27869);
      var k = cljs.core.nth.call(null, vec__27870, 0, null);
      var v = cljs.core.nth.call(null, vec__27870, 1, null);
      f.call(null, v, k);
      var G__27872 = seq__27866;
      var G__27873 = chunk__27867;
      var G__27874 = count__27868;
      var G__27875 = i__27869 + 1;
      seq__27866 = G__27872;
      chunk__27867 = G__27873;
      count__27868 = G__27874;
      i__27869 = G__27875;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__27866);
      if (temp__4126__auto__) {
        var seq__27866__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__27866__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__27866__$1);
          var G__27876 = cljs.core.chunk_rest.call(null, seq__27866__$1);
          var G__27877 = c__4410__auto__;
          var G__27878 = cljs.core.count.call(null, c__4410__auto__);
          var G__27879 = 0;
          seq__27866 = G__27876;
          chunk__27867 = G__27877;
          count__27868 = G__27878;
          i__27869 = G__27879;
          continue;
        } else {
          var vec__27871 = cljs.core.first.call(null, seq__27866__$1);
          var k = cljs.core.nth.call(null, vec__27871, 0, null);
          var v = cljs.core.nth.call(null, vec__27871, 1, null);
          f.call(null, v, k);
          var G__27880 = cljs.core.next.call(null, seq__27866__$1);
          var G__27881 = null;
          var G__27882 = 0;
          var G__27883 = 0;
          seq__27866 = G__27880;
          chunk__27867 = G__27881;
          count__27868 = G__27882;
          i__27869 = G__27883;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__27864_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__27864_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__27884 = null;
  var G__27884__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__27884__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__27884 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__27884__2.call(this, self__, k);
      case 3:
        return G__27884__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__27884.cljs$core$IFn$_invoke$arity$2 = G__27884__2;
  G__27884.cljs$core$IFn$_invoke$arity$3 = G__27884__3;
  return G__27884;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args27865) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args27865)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4504__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4504__auto__.length) {
        var G__27885 = i + 1;
        var G__27886 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__27885;
        res = G__27886;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__27887 = cljs.core._next.call(null, in$__$1);
          var G__27888 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
          in$__$1 = G__27887;
          out = G__27888;
          continue;
        } else {
          return cljs.core._persistent_BANG_.call(null, out);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__27889__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__27889 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__27889__delegate.call(this, keys);
    };
    G__27889.cljs$lang$maxFixedArity = 0;
    G__27889.cljs$lang$applyTo = function(arglist__27890) {
      var keys = cljs.core.seq(arglist__27890);
      return G__27889__delegate(keys);
    };
    G__27889.cljs$core$IFn$_invoke$arity$variadic = G__27889__delegate;
    return G__27889;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__27891) {
    var keys = cljs.core.seq(arglist__27891);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__27892) {
    var comparator = cljs.core.first(arglist__27892);
    var keys = cljs.core.rest(arglist__27892);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function() {
  var replace = null;
  var replace__1 = function(smap) {
    return cljs.core.map.call(null, function(p1__27893_SHARP_) {
      var temp__4124__auto__ = cljs.core.find.call(null, smap, p1__27893_SHARP_);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var e = temp__4124__auto__;
        return cljs.core.val.call(null, e);
      } else {
        return p1__27893_SHARP_;
      }
    });
  };
  var replace__2 = function(smap, coll) {
    if (cljs.core.vector_QMARK_.call(null, coll)) {
      var n = cljs.core.count.call(null, coll);
      return cljs.core.reduce.call(null, function(n) {
        return function(v, i) {
          var temp__4124__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
          if (cljs.core.truth_(temp__4124__auto__)) {
            var e = temp__4124__auto__;
            return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
          } else {
            return v;
          }
        };
      }(n), coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
    } else {
      return cljs.core.map.call(null, function(p1__27894_SHARP_) {
        var temp__4124__auto__ = cljs.core.find.call(null, smap, p1__27894_SHARP_);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          return cljs.core.second.call(null, e);
        } else {
          return p1__27894_SHARP_;
        }
      }, coll);
    }
  };
  replace = function(smap, coll) {
    switch(arguments.length) {
      case 1:
        return replace__1.call(this, smap);
      case 2:
        return replace__2.call(this, smap, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  replace.cljs$core$IFn$_invoke$arity$1 = replace__1;
  replace.cljs$core$IFn$_invoke$arity$2 = replace__2;
  return replace;
}();
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__27901, seen__$1) {
        while (true) {
          var vec__27902 = p__27901;
          var f = cljs.core.nth.call(null, vec__27902, 0, null);
          var xs__$1 = vec__27902;
          var temp__4126__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4126__auto__) {
            var s = temp__4126__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__27903 = cljs.core.rest.call(null, s);
              var G__27904 = seen__$1;
              p__27901 = G__27903;
              seen__$1 = G__27904;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__27905 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__27906 = cljs.core.next.call(null, s__$1);
      ret = G__27905;
      s__$1 = G__27906;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__27908 = x;
    if (G__27908) {
      var bit__4297__auto__ = G__27908.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4297__auto__ || G__27908.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error("Doesn't support name: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__27909 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__27910 = cljs.core.next.call(null, ks);
      var G__27911 = cljs.core.next.call(null, vs);
      map = G__27909;
      ks = G__27910;
      vs = G__27911;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__27914__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__27912_SHARP_, p2__27913_SHARP_) {
        return max_key.call(null, k, p1__27912_SHARP_, p2__27913_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__27914 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__27914__delegate.call(this, k, x, y, more);
    };
    G__27914.cljs$lang$maxFixedArity = 3;
    G__27914.cljs$lang$applyTo = function(arglist__27915) {
      var k = cljs.core.first(arglist__27915);
      arglist__27915 = cljs.core.next(arglist__27915);
      var x = cljs.core.first(arglist__27915);
      arglist__27915 = cljs.core.next(arglist__27915);
      var y = cljs.core.first(arglist__27915);
      var more = cljs.core.rest(arglist__27915);
      return G__27914__delegate(k, x, y, more);
    };
    G__27914.cljs$core$IFn$_invoke$arity$variadic = G__27914__delegate;
    return G__27914;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__27918__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__27916_SHARP_, p2__27917_SHARP_) {
        return min_key.call(null, k, p1__27916_SHARP_, p2__27917_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__27918 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__27918__delegate.call(this, k, x, y, more);
    };
    G__27918.cljs$lang$maxFixedArity = 3;
    G__27918.cljs$lang$applyTo = function(arglist__27919) {
      var k = cljs.core.first(arglist__27919);
      arglist__27919 = cljs.core.next(arglist__27919);
      var x = cljs.core.first(arglist__27919);
      arglist__27919 = cljs.core.next(arglist__27919);
      var y = cljs.core.first(arglist__27919);
      var more = cljs.core.rest(arglist__27919);
      return G__27918__delegate(k, x, y, more);
    };
    G__27918.cljs$core$IFn$_invoke$arity$variadic = G__27918__delegate;
    return G__27918;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ArrayList");
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.__GT_ArrayList = function __GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__1 = function(n) {
    return function(rf) {
      var a = cljs.core.array_list.call(null);
      return function(a) {
        return function() {
          var G__27920 = null;
          var G__27920__0 = function() {
            return rf.call(null);
          };
          var G__27920__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return rf.call(null, result, v);
            }();
            return rf.call(null, result__$1);
          };
          var G__27920__2 = function(result, input) {
            a.add(input);
            if (n === a.size()) {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return rf.call(null, result, v);
            } else {
              return result;
            }
          };
          G__27920 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__27920__0.call(this);
              case 1:
                return G__27920__1.call(this, result);
              case 2:
                return G__27920__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__27920.cljs$core$IFn$_invoke$arity$0 = G__27920__0;
          G__27920.cljs$core$IFn$_invoke$arity$1 = G__27920__1;
          G__27920.cljs$core$IFn$_invoke$arity$2 = G__27920__2;
          return G__27920;
        }();
      }(a);
    };
  };
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 1:
        return partition_all__1.call(this, n);
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$1 = partition_all__1;
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function() {
  var take_while = null;
  var take_while__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__27921 = null;
        var G__27921__0 = function() {
          return rf.call(null);
        };
        var G__27921__1 = function(result) {
          return rf.call(null, result);
        };
        var G__27921__2 = function(result, input) {
          if (cljs.core.truth_(pred.call(null, input))) {
            return rf.call(null, result, input);
          } else {
            return cljs.core.reduced.call(null, result);
          }
        };
        G__27921 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__27921__0.call(this);
            case 1:
              return G__27921__1.call(this, result);
            case 2:
              return G__27921__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__27921.cljs$core$IFn$_invoke$arity$0 = G__27921__0;
        G__27921.cljs$core$IFn$_invoke$arity$1 = G__27921__1;
        G__27921.cljs$core$IFn$_invoke$arity$2 = G__27921__2;
        return G__27921;
      }();
    };
  };
  var take_while__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return take_while__1.call(this, pred);
      case 2:
        return take_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_while.cljs$core$IFn$_invoke$arity$1 = take_while__1;
  take_while.cljs$core$IFn$_invoke$arity$2 = take_while__2;
  return take_while;
}();
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__27924 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__27924, 0, null);
        var s = vec__27924;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__27925 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__27925, 0, null);
      var s = vec__27925;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__27928 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__27928, 0, null);
        var s = vec__27928;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__27929 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__27929, 0, null);
      var s = vec__27929;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/RangeIterator");
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.__GT_RangeIterator = function __GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil.call(null, (self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, rng__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = f.call(null, ret, i);
      if (cljs.core.reduced_QMARK_.call(null, ret__$1)) {
        return cljs.core.deref.call(null, ret__$1);
      } else {
        var G__27930 = i + self__.step;
        var G__27931 = ret__$1;
        i = G__27930;
        ret = G__27931;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function() {
  var take_nth = null;
  var take_nth__1 = function(n) {
    return function(rf) {
      var ia = cljs.core.atom.call(null, -1);
      return function(ia) {
        return function() {
          var G__27932 = null;
          var G__27932__0 = function() {
            return rf.call(null);
          };
          var G__27932__1 = function(result) {
            return rf.call(null, result);
          };
          var G__27932__2 = function(result, input) {
            var i = cljs.core.swap_BANG_.call(null, ia, cljs.core.inc);
            if (cljs.core.rem.call(null, i, n) === 0) {
              return rf.call(null, result, input);
            } else {
              return result;
            }
          };
          G__27932 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__27932__0.call(this);
              case 1:
                return G__27932__1.call(this, result);
              case 2:
                return G__27932__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__27932.cljs$core$IFn$_invoke$arity$0 = G__27932__0;
          G__27932.cljs$core$IFn$_invoke$arity$1 = G__27932__1;
          G__27932.cljs$core$IFn$_invoke$arity$2 = G__27932__2;
          return G__27932;
        }();
      }(ia);
    };
  };
  var take_nth__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  take_nth = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take_nth__1.call(this, n);
      case 2:
        return take_nth__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_nth.cljs$core$IFn$_invoke$arity$1 = take_nth__1;
  take_nth.cljs$core$IFn$_invoke$arity$2 = take_nth__2;
  return take_nth;
}();
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function() {
  var partition_by = null;
  var partition_by__1 = function(f) {
    return function(rf) {
      var a = cljs.core.array_list.call(null);
      var pa = cljs.core.atom.call(null, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(a, pa) {
        return function() {
          var G__27934 = null;
          var G__27934__0 = function() {
            return rf.call(null);
          };
          var G__27934__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return rf.call(null, result, v);
            }();
            return rf.call(null, result__$1);
          };
          var G__27934__2 = function(result, input) {
            var pval = cljs.core.deref.call(null, pa);
            var val = f.call(null, input);
            cljs.core.reset_BANG_.call(null, pa, val);
            if (cljs.core.keyword_identical_QMARK_.call(null, pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.call(null, val, pval)) {
              a.add(input);
              return result;
            } else {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              var ret = rf.call(null, result, v);
              if (cljs.core.reduced_QMARK_.call(null, ret)) {
              } else {
                a.add(input);
              }
              return ret;
            }
          };
          G__27934 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__27934__0.call(this);
              case 1:
                return G__27934__1.call(this, result);
              case 2:
                return G__27934__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__27934.cljs$core$IFn$_invoke$arity$0 = G__27934__0;
          G__27934.cljs$core$IFn$_invoke$arity$1 = G__27934__1;
          G__27934.cljs$core$IFn$_invoke$arity$2 = G__27934__2;
          return G__27934;
        }();
      }(a, pa);
    };
  };
  var partition_by__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var fst = cljs.core.first.call(null, s);
        var fv = f.call(null, fst);
        var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv, s, temp__4126__auto__) {
          return function(p1__27933_SHARP_) {
            return cljs.core._EQ_.call(null, fv, f.call(null, p1__27933_SHARP_));
          };
        }(fst, fv, s, temp__4126__auto__), cljs.core.next.call(null, s)));
        return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_by = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return partition_by__1.call(this, f);
      case 2:
        return partition_by__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$1 = partition_by__1;
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  return partition_by;
}();
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var s = temp__4124__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__27945 = null;
      var G__27945__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__27945__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__27945__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__27945__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__27945__4 = function() {
        var G__27946__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__27946 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__27946__delegate.call(this, x, y, z, args);
        };
        G__27946.cljs$lang$maxFixedArity = 3;
        G__27946.cljs$lang$applyTo = function(arglist__27947) {
          var x = cljs.core.first(arglist__27947);
          arglist__27947 = cljs.core.next(arglist__27947);
          var y = cljs.core.first(arglist__27947);
          arglist__27947 = cljs.core.next(arglist__27947);
          var z = cljs.core.first(arglist__27947);
          var args = cljs.core.rest(arglist__27947);
          return G__27946__delegate(x, y, z, args);
        };
        G__27946.cljs$core$IFn$_invoke$arity$variadic = G__27946__delegate;
        return G__27946;
      }();
      G__27945 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__27945__0.call(this);
          case 1:
            return G__27945__1.call(this, x);
          case 2:
            return G__27945__2.call(this, x, y);
          case 3:
            return G__27945__3.call(this, x, y, z);
          default:
            return G__27945__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__27945.cljs$lang$maxFixedArity = 3;
      G__27945.cljs$lang$applyTo = G__27945__4.cljs$lang$applyTo;
      G__27945.cljs$core$IFn$_invoke$arity$0 = G__27945__0;
      G__27945.cljs$core$IFn$_invoke$arity$1 = G__27945__1;
      G__27945.cljs$core$IFn$_invoke$arity$2 = G__27945__2;
      G__27945.cljs$core$IFn$_invoke$arity$3 = G__27945__3;
      G__27945.cljs$core$IFn$_invoke$arity$variadic = G__27945__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__27945;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__27948 = null;
      var G__27948__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__27948__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__27948__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__27948__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__27948__4 = function() {
        var G__27949__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__27949 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__27949__delegate.call(this, x, y, z, args);
        };
        G__27949.cljs$lang$maxFixedArity = 3;
        G__27949.cljs$lang$applyTo = function(arglist__27950) {
          var x = cljs.core.first(arglist__27950);
          arglist__27950 = cljs.core.next(arglist__27950);
          var y = cljs.core.first(arglist__27950);
          arglist__27950 = cljs.core.next(arglist__27950);
          var z = cljs.core.first(arglist__27950);
          var args = cljs.core.rest(arglist__27950);
          return G__27949__delegate(x, y, z, args);
        };
        G__27949.cljs$core$IFn$_invoke$arity$variadic = G__27949__delegate;
        return G__27949;
      }();
      G__27948 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__27948__0.call(this);
          case 1:
            return G__27948__1.call(this, x);
          case 2:
            return G__27948__2.call(this, x, y);
          case 3:
            return G__27948__3.call(this, x, y, z);
          default:
            return G__27948__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__27948.cljs$lang$maxFixedArity = 3;
      G__27948.cljs$lang$applyTo = G__27948__4.cljs$lang$applyTo;
      G__27948.cljs$core$IFn$_invoke$arity$0 = G__27948__0;
      G__27948.cljs$core$IFn$_invoke$arity$1 = G__27948__1;
      G__27948.cljs$core$IFn$_invoke$arity$2 = G__27948__2;
      G__27948.cljs$core$IFn$_invoke$arity$3 = G__27948__3;
      G__27948.cljs$core$IFn$_invoke$arity$variadic = G__27948__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__27948;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__27951 = null;
      var G__27951__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__27951__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__27951__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__27951__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__27951__4 = function() {
        var G__27952__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__27952 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__27952__delegate.call(this, x, y, z, args);
        };
        G__27952.cljs$lang$maxFixedArity = 3;
        G__27952.cljs$lang$applyTo = function(arglist__27953) {
          var x = cljs.core.first(arglist__27953);
          arglist__27953 = cljs.core.next(arglist__27953);
          var y = cljs.core.first(arglist__27953);
          arglist__27953 = cljs.core.next(arglist__27953);
          var z = cljs.core.first(arglist__27953);
          var args = cljs.core.rest(arglist__27953);
          return G__27952__delegate(x, y, z, args);
        };
        G__27952.cljs$core$IFn$_invoke$arity$variadic = G__27952__delegate;
        return G__27952;
      }();
      G__27951 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__27951__0.call(this);
          case 1:
            return G__27951__1.call(this, x);
          case 2:
            return G__27951__2.call(this, x, y);
          case 3:
            return G__27951__3.call(this, x, y, z);
          default:
            return G__27951__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__27951.cljs$lang$maxFixedArity = 3;
      G__27951.cljs$lang$applyTo = G__27951__4.cljs$lang$applyTo;
      G__27951.cljs$core$IFn$_invoke$arity$0 = G__27951__0;
      G__27951.cljs$core$IFn$_invoke$arity$1 = G__27951__1;
      G__27951.cljs$core$IFn$_invoke$arity$2 = G__27951__2;
      G__27951.cljs$core$IFn$_invoke$arity$3 = G__27951__3;
      G__27951.cljs$core$IFn$_invoke$arity$variadic = G__27951__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__27951;
    }();
  };
  var juxt__4 = function() {
    var G__27954__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function(fs__$1) {
        return function() {
          var G__27955 = null;
          var G__27955__0 = function() {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__27935_SHARP_, p2__27936_SHARP_) {
                return cljs.core.conj.call(null, p1__27935_SHARP_, p2__27936_SHARP_.call(null));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__27955__1 = function(x) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__27937_SHARP_, p2__27938_SHARP_) {
                return cljs.core.conj.call(null, p1__27937_SHARP_, p2__27938_SHARP_.call(null, x));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__27955__2 = function(x, y) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__27939_SHARP_, p2__27940_SHARP_) {
                return cljs.core.conj.call(null, p1__27939_SHARP_, p2__27940_SHARP_.call(null, x, y));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__27955__3 = function(x, y, z) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__27941_SHARP_, p2__27942_SHARP_) {
                return cljs.core.conj.call(null, p1__27941_SHARP_, p2__27942_SHARP_.call(null, x, y, z));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__27955__4 = function() {
            var G__27956__delegate = function(x, y, z, args) {
              return cljs.core.reduce.call(null, function(fs__$1) {
                return function(p1__27943_SHARP_, p2__27944_SHARP_) {
                  return cljs.core.conj.call(null, p1__27943_SHARP_, cljs.core.apply.call(null, p2__27944_SHARP_, x, y, z, args));
                };
              }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
            };
            var G__27956 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__27956__delegate.call(this, x, y, z, args);
            };
            G__27956.cljs$lang$maxFixedArity = 3;
            G__27956.cljs$lang$applyTo = function(arglist__27957) {
              var x = cljs.core.first(arglist__27957);
              arglist__27957 = cljs.core.next(arglist__27957);
              var y = cljs.core.first(arglist__27957);
              arglist__27957 = cljs.core.next(arglist__27957);
              var z = cljs.core.first(arglist__27957);
              var args = cljs.core.rest(arglist__27957);
              return G__27956__delegate(x, y, z, args);
            };
            G__27956.cljs$core$IFn$_invoke$arity$variadic = G__27956__delegate;
            return G__27956;
          }();
          G__27955 = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return G__27955__0.call(this);
              case 1:
                return G__27955__1.call(this, x);
              case 2:
                return G__27955__2.call(this, x, y);
              case 3:
                return G__27955__3.call(this, x, y, z);
              default:
                return G__27955__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__27955.cljs$lang$maxFixedArity = 3;
          G__27955.cljs$lang$applyTo = G__27955__4.cljs$lang$applyTo;
          G__27955.cljs$core$IFn$_invoke$arity$0 = G__27955__0;
          G__27955.cljs$core$IFn$_invoke$arity$1 = G__27955__1;
          G__27955.cljs$core$IFn$_invoke$arity$2 = G__27955__2;
          G__27955.cljs$core$IFn$_invoke$arity$3 = G__27955__3;
          G__27955.cljs$core$IFn$_invoke$arity$variadic = G__27955__4.cljs$core$IFn$_invoke$arity$variadic;
          return G__27955;
        }();
      }(fs__$1);
    };
    var G__27954 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__27954__delegate.call(this, f, g, h, fs);
    };
    G__27954.cljs$lang$maxFixedArity = 3;
    G__27954.cljs$lang$applyTo = function(arglist__27958) {
      var f = cljs.core.first(arglist__27958);
      arglist__27958 = cljs.core.next(arglist__27958);
      var g = cljs.core.first(arglist__27958);
      arglist__27958 = cljs.core.next(arglist__27958);
      var h = cljs.core.first(arglist__27958);
      var fs = cljs.core.rest(arglist__27958);
      return G__27954__delegate(f, g, h, fs);
    };
    G__27954.cljs$core$IFn$_invoke$arity$variadic = G__27954__delegate;
    return G__27954;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__27959 = cljs.core.next.call(null, coll);
        coll = G__27959;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__27960 = n - 1;
        var G__27961 = cljs.core.next.call(null, coll);
        n = G__27960;
        coll = G__27961;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
      if (cljs.core.count.call(null, matches) === 1) {
        return cljs.core.first.call(null, matches);
      } else {
        return cljs.core.vec.call(null, matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count.call(null, matches) === 1) {
        return cljs.core.first.call(null, matches);
      } else {
        return cljs.core.vec.call(null, matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__27963 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
    var _ = cljs.core.nth.call(null, vec__27963, 0, null);
    var flags = cljs.core.nth.call(null, vec__27963, 1, null);
    var pattern = cljs.core.nth.call(null, vec__27963, 2, null);
    return new RegExp(pattern, flags);
  }
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_27965 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_27966__$1 = cljs.core.next.call(null, coll);
      var n_27967 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
      while (true) {
        if (coll_27966__$1 && (n_27967 == null || !(n_27967 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_27966__$1), writer, opts);
          var G__27968 = cljs.core.next.call(null, coll_27966__$1);
          var G__27969 = n_27967 - 1;
          coll_27966__$1 = G__27968;
          n_27967 = G__27969;
          continue;
        } else {
          if (cljs.core.seq.call(null, coll_27966__$1) && n_27967 === 0) {
            cljs.core._write.call(null, writer, sep);
            cljs.core._write.call(null, writer, "...");
          } else {
          }
        }
        break;
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_27965;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__27974 = cljs.core.seq.call(null, ss);
    var chunk__27975 = null;
    var count__27976 = 0;
    var i__27977 = 0;
    while (true) {
      if (i__27977 < count__27976) {
        var s = cljs.core._nth.call(null, chunk__27975, i__27977);
        cljs.core._write.call(null, writer, s);
        var G__27978 = seq__27974;
        var G__27979 = chunk__27975;
        var G__27980 = count__27976;
        var G__27981 = i__27977 + 1;
        seq__27974 = G__27978;
        chunk__27975 = G__27979;
        count__27976 = G__27980;
        i__27977 = G__27981;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__27974);
        if (temp__4126__auto__) {
          var seq__27974__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__27974__$1)) {
            var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__27974__$1);
            var G__27982 = cljs.core.chunk_rest.call(null, seq__27974__$1);
            var G__27983 = c__4410__auto__;
            var G__27984 = cljs.core.count.call(null, c__4410__auto__);
            var G__27985 = 0;
            seq__27974 = G__27982;
            chunk__27975 = G__27983;
            count__27976 = G__27984;
            i__27977 = G__27985;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__27974__$1);
            cljs.core._write.call(null, writer, s);
            var G__27986 = cljs.core.next.call(null, seq__27974__$1);
            var G__27987 = null;
            var G__27988 = 0;
            var G__27989 = 0;
            seq__27974 = G__27986;
            chunk__27975 = G__27987;
            count__27976 = G__27988;
            i__27977 = G__27989;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__27990) {
    var writer = cljs.core.first(arglist__27990);
    var ss = cljs.core.rest(arglist__27990);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj27992 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj27992;
}();
cljs.core.quote_string = function quote_string(s) {
  return'"' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })) + '"';
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (cljs.core.truth_(function() {
        var and__3628__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
        if (cljs.core.truth_(and__3628__auto__)) {
          var and__3628__auto____$1 = function() {
            var G__27998 = obj;
            if (G__27998) {
              var bit__4304__auto__ = G__27998.cljs$lang$protocol_mask$partition0$ & 131072;
              if (bit__4304__auto__ || G__27998.cljs$core$IMeta$) {
                return true;
              } else {
                if (!G__27998.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__27998);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__27998);
            }
          }();
          if (and__3628__auto____$1) {
            return cljs.core.meta.call(null, obj);
          } else {
            return and__3628__auto____$1;
          }
        } else {
          return and__3628__auto__;
        }
      }())) {
        cljs.core._write.call(null, writer, "^");
        pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
        cljs.core._write.call(null, writer, " ");
      } else {
      }
      if (obj == null) {
        return cljs.core._write.call(null, writer, "nil");
      } else {
        if (obj.cljs$lang$type) {
          return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
        } else {
          if (function() {
            var G__27999 = obj;
            if (G__27999) {
              var bit__4297__auto__ = G__27999.cljs$lang$protocol_mask$partition0$ & 2147483648;
              if (bit__4297__auto__ || G__27999.cljs$core$IPrintWithWriter$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._pr_writer.call(null, obj, writer, opts);
          } else {
            if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
              return cljs.core._write.call(null, writer, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj));
            } else {
              if (cljs.core.object_QMARK_.call(null, obj)) {
                cljs.core._write.call(null, writer, "#js ");
                return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
              } else {
                if (obj instanceof Array) {
                  return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                } else {
                  if (goog.isString(obj)) {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                    } else {
                      return cljs.core._write.call(null, writer, obj);
                    }
                  } else {
                    if (cljs.core.fn_QMARK_.call(null, obj)) {
                      return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                    } else {
                      if (obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n);
                          while (true) {
                            if (cljs.core.count.call(null, ns) < len) {
                              var G__28001 = "0" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns);
                              ns = G__28001;
                              continue;
                            } else {
                              return ns;
                            }
                            break;
                          }
                        };
                        return cljs.core.write_all.call(null, writer, '#inst "', "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj.getUTCFullYear()), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                      } else {
                        if (cljs.core.regexp_QMARK_.call(null, obj)) {
                          return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                        } else {
                          if (function() {
                            var G__28000 = obj;
                            if (G__28000) {
                              var bit__4304__auto__ = G__28000.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if (bit__4304__auto__ || G__28000.cljs$core$IPrintWithWriter$) {
                                return true;
                              } else {
                                if (!G__28000.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__28000);
                                } else {
                                  return false;
                                }
                              }
                            } else {
                              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__28000);
                            }
                          }()) {
                            return cljs.core._pr_writer.call(null, obj, writer, opts);
                          } else {
                            return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__28006 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__28007 = null;
  var count__28008 = 0;
  var i__28009 = 0;
  while (true) {
    if (i__28009 < count__28008) {
      var obj = cljs.core._nth.call(null, chunk__28007, i__28009);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__28010 = seq__28006;
      var G__28011 = chunk__28007;
      var G__28012 = count__28008;
      var G__28013 = i__28009 + 1;
      seq__28006 = G__28010;
      chunk__28007 = G__28011;
      count__28008 = G__28012;
      i__28009 = G__28013;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__28006);
      if (temp__4126__auto__) {
        var seq__28006__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__28006__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__28006__$1);
          var G__28014 = cljs.core.chunk_rest.call(null, seq__28006__$1);
          var G__28015 = c__4410__auto__;
          var G__28016 = cljs.core.count.call(null, c__4410__auto__);
          var G__28017 = 0;
          seq__28006 = G__28014;
          chunk__28007 = G__28015;
          count__28008 = G__28016;
          i__28009 = G__28017;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__28006__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__28018 = cljs.core.next.call(null, seq__28006__$1);
          var G__28019 = null;
          var G__28020 = 0;
          var G__28021 = 0;
          seq__28006 = G__28018;
          chunk__28007 = G__28019;
          count__28008 = G__28020;
          i__28009 = G__28021;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_sb_with_opts.call(null, objs, opts));
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__28022) {
    var objs = cljs.core.seq(arglist__28022);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__28023) {
    var objs = cljs.core.seq(arglist__28023);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__28024) {
    var objs = cljs.core.seq(arglist__28024);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__28025) {
    var objs = cljs.core.seq(arglist__28025);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__28026) {
    var objs = cljs.core.seq(arglist__28026);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__28027) {
    var objs = cljs.core.seq(arglist__28027);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__28028) {
    var objs = cljs.core.seq(arglist__28028);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__28029) {
    var objs = cljs.core.seq(arglist__28029);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, a__$1.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__28030) {
    var iref = cljs.core.first(arglist__28030);
    arglist__28030 = cljs.core.next(arglist__28030);
    var f = cljs.core.first(arglist__28030);
    var args = cljs.core.rest(arglist__28030);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix_string) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc)));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not.call(null, self__.f);
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = self__.f.call(null);
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.__GT_Delay = function __GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.preserving_reduced = function preserving_reduced(rf) {
  return function(p1__28031_SHARP_, p2__28032_SHARP_) {
    var ret = rf.call(null, p1__28031_SHARP_, p2__28032_SHARP_);
    if (cljs.core.reduced_QMARK_.call(null, ret)) {
      return cljs.core.reduced.call(null, ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cat(rf) {
  var rf1 = cljs.core.preserving_reduced.call(null, rf);
  return function(rf1) {
    return function() {
      var G__28033 = null;
      var G__28033__0 = function() {
        return rf.call(null);
      };
      var G__28033__1 = function(result) {
        return rf.call(null, result);
      };
      var G__28033__2 = function(result, input) {
        return cljs.core.reduce.call(null, rf1, result, input);
      };
      G__28033 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__28033__0.call(this);
          case 1:
            return G__28033__1.call(this, result);
          case 2:
            return G__28033__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__28033.cljs$core$IFn$_invoke$arity$0 = G__28033__0;
      G__28033.cljs$core$IFn$_invoke$arity$1 = G__28033__1;
      G__28033.cljs$core$IFn$_invoke$arity$2 = G__28033__2;
      return G__28033;
    }();
  }(rf1);
};
cljs.core.dedupe = function() {
  var dedupe = null;
  var dedupe__0 = function() {
    return function(rf) {
      var pa = cljs.core.atom.call(null, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(pa) {
        return function() {
          var G__28034 = null;
          var G__28034__0 = function() {
            return rf.call(null);
          };
          var G__28034__1 = function(result) {
            return rf.call(null, result);
          };
          var G__28034__2 = function(result, input) {
            var prior = cljs.core.deref.call(null, pa);
            cljs.core.reset_BANG_.call(null, pa, input);
            if (cljs.core._EQ_.call(null, prior, input)) {
              return result;
            } else {
              return rf.call(null, result, input);
            }
          };
          G__28034 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__28034__0.call(this);
              case 1:
                return G__28034__1.call(this, result);
              case 2:
                return G__28034__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__28034.cljs$core$IFn$_invoke$arity$0 = G__28034__0;
          G__28034.cljs$core$IFn$_invoke$arity$1 = G__28034__1;
          G__28034.cljs$core$IFn$_invoke$arity$2 = G__28034__2;
          return G__28034;
        }();
      }(pa);
    };
  };
  var dedupe__1 = function(coll) {
    return cljs.core.sequence.call(null, dedupe.call(null), coll);
  };
  dedupe = function(coll) {
    switch(arguments.length) {
      case 0:
        return dedupe__0.call(this);
      case 1:
        return dedupe__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dedupe.cljs$core$IFn$_invoke$arity$0 = dedupe__0;
  dedupe.cljs$core$IFn$_invoke$arity$1 = dedupe__1;
  return dedupe;
}();
cljs.core.random_sample = function() {
  var random_sample = null;
  var random_sample__1 = function(prob) {
    return cljs.core.filter.call(null, function(_) {
      return cljs.core.rand.call(null) < prob;
    });
  };
  var random_sample__2 = function(prob, coll) {
    return cljs.core.filter.call(null, function(_) {
      return cljs.core.rand.call(null) < prob;
    }, coll);
  };
  random_sample = function(prob, coll) {
    switch(arguments.length) {
      case 1:
        return random_sample__1.call(this, prob);
      case 2:
        return random_sample__2.call(this, prob, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_sample.cljs$core$IFn$_invoke$arity$1 = random_sample__1;
  random_sample.cljs$core$IFn$_invoke$arity$2 = random_sample__2;
  return random_sample;
}();
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/Eduction");
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.call(null, self__.xform, f, init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq.call(null, cljs.core.sequence.call(null, self__.xform, self__.coll));
};
cljs.core.__GT_Eduction = function __GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.eduction = function eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.run_BANG_ = function run_BANG_(proc, coll) {
  return cljs.core.reduce.call(null, function(p1__28036_SHARP_, p2__28035_SHARP_) {
    return proc.call(null, p2__28035_SHARP_);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
  var obj28038 = {};
  return obj28038;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3628__auto__ = x;
    if (and__3628__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4277__auto__ = x == null ? null : x;
    return function() {
      var or__3640__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3628__auto__ = x;
    if (and__3628__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4277__auto__ = x == null ? null : x;
    return function() {
      var or__3640__auto__ = cljs.core._key__GT_js[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__28040 = k;
    if (G__28040) {
      var bit__4304__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3640__auto__ = bit__4304__auto__;
        if (cljs.core.truth_(or__3640__auto__)) {
          return or__3640__auto__;
        } else {
          return G__28040.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__28040.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__28040);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__28040);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__28054 = x;
      if (G__28054) {
        var bit__4304__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3640__auto__ = bit__4304__auto__;
          if (cljs.core.truth_(or__3640__auto__)) {
            return or__3640__auto__;
          } else {
            return G__28054.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__28054.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__28054);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__28054);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x);
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj28056 = {};
              return obj28056;
            }();
            var seq__28057_28067 = cljs.core.seq.call(null, x);
            var chunk__28058_28068 = null;
            var count__28059_28069 = 0;
            var i__28060_28070 = 0;
            while (true) {
              if (i__28060_28070 < count__28059_28069) {
                var vec__28061_28071 = cljs.core._nth.call(null, chunk__28058_28068, i__28060_28070);
                var k_28072 = cljs.core.nth.call(null, vec__28061_28071, 0, null);
                var v_28073 = cljs.core.nth.call(null, vec__28061_28071, 1, null);
                m[cljs.core.key__GT_js.call(null, k_28072)] = clj__GT_js.call(null, v_28073);
                var G__28074 = seq__28057_28067;
                var G__28075 = chunk__28058_28068;
                var G__28076 = count__28059_28069;
                var G__28077 = i__28060_28070 + 1;
                seq__28057_28067 = G__28074;
                chunk__28058_28068 = G__28075;
                count__28059_28069 = G__28076;
                i__28060_28070 = G__28077;
                continue;
              } else {
                var temp__4126__auto___28078 = cljs.core.seq.call(null, seq__28057_28067);
                if (temp__4126__auto___28078) {
                  var seq__28057_28079__$1 = temp__4126__auto___28078;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__28057_28079__$1)) {
                    var c__4410__auto___28080 = cljs.core.chunk_first.call(null, seq__28057_28079__$1);
                    var G__28081 = cljs.core.chunk_rest.call(null, seq__28057_28079__$1);
                    var G__28082 = c__4410__auto___28080;
                    var G__28083 = cljs.core.count.call(null, c__4410__auto___28080);
                    var G__28084 = 0;
                    seq__28057_28067 = G__28081;
                    chunk__28058_28068 = G__28082;
                    count__28059_28069 = G__28083;
                    i__28060_28070 = G__28084;
                    continue;
                  } else {
                    var vec__28062_28085 = cljs.core.first.call(null, seq__28057_28079__$1);
                    var k_28086 = cljs.core.nth.call(null, vec__28062_28085, 0, null);
                    var v_28087 = cljs.core.nth.call(null, vec__28062_28085, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_28086)] = clj__GT_js.call(null, v_28087);
                    var G__28088 = cljs.core.next.call(null, seq__28057_28079__$1);
                    var G__28089 = null;
                    var G__28090 = 0;
                    var G__28091 = 0;
                    seq__28057_28067 = G__28088;
                    chunk__28058_28068 = G__28089;
                    count__28059_28069 = G__28090;
                    i__28060_28070 = G__28091;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__28063_28092 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__28064_28093 = null;
              var count__28065_28094 = 0;
              var i__28066_28095 = 0;
              while (true) {
                if (i__28066_28095 < count__28065_28094) {
                  var x_28096__$1 = cljs.core._nth.call(null, chunk__28064_28093, i__28066_28095);
                  arr.push(x_28096__$1);
                  var G__28097 = seq__28063_28092;
                  var G__28098 = chunk__28064_28093;
                  var G__28099 = count__28065_28094;
                  var G__28100 = i__28066_28095 + 1;
                  seq__28063_28092 = G__28097;
                  chunk__28064_28093 = G__28098;
                  count__28065_28094 = G__28099;
                  i__28066_28095 = G__28100;
                  continue;
                } else {
                  var temp__4126__auto___28101 = cljs.core.seq.call(null, seq__28063_28092);
                  if (temp__4126__auto___28101) {
                    var seq__28063_28102__$1 = temp__4126__auto___28101;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__28063_28102__$1)) {
                      var c__4410__auto___28103 = cljs.core.chunk_first.call(null, seq__28063_28102__$1);
                      var G__28104 = cljs.core.chunk_rest.call(null, seq__28063_28102__$1);
                      var G__28105 = c__4410__auto___28103;
                      var G__28106 = cljs.core.count.call(null, c__4410__auto___28103);
                      var G__28107 = 0;
                      seq__28063_28092 = G__28104;
                      chunk__28064_28093 = G__28105;
                      count__28065_28094 = G__28106;
                      i__28066_28095 = G__28107;
                      continue;
                    } else {
                      var x_28108__$1 = cljs.core.first.call(null, seq__28063_28102__$1);
                      arr.push(x_28108__$1);
                      var G__28109 = cljs.core.next.call(null, seq__28063_28102__$1);
                      var G__28110 = null;
                      var G__28111 = 0;
                      var G__28112 = 0;
                      seq__28063_28092 = G__28109;
                      chunk__28064_28093 = G__28110;
                      count__28065_28094 = G__28111;
                      i__28066_28095 = G__28112;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj28114 = {};
  return obj28114;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3628__auto__ = x;
    if (and__3628__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4277__auto__ = x == null ? null : x;
    return function() {
      var or__3640__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__28135__delegate = function(x, opts) {
      if (function() {
        var G__28125 = x;
        if (G__28125) {
          var bit__4304__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3640__auto__ = bit__4304__auto__;
            if (cljs.core.truth_(or__3640__auto__)) {
              return or__3640__auto__;
            } else {
              return G__28125.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__28125.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__28125);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__28125);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__28126 = opts;
          var map__28126__$1 = cljs.core.seq_QMARK_.call(null, map__28126) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28126) : map__28126;
          var keywordize_keys = cljs.core.get.call(null, map__28126__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__28126, map__28126__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__4379__auto__ = function(map__28126, map__28126__$1, keywordize_keys, keyfn) {
                          return function iter__28131(s__28132) {
                            return new cljs.core.LazySeq(null, function(map__28126, map__28126__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__28132__$1 = s__28132;
                                while (true) {
                                  var temp__4126__auto__ = cljs.core.seq.call(null, s__28132__$1);
                                  if (temp__4126__auto__) {
                                    var s__28132__$2 = temp__4126__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__28132__$2)) {
                                      var c__4377__auto__ = cljs.core.chunk_first.call(null, s__28132__$2);
                                      var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                                      var b__28134 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                                      if (function() {
                                        var i__28133 = 0;
                                        while (true) {
                                          if (i__28133 < size__4378__auto__) {
                                            var k = cljs.core._nth.call(null, c__4377__auto__, i__28133);
                                            cljs.core.chunk_append.call(null, b__28134, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__28136 = i__28133 + 1;
                                            i__28133 = G__28136;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__28134), iter__28131.call(null, cljs.core.chunk_rest.call(null, s__28132__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__28134), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__28132__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__28131.call(null, cljs.core.rest.call(null, s__28132__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__28126, map__28126__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__28126, map__28126__$1, keywordize_keys, keyfn);
                        return iter__4379__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      return x__$1;
                    }
                  }
                }
              }
            };
          }(map__28126, map__28126__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__28135 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__28135__delegate.call(this, x, opts);
    };
    G__28135.cljs$lang$maxFixedArity = 1;
    G__28135.cljs$lang$applyTo = function(arglist__28137) {
      var x = cljs.core.first(arglist__28137);
      var opts = cljs.core.rest(arglist__28137);
      return G__28135__delegate(x, opts);
    };
    G__28135.cljs$core$IFn$_invoke$arity$variadic = G__28135__delegate;
    return G__28135;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function() {
      var G__28138__delegate = function(args) {
        var v = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.call(null, f, args);
          cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__28138 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__28138__delegate.call(this, args);
      };
      G__28138.cljs$lang$maxFixedArity = 0;
      G__28138.cljs$lang$applyTo = function(arglist__28139) {
        var args = cljs.core.seq(arglist__28139);
        return G__28138__delegate(args);
      };
      G__28138.cljs$core$IFn$_invoke$arity$variadic = G__28138__delegate;
      return G__28138;
    }();
  }(mem);
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__28140 = ret;
        f = G__28140;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__28141__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__28141 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__28141__delegate.call(this, f, args);
    };
    G__28141.cljs$lang$maxFixedArity = 1;
    G__28141.cljs$lang$applyTo = function(arglist__28142) {
      var f = cljs.core.first(arglist__28142);
      var args = cljs.core.rest(arglist__28142);
      return G__28141__delegate(f, args);
    };
    G__28141.cljs$core$IFn$_invoke$arity$variadic = G__28141__delegate;
    return G__28141;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc_BANG_.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__28143) {
    var f = cljs.core.first(arglist__28143);
    var args = cljs.core.rest(arglist__28143);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3640__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__3640__auto__) {
      return or__3640__auto__;
    } else {
      var or__3640__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3640__auto____$1) {
        return or__3640__auto____$1;
      } else {
        var and__3628__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__3628__auto__) {
          var and__3628__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__3628__auto____$1) {
            var and__3628__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__3628__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__28144 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__28145 = i + 1;
                  ret = G__28144;
                  i = G__28145;
                  continue;
                }
                break;
              }
            } else {
              return and__3628__auto____$2;
            }
          } else {
            return and__3628__auto____$1;
          }
        } else {
          return and__3628__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null)))));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null)))));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__3640__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "already has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "as ancestor");
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error("Cyclic derivation:" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "as ancestor");
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3640__auto__)) {
      return or__3640__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__28146_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__28146_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__28146_SHARP_), cljs.core.second.call(null, p1__28146_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(parentMap, childsParents, newParents, deriv_seq) {
        return function(p1__28147_SHARP_, p2__28148_SHARP_) {
          return cljs.core.apply.call(null, cljs.core.derive, p1__28147_SHARP_, p2__28148_SHARP_);
        };
      }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3640__auto__ = cljs.core.truth_(function() {
    var and__3628__auto__ = xprefs;
    if (cljs.core.truth_(and__3628__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__3628__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3640__auto__)) {
    return or__3640__auto__;
  } else {
    var or__3640__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__28149 = cljs.core.rest.call(null, ps);
          ps = G__28149;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3640__auto____$1)) {
      return or__3640__auto____$1;
    } else {
      var or__3640__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__28150 = cljs.core.rest.call(null, ps);
            ps = G__28150;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3640__auto____$2)) {
        return or__3640__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3640__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__3640__auto__)) {
    return or__3640__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__28153) {
    var vec__28154 = p__28153;
    var k = cljs.core.nth.call(null, vec__28154, 0, null);
    var _ = cljs.core.nth.call(null, vec__28154, 1, null);
    var e = vec__28154;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3640__auto__ = be == null;
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error("Multiple methods in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' match dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val) + " -\x3e " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(k) + " and " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, be2)) + ", and neither is preferred");
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj28156 = {};
  return obj28156;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3628__auto__ = mf;
    if (and__3628__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4277__auto__ = mf == null ? null : mf;
    return function() {
      var or__3640__auto__ = cljs.core._reset[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._reset["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3628__auto__ = mf;
    if (and__3628__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4277__auto__ = mf == null ? null : mf;
    return function() {
      var or__3640__auto__ = cljs.core._add_method[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._add_method["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3628__auto__ = mf;
    if (and__3628__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4277__auto__ = mf == null ? null : mf;
    return function() {
      var or__3640__auto__ = cljs.core._remove_method[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._remove_method["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3628__auto__ = mf;
    if (and__3628__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4277__auto__ = mf == null ? null : mf;
    return function() {
      var or__3640__auto__ = cljs.core._prefer_method[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3628__auto__ = mf;
    if (and__3628__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4277__auto__ = mf == null ? null : mf;
    return function() {
      var or__3640__auto__ = cljs.core._get_method[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._get_method["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3628__auto__ = mf;
    if (and__3628__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4277__auto__ = mf == null ? null : mf;
    return function() {
      var or__3640__auto__ = cljs.core._methods[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._methods["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3628__auto__ = mf;
    if (and__3628__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4277__auto__ = mf == null ? null : mf;
    return function() {
      var or__3640__auto__ = cljs.core._prefers[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._prefers["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function throw_no_method_error(name, dispatch_val) {
  throw new Error("No method in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' for dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4124__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var target_fn = temp__4124__auto__;
    return target_fn;
  } else {
    var temp__4124__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var target_fn = temp__4124__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error("Preference conflict in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.name) + "': " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_y) + " is already preferred to " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_x));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__28158 = null;
  var G__28158__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a);
  };
  var G__28158__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b);
  };
  var G__28158__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c);
  };
  var G__28158__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d);
  };
  var G__28158__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e);
  };
  var G__28158__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f);
  };
  var G__28158__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g);
  };
  var G__28158__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__28158__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__28158__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__28158__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__28158__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__28158__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__28158__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__28158__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__28158__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__28158__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__28158__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__28158__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__28158__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__28158__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__28158 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 2:
        return G__28158__2.call(this, self__, a);
      case 3:
        return G__28158__3.call(this, self__, a, b);
      case 4:
        return G__28158__4.call(this, self__, a, b, c);
      case 5:
        return G__28158__5.call(this, self__, a, b, c, d);
      case 6:
        return G__28158__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__28158__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__28158__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__28158__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__28158__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__28158__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__28158__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__28158__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__28158__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__28158__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__28158__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__28158__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__28158__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__28158__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__28158__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__28158__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__28158__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__28158.cljs$core$IFn$_invoke$arity$2 = G__28158__2;
  G__28158.cljs$core$IFn$_invoke$arity$3 = G__28158__3;
  G__28158.cljs$core$IFn$_invoke$arity$4 = G__28158__4;
  G__28158.cljs$core$IFn$_invoke$arity$5 = G__28158__5;
  G__28158.cljs$core$IFn$_invoke$arity$6 = G__28158__6;
  G__28158.cljs$core$IFn$_invoke$arity$7 = G__28158__7;
  G__28158.cljs$core$IFn$_invoke$arity$8 = G__28158__8;
  G__28158.cljs$core$IFn$_invoke$arity$9 = G__28158__9;
  G__28158.cljs$core$IFn$_invoke$arity$10 = G__28158__10;
  G__28158.cljs$core$IFn$_invoke$arity$11 = G__28158__11;
  G__28158.cljs$core$IFn$_invoke$arity$12 = G__28158__12;
  G__28158.cljs$core$IFn$_invoke$arity$13 = G__28158__13;
  G__28158.cljs$core$IFn$_invoke$arity$14 = G__28158__14;
  G__28158.cljs$core$IFn$_invoke$arity$15 = G__28158__15;
  G__28158.cljs$core$IFn$_invoke$arity$16 = G__28158__16;
  G__28158.cljs$core$IFn$_invoke$arity$17 = G__28158__17;
  G__28158.cljs$core$IFn$_invoke$arity$18 = G__28158__18;
  G__28158.cljs$core$IFn$_invoke$arity$19 = G__28158__19;
  G__28158.cljs$core$IFn$_invoke$arity$20 = G__28158__20;
  G__28158.cljs$core$IFn$_invoke$arity$21 = G__28158__21;
  G__28158.cljs$core$IFn$_invoke$arity$22 = G__28158__22;
  return G__28158;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args28157) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args28157)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, '#uuid "' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.uuid) + '"');
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__4220__auto__, writer__4221__auto__, opts__4222__auto__) {
  return cljs.core._write.call(null, writer__4221__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, 
  "letfn*", "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, 
  null), null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
goog.provide("cljs.looperscript.interp_rhythms");
goog.require("cljs.core");
cljs.looperscript.interp_rhythms.cumulative = cljs.core.memoize.call(null, function(v) {
  return cljs.core.reductions.call(null, cljs.core._PLUS_, 0, v);
});
cljs.looperscript.interp_rhythms.blend = function blend(a, b, percent) {
  return percent * b + (1 - percent) * a;
};
cljs.looperscript.interp_rhythms.whole_QMARK_ = function whole_QMARK_(n) {
  return cljs.core.mod.call(null, n, 1) === 0;
};
cljs.looperscript.interp_rhythms.ints_nth = cljs.core.memoize.call(null, function(rhythm, n) {
  var cums = cljs.looperscript.interp_rhythms.cumulative.call(null, rhythm);
  var rhythm_len = cljs.core.last.call(null, cums);
  var cnt = cljs.core.count.call(null, rhythm);
  var chorus = n / cnt | 0;
  var chorus_start = rhythm_len * chorus;
  var pos_in_chorus = cljs.core.mod.call(null, n, cnt);
  return cljs.core.nth.call(null, cums, pos_in_chorus) + chorus_start;
});
cljs.looperscript.interp_rhythms.rhythms_interp = function rhythms_interp(rs, n) {
  var r = cljs.core.last.call(null, rs);
  var vec__26652 = !cljs.core.map_QMARK_.call(null, r) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [r, 0], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.get.call(null, r, new cljs.core.Keyword(null, "r", "r", -471384190)), cljs.core.get.call(null, r, new cljs.core.Keyword(null, "offset", "offset", 296498311))], null);
  var r__$1 = cljs.core.nth.call(null, vec__26652, 0, null);
  var offset = cljs.core.nth.call(null, vec__26652, 1, null);
  var n__$1 = n + offset;
  var rem_rs = cljs.core.drop_last.call(null, rs);
  var whole = cljs.looperscript.interp_rhythms.whole_QMARK_.call(null, n__$1);
  var res = cljs.core._EQ_.call(null, cljs.core.count.call(null, rs), 1) ? whole ? cljs.looperscript.interp_rhythms.ints_nth.call(null, r__$1, n__$1) : cljs.looperscript.interp_rhythms.blend.call(null, cljs.looperscript.interp_rhythms.ints_nth.call(null, r__$1, n__$1 | 0), cljs.looperscript.interp_rhythms.ints_nth.call(null, r__$1, (n__$1 | 0) + 1), cljs.core.mod.call(null, n__$1, 1)) : whole ? rhythms_interp.call(null, rem_rs, cljs.looperscript.interp_rhythms.ints_nth.call(null, r__$1, n__$1)) : 
  cljs.looperscript.interp_rhythms.blend.call(null, rhythms_interp.call(null, rem_rs, cljs.looperscript.interp_rhythms.ints_nth.call(null, r__$1, n__$1 | 0)), rhythms_interp.call(null, rem_rs, cljs.looperscript.interp_rhythms.ints_nth.call(null, r__$1, (n__$1 | 0) + 1)), cljs.core.mod.call(null, n__$1, 1));
  return res;
};
cljs.looperscript.interp_rhythms.upper_bound = function upper_bound(f, n) {
  var i = 1;
  while (true) {
    if (f.call(null, i) > n) {
      return i;
    } else {
      var G__26653 = i * 2;
      i = G__26653;
      continue;
    }
    break;
  }
};
cljs.looperscript.interp_rhythms.binary_search = function binary_search(f, n) {
  var l_bound = 0;
  var u_bound = cljs.looperscript.interp_rhythms.upper_bound.call(null, f, n);
  while (true) {
    if (1 >= u_bound - l_bound) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [l_bound, u_bound], null);
    } else {
      var new_i = cljs.looperscript.interp_rhythms.blend.call(null, l_bound, u_bound, .5);
      var new_n = f.call(null, new_i);
      var vec__26655 = new_n > n ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [l_bound, new_i], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new_i, u_bound], null);
      var l_bound__$1 = cljs.core.nth.call(null, vec__26655, 0, null);
      var u_bound__$1 = cljs.core.nth.call(null, vec__26655, 1, null);
      var G__26656 = l_bound__$1;
      var G__26657 = u_bound__$1;
      l_bound = G__26656;
      u_bound = G__26657;
      continue;
    }
    break;
  }
};
cljs.looperscript.interp_rhythms.pos_in_layered_rhythm = function pos_in_layered_rhythm(rs, t) {
  return cljs.looperscript.interp_rhythms.binary_search.call(null, cljs.core.partial.call(null, cljs.looperscript.interp_rhythms.rhythms_interp, rs), t);
};
cljs.looperscript.interp_rhythms.next_hit_of_layered_rhythm = function next_hit_of_layered_rhythm(rs, t) {
  return cljs.looperscript.interp_rhythms.rhythms_interp.call(null, rs, cljs.core.second.call(null, cljs.looperscript.interp_rhythms.pos_in_layered_rhythm.call(null, rs, t)));
};
goog.provide("cljs.looperscript.vector_fns");
goog.require("cljs.core");
goog.require("cljs.looperscript.interp_rhythms");
goog.require("cljs.looperscript.interp_rhythms");
cljs.looperscript.vector_fns.log = function() {
  var log__delegate = function(args) {
    return console.log(cljs.core.apply.call(null, cljs.core.str, args));
  };
  var log = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return log__delegate.call(this, args);
  };
  log.cljs$lang$maxFixedArity = 0;
  log.cljs$lang$applyTo = function(arglist__26903) {
    var args = cljs.core.seq(arglist__26903);
    return log__delegate(args);
  };
  log.cljs$core$IFn$_invoke$arity$variadic = log__delegate;
  return log;
}();
cljs.looperscript.vector_fns.shuffle_STAR_ = function shuffle_STAR_(v) {
  return cljs.core.shuffle;
};
cljs.looperscript.vector_fns.range_STAR_ = cljs.core.range;
cljs.looperscript.vector_fns.rand_range = function rand_range(floor, ceil) {
  return cljs.core.rand.call(null) * (ceil - floor) + floor;
};
cljs.looperscript.vector_fns.rand_int_STAR_ = function() {
  var rand_int_STAR_ = null;
  var rand_int_STAR___1 = function(b) {
    return cljs.core.rand_int.call(null, b + 1);
  };
  var rand_int_STAR___2 = function(a, b) {
    return a + cljs.core.rand_int.call(null, b - a + 1);
  };
  rand_int_STAR_ = function(a, b) {
    switch(arguments.length) {
      case 1:
        return rand_int_STAR___1.call(this, a);
      case 2:
        return rand_int_STAR___2.call(this, a, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand_int_STAR_.cljs$core$IFn$_invoke$arity$1 = rand_int_STAR___1;
  rand_int_STAR_.cljs$core$IFn$_invoke$arity$2 = rand_int_STAR___2;
  return rand_int_STAR_;
}();
cljs.looperscript.vector_fns.rand_nth_STAR_ = cljs.core.rand_nth;
cljs.looperscript.vector_fns.take_STAR_ = cljs.core.take;
cljs.looperscript.vector_fns.rand_exp_range = function rand_exp_range(floor, ceil, exp) {
  return Math.pow.call(null, cljs.core.rand.call(null), exp) * (ceil - floor) + floor;
};
cljs.looperscript.vector_fns.handle_v_keyword = function handle_v_keyword(n, d) {
  return cljs.core.repeat.call(null, n, d / n);
};
cljs.looperscript.vector_fns.rand_weighted = function() {
  var rand_weighted__delegate = function(v) {
    var vec__26906 = cljs.core.apply.call(null, cljs.core.map, cljs.core.vector, cljs.core.partition.call(null, 2, v));
    var vs = cljs.core.nth.call(null, vec__26906, 0, null);
    var ws = cljs.core.nth.call(null, vec__26906, 1, null);
    var cum_ws = cljs.core.reductions.call(null, cljs.core._PLUS_, 0, ws);
    var sum = cljs.core.last.call(null, cum_ws);
    var r = cljs.core.rand.call(null) * sum;
    return cljs.core.some.call(null, function(vec__26906, vs, ws, cum_ws, sum, r) {
      return function(p1__26904_SHARP_) {
        if (cljs.core.nth.call(null, cum_ws, p1__26904_SHARP_) < r) {
          return cljs.core.nth.call(null, vs, p1__26904_SHARP_);
        } else {
          return null;
        }
      };
    }(vec__26906, vs, ws, cum_ws, sum, r), cljs.core.range.call(null, cljs.core.count.call(null, vs) - 1, -1, -1));
  };
  var rand_weighted = function(var_args) {
    var v = null;
    if (arguments.length > 0) {
      v = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return rand_weighted__delegate.call(this, v);
  };
  rand_weighted.cljs$lang$maxFixedArity = 0;
  rand_weighted.cljs$lang$applyTo = function(arglist__26907) {
    var v = cljs.core.seq(arglist__26907);
    return rand_weighted__delegate(v);
  };
  rand_weighted.cljs$core$IFn$_invoke$arity$variadic = rand_weighted__delegate;
  return rand_weighted;
}();
cljs.looperscript.vector_fns.rand_weighted_either_or = function rand_weighted_either_or(odds, a, b) {
  if (cljs.core.rand.call(null) < odds) {
    return a;
  } else {
    return b;
  }
};
cljs.looperscript.vector_fns.rand_weighted_zip = function rand_weighted_zip(vs, ws) {
  return cljs.looperscript.vector_fns.rand_weighted.call(null, cljs.core.interleave.call(null, vs, ws));
};
cljs.looperscript.vector_fns.rand_hold = function rand_hold(odds_of_change, options) {
  var current_choice = cljs.core.atom.call(null, cljs.core.fn_QMARK_.call(null, options) ? options.call(null) : cljs.core.rand_nth.call(null, options));
  return function(current_choice) {
    return function() {
      if (odds_of_change < cljs.core.rand.call(null)) {
        return cljs.core.deref.call(null, current_choice);
      } else {
        return cljs.core.reset_BANG_.call(null, current_choice, cljs.core.fn_QMARK_.call(null, options) ? options.call(null) : cljs.core.rand_nth.call(null, cljs.core.remove.call(null, function(current_choice) {
          return function(p1__26908_SHARP_) {
            return cljs.core._EQ_.call(null, cljs.core.deref.call(null, current_choice), p1__26908_SHARP_);
          };
        }(current_choice), options)));
      }
    };
  }(current_choice);
};
cljs.looperscript.vector_fns.rand_walk = function rand_walk(max_step, v) {
  var rand_int_range = function(a, b) {
    return a + cljs.core.rand_int.call(null, b - a + 1);
  };
  var max_v = cljs.core.count.call(null, v) - 1;
  var pos = cljs.core.atom.call(null, cljs.core.rand_int.call(null, cljs.core.count.call(null, v)));
  return function(rand_int_range, max_v, pos) {
    return function() {
      return cljs.core.nth.call(null, v, cljs.core.reset_BANG_.call(null, pos, rand_int_range.call(null, function() {
        var x__3947__auto__ = 0;
        var y__3948__auto__ = cljs.core.deref.call(null, pos) - max_step;
        return x__3947__auto__ > y__3948__auto__ ? x__3947__auto__ : y__3948__auto__;
      }(), function() {
        var x__3954__auto__ = max_v;
        var y__3955__auto__ = cljs.core.deref.call(null, pos) + max_step;
        return x__3954__auto__ < y__3955__auto__ ? x__3954__auto__ : y__3955__auto__;
      }())));
    };
  }(rand_int_range, max_v, pos);
};
cljs.looperscript.vector_fns.rand_walk1 = function rand_walk1(max_step, v) {
  var rand_int_range = function(a, b) {
    return a + cljs.core.rand_int.call(null, b - a + 1);
  };
  var max_v = cljs.core.count.call(null, v) - 1;
  var pos = cljs.core.atom.call(null, cljs.core.rand_int.call(null, cljs.core.count.call(null, v)));
  return function(rand_int_range, max_v, pos) {
    return function() {
      return cljs.core.nth.call(null, v, cljs.core.reset_BANG_.call(null, pos, function() {
        while (true) {
          var new_pos = rand_int_range.call(null, function() {
            var x__3947__auto__ = 0;
            var y__3948__auto__ = cljs.core.deref.call(null, pos) - max_step;
            return x__3947__auto__ > y__3948__auto__ ? x__3947__auto__ : y__3948__auto__;
          }(), function() {
            var x__3954__auto__ = max_v;
            var y__3955__auto__ = cljs.core.deref.call(null, pos) + max_step;
            return x__3954__auto__ < y__3955__auto__ ? x__3954__auto__ : y__3955__auto__;
          }());
          if (cljs.core._EQ_.call(null, new_pos, cljs.core.deref.call(null, pos))) {
            continue;
          } else {
            return new_pos;
          }
          break;
        }
      }()));
    };
  }(rand_int_range, max_v, pos);
};
cljs.looperscript.vector_fns.in$ = function in$(t, v) {
  var factor = t / cljs.core.reduce.call(null, cljs.core._PLUS_, v);
  return cljs.core.map.call(null, function(factor) {
    return function(p1__26909_SHARP_) {
      return factor * p1__26909_SHARP_;
    };
  }(factor), v);
};
cljs.looperscript.vector_fns.cycle_STAR_ = function cycle_STAR_(v) {
  var pos = cljs.core.atom.call(null, -1);
  var v_len = cljs.core.count.call(null, v);
  return function(pos, v_len) {
    return function() {
      return cljs.core.nth.call(null, v, cljs.core.swap_BANG_.call(null, pos, function(pos, v_len) {
        return function(p1__26910_SHARP_) {
          return cljs.core.mod.call(null, p1__26910_SHARP_ + 1, v_len);
        };
      }(pos, v_len)));
    };
  }(pos, v_len);
};
cljs.looperscript.vector_fns.flatten_STAR_ = function() {
  var flatten_STAR___delegate = function(args) {
    return cljs.core.flatten.call(null, args);
  };
  var flatten_STAR_ = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return flatten_STAR___delegate.call(this, args);
  };
  flatten_STAR_.cljs$lang$maxFixedArity = 0;
  flatten_STAR_.cljs$lang$applyTo = function(arglist__26911) {
    var args = cljs.core.seq(arglist__26911);
    return flatten_STAR___delegate(args);
  };
  flatten_STAR_.cljs$core$IFn$_invoke$arity$variadic = flatten_STAR___delegate;
  return flatten_STAR_;
}();
cljs.looperscript.vector_fns.nth_STAR_ = cljs.core.nth;
cljs.looperscript.vector_fns.scale_nth = function scale_nth(scale, degree) {
  return 12 * Math.floor.call(null, degree / cljs.core.count.call(null, scale)) + cljs.core.nth.call(null, scale, cljs.core.mod.call(null, degree, cljs.core.count.call(null, scale)));
};
cljs.looperscript.vector_fns.scale_pattern = function scale_pattern(scale, pattern, degrees) {
  var iter__4379__auto__ = function iter__26918(s__26919) {
    return new cljs.core.LazySeq(null, function() {
      var s__26919__$1 = s__26919;
      while (true) {
        var temp__4126__auto__ = cljs.core.seq.call(null, s__26919__$1);
        if (temp__4126__auto__) {
          var xs__4624__auto__ = temp__4126__auto__;
          var d = cljs.core.first.call(null, xs__4624__auto__);
          var iterys__4375__auto__ = function(s__26919__$1, d, xs__4624__auto__, temp__4126__auto__) {
            return function iter__26920(s__26921) {
              return new cljs.core.LazySeq(null, function(s__26919__$1, d, xs__4624__auto__, temp__4126__auto__) {
                return function() {
                  var s__26921__$1 = s__26921;
                  while (true) {
                    var temp__4126__auto____$1 = cljs.core.seq.call(null, s__26921__$1);
                    if (temp__4126__auto____$1) {
                      var s__26921__$2 = temp__4126__auto____$1;
                      if (cljs.core.chunked_seq_QMARK_.call(null, s__26921__$2)) {
                        var c__4377__auto__ = cljs.core.chunk_first.call(null, s__26921__$2);
                        var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                        var b__26923 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                        if (function() {
                          var i__26922 = 0;
                          while (true) {
                            if (i__26922 < size__4378__auto__) {
                              var p = cljs.core._nth.call(null, c__4377__auto__, i__26922);
                              cljs.core.chunk_append.call(null, b__26923, cljs.looperscript.vector_fns.scale_nth.call(null, scale, d + p));
                              var G__26924 = i__26922 + 1;
                              i__26922 = G__26924;
                              continue;
                            } else {
                              return true;
                            }
                            break;
                          }
                        }()) {
                          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__26923), iter__26920.call(null, cljs.core.chunk_rest.call(null, s__26921__$2)));
                        } else {
                          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__26923), null);
                        }
                      } else {
                        var p = cljs.core.first.call(null, s__26921__$2);
                        return cljs.core.cons.call(null, cljs.looperscript.vector_fns.scale_nth.call(null, scale, d + p), iter__26920.call(null, cljs.core.rest.call(null, s__26921__$2)));
                      }
                    } else {
                      return null;
                    }
                    break;
                  }
                };
              }(s__26919__$1, d, xs__4624__auto__, temp__4126__auto__), null, null);
            };
          }(s__26919__$1, d, xs__4624__auto__, temp__4126__auto__);
          var fs__4376__auto__ = cljs.core.seq.call(null, iterys__4375__auto__.call(null, pattern));
          if (fs__4376__auto__) {
            return cljs.core.concat.call(null, fs__4376__auto__, iter__26918.call(null, cljs.core.rest.call(null, s__26919__$1)));
          } else {
            var G__26925 = cljs.core.rest.call(null, s__26919__$1);
            s__26919__$1 = G__26925;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    }, null, null);
  };
  return iter__4379__auto__.call(null, degrees);
};
cljs.looperscript.vector_fns.transpose_scale = function transpose_scale(degree, scale) {
  return cljs.core.sort.call(null, cljs.core.map.call(null, function(p1__26926_SHARP_) {
    return cljs.core.mod.call(null, p1__26926_SHARP_ + degree, 12);
  }, scale));
};
cljs.looperscript.vector_fns.scale_range = function scale_range(floor, ceil, scale) {
  var a = (floor / 12 | 0) - 1;
  var b = ceil / 12 + 1 + 1;
  return cljs.core.filter.call(null, function(a, b) {
    return function(p1__26927_SHARP_) {
      return floor <= p1__26927_SHARP_ && p1__26927_SHARP_ <= ceil;
    };
  }(a, b), function() {
    var iter__4379__auto__ = function(a, b) {
      return function iter__26934(s__26935) {
        return new cljs.core.LazySeq(null, function(a, b) {
          return function() {
            var s__26935__$1 = s__26935;
            while (true) {
              var temp__4126__auto__ = cljs.core.seq.call(null, s__26935__$1);
              if (temp__4126__auto__) {
                var xs__4624__auto__ = temp__4126__auto__;
                var o = cljs.core.first.call(null, xs__4624__auto__);
                var iterys__4375__auto__ = function(s__26935__$1, o, xs__4624__auto__, temp__4126__auto__, a, b) {
                  return function iter__26936(s__26937) {
                    return new cljs.core.LazySeq(null, function(s__26935__$1, o, xs__4624__auto__, temp__4126__auto__, a, b) {
                      return function() {
                        var s__26937__$1 = s__26937;
                        while (true) {
                          var temp__4126__auto____$1 = cljs.core.seq.call(null, s__26937__$1);
                          if (temp__4126__auto____$1) {
                            var s__26937__$2 = temp__4126__auto____$1;
                            if (cljs.core.chunked_seq_QMARK_.call(null, s__26937__$2)) {
                              var c__4377__auto__ = cljs.core.chunk_first.call(null, s__26937__$2);
                              var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                              var b__26939 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                              if (function() {
                                var i__26938 = 0;
                                while (true) {
                                  if (i__26938 < size__4378__auto__) {
                                    var s = cljs.core._nth.call(null, c__4377__auto__, i__26938);
                                    cljs.core.chunk_append.call(null, b__26939, 12 * o + s);
                                    var G__26940 = i__26938 + 1;
                                    i__26938 = G__26940;
                                    continue;
                                  } else {
                                    return true;
                                  }
                                  break;
                                }
                              }()) {
                                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__26939), iter__26936.call(null, cljs.core.chunk_rest.call(null, s__26937__$2)));
                              } else {
                                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__26939), null);
                              }
                            } else {
                              var s = cljs.core.first.call(null, s__26937__$2);
                              return cljs.core.cons.call(null, 12 * o + s, iter__26936.call(null, cljs.core.rest.call(null, s__26937__$2)));
                            }
                          } else {
                            return null;
                          }
                          break;
                        }
                      };
                    }(s__26935__$1, o, xs__4624__auto__, temp__4126__auto__, a, b), null, null);
                  };
                }(s__26935__$1, o, xs__4624__auto__, temp__4126__auto__, a, b);
                var fs__4376__auto__ = cljs.core.seq.call(null, iterys__4375__auto__.call(null, scale));
                if (fs__4376__auto__) {
                  return cljs.core.concat.call(null, fs__4376__auto__, iter__26934.call(null, cljs.core.rest.call(null, s__26935__$1)));
                } else {
                  var G__26941 = cljs.core.rest.call(null, s__26935__$1);
                  s__26935__$1 = G__26941;
                  continue;
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(a, b), null, null);
      };
    }(a, b);
    return iter__4379__auto__.call(null, cljs.core.range.call(null, a, b));
  }());
};
cljs.looperscript.vector_fns.scale_range_sweep = function scale_range_sweep(floor, ceil, scale) {
  var sr = cljs.core.vec.call(null, cljs.looperscript.vector_fns.scale_range.call(null, floor, ceil, scale));
  return cljs.core.into.call(null, sr, cljs.core.drop_last.call(null, cljs.core.rest.call(null, cljs.core.reverse.call(null, sr))));
};
cljs.looperscript.vector_fns.mild_shuffle = function mild_shuffle(degree, col) {
  return cljs.core.map.call(null, cljs.core.second, cljs.core.sort.call(null, cljs.core.map_indexed.call(null, function(idx, n) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [idx + cljs.core.rand_int.call(null, degree - 1), n], null);
  }, col)));
};
cljs.looperscript.vector_fns.log_STAR_ = function log_STAR_(v) {
  cljs.looperscript.vector_fns.log.call(null, v);
  return v;
};
cljs.looperscript.vector_fns.memo_STAR_ = function memo_STAR_(id, f) {
  var memo_fn = function(cnt) {
    return f.call(null);
  };
  var counts = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return null;
};
cljs.looperscript.vector_fns.bass_fret = function bass_fret(string, fret) {
  return-17 + fret + -5 * (string - 1);
};
cljs.looperscript.vector_fns.user_vars = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cljs.looperscript.vector_fns.set_user_var = function set_user_var(k, v) {
  return cljs.core.swap_BANG_.call(null, cljs.looperscript.vector_fns.user_vars, cljs.core.assoc, k, v);
};
cljs.looperscript.vector_fns.user = function user(k, default$) {
  return function() {
    return cljs.core.get.call(null, cljs.core.deref.call(null, cljs.looperscript.vector_fns.user_vars), k, default$);
  };
};
cljs.looperscript.vector_fns.test_mod = function test_mod(n) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "modifier-fn", "modifier-fn", -1624543303), function(x) {
    return x * n;
  }], null);
};
cljs.looperscript.vector_fns.over_mod = function() {
  var over_mod__delegate = function(layers) {
    cljs.looperscript.vector_fns.log.call(null, new cljs.core.Keyword(null, "over-mod", "over-mod", -523435366), layers);
    var last_res = cljs.core.atom.call(null, 0);
    var cum_time_in = cljs.core.atom.call(null, 0);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "modifier-fn", "modifier-fn", -1624543303), function(last_res, cum_time_in) {
      return function(time_in) {
        var new_res = cljs.looperscript.interp_rhythms.rhythms_interp.call(null, layers, cljs.core.swap_BANG_.call(null, cum_time_in, cljs.core._PLUS_, time_in));
        var res_diff = new_res - cljs.core.deref.call(null, last_res);
        cljs.core.reset_BANG_.call(null, last_res, new_res);
        return res_diff;
      };
    }(last_res, cum_time_in)], null);
  };
  var over_mod = function(var_args) {
    var layers = null;
    if (arguments.length > 0) {
      layers = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return over_mod__delegate.call(this, layers);
  };
  over_mod.cljs$lang$maxFixedArity = 0;
  over_mod.cljs$lang$applyTo = function(arglist__26942) {
    var layers = cljs.core.seq(arglist__26942);
    return over_mod__delegate(layers);
  };
  over_mod.cljs$core$IFn$_invoke$arity$variadic = over_mod__delegate;
  return over_mod;
}();
cljs.looperscript.vector_fns.insert_randomly = function insert_randomly(v, x) {
  var pos = cljs.core.rand_int.call(null, cljs.core.count.call(null, v) + 1);
  return cljs.core.into.call(null, cljs.core.into.call(null, cljs.core.vec.call(null, cljs.core.take.call(null, pos, v)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null)), cljs.core.drop.call(null, pos, v));
};
cljs.looperscript.vector_fns.grow = function grow(odds, new_note_fn) {
  var accum = cljs.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
  return function(accum) {
    return function() {
      if (cljs.core.empty_QMARK_.call(null, cljs.core.deref.call(null, accum)) || cljs.core.rand.call(null) < odds) {
        return cljs.core.swap_BANG_.call(null, accum, cljs.looperscript.vector_fns.insert_randomly, new_note_fn.call(null));
      } else {
        return cljs.core.deref.call(null, accum);
      }
    };
  }(accum);
};
cljs.looperscript.vector_fns.add_dethunk_test = function() {
  var add_dethunk_test__delegate = function(args) {
    var dethunk = function dethunk(x) {
      if (cljs.core.fn_QMARK_.call(null, x)) {
        return dethunk.call(null, x.call(null));
      } else {
        return x;
      }
    };
    return cljs.core.apply.call(null, cljs.core._PLUS_, cljs.core.map.call(null, dethunk, args));
  };
  var add_dethunk_test = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return add_dethunk_test__delegate.call(this, args);
  };
  add_dethunk_test.cljs$lang$maxFixedArity = 0;
  add_dethunk_test.cljs$lang$applyTo = function(arglist__26943) {
    var args = cljs.core.seq(arglist__26943);
    return add_dethunk_test__delegate(args);
  };
  add_dethunk_test.cljs$core$IFn$_invoke$arity$variadic = add_dethunk_test__delegate;
  return add_dethunk_test;
}();
cljs.looperscript.vector_fns.variable_map = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cljs.looperscript.vector_fns.reset_variables_BANG_ = function reset_variables_BANG_() {
  return cljs.core.reset_BANG_.call(null, cljs.looperscript.vector_fns.variable_map, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.looperscript.vector_fns.define_variable = function define_variable(s, x) {
  cljs.core.swap_BANG_.call(null, cljs.looperscript.vector_fns.variable_map, cljs.core.assoc, s, x);
  return null;
};
cljs.looperscript.vector_fns.get_variable = function get_variable(s) {
  return cljs.core.get.call(null, cljs.core.deref.call(null, cljs.looperscript.vector_fns.variable_map), s);
};
cljs.looperscript.vector_fns.vec_fns = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "shuffle", "shuffle", 1261412160), new cljs.core.Keyword(null, "repeatedly", "repeatedly", -440567070), new cljs.core.Keyword(null, "get", "get", 1683182755), new cljs.core.Keyword(null, "interleave", "interleave", -1475043421), new cljs.core.Keyword(null, "cycle", "cycle", 710365284), new cljs.core.Keyword(null, "walk", "walk", 32921637), new cljs.core.Keyword(null, "rand", "rand", 908504774), 
new cljs.core.Keyword(null, "weight1", "weight1", 584068617), new cljs.core.Keyword(null, "nth", "nth", -111321973), new cljs.core.Keyword(null, "scale-range-sweep", "scale-range-sweep", 255716877), new cljs.core.Keyword(null, "vector", "vector", 1902966158), new cljs.core.Keyword(null, "walk1", "walk1", -824993744), new cljs.core.Keyword(null, "scale-range", "scale-range", -910552944), new cljs.core.Keyword(null, "flatten", "flatten", 1212802416), new cljs.core.Keyword(null, "grow", "grow", -524118895), 
new cljs.core.Keyword(null, "rand-hold", "rand-hold", 1221211378), new cljs.core.Keyword(null, "weight2", "weight2", -1471744749), new cljs.core.Keyword(null, "weight", "weight", -1262796205), new cljs.core.Keyword(null, "rand-range", "rand-range", -1792793772), new cljs.core.Keyword(null, "transpose-scale", "transpose-scale", -213992459), new cljs.core.Keyword(null, "rand-exp-range", "rand-exp-range", 1927268695), new cljs.core.Keyword(null, "def", "def", -1043430536), new cljs.core.Keyword(null, 
"x", "x", 2099068185), new cljs.core.Keyword(null, "over", "over", 192553051), new cljs.core.Keyword(null, "add", "add", 235287739), new cljs.core.Keyword(null, "mild-shuffle", "mild-shuffle", -1737984709), new cljs.core.Keyword(null, "bass-fret", "bass-fret", -264582661), new cljs.core.Keyword(null, "rand-int", "rand-int", -2135543684), new cljs.core.Keyword(null, "take", "take", -768884900), new cljs.core.Keyword(null, "log", "log", -1595516004), new cljs.core.Keyword(null, "user", "user", 1532431356), 
new cljs.core.Keyword(null, "range", "range", 1639692286), new cljs.core.Keyword(null, "in", "in", -1531184865), new cljs.core.Keyword(null, "pattern", "pattern", 242135423)], [cljs.core.shuffle, cljs.core.repeatedly, cljs.looperscript.vector_fns.get_variable, cljs.core.interleave, cljs.looperscript.vector_fns.cycle_STAR_, cljs.looperscript.vector_fns.rand_walk, cljs.looperscript.vector_fns.rand_nth_STAR_, cljs.looperscript.vector_fns.rand_weighted_either_or, cljs.looperscript.vector_fns.nth_STAR_, 
cljs.looperscript.vector_fns.scale_range_sweep, cljs.core.vector, cljs.looperscript.vector_fns.rand_walk1, cljs.looperscript.vector_fns.scale_range, cljs.looperscript.vector_fns.flatten_STAR_, cljs.looperscript.vector_fns.grow, cljs.looperscript.vector_fns.rand_hold, cljs.looperscript.vector_fns.rand_weighted_zip, cljs.looperscript.vector_fns.rand_weighted, cljs.looperscript.vector_fns.rand_range, cljs.looperscript.vector_fns.transpose_scale, cljs.looperscript.vector_fns.rand_exp_range, cljs.looperscript.vector_fns.define_variable, 
cljs.core.repeat, cljs.looperscript.vector_fns.over_mod, cljs.looperscript.vector_fns.add_dethunk_test, cljs.looperscript.vector_fns.mild_shuffle, cljs.looperscript.vector_fns.bass_fret, cljs.looperscript.vector_fns.rand_int_STAR_, cljs.looperscript.vector_fns.take_STAR_, cljs.looperscript.vector_fns.log_STAR_, cljs.looperscript.vector_fns.user, cljs.looperscript.vector_fns.range_STAR_, cljs.looperscript.vector_fns.in$, cljs.looperscript.vector_fns.scale_pattern]);
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera") || goog.labs.userAgent.util.matchUserAgent("OPR");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS") && !goog.labs.userAgent.util.matchUserAgent("Android");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return goog.labs.userAgent.browser.getOperaVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.labs.userAgent.browser.getOperaVersion_ = function(userAgent) {
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgent);
  var lastTuple = goog.array.peek(versionTuples);
  if (lastTuple[0] == "OPR" && lastTuple[1]) {
    return lastTuple[1];
  }
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.getVersionFromTuples_ = function(versionTuples) {
  goog.asserts.assert(versionTuples.length > 2, "Couldn't extract version tuple from user agent string");
  return versionTuples[2] && versionTuples[2][1] ? versionTuples[2][1] : "";
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit");
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = tuples[1];
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.userAgent");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"] || null;
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
};
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD;
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && goog.string.contains(ua, "Android");
  goog.userAgent.detectedIPhone_ = !!ua && goog.string.contains(ua, "iPhone");
  goog.userAgent.detectedIPad_ = !!ua && goog.string.contains(ua, "iPad");
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    return goog.isFunction(operaVersion) ? operaVersion() : operaVersion;
  }
  if (goog.userAgent.GECKO) {
    re = /rv\:([^\);]+)(\)|;)/;
  } else {
    if (goog.userAgent.IE) {
      re = /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.WEBKIT) {
        re = /WebKit\/(\S+)/;
      }
    }
  }
  if (re) {
    var arr = re.exec(goog.userAgent.getUserAgentString());
    version = arr ? arr[1] : "";
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || goog.userAgent.IE && goog.userAgent.isDocumentModeOrHigher(9) || goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9.1"), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || goog.userAgent.OPERA || goog.userAgent.WEBKIT, 
INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE, LEGACY_IE_RANGES:goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)};
goog.provide("instaparse.auto_flatten_seq");
goog.require("cljs.core");
instaparse.auto_flatten_seq.threshold = 32;
instaparse.auto_flatten_seq.hash_ordered_coll_without_mix = function() {
  var hash_ordered_coll_without_mix = null;
  var hash_ordered_coll_without_mix__1 = function(coll) {
    return hash_ordered_coll_without_mix.call(null, 1, coll);
  };
  var hash_ordered_coll_without_mix__2 = function(existing_unmixed_hash, coll) {
    var unmixed_hash = existing_unmixed_hash;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (!(coll__$1 == null)) {
        var G__28699 = cljs.core.imul.call(null, 31, unmixed_hash) + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
        var G__28700 = cljs.core.next.call(null, coll__$1);
        unmixed_hash = G__28699;
        coll__$1 = G__28700;
        continue;
      } else {
        return unmixed_hash;
      }
      break;
    }
  };
  hash_ordered_coll_without_mix = function(existing_unmixed_hash, coll) {
    switch(arguments.length) {
      case 1:
        return hash_ordered_coll_without_mix__1.call(this, existing_unmixed_hash);
      case 2:
        return hash_ordered_coll_without_mix__2.call(this, existing_unmixed_hash, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$1 = hash_ordered_coll_without_mix__1;
  hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$2 = hash_ordered_coll_without_mix__2;
  return hash_ordered_coll_without_mix;
}();
instaparse.auto_flatten_seq.hash_conj = function hash_conj(unmixed_hash, item) {
  return cljs.core.imul.call(null, 31, unmixed_hash) + cljs.core.hash.call(null, item) | 0;
};
instaparse.auto_flatten_seq.expt = function expt(base, pow) {
  if (pow === 0) {
    return 1;
  } else {
    var n = pow | 0;
    var y = 1 | 0;
    var z = base | 0;
    while (true) {
      var t = cljs.core.even_QMARK_.call(null, n);
      var n__$1 = cljs.core.quot.call(null, n, 2);
      if (t) {
        var G__28701 = n__$1;
        var G__28702 = y;
        var G__28703 = cljs.core.imul.call(null, z, z);
        n = G__28701;
        y = G__28702;
        z = G__28703;
        continue;
      } else {
        if (n__$1 === 0) {
          return cljs.core.imul.call(null, z, y);
        } else {
          var G__28704 = n__$1;
          var G__28705 = cljs.core.imul.call(null, z, y);
          var G__28706 = cljs.core.imul.call(null, z, z);
          n = G__28704;
          y = G__28705;
          z = G__28706;
          continue;
        }
      }
      break;
    }
  }
};
instaparse.auto_flatten_seq.hash_cat = function hash_cat(v1, v2) {
  var c = cljs.core.count.call(null, v2);
  var e = instaparse.auto_flatten_seq.expt.call(null, 31, c) | 0;
  return(cljs.core.imul.call(null, e, v1.premix_hashcode) | 0) + (v2.premix_hashcode - e);
};
instaparse.auto_flatten_seq.delve = function delve(v, index) {
  var v__$1 = cljs.core.get_in.call(null, v, index);
  var index__$1 = index;
  while (true) {
    if (cljs.core.truth_(instaparse.auto_flatten_seq.afs_QMARK_.call(null, v__$1))) {
      var G__28707 = cljs.core.get.call(null, v__$1, 0);
      var G__28708 = cljs.core.conj.call(null, index__$1, 0);
      v__$1 = G__28707;
      index__$1 = G__28708;
      continue;
    } else {
      return index__$1;
    }
    break;
  }
};
instaparse.auto_flatten_seq.advance = function advance(v, index) {
  while (true) {
    if (cljs.core._EQ_.call(null, cljs.core.count.call(null, index), 1)) {
      if (cljs.core.peek.call(null, index) < instaparse.auto_flatten_seq.true_count.call(null, v) - 1) {
        return instaparse.auto_flatten_seq.delve.call(null, v, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.peek.call(null, index) + 1], null));
      } else {
        return null;
      }
    } else {
      if (cljs.core.peek.call(null, index) < instaparse.auto_flatten_seq.true_count.call(null, cljs.core.get_in.call(null, v, cljs.core.pop.call(null, index))) - 1) {
        return instaparse.auto_flatten_seq.delve.call(null, v, cljs.core.conj.call(null, cljs.core.pop.call(null, index), cljs.core.peek.call(null, index) + 1));
      } else {
        var G__28709 = v;
        var G__28710 = cljs.core.pop.call(null, index);
        v = G__28709;
        index = G__28710;
        continue;
      }
    }
    break;
  }
};
instaparse.auto_flatten_seq.flat_seq = function() {
  var flat_seq = null;
  var flat_seq__1 = function(v) {
    if (cljs.core.count.call(null, v) > 0) {
      return flat_seq.call(null, v, instaparse.auto_flatten_seq.delve.call(null, v, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [0], null)));
    } else {
      return null;
    }
  };
  var flat_seq__2 = function(v, index) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, cljs.core.get_in.call(null, v, index), function() {
        var temp__4126__auto__ = instaparse.auto_flatten_seq.advance.call(null, v, index);
        if (cljs.core.truth_(temp__4126__auto__)) {
          var next_index = temp__4126__auto__;
          return flat_seq.call(null, v, next_index);
        } else {
          return null;
        }
      }());
    }, null, null);
  };
  flat_seq = function(v, index) {
    switch(arguments.length) {
      case 1:
        return flat_seq__1.call(this, v);
      case 2:
        return flat_seq__2.call(this, v, index);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  flat_seq.cljs$core$IFn$_invoke$arity$1 = flat_seq__1;
  flat_seq.cljs$core$IFn$_invoke$arity$2 = flat_seq__2;
  return flat_seq;
}();
instaparse.auto_flatten_seq.ConjFlat = function() {
  var obj28712 = {};
  return obj28712;
}();
instaparse.auto_flatten_seq.conj_flat = function conj_flat(self, obj) {
  if (function() {
    var and__3628__auto__ = self;
    if (and__3628__auto__) {
      return self.instaparse$auto_flatten_seq$ConjFlat$conj_flat$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return self.instaparse$auto_flatten_seq$ConjFlat$conj_flat$arity$2(self, obj);
  } else {
    var x__4277__auto__ = self == null ? null : self;
    return function() {
      var or__3640__auto__ = instaparse.auto_flatten_seq.conj_flat[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = instaparse.auto_flatten_seq.conj_flat["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ConjFlat.conj-flat", self);
        }
      }
    }().call(null, self, obj);
  }
};
instaparse.auto_flatten_seq.cached_QMARK_ = function cached_QMARK_(self) {
  if (function() {
    var and__3628__auto__ = self;
    if (and__3628__auto__) {
      return self.instaparse$auto_flatten_seq$ConjFlat$cached_QMARK_$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return self.instaparse$auto_flatten_seq$ConjFlat$cached_QMARK_$arity$1(self);
  } else {
    var x__4277__auto__ = self == null ? null : self;
    return function() {
      var or__3640__auto__ = instaparse.auto_flatten_seq.cached_QMARK_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = instaparse.auto_flatten_seq.cached_QMARK_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ConjFlat.cached?", self);
        }
      }
    }().call(null, self);
  }
};
instaparse.auto_flatten_seq.AutoFlattenSeq = function(v, premix_hashcode, hashcode, cnt, dirty, cached_seq) {
  this.v = v;
  this.premix_hashcode = premix_hashcode;
  this.hashcode = hashcode;
  this.cnt = cnt;
  this.dirty = dirty;
  this.cached_seq = cached_seq;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850950;
};
instaparse.auto_flatten_seq.AutoFlattenSeq.cljs$lang$type = true;
instaparse.auto_flatten_seq.AutoFlattenSeq.cljs$lang$ctorStr = "instaparse.auto-flatten-seq/AutoFlattenSeq";
instaparse.auto_flatten_seq.AutoFlattenSeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "instaparse.auto-flatten-seq/AutoFlattenSeq");
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ILookup$_lookup$arity$2 = function(self, key) {
  var self__ = this;
  var self__$1 = this;
  return self__.v.cljs$core$ILookup$_lookup$arity$2(null, key);
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ILookup$_lookup$arity$3 = function(self, key, not_found) {
  var self__ = this;
  var self__$1 = this;
  return self__.v.cljs$core$ILookup$_lookup$arity$3(null, key, not_found);
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.meta.call(null, self__.v);
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$INext$_next$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.next.call(null, cljs.core.seq.call(null, self__$1));
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return self__.cnt;
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return self__.hashcode;
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(self, other) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core._EQ_.call(null, self__.hashcode, cljs.core.hash.call(null, other)) && cljs.core._EQ_.call(null, self__.cnt, cljs.core.count.call(null, other)) && (cljs.core._EQ_.call(null, self__.cnt, 0) || cljs.core._EQ_.call(null, cljs.core.seq.call(null, self__$1), other));
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.with_meta.call(null, instaparse.auto_flatten_seq.EMPTY, cljs.core.meta.call(null, self__$1));
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.first.call(null, cljs.core.seq.call(null, self__$1));
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, self__$1));
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  if (cljs.core.truth_(self__.cached_seq)) {
    return self__.cached_seq;
  } else {
    self__.cached_seq = self__.dirty ? instaparse.auto_flatten_seq.flat_seq.call(null, self__.v) : cljs.core.seq.call(null, self__.v);
    return self__.cached_seq;
  }
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(self, metamap) {
  var self__ = this;
  var self__$1 = this;
  return new instaparse.auto_flatten_seq.AutoFlattenSeq(cljs.core.with_meta.call(null, self__.v, metamap), self__.premix_hashcode, self__.hashcode, self__.cnt, self__.dirty, null);
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.instaparse$auto_flatten_seq$ConjFlat$ = true;
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.instaparse$auto_flatten_seq$ConjFlat$conj_flat$arity$2 = function(self, obj) {
  var self__ = this;
  var self__$1 = this;
  if (obj == null) {
    return self__$1;
  } else {
    if (cljs.core.truth_(instaparse.auto_flatten_seq.afs_QMARK_.call(null, obj))) {
      if (self__.cnt === 0) {
        return obj;
      } else {
        if (cljs.core.count.call(null, obj) <= instaparse.auto_flatten_seq.threshold) {
          var phc = instaparse.auto_flatten_seq.hash_cat.call(null, self__$1, obj);
          var new_cnt = self__.cnt + cljs.core.count.call(null, obj);
          return new instaparse.auto_flatten_seq.AutoFlattenSeq(cljs.core.into.call(null, self__.v, obj), phc, cljs.core.mix_collection_hash.call(null, phc, new_cnt), new_cnt, function() {
            var or__3640__auto__ = self__.dirty;
            if (or__3640__auto__) {
              return or__3640__auto__;
            } else {
              return obj.dirty;
            }
          }(), null);
        } else {
          var phc = instaparse.auto_flatten_seq.hash_cat.call(null, self__$1, obj);
          var new_cnt = self__.cnt + cljs.core.count.call(null, obj);
          return new instaparse.auto_flatten_seq.AutoFlattenSeq(cljs.core.conj.call(null, self__.v, obj), phc, cljs.core.mix_collection_hash.call(null, phc, new_cnt), new_cnt, true, null);
        }
      }
    } else {
      var phc = instaparse.auto_flatten_seq.hash_conj.call(null, self__.premix_hashcode, obj);
      var new_cnt = self__.cnt + 1;
      return new instaparse.auto_flatten_seq.AutoFlattenSeq(cljs.core.conj.call(null, self__.v, obj), phc, cljs.core.mix_collection_hash.call(null, phc, new_cnt), new_cnt, self__.dirty, null);
    }
  }
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.instaparse$auto_flatten_seq$ConjFlat$cached_QMARK_$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return self__.cached_seq;
};
instaparse.auto_flatten_seq.__GT_AutoFlattenSeq = function __GT_AutoFlattenSeq(v, premix_hashcode, hashcode, cnt, dirty, cached_seq) {
  return new instaparse.auto_flatten_seq.AutoFlattenSeq(v, premix_hashcode, hashcode, cnt, dirty, cached_seq);
};
instaparse.auto_flatten_seq.auto_flatten_seq = function auto_flatten_seq(v) {
  var v__$1 = cljs.core.vec.call(null, v);
  var c = cljs.core.count.call(null, v__$1);
  var unmixed_hash = instaparse.auto_flatten_seq.hash_ordered_coll_without_mix.call(null, v__$1);
  return new instaparse.auto_flatten_seq.AutoFlattenSeq(v__$1, unmixed_hash, cljs.core.mix_collection_hash.call(null, unmixed_hash, c), c, false, null);
};
instaparse.auto_flatten_seq.EMPTY = instaparse.auto_flatten_seq.auto_flatten_seq.call(null, cljs.core.PersistentVector.EMPTY);
instaparse.auto_flatten_seq.afs_QMARK_ = function afs_QMARK_(s) {
  return s instanceof instaparse.auto_flatten_seq.AutoFlattenSeq;
};
instaparse.auto_flatten_seq.true_count = function true_count(v) {
  if (instaparse.auto_flatten_seq.afs_QMARK_.call(null, v)) {
    return cljs.core.count.call(null, v.v);
  } else {
    return cljs.core.count.call(null, v);
  }
};
instaparse.auto_flatten_seq.flat_vec_helper = function flat_vec_helper(acc, v) {
  while (true) {
    var temp__4124__auto__ = cljs.core.seq.call(null, v);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      var fst = cljs.core.first.call(null, v);
      if (instaparse.auto_flatten_seq.afs_QMARK_.call(null, fst)) {
        var G__28713 = flat_vec_helper.call(null, acc, fst);
        var G__28714 = cljs.core.next.call(null, v);
        acc = G__28713;
        v = G__28714;
        continue;
      } else {
        var G__28715 = cljs.core.conj_BANG_.call(null, acc, fst);
        var G__28716 = cljs.core.next.call(null, v);
        acc = G__28715;
        v = G__28716;
        continue;
      }
    } else {
      return acc;
    }
    break;
  }
};
instaparse.auto_flatten_seq.flat_vec = function flat_vec(v) {
  return cljs.core.persistent_BANG_.call(null, instaparse.auto_flatten_seq.flat_vec_helper.call(null, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), v));
};
instaparse.auto_flatten_seq.GetVec = function() {
  var obj28718 = {};
  return obj28718;
}();
instaparse.auto_flatten_seq.get_vec = function get_vec(self) {
  if (function() {
    var and__3628__auto__ = self;
    if (and__3628__auto__) {
      return self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(self);
  } else {
    var x__4277__auto__ = self == null ? null : self;
    return function() {
      var or__3640__auto__ = instaparse.auto_flatten_seq.get_vec[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = instaparse.auto_flatten_seq.get_vec["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "GetVec.get-vec", self);
        }
      }
    }().call(null, self);
  }
};
instaparse.auto_flatten_seq.FlattenOnDemandVector = function(v, hashcode, cnt, flat) {
  this.v = v;
  this.hashcode = hashcode;
  this.cnt = cnt;
  this.flat = flat;
  this.cljs$lang$protocol_mask$partition0$ = 150364959;
  this.cljs$lang$protocol_mask$partition1$ = 2048;
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.cljs$lang$type = true;
instaparse.auto_flatten_seq.FlattenOnDemandVector.cljs$lang$ctorStr = "instaparse.auto-flatten-seq/FlattenOnDemandVector";
instaparse.auto_flatten_seq.FlattenOnDemandVector.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "instaparse.auto-flatten-seq/FlattenOnDemandVector");
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.toString = function() {
  var self__ = this;
  var self = this;
  return cljs.core.pr_str_STAR_.call(null, self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null));
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(self, key) {
  var self__ = this;
  var self__$1 = this;
  return instaparse.auto_flatten_seq.get_vec.call(null, self__$1).cljs$core$ILookup$_lookup$arity$2(null, key);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(self, key, not_found) {
  var self__ = this;
  var self__$1 = this;
  return instaparse.auto_flatten_seq.get_vec.call(null, self__$1).cljs$core$ILookup$_lookup$arity$3(null, key, not_found);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.instaparse$auto_flatten_seq$GetVec$ = true;
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  if (cljs.core.not.call(null, cljs.core.deref.call(null, self__.flat))) {
    cljs.core.swap_BANG_.call(null, self__.flat, function(self__$1) {
      return function(_) {
        return cljs.core.with_meta.call(null, instaparse.auto_flatten_seq.flat_vec.call(null, cljs.core.deref.call(null, self__.v)), cljs.core.meta.call(null, cljs.core.deref.call(null, self__.v)));
      };
    }(self__$1));
    cljs.core.swap_BANG_.call(null, self__.v, function(self__$1) {
      return function(_) {
        return null;
      };
    }(self__$1));
  } else {
  }
  return cljs.core.deref.call(null, self__.flat);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(self, f, init) {
  var self__ = this;
  var self__$1 = this;
  return instaparse.auto_flatten_seq.get_vec.call(null, self__$1).cljs$core$IKVReduce$_kv_reduce$arity$3(null, f, init);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(self, i) {
  var self__ = this;
  var self__$1 = this;
  return instaparse.auto_flatten_seq.get_vec.call(null, self__$1).cljs$core$IIndexed$_nth$arity$2(null, i);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(self, i, not_found) {
  var self__ = this;
  var self__$1 = this;
  return instaparse.auto_flatten_seq.get_vec.call(null, self__$1).cljs$core$IIndexed$_nth$arity$3(null, i, not_found);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(self, i, val) {
  var self__ = this;
  var self__$1 = this;
  return instaparse.auto_flatten_seq.get_vec.call(null, self__$1).cljs$core$IVector$_assoc_n$arity$3(null, i, val);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  if (cljs.core.truth_(cljs.core.deref.call(null, self__.flat))) {
    return cljs.core.meta.call(null, cljs.core.deref.call(null, self__.flat));
  } else {
    return cljs.core.meta.call(null, cljs.core.deref.call(null, self__.v));
  }
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ICounted$_count$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return self__.cnt;
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IStack$_peek$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return instaparse.auto_flatten_seq.get_vec.call(null, self__$1).cljs$core$IStack$_peek$arity$1(null);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IStack$_pop$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return instaparse.auto_flatten_seq.get_vec.call(null, self__$1).cljs$core$IStack$_pop$arity$1(null);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.rseq.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1));
  } else {
    return null;
  }
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IHash$_hash$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return self__.hashcode;
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(self, other) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core._EQ_.call(null, self__.hashcode, cljs.core.hash.call(null, other)) && cljs.core._EQ_.call(null, self__.cnt, cljs.core.count.call(null, other)) && cljs.core._EQ_.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1), other);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.with_meta.call(null, instaparse.auto_flatten_seq.EMPTY, cljs.core.meta.call(null, self__$1));
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(self, i, val) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.assoc.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1), i, val);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(self, k) {
  var self__ = this;
  var self__$1 = this;
  return instaparse.auto_flatten_seq.get_vec.call(null, self__$1).cljs$core$IAssociative$_contains_key_QMARK_$arity$2(null, k);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.seq.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1));
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(self, metamap) {
  var self__ = this;
  var self__$1 = this;
  if (cljs.core.truth_(cljs.core.deref.call(null, self__.flat))) {
    return new instaparse.auto_flatten_seq.FlattenOnDemandVector(cljs.core.atom.call(null, cljs.core.deref.call(null, self__.v)), self__.hashcode, self__.cnt, cljs.core.atom.call(null, cljs.core.with_meta.call(null, cljs.core.deref.call(null, self__.flat), metamap)));
  } else {
    return new instaparse.auto_flatten_seq.FlattenOnDemandVector(cljs.core.atom.call(null, cljs.core.with_meta.call(null, cljs.core.deref.call(null, self__.v), metamap)), self__.hashcode, self__.cnt, cljs.core.atom.call(null, cljs.core.deref.call(null, self__.flat)));
  }
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(self, obj) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.conj.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1), obj);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.call = function() {
  var G__28720 = null;
  var G__28720__2 = function(self__, arg) {
    var self__ = this;
    var self____$1 = this;
    var self = self____$1;
    return self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null).cljs$core$IFn$_invoke$arity$2(null, arg);
  };
  var G__28720__3 = function(self__, arg, not_found) {
    var self__ = this;
    var self____$1 = this;
    var self = self____$1;
    return self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null).cljs$core$IFn$_invoke$arity$3(null, arg, not_found);
  };
  G__28720 = function(self__, arg, not_found) {
    switch(arguments.length) {
      case 2:
        return G__28720__2.call(this, self__, arg);
      case 3:
        return G__28720__3.call(this, self__, arg, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__28720.cljs$core$IFn$_invoke$arity$2 = G__28720__2;
  G__28720.cljs$core$IFn$_invoke$arity$3 = G__28720__3;
  return G__28720;
}();
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.apply = function(self__, args28719) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args28719)));
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(arg) {
  var self__ = this;
  var self = this;
  return self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null).cljs$core$IFn$_invoke$arity$2(null, arg);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(arg, not_found) {
  var self__ = this;
  var self = this;
  return self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null).cljs$core$IFn$_invoke$arity$3(null, arg, not_found);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(self, that) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core._compare.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1), that);
};
instaparse.auto_flatten_seq.__GT_FlattenOnDemandVector = function __GT_FlattenOnDemandVector(v, hashcode, cnt, flat) {
  return new instaparse.auto_flatten_seq.FlattenOnDemandVector(v, hashcode, cnt, flat);
};
instaparse.auto_flatten_seq.convert_afs_to_vec = function convert_afs_to_vec(afs) {
  if (cljs.core.truth_(afs.dirty)) {
    if (cljs.core.truth_(instaparse.auto_flatten_seq.cached_QMARK_.call(null, afs))) {
      return cljs.core.vec.call(null, cljs.core.seq.call(null, afs));
    } else {
      return new instaparse.auto_flatten_seq.FlattenOnDemandVector(cljs.core.atom.call(null, afs.v), afs.hashcode, afs.cnt, cljs.core.atom.call(null, null));
    }
  } else {
    return afs.v;
  }
};
goog.provide("instaparse.reduction");
goog.require("cljs.core");
goog.require("instaparse.auto_flatten_seq");
goog.require("instaparse.auto_flatten_seq");
instaparse.reduction.singleton_QMARK_ = function singleton_QMARK_(s) {
  return cljs.core.seq.call(null, s) && cljs.core.not.call(null, cljs.core.next.call(null, s));
};
instaparse.reduction.red = function red(parser, f) {
  return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "red", "red", -969428204), f);
};
instaparse.reduction.raw_non_terminal_reduction = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "reduction-type", "reduction-type", -488293450), new cljs.core.Keyword(null, "raw", "raw", 1604651272)], null);
instaparse.reduction.HiccupNonTerminalReduction = function HiccupNonTerminalReduction(key) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "reduction-type", "reduction-type", -488293450), new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), new cljs.core.Keyword(null, "key", "key", -1516042587), key], null);
};
instaparse.reduction.EnliveNonTerminalReduction = function EnliveNonTerminalReduction(key) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "reduction-type", "reduction-type", -488293450), new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), new cljs.core.Keyword(null, "key", "key", -1516042587), key], null);
};
instaparse.reduction.reduction_types = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), instaparse.reduction.HiccupNonTerminalReduction, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), instaparse.reduction.EnliveNonTerminalReduction], null);
instaparse.reduction.node_builders = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), function(tag, item) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), tag, new cljs.core.Keyword(null, "content", "content", 15833224), cljs.core._conj.call(null, cljs.core.List.EMPTY, item)], null);
}, new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), function(tag, item) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag, item], null);
}], null);
instaparse.reduction.standard_non_terminal_reduction = new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238);
instaparse.reduction.apply_reduction = function apply_reduction(f, result) {
  var G__29133 = (new cljs.core.Keyword(null, "reduction-type", "reduction-type", -488293450)).cljs$core$IFn$_invoke$arity$1(f) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "reduction-type", "reduction-type", -488293450)).cljs$core$IFn$_invoke$arity$1(f).fqn : null;
  switch(G__29133) {
    case "enlive":
      var content = instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.EMPTY, result);
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), (new cljs.core.Keyword(null, "key", "key", -1516042587)).cljs$core$IFn$_invoke$arity$1(f), new cljs.core.Keyword(null, "content", "content", 15833224), cljs.core.count.call(null, content) === 0 ? null : content], null);
      break;
    case "hiccup":
      return instaparse.auto_flatten_seq.convert_afs_to_vec.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.auto_flatten_seq.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "key", "key", -1516042587)).cljs$core$IFn$_invoke$arity$1(f)], null)), result));
      break;
    case "raw":
      return instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.EMPTY, result);
      break;
    default:
      return f.call(null, result);
  }
};
instaparse.reduction.apply_standard_reductions = function() {
  var apply_standard_reductions = null;
  var apply_standard_reductions__1 = function(grammar) {
    return apply_standard_reductions.call(null, instaparse.reduction.standard_non_terminal_reduction, grammar);
  };
  var apply_standard_reductions__2 = function(reduction_type, grammar) {
    var temp__4124__auto__ = instaparse.reduction.reduction_types.call(null, reduction_type);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var reduction = temp__4124__auto__;
      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
        var iter__4379__auto__ = function(reduction, temp__4124__auto__) {
          return function iter__29143(s__29144) {
            return new cljs.core.LazySeq(null, function(reduction, temp__4124__auto__) {
              return function() {
                var s__29144__$1 = s__29144;
                while (true) {
                  var temp__4126__auto__ = cljs.core.seq.call(null, s__29144__$1);
                  if (temp__4126__auto__) {
                    var s__29144__$2 = temp__4126__auto__;
                    if (cljs.core.chunked_seq_QMARK_.call(null, s__29144__$2)) {
                      var c__4377__auto__ = cljs.core.chunk_first.call(null, s__29144__$2);
                      var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                      var b__29146 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                      if (function() {
                        var i__29145 = 0;
                        while (true) {
                          if (i__29145 < size__4378__auto__) {
                            var vec__29149 = cljs.core._nth.call(null, c__4377__auto__, i__29145);
                            var k = cljs.core.nth.call(null, vec__29149, 0, null);
                            var v = cljs.core.nth.call(null, vec__29149, 1, null);
                            cljs.core.chunk_append.call(null, b__29146, cljs.core.truth_((new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(v)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.assoc.call(null, v, new cljs.core.Keyword(null, "red", "red", -969428204), reduction.call(null, k))], null));
                            var G__29151 = i__29145 + 1;
                            i__29145 = G__29151;
                            continue;
                          } else {
                            return true;
                          }
                          break;
                        }
                      }()) {
                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__29146), iter__29143.call(null, cljs.core.chunk_rest.call(null, s__29144__$2)));
                      } else {
                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__29146), null);
                      }
                    } else {
                      var vec__29150 = cljs.core.first.call(null, s__29144__$2);
                      var k = cljs.core.nth.call(null, vec__29150, 0, null);
                      var v = cljs.core.nth.call(null, vec__29150, 1, null);
                      return cljs.core.cons.call(null, cljs.core.truth_((new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(v)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.assoc.call(null, v, new cljs.core.Keyword(null, "red", "red", -969428204), reduction.call(null, k))], null), iter__29143.call(null, cljs.core.rest.call(null, 
                      s__29144__$2)));
                    }
                  } else {
                    return null;
                  }
                  break;
                }
              };
            }(reduction, temp__4124__auto__), null, null);
          };
        }(reduction, temp__4124__auto__);
        return iter__4379__auto__.call(null, grammar);
      }());
    } else {
      throw "Invalid output format" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(reduction_type) + ". Use :enlive or :hiccup.";
    }
  };
  apply_standard_reductions = function(reduction_type, grammar) {
    switch(arguments.length) {
      case 1:
        return apply_standard_reductions__1.call(this, reduction_type);
      case 2:
        return apply_standard_reductions__2.call(this, reduction_type, grammar);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply_standard_reductions.cljs$core$IFn$_invoke$arity$1 = apply_standard_reductions__1;
  apply_standard_reductions.cljs$core$IFn$_invoke$arity$2 = apply_standard_reductions__2;
  return apply_standard_reductions;
}();
goog.provide("instaparse.combinators_source");
goog.require("cljs.core");
goog.require("instaparse.reduction");
goog.require("instaparse.reduction");
instaparse.combinators_source.Epsilon = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "epsilon", "epsilon", -730158570)], null);
instaparse.combinators_source.opt = function opt(parser) {
  if (cljs.core._EQ_.call(null, parser, instaparse.combinators_source.Epsilon)) {
    return instaparse.combinators_source.Epsilon;
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "opt", "opt", -794706369), new cljs.core.Keyword(null, "parser", "parser", -1543495310), parser], null);
  }
};
instaparse.combinators_source.plus = function plus(parser) {
  if (cljs.core._EQ_.call(null, parser, instaparse.combinators_source.Epsilon)) {
    return instaparse.combinators_source.Epsilon;
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "plus", "plus", 211540661), new cljs.core.Keyword(null, "parser", "parser", -1543495310), parser], null);
  }
};
instaparse.combinators_source.star = function star(parser) {
  if (cljs.core._EQ_.call(null, parser, instaparse.combinators_source.Epsilon)) {
    return instaparse.combinators_source.Epsilon;
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "star", "star", 279424429), new cljs.core.Keyword(null, "parser", "parser", -1543495310), parser], null);
  }
};
instaparse.combinators_source.rep = function rep(m, n, parser) {
  if (m <= n) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c\x3d", "\x3c\x3d", 1244895369, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null)))));
  }
  if (cljs.core._EQ_.call(null, parser, instaparse.combinators_source.Epsilon)) {
    return instaparse.combinators_source.Epsilon;
  } else {
    return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "rep", "rep", -1226820564), new cljs.core.Keyword(null, "parser", "parser", -1543495310), parser, new cljs.core.Keyword(null, "min", "min", 444991522), m, new cljs.core.Keyword(null, "max", "max", 61366548), n], null);
  }
};
instaparse.combinators_source.alt = function() {
  var alt__delegate = function(parsers) {
    if (cljs.core.every_QMARK_.call(null, cljs.core.partial.call(null, cljs.core._EQ_, instaparse.combinators_source.Epsilon), parsers)) {
      return instaparse.combinators_source.Epsilon;
    } else {
      if (instaparse.reduction.singleton_QMARK_.call(null, parsers)) {
        return cljs.core.first.call(null, parsers);
      } else {
        return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "alt", "alt", -3214426), new cljs.core.Keyword(null, "parsers", "parsers", -804353827), parsers], null);
      }
    }
  };
  var alt = function(var_args) {
    var parsers = null;
    if (arguments.length > 0) {
      parsers = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return alt__delegate.call(this, parsers);
  };
  alt.cljs$lang$maxFixedArity = 0;
  alt.cljs$lang$applyTo = function(arglist__29189) {
    var parsers = cljs.core.seq(arglist__29189);
    return alt__delegate(parsers);
  };
  alt.cljs$core$IFn$_invoke$arity$variadic = alt__delegate;
  return alt;
}();
instaparse.combinators_source.ord2 = function ord2(parser1, parser2) {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "ord", "ord", 1142548323), new cljs.core.Keyword(null, "parser1", "parser1", -439601422), parser1, new cljs.core.Keyword(null, "parser2", "parser2", 1013754688), parser2], null);
};
instaparse.combinators_source.ord = function() {
  var ord = null;
  var ord__0 = function() {
    return instaparse.combinators_source.Epsilon;
  };
  var ord__2 = function() {
    var G__29190__delegate = function(parser1, parsers) {
      var parsers__$1 = cljs.core._EQ_.call(null, parser1, instaparse.combinators_source.Epsilon) ? cljs.core.remove.call(null, cljs.core.PersistentHashSet.fromArray([instaparse.combinators_source.Epsilon], true), parsers) : parsers;
      if (cljs.core.seq.call(null, parsers__$1)) {
        return instaparse.combinators_source.ord2.call(null, parser1, cljs.core.apply.call(null, ord, parsers__$1));
      } else {
        return parser1;
      }
    };
    var G__29190 = function(parser1, var_args) {
      var parsers = null;
      if (arguments.length > 1) {
        parsers = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__29190__delegate.call(this, parser1, parsers);
    };
    G__29190.cljs$lang$maxFixedArity = 1;
    G__29190.cljs$lang$applyTo = function(arglist__29191) {
      var parser1 = cljs.core.first(arglist__29191);
      var parsers = cljs.core.rest(arglist__29191);
      return G__29190__delegate(parser1, parsers);
    };
    G__29190.cljs$core$IFn$_invoke$arity$variadic = G__29190__delegate;
    return G__29190;
  }();
  ord = function(parser1, var_args) {
    var parsers = var_args;
    switch(arguments.length) {
      case 0:
        return ord__0.call(this);
      default:
        return ord__2.cljs$core$IFn$_invoke$arity$variadic(parser1, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ord.cljs$lang$maxFixedArity = 1;
  ord.cljs$lang$applyTo = ord__2.cljs$lang$applyTo;
  ord.cljs$core$IFn$_invoke$arity$0 = ord__0;
  ord.cljs$core$IFn$_invoke$arity$variadic = ord__2.cljs$core$IFn$_invoke$arity$variadic;
  return ord;
}();
instaparse.combinators_source.cat = function() {
  var cat__delegate = function(parsers) {
    if (cljs.core.every_QMARK_.call(null, cljs.core.partial.call(null, cljs.core._EQ_, instaparse.combinators_source.Epsilon), parsers)) {
      return instaparse.combinators_source.Epsilon;
    } else {
      var parsers__$1 = cljs.core.remove.call(null, cljs.core.PersistentHashSet.fromArray([instaparse.combinators_source.Epsilon], true), parsers);
      if (instaparse.reduction.singleton_QMARK_.call(null, parsers__$1)) {
        return cljs.core.first.call(null, parsers__$1);
      } else {
        return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "cat", "cat", -1457810207), new cljs.core.Keyword(null, "parsers", "parsers", -804353827), parsers__$1], null);
      }
    }
  };
  var cat = function(var_args) {
    var parsers = null;
    if (arguments.length > 0) {
      parsers = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cat__delegate.call(this, parsers);
  };
  cat.cljs$lang$maxFixedArity = 0;
  cat.cljs$lang$applyTo = function(arglist__29192) {
    var parsers = cljs.core.seq(arglist__29192);
    return cat__delegate(parsers);
  };
  cat.cljs$core$IFn$_invoke$arity$variadic = cat__delegate;
  return cat;
}();
instaparse.combinators_source.string = function string(s) {
  if (cljs.core._EQ_.call(null, s, "")) {
    return instaparse.combinators_source.Epsilon;
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "string", "string", -1989541586), new cljs.core.Keyword(null, "string", "string", -1989541586), s], null);
  }
};
instaparse.combinators_source.string_ci = function string_ci(s) {
  if (cljs.core._EQ_.call(null, s, "")) {
    return instaparse.combinators_source.Epsilon;
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "string-ci", "string-ci", 374631805), new cljs.core.Keyword(null, "string", "string", -1989541586), s], null);
  }
};
instaparse.combinators_source.regexp__GT_str = function regexp__GT_str(r) {
  if (cljs.core.regexp_QMARK_.call(null, r)) {
    var s = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(r);
    return cljs.core.subs.call(null, s, 1, cljs.core.count.call(null, s) - 1);
  } else {
    return r;
  }
};
instaparse.combinators_source.regexp = function regexp(r) {
  var s = "^" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.combinators_source.regexp__GT_str.call(null, r));
  if (cljs.core._EQ_.call(null, s, "^")) {
    return instaparse.combinators_source.Epsilon;
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "regexp", "regexp", -541372782), new cljs.core.Keyword(null, "regexp", "regexp", -541372782), cljs.core.re_pattern.call(null, s)], null);
  }
};
instaparse.combinators_source.nt = function nt(s) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "nt", "nt", -835425781), new cljs.core.Keyword(null, "keyword", "keyword", 811389747), s], null);
};
instaparse.combinators_source.look = function look(parser) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "look", "look", -539441433), new cljs.core.Keyword(null, "parser", "parser", -1543495310), parser], null);
};
instaparse.combinators_source.neg = function neg(parser) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "neg", "neg", 1800032960), new cljs.core.Keyword(null, "parser", "parser", -1543495310), parser], null);
};
instaparse.combinators_source.hide = function hide(parser) {
  return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "hide", "hide", -596913169), true);
};
instaparse.combinators_source.hide_tag = function hide_tag(parser) {
  return instaparse.reduction.red.call(null, parser, instaparse.reduction.raw_non_terminal_reduction);
};
instaparse.combinators_source.hidden_tag_QMARK_ = function hidden_tag_QMARK_(parser) {
  return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser), instaparse.reduction.raw_non_terminal_reduction);
};
instaparse.combinators_source.unhide_content = function unhide_content(parser) {
  var parser__$1 = cljs.core.truth_((new cljs.core.Keyword(null, "hide", "hide", -596913169)).cljs$core$IFn$_invoke$arity$1(parser)) ? cljs.core.dissoc.call(null, parser, new cljs.core.Keyword(null, "hide", "hide", -596913169)) : parser;
  if (cljs.core.truth_((new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser__$1))) {
    return cljs.core.assoc.call(null, parser__$1, new cljs.core.Keyword(null, "parser", "parser", -1543495310), unhide_content.call(null, (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser__$1)));
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(parser__$1))) {
      return cljs.core.assoc.call(null, parser__$1, new cljs.core.Keyword(null, "parsers", "parsers", -804353827), cljs.core.map.call(null, unhide_content, (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(parser__$1)));
    } else {
      if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser__$1), new cljs.core.Keyword(null, "ord", "ord", 1142548323))) {
        return cljs.core.assoc.call(null, parser__$1, new cljs.core.Keyword(null, "parser1", "parser1", -439601422), unhide_content.call(null, (new cljs.core.Keyword(null, "parser1", "parser1", -439601422)).cljs$core$IFn$_invoke$arity$1(parser__$1)), new cljs.core.Keyword(null, "parser2", "parser2", 1013754688), unhide_content.call(null, (new cljs.core.Keyword(null, "parser2", "parser2", 1013754688)).cljs$core$IFn$_invoke$arity$1(parser__$1)));
      } else {
        return parser__$1;
      }
    }
  }
};
instaparse.combinators_source.unhide_all_content = function unhide_all_content(grammar) {
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__4379__auto__ = function iter__29201(s__29202) {
      return new cljs.core.LazySeq(null, function() {
        var s__29202__$1 = s__29202;
        while (true) {
          var temp__4126__auto__ = cljs.core.seq.call(null, s__29202__$1);
          if (temp__4126__auto__) {
            var s__29202__$2 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__29202__$2)) {
              var c__4377__auto__ = cljs.core.chunk_first.call(null, s__29202__$2);
              var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
              var b__29204 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
              if (function() {
                var i__29203 = 0;
                while (true) {
                  if (i__29203 < size__4378__auto__) {
                    var vec__29207 = cljs.core._nth.call(null, c__4377__auto__, i__29203);
                    var k = cljs.core.nth.call(null, vec__29207, 0, null);
                    var v = cljs.core.nth.call(null, vec__29207, 1, null);
                    cljs.core.chunk_append.call(null, b__29204, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, instaparse.combinators_source.unhide_content.call(null, v)], null));
                    var G__29209 = i__29203 + 1;
                    i__29203 = G__29209;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__29204), iter__29201.call(null, cljs.core.chunk_rest.call(null, s__29202__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__29204), null);
              }
            } else {
              var vec__29208 = cljs.core.first.call(null, s__29202__$2);
              var k = cljs.core.nth.call(null, vec__29208, 0, null);
              var v = cljs.core.nth.call(null, vec__29208, 1, null);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, instaparse.combinators_source.unhide_content.call(null, v)], null), iter__29201.call(null, cljs.core.rest.call(null, s__29202__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4379__auto__.call(null, grammar);
  }());
};
instaparse.combinators_source.unhide_tags = function unhide_tags(reduction_type, grammar) {
  var temp__4124__auto__ = instaparse.reduction.reduction_types.call(null, reduction_type);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var reduction = temp__4124__auto__;
    return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
      var iter__4379__auto__ = function(reduction, temp__4124__auto__) {
        return function iter__29218(s__29219) {
          return new cljs.core.LazySeq(null, function(reduction, temp__4124__auto__) {
            return function() {
              var s__29219__$1 = s__29219;
              while (true) {
                var temp__4126__auto__ = cljs.core.seq.call(null, s__29219__$1);
                if (temp__4126__auto__) {
                  var s__29219__$2 = temp__4126__auto__;
                  if (cljs.core.chunked_seq_QMARK_.call(null, s__29219__$2)) {
                    var c__4377__auto__ = cljs.core.chunk_first.call(null, s__29219__$2);
                    var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                    var b__29221 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                    if (function() {
                      var i__29220 = 0;
                      while (true) {
                        if (i__29220 < size__4378__auto__) {
                          var vec__29224 = cljs.core._nth.call(null, c__4377__auto__, i__29220);
                          var k = cljs.core.nth.call(null, vec__29224, 0, null);
                          var v = cljs.core.nth.call(null, vec__29224, 1, null);
                          cljs.core.chunk_append.call(null, b__29221, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.assoc.call(null, v, new cljs.core.Keyword(null, "red", "red", -969428204), reduction.call(null, k))], null));
                          var G__29226 = i__29220 + 1;
                          i__29220 = G__29226;
                          continue;
                        } else {
                          return true;
                        }
                        break;
                      }
                    }()) {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__29221), iter__29218.call(null, cljs.core.chunk_rest.call(null, s__29219__$2)));
                    } else {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__29221), null);
                    }
                  } else {
                    var vec__29225 = cljs.core.first.call(null, s__29219__$2);
                    var k = cljs.core.nth.call(null, vec__29225, 0, null);
                    var v = cljs.core.nth.call(null, vec__29225, 1, null);
                    return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.assoc.call(null, v, new cljs.core.Keyword(null, "red", "red", -969428204), reduction.call(null, k))], null), iter__29218.call(null, cljs.core.rest.call(null, s__29219__$2)));
                  }
                } else {
                  return null;
                }
                break;
              }
            };
          }(reduction, temp__4124__auto__), null, null);
        };
      }(reduction, temp__4124__auto__);
      return iter__4379__auto__.call(null, grammar);
    }());
  } else {
    throw "Invalid output format" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(reduction_type) + ". Use :enlive or :hiccup.";
  }
};
instaparse.combinators_source.unhide_all = function unhide_all(reduction_type, grammar) {
  var temp__4124__auto__ = instaparse.reduction.reduction_types.call(null, reduction_type);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var reduction = temp__4124__auto__;
    return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
      var iter__4379__auto__ = function(reduction, temp__4124__auto__) {
        return function iter__29235(s__29236) {
          return new cljs.core.LazySeq(null, function(reduction, temp__4124__auto__) {
            return function() {
              var s__29236__$1 = s__29236;
              while (true) {
                var temp__4126__auto__ = cljs.core.seq.call(null, s__29236__$1);
                if (temp__4126__auto__) {
                  var s__29236__$2 = temp__4126__auto__;
                  if (cljs.core.chunked_seq_QMARK_.call(null, s__29236__$2)) {
                    var c__4377__auto__ = cljs.core.chunk_first.call(null, s__29236__$2);
                    var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                    var b__29238 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                    if (function() {
                      var i__29237 = 0;
                      while (true) {
                        if (i__29237 < size__4378__auto__) {
                          var vec__29241 = cljs.core._nth.call(null, c__4377__auto__, i__29237);
                          var k = cljs.core.nth.call(null, vec__29241, 0, null);
                          var v = cljs.core.nth.call(null, vec__29241, 1, null);
                          cljs.core.chunk_append.call(null, b__29238, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.assoc.call(null, instaparse.combinators_source.unhide_content.call(null, v), new cljs.core.Keyword(null, "red", "red", -969428204), reduction.call(null, k))], null));
                          var G__29243 = i__29237 + 1;
                          i__29237 = G__29243;
                          continue;
                        } else {
                          return true;
                        }
                        break;
                      }
                    }()) {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__29238), iter__29235.call(null, cljs.core.chunk_rest.call(null, s__29236__$2)));
                    } else {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__29238), null);
                    }
                  } else {
                    var vec__29242 = cljs.core.first.call(null, s__29236__$2);
                    var k = cljs.core.nth.call(null, vec__29242, 0, null);
                    var v = cljs.core.nth.call(null, vec__29242, 1, null);
                    return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.assoc.call(null, instaparse.combinators_source.unhide_content.call(null, v), new cljs.core.Keyword(null, "red", "red", -969428204), reduction.call(null, k))], null), iter__29235.call(null, cljs.core.rest.call(null, s__29236__$2)));
                  }
                } else {
                  return null;
                }
                break;
              }
            };
          }(reduction, temp__4124__auto__), null, null);
        };
      }(reduction, temp__4124__auto__);
      return iter__4379__auto__.call(null, grammar);
    }());
  } else {
    throw "Invalid output format" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(reduction_type) + ". Use :enlive or :hiccup.";
  }
};
instaparse.combinators_source.auto_whitespace_parser = function auto_whitespace_parser(parser, ws_parser) {
  var G__29246 = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser).fqn : null;
  switch(G__29246) {
    case "neg":
      return cljs.core.update_in.call(null, parser, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parser", "parser", -1543495310)], null), auto_whitespace_parser, ws_parser);
      break;
    case "cat":
      return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "parsers", "parsers", -804353827), cljs.core.map.call(null, function(G__29246) {
        return function(p1__29244_SHARP_) {
          return auto_whitespace_parser.call(null, p1__29244_SHARP_, ws_parser);
        };
      }(G__29246), (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(parser)));
      break;
    case "ord":
      return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "parser1", "parser1", -439601422), auto_whitespace_parser.call(null, (new cljs.core.Keyword(null, "parser1", "parser1", -439601422)).cljs$core$IFn$_invoke$arity$1(parser), ws_parser), new cljs.core.Keyword(null, "parser2", "parser2", 1013754688), auto_whitespace_parser.call(null, (new cljs.core.Keyword(null, "parser2", "parser2", 1013754688)).cljs$core$IFn$_invoke$arity$1(parser), ws_parser));
      break;
    case "alt":
      return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "parsers", "parsers", -804353827), cljs.core.map.call(null, function(G__29246) {
        return function(p1__29244_SHARP_) {
          return auto_whitespace_parser.call(null, p1__29244_SHARP_, ws_parser);
        };
      }(G__29246), (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(parser)));
      break;
    case "look":
      return cljs.core.update_in.call(null, parser, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parser", "parser", -1543495310)], null), auto_whitespace_parser, ws_parser);
      break;
    case "nt":
      return parser;
      break;
    case "rep":
      return cljs.core.update_in.call(null, parser, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parser", "parser", -1543495310)], null), auto_whitespace_parser, ws_parser);
      break;
    case "star":
      return cljs.core.update_in.call(null, parser, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parser", "parser", -1543495310)], null), auto_whitespace_parser, ws_parser);
      break;
    case "string":
      if (cljs.core.truth_((new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser))) {
        return cljs.core.assoc.call(null, instaparse.combinators_source.cat.call(null, ws_parser, cljs.core.dissoc.call(null, parser, new cljs.core.Keyword(null, "red", "red", -969428204))), new cljs.core.Keyword(null, "red", "red", -969428204), (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser));
      } else {
        return instaparse.combinators_source.cat.call(null, ws_parser, parser);
      }
      break;
    case "regexp":
      if (cljs.core.truth_((new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser))) {
        return cljs.core.assoc.call(null, instaparse.combinators_source.cat.call(null, ws_parser, cljs.core.dissoc.call(null, parser, new cljs.core.Keyword(null, "red", "red", -969428204))), new cljs.core.Keyword(null, "red", "red", -969428204), (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser));
      } else {
        return instaparse.combinators_source.cat.call(null, ws_parser, parser);
      }
      break;
    case "plus":
      return cljs.core.update_in.call(null, parser, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parser", "parser", -1543495310)], null), auto_whitespace_parser, ws_parser);
      break;
    case "epsilon":
      return parser;
      break;
    case "string-ci":
      if (cljs.core.truth_((new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser))) {
        return cljs.core.assoc.call(null, instaparse.combinators_source.cat.call(null, ws_parser, cljs.core.dissoc.call(null, parser, new cljs.core.Keyword(null, "red", "red", -969428204))), new cljs.core.Keyword(null, "red", "red", -969428204), (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser));
      } else {
        return instaparse.combinators_source.cat.call(null, ws_parser, parser);
      }
      break;
    case "opt":
      return cljs.core.update_in.call(null, parser, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parser", "parser", -1543495310)], null), auto_whitespace_parser, ws_parser);
      break;
    default:
      throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser)));;
  }
};
instaparse.combinators_source.auto_whitespace = function auto_whitespace(grammar, start, grammar_ws, start_ws) {
  var ws_parser = instaparse.combinators_source.hide.call(null, instaparse.combinators_source.opt.call(null, instaparse.combinators_source.nt.call(null, start_ws)));
  var grammar_ws__$1 = cljs.core.assoc.call(null, grammar_ws, start_ws, instaparse.combinators_source.hide_tag.call(null, grammar_ws.call(null, start_ws)));
  var modified_grammar = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__4379__auto__ = function(ws_parser, grammar_ws__$1) {
      return function iter__29256(s__29257) {
        return new cljs.core.LazySeq(null, function(ws_parser, grammar_ws__$1) {
          return function() {
            var s__29257__$1 = s__29257;
            while (true) {
              var temp__4126__auto__ = cljs.core.seq.call(null, s__29257__$1);
              if (temp__4126__auto__) {
                var s__29257__$2 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__29257__$2)) {
                  var c__4377__auto__ = cljs.core.chunk_first.call(null, s__29257__$2);
                  var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                  var b__29259 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                  if (function() {
                    var i__29258 = 0;
                    while (true) {
                      if (i__29258 < size__4378__auto__) {
                        var vec__29262 = cljs.core._nth.call(null, c__4377__auto__, i__29258);
                        var nt = cljs.core.nth.call(null, vec__29262, 0, null);
                        var parser = cljs.core.nth.call(null, vec__29262, 1, null);
                        cljs.core.chunk_append.call(null, b__29259, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [nt, instaparse.combinators_source.auto_whitespace_parser.call(null, parser, ws_parser)], null));
                        var G__29264 = i__29258 + 1;
                        i__29258 = G__29264;
                        continue;
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__29259), iter__29256.call(null, cljs.core.chunk_rest.call(null, s__29257__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__29259), null);
                  }
                } else {
                  var vec__29263 = cljs.core.first.call(null, s__29257__$2);
                  var nt = cljs.core.nth.call(null, vec__29263, 0, null);
                  var parser = cljs.core.nth.call(null, vec__29263, 1, null);
                  return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [nt, instaparse.combinators_source.auto_whitespace_parser.call(null, parser, ws_parser)], null), iter__29256.call(null, cljs.core.rest.call(null, s__29257__$2)));
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(ws_parser, grammar_ws__$1), null, null);
      };
    }(ws_parser, grammar_ws__$1);
    return iter__4379__auto__.call(null, grammar);
  }());
  var final_grammar = cljs.core.assoc.call(null, modified_grammar, start, cljs.core.assoc.call(null, instaparse.combinators_source.cat.call(null, cljs.core.dissoc.call(null, modified_grammar.call(null, start), new cljs.core.Keyword(null, "red", "red", -969428204)), ws_parser), new cljs.core.Keyword(null, "red", "red", -969428204), (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(modified_grammar.call(null, start))));
  return cljs.core.merge.call(null, final_grammar, grammar_ws__$1);
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.standardAngleInRadians = function(angle) {
  return goog.math.modulo(angle, 2 * Math.PI);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length2;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return(goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (parseFloat("1e" + x) > num);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return!f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return "(" + this.x + ", " + this.y + ")";
  };
}
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += tx;
    if (goog.isNumber(opt_ty)) {
      this.y += opt_ty;
    }
  }
  return this;
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};
goog.math.Coordinate.prototype.rotateRadians = function(radians, opt_center) {
  var center = opt_center || new goog.math.Coordinate(0, 0);
  var x = this.x;
  var y = this.y;
  var cos = Math.cos(radians);
  var sin = Math.sin(radians);
  this.x = (x - center.x) * cos - (y - center.y) * sin + center.x;
  this.y = (x - center.x) * sin + (y - center.y) * cos + center.y;
};
goog.math.Coordinate.prototype.rotateDegrees = function(degrees, opt_center) {
  this.rotateRadians(goog.math.toRadians(degrees), opt_center);
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height;
};
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return "(" + this.width + " x " + this.height + ")";
  };
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function() {
  return(this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function() {
  return!this.area();
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.provide("goog.dom");
goog.provide("goog.dom.Appendable");
goog.provide("goog.dom.DomHelper");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.TagName");
goog.require("goog.functions");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.define("goog.dom.ASSUME_QUIRKS_MODE", false);
goog.define("goog.dom.ASSUME_STANDARDS_MODE", false);
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper);
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document;
};
goog.dom.getElement = function(element) {
  return goog.dom.getElementHelper_(document, element);
};
goog.dom.getElementHelper_ = function(doc, element) {
  return goog.isString(element) ? doc.getElementById(element) : element;
};
goog.dom.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(document, id);
};
goog.dom.getRequiredElementHelper_ = function(doc, id) {
  goog.asserts.assertString(id);
  var element = goog.dom.getElementHelper_(doc, id);
  element = goog.asserts.assertElement(element, "No element found with id: " + id);
  return element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className);
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el);
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (goog.dom.canUseQuerySelector_(parent)) {
    retVal = parent.querySelector("." + className);
  } else {
    retVal = goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el)[0];
  }
  return retVal || null;
};
goog.dom.getRequiredElementByClass = function(className, opt_root) {
  var retValue = goog.dom.getElementByClass(className, opt_root);
  return goog.asserts.assert(retValue, "No element found with className: " + className);
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return!!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query);
  }
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if (tagName) {
      var arrayLike = {};
      var len = 0;
      for (var i = 0, el;el = els[i];i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;
      return arrayLike;
    } else {
      return els;
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if (typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return arrayLike;
  } else {
    return els;
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (key == "style") {
      element.style.cssText = val;
    } else {
      if (key == "class") {
        element.className = val;
      } else {
        if (key == "for") {
          element.htmlFor = val;
        } else {
          if (key in goog.dom.DIRECT_ATTRIBUTE_MAP_) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
          } else {
            if (goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val);
            } else {
              element[key] = val;
            }
          }
        }
      }
    }
  });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if (doc) {
    var body = doc.body;
    var docEl = doc.documentElement;
    if (!body && !docEl) {
      return 0;
    }
    var vh = goog.dom.getViewportSize_(win).height;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
    } else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }
      if (sh > vh) {
        height = sh > oh ? sh : oh;
      } else {
        height = sh < oh ? sh : oh;
      }
    }
  }
  return height;
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || goog.global || window;
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  if (goog.userAgent.IE && goog.userAgent.isVersionOrHigher("10") && win.pageYOffset != el.scrollTop) {
    return new goog.math.Coordinate(el.scrollLeft, el.scrollTop);
  }
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  if (!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc)) {
    return doc.documentElement;
  }
  return doc.body || doc.documentElement;
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && attributes && (attributes.name || attributes.type)) {
    var tagNameArr = ["\x3c", tagName];
    if (attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone;
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("");
  }
  var element = doc.createElement(tagName);
  if (attributes) {
    if (goog.isString(attributes)) {
      element.className = attributes;
    } else {
      if (goog.isArray(attributes)) {
        element.className = attributes.join(" ");
      } else {
        goog.dom.setProperties(element, attributes);
      }
    }
  }
  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }
  return element;
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if (child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
    }
  }
  for (var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
    } else {
      childHandler(arg);
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name);
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var rowHtml = ["\x3ctr\x3e"];
  for (var i = 0;i < columns;i++) {
    rowHtml.push(fillWithNbsp ? "\x3ctd\x3e\x26nbsp;\x3c/td\x3e" : "\x3ctd\x3e\x3c/td\x3e");
  }
  rowHtml.push("\x3c/tr\x3e");
  rowHtml = rowHtml.join("");
  var totalHtml = ["\x3ctable\x3e"];
  for (i = 0;i < rows;i++) {
    totalHtml.push(rowHtml);
  }
  totalHtml.push("\x3c/table\x3e");
  var elem = doc.createElement(goog.dom.TagName.DIV);
  elem.innerHTML = totalHtml.join("");
  return(elem.removeChild(elem.firstChild));
};
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString);
};
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement("div");
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    tempDiv.innerHTML = "\x3cbr\x3e" + htmlString;
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    tempDiv.innerHTML = htmlString;
  }
  if (tempDiv.childNodes.length == 1) {
    return(tempDiv.removeChild(tempDiv.firstChild));
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }
  return doc.compatMode == "CSS1Compat";
};
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch(node.tagName) {
    case goog.dom.TagName.APPLET:
    ;
    case goog.dom.TagName.AREA:
    ;
    case goog.dom.TagName.BASE:
    ;
    case goog.dom.TagName.BR:
    ;
    case goog.dom.TagName.COL:
    ;
    case goog.dom.TagName.COMMAND:
    ;
    case goog.dom.TagName.EMBED:
    ;
    case goog.dom.TagName.FRAME:
    ;
    case goog.dom.TagName.HR:
    ;
    case goog.dom.TagName.IMG:
    ;
    case goog.dom.TagName.INPUT:
    ;
    case goog.dom.TagName.IFRAME:
    ;
    case goog.dom.TagName.ISINDEX:
    ;
    case goog.dom.TagName.KEYGEN:
    ;
    case goog.dom.TagName.LINK:
    ;
    case goog.dom.TagName.NOFRAMES:
    ;
    case goog.dom.TagName.NOSCRIPT:
    ;
    case goog.dom.TagName.META:
    ;
    case goog.dom.TagName.OBJECT:
    ;
    case goog.dom.TagName.PARAM:
    ;
    case goog.dom.TagName.SCRIPT:
    ;
    case goog.dom.TagName.SOURCE:
    ;
    case goog.dom.TagName.STYLE:
    ;
    case goog.dom.TagName.TRACK:
    ;
    case goog.dom.TagName.WBR:
      return false;
  }
  return true;
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child);
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function(node) {
  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if (element.removeNode) {
      return(element.removeNode(false));
    } else {
      while (child = element.firstChild) {
        parent.insertBefore(child, element);
      }
      return(goog.dom.removeNode(element));
    }
  }
};
goog.dom.getChildren = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children;
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};
goog.dom.getFirstElementChild = function(node) {
  if (node.firstElementChild != undefined) {
    return(node).firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function(node) {
  if (node.lastElementChild != undefined) {
    return(node).lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function(node) {
  if (node.nextElementSibling != undefined) {
    return(node).nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function(node) {
  if (node.previousElementSibling != undefined) {
    return(node).previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }
  return(node);
};
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }
  if (node.firstChild) {
    return node.firstChild;
  }
  while (node && !node.nextSibling) {
    node = node.parentNode;
  }
  return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }
  if (!node.previousSibling) {
    return node.parentNode;
  }
  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }
  return node;
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj;
};
goog.dom.getParentElement = function(element) {
  var parent;
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    var isIe9 = goog.userAgent.IE && goog.userAgent.isVersionOrHigher("9") && !goog.userAgent.isVersionOrHigher("10");
    if (!(isIe9 && goog.global["SVGElement"] && element instanceof goog.global["SVGElement"])) {
      parent = element.parentElement;
      if (parent) {
        return parent;
      }
    }
  }
  parent = element.parentNode;
  return goog.dom.isElement(parent) ? (parent) : null;
};
goog.dom.contains = function(parent, descendant) {
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }
  if (typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16);
  }
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if (node1 == node2) {
    return 0;
  }
  if (node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return-1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }
  if ("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }
      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return-1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }
      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }
      return(isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    return-1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while (s = s.previousSibling) {
    if (s == node1) {
      return-1;
    }
  }
  return 1;
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else {
    if (count == 1) {
      return arguments[0];
    }
  }
  var paths = [];
  var minLength = Infinity;
  for (i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for (var j = 1;j < count;j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};
goog.dom.getOwnerDocument = function(node) {
  goog.asserts.assert(node, "Node cannot be null or undefined.");
  return(node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document);
};
goog.dom.getFrameContentDocument = function(frame) {
  var doc = frame.contentDocument || frame.contentWindow.document;
  return doc;
};
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow || goog.dom.getWindow(goog.dom.getFrameContentDocument(frame));
};
goog.dom.setTextContent = function(node, text) {
  goog.asserts.assert(node != null, "goog.dom.setTextContent expects a non-null value for node");
  if ("textContent" in node) {
    node.textContent = text;
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      node.data = text;
    } else {
      if (node.firstChild && node.firstChild.nodeType == goog.dom.NodeType.TEXT) {
        while (node.lastChild != node.firstChild) {
          node.removeChild(node.lastChild);
        }
        node.firstChild.data = text;
      } else {
        goog.dom.removeChildren(node);
        var doc = goog.dom.getOwnerDocument(node);
        node.appendChild(doc.createTextNode(String(text)));
      }
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  if ("outerHTML" in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement("div");
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  return goog.dom.hasSpecifiedTabIndex_(element) && goog.dom.isTabIndexFocusable_(element);
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex");
  }
};
goog.dom.isFocusable = function(element) {
  var focusable;
  if (goog.dom.nativelySupportsFocus_(element)) {
    focusable = !element.disabled && (!goog.dom.hasSpecifiedTabIndex_(element) || goog.dom.isTabIndexFocusable_(element));
  } else {
    focusable = goog.dom.isFocusableTabIndex(element);
  }
  return focusable && goog.userAgent.IE ? goog.dom.hasNonZeroBoundingRect_(element) : focusable;
};
goog.dom.hasSpecifiedTabIndex_ = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  return goog.isDefAndNotNull(attrNode) && attrNode.specified;
};
goog.dom.isTabIndexFocusable_ = function(element) {
  var index = element.tabIndex;
  return goog.isNumber(index) && index >= 0 && index < 32768;
};
goog.dom.nativelySupportsFocus_ = function(element) {
  return element.tagName == goog.dom.TagName.A || element.tagName == goog.dom.TagName.INPUT || element.tagName == goog.dom.TagName.TEXTAREA || element.tagName == goog.dom.TagName.SELECT || element.tagName == goog.dom.TagName.BUTTON;
};
goog.dom.hasNonZeroBoundingRect_ = function(element) {
  var rect = goog.isFunction(element["getBoundingClientRect"]) ? element.getBoundingClientRect() : {"height":element.offsetHeight, "width":element.offsetWidth};
  return goog.isDefAndNotNull(rect) && rect.height > 0 && rect.width > 0;
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("");
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ");
  }
  if (textContent != " ") {
    textContent = textContent.replace(/^\s*/, "");
  }
  return textContent;
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("");
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      if (normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""));
      } else {
        buf.push(node.nodeValue);
      }
    } else {
      if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
      } else {
        var child = node.firstChild;
        while (child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling;
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while (cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length;
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    } else {
      if (cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length;
      } else {
        if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        } else {
          for (var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i]);
          }
        }
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }
  return cur;
};
goog.dom.isNodeList = function(val) {
  if (val && typeof val.length == "number") {
    if (goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string";
    } else {
      if (goog.isFunction(val)) {
        return typeof val.item == "function";
      }
    }
  }
  return false;
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return(goog.dom.getAncestor(element, function(node) {
    return(!tagName || node.nodeName == tagName) && (!opt_class || goog.isString(node.className) && goog.array.contains(node.className.split(/\s+/), opt_class));
  }, true));
};
goog.dom.getAncestorByClass = function(element, className) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className);
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (!opt_includeNode) {
    element = element.parentNode;
  }
  var ignoreSearchSteps = opt_maxSearchSteps == null;
  var steps = 0;
  while (element && (ignoreSearchSteps || steps <= opt_maxSearchSteps)) {
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  return null;
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement;
  } catch (e) {
  }
  return null;
};
goog.dom.devicePixelRatio_;
goog.dom.getPixelRatio = goog.functions.cacheReturnValue(function() {
  var win = goog.dom.getWindow();
  var isFirefoxMobile = goog.userAgent.GECKO && goog.userAgent.MOBILE;
  if (goog.isDef(win.devicePixelRatio) && !isFirefoxMobile) {
    return win.devicePixelRatio;
  } else {
    if (win.matchMedia) {
      return goog.dom.matchesPixelRatio_(.75) || goog.dom.matchesPixelRatio_(1.5) || goog.dom.matchesPixelRatio_(2) || goog.dom.matchesPixelRatio_(3) || 1;
    }
  }
  return 1;
});
goog.dom.matchesPixelRatio_ = function(pixelRatio) {
  var win = goog.dom.getWindow();
  var query = "(-webkit-min-device-pixel-ratio: " + pixelRatio + ")," + "(min--moz-device-pixel-ratio: " + pixelRatio + ")," + "(min-resolution: " + pixelRatio + "dppx)";
  return win.matchMedia(query).matches ? pixelRatio : 0;
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || goog.global.document || document;
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  return goog.dom.getElementHelper_(this.document_, element);
};
goog.dom.DomHelper.prototype.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(this.document_, id);
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.getRequiredElementByClass = function(className, opt_root) {
  var root = opt_root || this.document_;
  return goog.dom.getRequiredElementByClass(className, root);
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name);
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString);
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.isFocusable = goog.dom.isFocusable;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9b") || goog.userAgent.IE && 
goog.userAgent.isVersionOrHigher("8") || goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher("528"), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("8") || goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || !!(goog.global["document"] && document.documentElement && "ontouchstart" in document.documentElement) || !!(goog.global["navigator"] && 
goog.global["navigator"]["msMaxTouchPoints"])};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose = goog.abstractMethod;
goog.disposable.IDisposable.prototype.isDisposed = goog.abstractMethod;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.provide("goog.disposeAll");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
      this.creationStack = (new Error).stack;
    }
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.define("goog.Disposable.MONITORING_MODE", 0);
goog.define("goog.Disposable.INCLUDE_STACK_ON_CREATION", true);
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.isDef(opt_scope) ? goog.bind(callback, opt_scope) : callback);
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.events.EventId");
goog.events.EventId = function(eventId) {
  this.id = eventId;
};
goog.events.EventId.prototype.toString = function() {
  return this.id;
};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.require("goog.events.EventId");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type instanceof goog.events.EventId ? String(type) : type;
  this.target = opt_target;
  this.currentTarget = this.target;
  this.propagationStopped_ = false;
  this.defaultPrevented = false;
  this.returnValue_ = true;
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.getVendorPrefixedName_ = function(eventName) {
  return goog.userAgent.WEBKIT ? "webkit" + eventName : goog.userAgent.OPERA ? "o" + eventName.toLowerCase() : eventName.toLowerCase();
};
goog.events.EventType = {CLICK:"click", RIGHTCLICK:"rightclick", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", MOUSEENTER:"mouseenter", MOUSELEAVE:"mouseleave", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", 
SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONSOLEMESSAGE:"consolemessage", CONTEXTMENU:"contextmenu", DOMCONTENTLOADED:"DOMContentLoaded", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", 
ORIENTATIONCHANGE:"orientationchange", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", ANIMATIONSTART:goog.events.getVendorPrefixedName_("AnimationStart"), ANIMATIONEND:goog.events.getVendorPrefixedName_("AnimationEnd"), 
ANIMATIONITERATION:goog.events.getVendorPrefixedName_("AnimationIteration"), TRANSITIONEND:goog.events.getVendorPrefixedName_("TransitionEnd"), POINTERDOWN:"pointerdown", POINTERUP:"pointerup", POINTERCANCEL:"pointercancel", POINTERMOVE:"pointermove", POINTEROVER:"pointerover", POINTEROUT:"pointerout", POINTERENTER:"pointerenter", POINTERLEAVE:"pointerleave", GOTPOINTERCAPTURE:"gotpointercapture", LOSTPOINTERCAPTURE:"lostpointercapture", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", 
MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERENTER:"MSPointerEnter", MSPOINTERHOVER:"MSPointerHover", MSPOINTERLEAVE:"MSPointerLeave", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROUT:"MSPointerOut", MSPOINTEROVER:"MSPointerOver", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", 
COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend", EXIT:"exit", LOADABORT:"loadabort", LOADCOMMIT:"loadcommit", LOADREDIRECT:"loadredirect", LOADSTART:"loadstart", LOADSTOP:"loadstop", RESPONSIVE:"responsive", SIZECHANGED:"sizechanged", UNRESPONSIVE:"unresponsive", VISIBILITYCHANGE:"visibilitychange", STORAGE:"storage", DOMSUBTREEMODIFIED:"DOMSubtreeModified", DOMNODEINSERTED:"DOMNodeInserted", DOMNODEREMOVED:"DOMNodeRemoved", DOMNODEREMOVEDFROMDOCUMENT:"DOMNodeRemovedFromDocument", 
DOMNODEINSERTEDINTODOCUMENT:"DOMNodeInsertedIntoDocument", DOMATTRMODIFIED:"DOMAttrModified", DOMCHARACTERDATAMODIFIED:"DOMCharacterDataModified"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  goog.events.BrowserEvent.base(this, "constructor", opt_e ? opt_e.type : "");
  this.target = null;
  this.currentTarget = null;
  this.relatedTarget = null;
  this.offsetX = 0;
  this.offsetY = 0;
  this.clientX = 0;
  this.clientY = 0;
  this.screenX = 0;
  this.screenY = 0;
  this.button = 0;
  this.keyCode = 0;
  this.charCode = 0;
  this.ctrlKey = false;
  this.altKey = false;
  this.shiftKey = false;
  this.metaKey = false;
  this.state = null;
  this.platformModifierKey = false;
  this.event_ = null;
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.provide("goog.iter");
goog.provide("goog.iter.Iterable");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.functions");
goog.require("goog.math");
goog.iter.Iterable;
if ("StopIteration" in goog.global) {
  goog.iter.StopIteration = goog.global["StopIteration"];
} else {
  goog.iter.StopIteration = Error("StopIteration");
}
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.filterFalse = function(iterable, f, opt_obj) {
  return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    var val = iterator.next();
    return f.call(opt_obj, val, undefined, iterator);
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  var iterator = goog.iter.toIterator(arguments);
  var iter = new goog.iter.Iterator;
  var current = null;
  iter.next = function() {
    while (true) {
      if (current == null) {
        var it = iterator.next();
        current = goog.iter.toIterator(it);
      }
      try {
        return current.next();
      } catch (ex) {
        if (ex !== goog.iter.StopIteration) {
          throw ex;
        }
        current = null;
      }
    }
  };
  return iter;
};
goog.iter.chainFromIterable = function(iterable) {
  return goog.iter.chain.apply(undefined, iterable);
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while (true) {
      if (taking) {
        var val = iterator.next();
        if (f.call(opt_obj, val, undefined, iterator)) {
          return val;
        } else {
          taking = false;
        }
      } else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2) {
  var fillValue = {};
  var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);
  return goog.iter.every(pairs, function(pair) {
    return pair[0] == pair[1];
  });
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return!arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.iter.count = function(opt_start, opt_step) {
  var counter = opt_start || 0;
  var step = goog.isDef(opt_step) ? opt_step : 1;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var returnValue = counter;
    counter += step;
    return returnValue;
  };
  return iter;
};
goog.iter.repeat = function(value) {
  var iter = new goog.iter.Iterator;
  iter.next = goog.functions.constant(value);
  return iter;
};
goog.iter.accumulate = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var total = 0;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    total += iterator.next();
    return total;
  };
  return iter;
};
goog.iter.zip = function(var_args) {
  var args = arguments;
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var arr = goog.array.map(iterators, function(it) {
        return it.next();
      });
      return arr;
    };
  }
  return iter;
};
goog.iter.zipLongest = function(fillValue, var_args) {
  var args = goog.array.slice(arguments, 1);
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var iteratorsHaveValues = false;
      var arr = goog.array.map(iterators, function(it) {
        var returnValue;
        try {
          returnValue = it.next();
          iteratorsHaveValues = true;
        } catch (ex) {
          if (ex !== goog.iter.StopIteration) {
            throw ex;
          }
          returnValue = fillValue;
        }
        return returnValue;
      });
      if (!iteratorsHaveValues) {
        throw goog.iter.StopIteration;
      }
      return arr;
    };
  }
  return iter;
};
goog.iter.compress = function(iterable, selectors) {
  var selectorIterator = goog.iter.toIterator(selectors);
  return goog.iter.filter(iterable, function() {
    return!!selectorIterator.next();
  });
};
goog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {
  this.iterator = goog.iter.toIterator(iterable);
  this.keyFunc = opt_keyFunc || goog.functions.identity;
  this.targetKey;
  this.currentKey;
  this.currentValue;
};
goog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);
goog.iter.GroupByIterator_.prototype.next = function() {
  while (this.currentKey == this.targetKey) {
    this.currentValue = this.iterator.next();
    this.currentKey = this.keyFunc(this.currentValue);
  }
  this.targetKey = this.currentKey;
  return[this.currentKey, this.groupItems_(this.targetKey)];
};
goog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {
  var arr = [];
  while (this.currentKey == targetKey) {
    arr.push(this.currentValue);
    try {
      this.currentValue = this.iterator.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
      break;
    }
    this.currentKey = this.keyFunc(this.currentValue);
  }
  return arr;
};
goog.iter.groupBy = function(iterable, opt_keyFunc) {
  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);
};
goog.iter.starMap = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var args = goog.iter.toArray(iterator.next());
    return f.apply(opt_obj, goog.array.concat(args, undefined, iterator));
  };
  return iter;
};
goog.iter.tee = function(iterable, opt_num) {
  var iterator = goog.iter.toIterator(iterable);
  var num = goog.isNumber(opt_num) ? opt_num : 2;
  var buffers = goog.array.map(goog.array.range(num), function() {
    return[];
  });
  var addNextIteratorValueToBuffers = function() {
    var val = iterator.next();
    goog.array.forEach(buffers, function(buffer) {
      buffer.push(val);
    });
  };
  var createIterator = function(buffer) {
    var iter = new goog.iter.Iterator;
    iter.next = function() {
      if (goog.array.isEmpty(buffer)) {
        addNextIteratorValueToBuffers();
      }
      goog.asserts.assert(!goog.array.isEmpty(buffer));
      return buffer.shift();
    };
    return iter;
  };
  return goog.array.map(buffers, createIterator);
};
goog.iter.enumerate = function(iterable, opt_start) {
  return goog.iter.zip(goog.iter.count(opt_start), iterable);
};
goog.iter.limit = function(iterable, limitSize) {
  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var remaining = limitSize;
  iter.next = function() {
    if (remaining-- > 0) {
      return iterator.next();
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.consume = function(iterable, count) {
  goog.asserts.assert(goog.math.isInt(count) && count >= 0);
  var iterator = goog.iter.toIterator(iterable);
  while (count-- > 0) {
    goog.iter.nextOrValue(iterator, null);
  }
  return iterator;
};
goog.iter.slice = function(iterable, start, opt_end) {
  goog.asserts.assert(goog.math.isInt(start) && start >= 0);
  var iterator = goog.iter.consume(iterable, start);
  if (goog.isNumber(opt_end)) {
    goog.asserts.assert(goog.math.isInt((opt_end)) && opt_end >= start);
    iterator = goog.iter.limit(iterator, opt_end - start);
  }
  return iterator;
};
goog.iter.hasDuplicates_ = function(arr) {
  var deduped = [];
  goog.array.removeDuplicates(arr, deduped);
  return arr.length != deduped.length;
};
goog.iter.permutations = function(iterable, opt_length) {
  var elements = goog.iter.toArray(iterable);
  var length = goog.isNumber(opt_length) ? opt_length : elements.length;
  var sets = goog.array.repeat(elements, length);
  var product = goog.iter.product.apply(undefined, sets);
  return goog.iter.filter(product, function(arr) {
    return!goog.iter.hasDuplicates_(arr);
  });
};
goog.iter.combinations = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.iter.range(elements.length);
  var indexIterator = goog.iter.permutations(indexes, length);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.iter.combinationsWithReplacement = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.array.range(elements.length);
  var sets = goog.array.repeat(indexes, length);
  var indexIterator = goog.iter.product.apply(undefined, sets);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  this.count_ = 0;
  this.version_ = 0;
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return(this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.forEach = function(f, opt_obj) {
  var keys = this.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = this.get(key);
    f.call(opt_obj, value, key, this);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      if (version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if (i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key];
    }
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.dom.forms");
goog.require("goog.structs.Map");
goog.dom.forms.getFormDataMap = function(form) {
  var map = new goog.structs.Map;
  goog.dom.forms.getFormDataHelper_(form, map, goog.dom.forms.addFormDataToMap_);
  return map;
};
goog.dom.forms.getFormDataString = function(form) {
  var sb = [];
  goog.dom.forms.getFormDataHelper_(form, sb, goog.dom.forms.addFormDataToStringBuffer_);
  return sb.join("\x26");
};
goog.dom.forms.getFormDataHelper_ = function(form, result, fnAppend) {
  var els = form.elements;
  for (var el, i = 0;el = els[i];i++) {
    if (el.form != form || el.disabled || el.tagName.toLowerCase() == "fieldset") {
      continue;
    }
    var name = el.name;
    switch(el.type.toLowerCase()) {
      case "file":
      ;
      case "submit":
      ;
      case "reset":
      ;
      case "button":
        break;
      case "select-multiple":
        var values = goog.dom.forms.getValue(el);
        if (values != null) {
          for (var value, j = 0;value = values[j];j++) {
            fnAppend(result, name, value);
          }
        }
        break;
      default:
        var value = goog.dom.forms.getValue(el);
        if (value != null) {
          fnAppend(result, name, value);
        }
      ;
    }
  }
  var inputs = form.getElementsByTagName("input");
  for (var input, i = 0;input = inputs[i];i++) {
    if (input.form == form && input.type.toLowerCase() == "image") {
      name = input.name;
      fnAppend(result, name, input.value);
      fnAppend(result, name + ".x", "0");
      fnAppend(result, name + ".y", "0");
    }
  }
};
goog.dom.forms.addFormDataToMap_ = function(map, name, value) {
  var array = map.get(name);
  if (!array) {
    array = [];
    map.set(name, array);
  }
  array.push(value);
};
goog.dom.forms.addFormDataToStringBuffer_ = function(sb, name, value) {
  sb.push(encodeURIComponent(name) + "\x3d" + encodeURIComponent(value));
};
goog.dom.forms.hasFileInput = function(form) {
  var els = form.elements;
  for (var el, i = 0;el = els[i];i++) {
    if (!el.disabled && el.type && el.type.toLowerCase() == "file") {
      return true;
    }
  }
  return false;
};
goog.dom.forms.setDisabled = function(el, disabled) {
  if (el.tagName == "FORM") {
    var els = el.elements;
    for (var i = 0;el = els[i];i++) {
      goog.dom.forms.setDisabled(el, disabled);
    }
  } else {
    if (disabled == true) {
      el.blur();
    }
    el.disabled = disabled;
  }
};
goog.dom.forms.focusAndSelect = function(el) {
  el.focus();
  if (el.select) {
    el.select();
  }
};
goog.dom.forms.hasValue = function(el) {
  var value = goog.dom.forms.getValue(el);
  return!!value;
};
goog.dom.forms.hasValueByName = function(form, name) {
  var value = goog.dom.forms.getValueByName(form, name);
  return!!value;
};
goog.dom.forms.getValue = function(el) {
  var type = el.type;
  if (!goog.isDef(type)) {
    return null;
  }
  switch(type.toLowerCase()) {
    case "checkbox":
    ;
    case "radio":
      return goog.dom.forms.getInputChecked_(el);
    case "select-one":
      return goog.dom.forms.getSelectSingle_(el);
    case "select-multiple":
      return goog.dom.forms.getSelectMultiple_(el);
    default:
      return goog.isDef(el.value) ? el.value : null;
  }
};
goog.dom.$F = goog.dom.forms.getValue;
goog.dom.forms.getValueByName = function(form, name) {
  var els = form.elements[name];
  if (els) {
    if (els.type) {
      return goog.dom.forms.getValue(els);
    } else {
      for (var i = 0;i < els.length;i++) {
        var val = goog.dom.forms.getValue(els[i]);
        if (val) {
          return val;
        }
      }
    }
  }
  return null;
};
goog.dom.forms.getInputChecked_ = function(el) {
  return el.checked ? el.value : null;
};
goog.dom.forms.getSelectSingle_ = function(el) {
  var selectedIndex = el.selectedIndex;
  return selectedIndex >= 0 ? el.options[selectedIndex].value : null;
};
goog.dom.forms.getSelectMultiple_ = function(el) {
  var values = [];
  for (var option, i = 0;option = el.options[i];i++) {
    if (option.selected) {
      values.push(option.value);
    }
  }
  return values.length ? values : null;
};
goog.dom.forms.setValue = function(el, opt_value) {
  var type = el.type;
  if (goog.isDef(type)) {
    switch(type.toLowerCase()) {
      case "checkbox":
      ;
      case "radio":
        goog.dom.forms.setInputChecked_(el, (opt_value));
        break;
      case "select-one":
        goog.dom.forms.setSelectSingle_(el, (opt_value));
        break;
      case "select-multiple":
        goog.dom.forms.setSelectMultiple_(el, (opt_value));
        break;
      default:
        el.value = goog.isDefAndNotNull(opt_value) ? opt_value : "";
    }
  }
};
goog.dom.forms.setInputChecked_ = function(el, opt_value) {
  el.checked = opt_value ? "checked" : null;
};
goog.dom.forms.setSelectSingle_ = function(el, opt_value) {
  el.selectedIndex = -1;
  if (goog.isString(opt_value)) {
    for (var option, i = 0;option = el.options[i];i++) {
      if (option.value == opt_value) {
        option.selected = true;
        break;
      }
    }
  }
};
goog.dom.forms.setSelectMultiple_ = function(el, opt_value) {
  if (goog.isString(opt_value)) {
    opt_value = [opt_value];
  }
  for (var option, i = 0;option = el.options[i];i++) {
    option.selected = false;
    if (opt_value) {
      for (var value, j = 0;value = opt_value[j];j++) {
        if (option.value == value) {
          option.selected = true;
        }
      }
    }
  }
};
goog.provide("goog.dom.classes");
goog.require("goog.array");
goog.dom.classes.set = function(element, className) {
  element.className = className;
};
goog.dom.classes.get = function(element) {
  var className = element.className;
  return goog.isString(className) && className.match(/\S+/g) || [];
};
goog.dom.classes.add = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var expectedCount = classes.length + args.length;
  goog.dom.classes.add_(classes, args);
  goog.dom.classes.set(element, classes.join(" "));
  return classes.length == expectedCount;
};
goog.dom.classes.remove = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var newClasses = goog.dom.classes.getDifference_(classes, args);
  goog.dom.classes.set(element, newClasses.join(" "));
  return newClasses.length == classes.length - args.length;
};
goog.dom.classes.add_ = function(classes, args) {
  for (var i = 0;i < args.length;i++) {
    if (!goog.array.contains(classes, args[i])) {
      classes.push(args[i]);
    }
  }
};
goog.dom.classes.getDifference_ = function(arr1, arr2) {
  return goog.array.filter(arr1, function(item) {
    return!goog.array.contains(arr2, item);
  });
};
goog.dom.classes.swap = function(element, fromClass, toClass) {
  var classes = goog.dom.classes.get(element);
  var removed = false;
  for (var i = 0;i < classes.length;i++) {
    if (classes[i] == fromClass) {
      goog.array.splice(classes, i--, 1);
      removed = true;
    }
  }
  if (removed) {
    classes.push(toClass);
    goog.dom.classes.set(element, classes.join(" "));
  }
  return removed;
};
goog.dom.classes.addRemove = function(element, classesToRemove, classesToAdd) {
  var classes = goog.dom.classes.get(element);
  if (goog.isString(classesToRemove)) {
    goog.array.remove(classes, classesToRemove);
  } else {
    if (goog.isArray(classesToRemove)) {
      classes = goog.dom.classes.getDifference_(classes, classesToRemove);
    }
  }
  if (goog.isString(classesToAdd) && !goog.array.contains(classes, classesToAdd)) {
    classes.push(classesToAdd);
  } else {
    if (goog.isArray(classesToAdd)) {
      goog.dom.classes.add_(classes, classesToAdd);
    }
  }
  goog.dom.classes.set(element, classes.join(" "));
};
goog.dom.classes.has = function(element, className) {
  return goog.array.contains(goog.dom.classes.get(element), className);
};
goog.dom.classes.enable = function(element, className, enabled) {
  if (enabled) {
    goog.dom.classes.add(element, className);
  } else {
    goog.dom.classes.remove(element, className);
  }
};
goog.dom.classes.toggle = function(element, className) {
  var add = !goog.dom.classes.has(element, className);
  goog.dom.classes.enable(element, className, add);
  return add;
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventId");
goog.events.Listenable = function() {
};
goog.events.Listenable.IMPLEMENTED_BY_PROP = "closure_listenable_" + (Math.random() * 1E6 | 0);
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return!!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.getParentEventTarget;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.key = goog.events.ListenableKey.reserveKey();
  this.callOnce = false;
  this.removed = false;
};
goog.define("goog.events.Listener.ENABLE_MONITORING", false);
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.markAsRemoved = function() {
  this.removed = true;
  this.listener = null;
  this.proxy = null;
  this.src = null;
  this.handler = null;
};
goog.provide("goog.events.ListenerMap");
goog.require("goog.array");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.ListenerMap = function(src) {
  this.src = src;
  this.listeners = {};
  this.typeCount_ = 0;
};
goog.events.ListenerMap.prototype.getTypeCount = function() {
  return this.typeCount_;
};
goog.events.ListenerMap.prototype.getListenerCount = function() {
  var count = 0;
  for (var type in this.listeners) {
    count += this.listeners[type].length;
  }
  return count;
};
goog.events.ListenerMap.prototype.add = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  var listenerArray = this.listeners[typeStr];
  if (!listenerArray) {
    listenerArray = this.listeners[typeStr] = [];
    this.typeCount_++;
  }
  var listenerObj;
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    listenerObj = listenerArray[index];
    if (!callOnce) {
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = new goog.events.Listener(listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
  }
  return listenerObj;
};
goog.events.ListenerMap.prototype.remove = function(type, listener, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  if (!(typeStr in this.listeners)) {
    return false;
  }
  var listenerArray = this.listeners[typeStr];
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    var listenerObj = listenerArray[index];
    listenerObj.markAsRemoved();
    goog.array.removeAt(listenerArray, index);
    if (listenerArray.length == 0) {
      delete this.listeners[typeStr];
      this.typeCount_--;
    }
    return true;
  }
  return false;
};
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
  var type = listener.type;
  if (!(type in this.listeners)) {
    return false;
  }
  var removed = goog.array.remove(this.listeners[type], listener);
  if (removed) {
    listener.markAsRemoved();
    if (this.listeners[type].length == 0) {
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return removed;
};
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
  var typeStr = opt_type && opt_type.toString();
  var count = 0;
  for (var type in this.listeners) {
    if (!typeStr || type == typeStr) {
      var listenerArray = this.listeners[type];
      for (var i = 0;i < listenerArray.length;i++) {
        ++count;
        listenerArray[i].markAsRemoved();
      }
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return count;
};
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
  var listenerArray = this.listeners[type.toString()];
  var rv = [];
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.capture == capture) {
        rv.push(listenerObj);
      }
    }
  }
  return rv;
};
goog.events.ListenerMap.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  var listenerArray = this.listeners[type.toString()];
  var i = -1;
  if (listenerArray) {
    i = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
  }
  return i > -1 ? listenerArray[i] : null;
};
goog.events.ListenerMap.prototype.hasListener = function(opt_type, opt_capture) {
  var hasType = goog.isDef(opt_type);
  var typeStr = hasType ? opt_type.toString() : "";
  var hasCapture = goog.isDef(opt_capture);
  return goog.object.some(this.listeners, function(listenerArray, type) {
    for (var i = 0;i < listenerArray.length;++i) {
      if ((!hasType || listenerArray[i].type == typeStr) && (!hasCapture || listenerArray[i].capture == opt_capture)) {
        return true;
      }
    }
    return false;
  });
};
goog.events.ListenerMap.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
  for (var i = 0;i < listenerArray.length;++i) {
    var listenerObj = listenerArray[i];
    if (!listenerObj.removed && listenerObj.listener == listener && listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope) {
      return i;
    }
  }
  return-1;
};
goog.provide("goog.events");
goog.provide("goog.events.CaptureSimulationMode");
goog.provide("goog.events.Key");
goog.provide("goog.events.ListenableType");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.forwardDeclare("goog.debug.ErrorHandler");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.Key;
goog.events.ListenableType;
goog.events.LISTENER_MAP_PROP_ = "closure_lm_" + (Math.random() * 1E6 | 0);
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.CaptureSimulationMode = {OFF_AND_FAIL:0, OFF_AND_SILENT:1, ON:2};
goog.define("goog.events.CAPTURE_SIMULATION_MODE", 2);
goog.events.listenerCountEstimate_ = 0;
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listen((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, false, opt_capt, opt_handler);
  }
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
      goog.asserts.fail("Can not register capture listener in IE8-.");
      return null;
    } else {
      if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
        return null;
      }
    }
  }
  var listenerMap = goog.events.getListenerMap_(src);
  if (!listenerMap) {
    src[goog.events.LISTENER_MAP_PROP_] = listenerMap = new goog.events.ListenerMap(src);
  }
  var listenerObj = listenerMap.add(type, listener, callOnce, opt_capt, opt_handler);
  if (listenerObj.proxy) {
    return listenerObj;
  }
  var proxy = goog.events.getProxy();
  listenerObj.proxy = proxy;
  proxy.src = src;
  proxy.listener = listenerObj;
  if (src.addEventListener) {
    src.addEventListener(type.toString(), proxy, capture);
  } else {
    src.attachEvent(goog.events.getOnString_(type.toString()), proxy);
  }
  goog.events.listenerCountEstimate_++;
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listenOnce((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, true, opt_capt, opt_handler);
  }
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), listener, opt_capt, opt_handler);
  }
  if (!src) {
    return false;
  }
  var capture = !!opt_capt;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    var listenerObj = listenerMap.getListener((type), listener, capture, opt_handler);
    if (listenerObj) {
      return goog.events.unlistenByKey(listenerObj);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  if (goog.isNumber(key)) {
    return false;
  }
  var listener = (key);
  if (!listener || listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  if (src.removeEventListener) {
    src.removeEventListener(type, proxy, listener.capture);
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  goog.events.listenerCountEstimate_--;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    listenerMap.removeByKey(listener);
    if (listenerMap.getTypeCount() == 0) {
      listenerMap.src = null;
      src[goog.events.LISTENER_MAP_PROP_] = null;
    }
  } else {
    listener.markAsRemoved();
  }
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.removeAll = function(obj, opt_type) {
  if (!obj) {
    return 0;
  }
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.removeAllListeners(opt_type);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  if (!listenerMap) {
    return 0;
  }
  var count = 0;
  var typeStr = opt_type && opt_type.toString();
  for (var type in listenerMap.listeners) {
    if (!typeStr || type == typeStr) {
      var listeners = listenerMap.listeners[type].concat();
      for (var i = 0;i < listeners.length;++i) {
        if (goog.events.unlistenByKey(listeners[i])) {
          ++count;
        }
      }
    }
  }
  return count;
};
goog.events.removeAllNativeListeners = function() {
  goog.events.listenerCountEstimate_ = 0;
  return 0;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    if (!obj) {
      return[];
    }
    var listenerMap = goog.events.getListenerMap_((obj));
    return listenerMap ? listenerMap.getListeners(type, capture) : [];
  }
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  type = (type);
  listener = goog.events.wrapListener(listener);
  var capture = !!opt_capt;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener(type, listener, capture, opt_handler);
  }
  if (!src) {
    return null;
  }
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    return listenerMap.getListener(type, listener, capture, opt_handler);
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  return!!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  return goog.events.fireListeners_(obj, type, capture, eventObject);
};
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
  var retval = 1;
  var listenerMap = goog.events.getListenerMap_((obj));
  if (listenerMap) {
    var listenerArray = listenerMap.listeners[type.toString()];
    if (listenerArray) {
      listenerArray = listenerArray.concat();
      for (var i = 0;i < listenerArray.length;i++) {
        var listener = listenerArray[i];
        if (listener && listener.capture == capture && !listener.removed) {
          retval &= goog.events.fireListener(listener, eventObject) !== false;
        }
      }
    }
  }
  return Boolean(retval);
};
goog.events.fireListener = function(listener, eventObject) {
  var listenerFn = listener.listener;
  var listenerHandler = listener.handler || listener.src;
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener);
  }
  return listenerFn.call(listenerHandler, eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.events.listenerCountEstimate_;
};
goog.events.dispatchEvent = function(src, e) {
  goog.asserts.assert(goog.events.Listenable.isImplementedBy(src), "Can not use goog.events.dispatchEvent with " + "non-goog.events.Listenable instance.");
  return src.dispatchEvent(e);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var evt = new goog.events.BrowserEvent(ieEvent, this);
    var retval = true;
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.ON) {
      if (!goog.events.isMarkedIeEvent_(ieEvent)) {
        goog.events.markIeEvent_(ieEvent);
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        var type = listener.type;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && i >= 0;i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, true, evt);
        }
        for (var i = 0;!evt.propagationStopped_ && i < ancestors.length;i++) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, false, evt);
        }
      }
    } else {
      retval = goog.events.fireListener(listener, evt);
    }
    return retval;
  }
  return goog.events.fireListener(listener, new goog.events.BrowserEvent(opt_evt, this));
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.getListenerMap_ = function(src) {
  var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener = function(listener) {
  goog.asserts.assert(listener, "Listener can not be null.");
  if (goog.isFunction(listener)) {
    return listener;
  }
  goog.asserts.assert(listener.handleEvent, "An object listener must have handleEvent method.");
  if (!listener[goog.events.LISTENER_WRAPPER_PROP_]) {
    listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
      return listener.handleEvent(e);
    };
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_];
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("domina.support");
goog.require("cljs.core");
goog.require("goog.events");
goog.require("goog.events");
goog.require("goog.dom");
goog.require("goog.dom");
var div_28623 = document.createElement("div");
var test_html_28624 = "   \x3clink/\x3e\x3ctable\x3e\x3c/table\x3e\x3ca href\x3d'/a' style\x3d'top:1px;float:left;opacity:.55;'\x3ea\x3c/a\x3e\x3cinput type\x3d'checkbox'/\x3e";
div_28623.innerHTML = test_html_28624;
domina.support.leading_whitespace_QMARK_ = cljs.core._EQ_.call(null, div_28623.firstChild.nodeType, 3);
domina.support.extraneous_tbody_QMARK_ = cljs.core._EQ_.call(null, div_28623.getElementsByTagName("tbody").length, 0);
domina.support.unscoped_html_elements_QMARK_ = cljs.core._EQ_.call(null, div_28623.getElementsByTagName("link").length, 0);
goog.provide("goog.dom.vendor");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.dom.vendor.getVendorJsPrefix = function() {
  if (goog.userAgent.WEBKIT) {
    return "Webkit";
  } else {
    if (goog.userAgent.GECKO) {
      return "Moz";
    } else {
      if (goog.userAgent.IE) {
        return "ms";
      } else {
        if (goog.userAgent.OPERA) {
          return "O";
        }
      }
    }
  }
  return null;
};
goog.dom.vendor.getVendorPrefix = function() {
  if (goog.userAgent.WEBKIT) {
    return "-webkit";
  } else {
    if (goog.userAgent.GECKO) {
      return "-moz";
    } else {
      if (goog.userAgent.IE) {
        return "-ms";
      } else {
        if (goog.userAgent.OPERA) {
          return "-o";
        }
      }
    }
  }
  return null;
};
goog.dom.vendor.getPrefixedPropertyName = function(propertyName, opt_object) {
  if (opt_object && propertyName in opt_object) {
    return propertyName;
  }
  var prefix = goog.dom.vendor.getVendorJsPrefix();
  if (prefix) {
    prefix = prefix.toLowerCase();
    var prefixedPropertyName = prefix + goog.string.toTitleCase(propertyName);
    return!goog.isDef(opt_object) || prefixedPropertyName in opt_object ? prefixedPropertyName : null;
  }
  return null;
};
goog.dom.vendor.getPrefixedEventType = function(eventType) {
  var prefix = goog.dom.vendor.getVendorJsPrefix() || "";
  return(prefix + eventType).toLowerCase();
};
goog.provide("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.math.Box = function(top, right, bottom, left) {
  this.top = top;
  this.right = right;
  this.bottom = bottom;
  this.left = left;
};
goog.math.Box.boundingBox = function(var_args) {
  var box = new goog.math.Box(arguments[0].y, arguments[0].x, arguments[0].y, arguments[0].x);
  for (var i = 1;i < arguments.length;i++) {
    var coord = arguments[i];
    box.top = Math.min(box.top, coord.y);
    box.right = Math.max(box.right, coord.x);
    box.bottom = Math.max(box.bottom, coord.y);
    box.left = Math.min(box.left, coord.x);
  }
  return box;
};
goog.math.Box.prototype.getWidth = function() {
  return this.right - this.left;
};
goog.math.Box.prototype.getHeight = function() {
  return this.bottom - this.top;
};
goog.math.Box.prototype.clone = function() {
  return new goog.math.Box(this.top, this.right, this.bottom, this.left);
};
if (goog.DEBUG) {
  goog.math.Box.prototype.toString = function() {
    return "(" + this.top + "t, " + this.right + "r, " + this.bottom + "b, " + this.left + "l)";
  };
}
goog.math.Box.prototype.contains = function(other) {
  return goog.math.Box.contains(this, other);
};
goog.math.Box.prototype.expand = function(top, opt_right, opt_bottom, opt_left) {
  if (goog.isObject(top)) {
    this.top -= top.top;
    this.right += top.right;
    this.bottom += top.bottom;
    this.left -= top.left;
  } else {
    this.top -= top;
    this.right += opt_right;
    this.bottom += opt_bottom;
    this.left -= opt_left;
  }
  return this;
};
goog.math.Box.prototype.expandToInclude = function(box) {
  this.left = Math.min(this.left, box.left);
  this.top = Math.min(this.top, box.top);
  this.right = Math.max(this.right, box.right);
  this.bottom = Math.max(this.bottom, box.bottom);
};
goog.math.Box.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.top == b.top && a.right == b.right && a.bottom == b.bottom && a.left == b.left;
};
goog.math.Box.contains = function(box, other) {
  if (!box || !other) {
    return false;
  }
  if (other instanceof goog.math.Box) {
    return other.left >= box.left && other.right <= box.right && other.top >= box.top && other.bottom <= box.bottom;
  }
  return other.x >= box.left && other.x <= box.right && other.y >= box.top && other.y <= box.bottom;
};
goog.math.Box.relativePositionX = function(box, coord) {
  if (coord.x < box.left) {
    return coord.x - box.left;
  } else {
    if (coord.x > box.right) {
      return coord.x - box.right;
    }
  }
  return 0;
};
goog.math.Box.relativePositionY = function(box, coord) {
  if (coord.y < box.top) {
    return coord.y - box.top;
  } else {
    if (coord.y > box.bottom) {
      return coord.y - box.bottom;
    }
  }
  return 0;
};
goog.math.Box.distance = function(box, coord) {
  var x = goog.math.Box.relativePositionX(box, coord);
  var y = goog.math.Box.relativePositionY(box, coord);
  return Math.sqrt(x * x + y * y);
};
goog.math.Box.intersects = function(a, b) {
  return a.left <= b.right && b.left <= a.right && a.top <= b.bottom && b.top <= a.bottom;
};
goog.math.Box.intersectsWithPadding = function(a, b, padding) {
  return a.left <= b.right + padding && b.left <= a.right + padding && a.top <= b.bottom + padding && b.top <= a.bottom + padding;
};
goog.math.Box.prototype.ceil = function() {
  this.top = Math.ceil(this.top);
  this.right = Math.ceil(this.right);
  this.bottom = Math.ceil(this.bottom);
  this.left = Math.ceil(this.left);
  return this;
};
goog.math.Box.prototype.floor = function() {
  this.top = Math.floor(this.top);
  this.right = Math.floor(this.right);
  this.bottom = Math.floor(this.bottom);
  this.left = Math.floor(this.left);
  return this;
};
goog.math.Box.prototype.round = function() {
  this.top = Math.round(this.top);
  this.right = Math.round(this.right);
  this.bottom = Math.round(this.bottom);
  this.left = Math.round(this.left);
  return this;
};
goog.math.Box.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.left += tx.x;
    this.right += tx.x;
    this.top += tx.y;
    this.bottom += tx.y;
  } else {
    this.left += tx;
    this.right += tx;
    if (goog.isNumber(opt_ty)) {
      this.top += opt_ty;
      this.bottom += opt_ty;
    }
  }
  return this;
};
goog.math.Box.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.left *= sx;
  this.right *= sx;
  this.top *= sy;
  this.bottom *= sy;
  return this;
};
goog.provide("goog.math.Rect");
goog.require("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.math.Rect = function(x, y, w, h) {
  this.left = x;
  this.top = y;
  this.width = w;
  this.height = h;
};
goog.math.Rect.prototype.clone = function() {
  return new goog.math.Rect(this.left, this.top, this.width, this.height);
};
goog.math.Rect.prototype.toBox = function() {
  var right = this.left + this.width;
  var bottom = this.top + this.height;
  return new goog.math.Box(this.top, right, bottom, this.left);
};
goog.math.Rect.createFromBox = function(box) {
  return new goog.math.Rect(box.left, box.top, box.right - box.left, box.bottom - box.top);
};
if (goog.DEBUG) {
  goog.math.Rect.prototype.toString = function() {
    return "(" + this.left + ", " + this.top + " - " + this.width + "w x " + this.height + "h)";
  };
}
goog.math.Rect.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.left == b.left && a.width == b.width && a.top == b.top && a.height == b.height;
};
goog.math.Rect.prototype.intersection = function(rect) {
  var x0 = Math.max(this.left, rect.left);
  var x1 = Math.min(this.left + this.width, rect.left + rect.width);
  if (x0 <= x1) {
    var y0 = Math.max(this.top, rect.top);
    var y1 = Math.min(this.top + this.height, rect.top + rect.height);
    if (y0 <= y1) {
      this.left = x0;
      this.top = y0;
      this.width = x1 - x0;
      this.height = y1 - y0;
      return true;
    }
  }
  return false;
};
goog.math.Rect.intersection = function(a, b) {
  var x0 = Math.max(a.left, b.left);
  var x1 = Math.min(a.left + a.width, b.left + b.width);
  if (x0 <= x1) {
    var y0 = Math.max(a.top, b.top);
    var y1 = Math.min(a.top + a.height, b.top + b.height);
    if (y0 <= y1) {
      return new goog.math.Rect(x0, y0, x1 - x0, y1 - y0);
    }
  }
  return null;
};
goog.math.Rect.intersects = function(a, b) {
  return a.left <= b.left + b.width && b.left <= a.left + a.width && a.top <= b.top + b.height && b.top <= a.top + a.height;
};
goog.math.Rect.prototype.intersects = function(rect) {
  return goog.math.Rect.intersects(this, rect);
};
goog.math.Rect.difference = function(a, b) {
  var intersection = goog.math.Rect.intersection(a, b);
  if (!intersection || !intersection.height || !intersection.width) {
    return[a.clone()];
  }
  var result = [];
  var top = a.top;
  var height = a.height;
  var ar = a.left + a.width;
  var ab = a.top + a.height;
  var br = b.left + b.width;
  var bb = b.top + b.height;
  if (b.top > a.top) {
    result.push(new goog.math.Rect(a.left, a.top, a.width, b.top - a.top));
    top = b.top;
    height -= b.top - a.top;
  }
  if (bb < ab) {
    result.push(new goog.math.Rect(a.left, bb, a.width, ab - bb));
    height = bb - top;
  }
  if (b.left > a.left) {
    result.push(new goog.math.Rect(a.left, top, b.left - a.left, height));
  }
  if (br < ar) {
    result.push(new goog.math.Rect(br, top, ar - br, height));
  }
  return result;
};
goog.math.Rect.prototype.difference = function(rect) {
  return goog.math.Rect.difference(this, rect);
};
goog.math.Rect.prototype.boundingRect = function(rect) {
  var right = Math.max(this.left + this.width, rect.left + rect.width);
  var bottom = Math.max(this.top + this.height, rect.top + rect.height);
  this.left = Math.min(this.left, rect.left);
  this.top = Math.min(this.top, rect.top);
  this.width = right - this.left;
  this.height = bottom - this.top;
};
goog.math.Rect.boundingRect = function(a, b) {
  if (!a || !b) {
    return null;
  }
  var clone = a.clone();
  clone.boundingRect(b);
  return clone;
};
goog.math.Rect.prototype.contains = function(another) {
  if (another instanceof goog.math.Rect) {
    return this.left <= another.left && this.left + this.width >= another.left + another.width && this.top <= another.top && this.top + this.height >= another.top + another.height;
  } else {
    return another.x >= this.left && another.x <= this.left + this.width && another.y >= this.top && another.y <= this.top + this.height;
  }
};
goog.math.Rect.prototype.squaredDistance = function(point) {
  var dx = point.x < this.left ? this.left - point.x : Math.max(point.x - (this.left + this.width), 0);
  var dy = point.y < this.top ? this.top - point.y : Math.max(point.y - (this.top + this.height), 0);
  return dx * dx + dy * dy;
};
goog.math.Rect.prototype.distance = function(point) {
  return Math.sqrt(this.squaredDistance(point));
};
goog.math.Rect.prototype.getSize = function() {
  return new goog.math.Size(this.width, this.height);
};
goog.math.Rect.prototype.getTopLeft = function() {
  return new goog.math.Coordinate(this.left, this.top);
};
goog.math.Rect.prototype.getCenter = function() {
  return new goog.math.Coordinate(this.left + this.width / 2, this.top + this.height / 2);
};
goog.math.Rect.prototype.getBottomRight = function() {
  return new goog.math.Coordinate(this.left + this.width, this.top + this.height);
};
goog.math.Rect.prototype.ceil = function() {
  this.left = Math.ceil(this.left);
  this.top = Math.ceil(this.top);
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Rect.prototype.floor = function() {
  this.left = Math.floor(this.left);
  this.top = Math.floor(this.top);
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Rect.prototype.round = function() {
  this.left = Math.round(this.left);
  this.top = Math.round(this.top);
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Rect.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.left += tx.x;
    this.top += tx.y;
  } else {
    this.left += tx;
    if (goog.isNumber(opt_ty)) {
      this.top += opt_ty;
    }
  }
  return this;
};
goog.math.Rect.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.left *= sx;
  this.width *= sx;
  this.top *= sy;
  this.height *= sy;
  return this;
};
goog.provide("goog.style");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.vendor");
goog.require("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Rect");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.define("goog.style.GET_BOUNDING_CLIENT_RECT_ALWAYS_EXISTS", false);
goog.style.setStyle = function(element, style, opt_value) {
  if (goog.isString(style)) {
    goog.style.setStyle_(element, opt_value, style);
  } else {
    goog.object.forEach(style, goog.partial(goog.style.setStyle_, element));
  }
};
goog.style.setStyle_ = function(element, value, style) {
  var propertyName = goog.style.getVendorJsStyleName_(element, style);
  if (propertyName) {
    element.style[propertyName] = value;
  }
};
goog.style.getVendorJsStyleName_ = function(element, style) {
  var camelStyle = goog.string.toCamelCase(style);
  if (element.style[camelStyle] === undefined) {
    var prefixedStyle = goog.dom.vendor.getVendorJsPrefix() + goog.string.toTitleCase(camelStyle);
    if (element.style[prefixedStyle] !== undefined) {
      return prefixedStyle;
    }
  }
  return camelStyle;
};
goog.style.getVendorStyleName_ = function(element, style) {
  var camelStyle = goog.string.toCamelCase(style);
  if (element.style[camelStyle] === undefined) {
    var prefixedStyle = goog.dom.vendor.getVendorJsPrefix() + goog.string.toTitleCase(camelStyle);
    if (element.style[prefixedStyle] !== undefined) {
      return goog.dom.vendor.getVendorPrefix() + "-" + style;
    }
  }
  return style;
};
goog.style.getStyle = function(element, property) {
  var styleValue = element.style[goog.string.toCamelCase(property)];
  if (typeof styleValue !== "undefined") {
    return styleValue;
  }
  return element.style[goog.style.getVendorJsStyleName_(element, property)] || "";
};
goog.style.getComputedStyle = function(element, property) {
  var doc = goog.dom.getOwnerDocument(element);
  if (doc.defaultView && doc.defaultView.getComputedStyle) {
    var styles = doc.defaultView.getComputedStyle(element, null);
    if (styles) {
      return styles[property] || styles.getPropertyValue(property) || "";
    }
  }
  return "";
};
goog.style.getCascadedStyle = function(element, style) {
  return element.currentStyle ? element.currentStyle[style] : null;
};
goog.style.getStyle_ = function(element, style) {
  return goog.style.getComputedStyle(element, style) || goog.style.getCascadedStyle(element, style) || element.style && element.style[style];
};
goog.style.getComputedBoxSizing = function(element) {
  return goog.style.getStyle_(element, "boxSizing") || goog.style.getStyle_(element, "MozBoxSizing") || goog.style.getStyle_(element, "WebkitBoxSizing") || null;
};
goog.style.getComputedPosition = function(element) {
  return goog.style.getStyle_(element, "position");
};
goog.style.getBackgroundColor = function(element) {
  return goog.style.getStyle_(element, "backgroundColor");
};
goog.style.getComputedOverflowX = function(element) {
  return goog.style.getStyle_(element, "overflowX");
};
goog.style.getComputedOverflowY = function(element) {
  return goog.style.getStyle_(element, "overflowY");
};
goog.style.getComputedZIndex = function(element) {
  return goog.style.getStyle_(element, "zIndex");
};
goog.style.getComputedTextAlign = function(element) {
  return goog.style.getStyle_(element, "textAlign");
};
goog.style.getComputedCursor = function(element) {
  return goog.style.getStyle_(element, "cursor");
};
goog.style.getComputedTransform = function(element) {
  var property = goog.style.getVendorStyleName_(element, "transform");
  return goog.style.getStyle_(element, property) || goog.style.getStyle_(element, "transform");
};
goog.style.setPosition = function(el, arg1, opt_arg2) {
  var x, y;
  var buggyGeckoSubPixelPos = goog.userAgent.GECKO && (goog.userAgent.MAC || goog.userAgent.X11) && goog.userAgent.isVersionOrHigher("1.9");
  if (arg1 instanceof goog.math.Coordinate) {
    x = arg1.x;
    y = arg1.y;
  } else {
    x = arg1;
    y = opt_arg2;
  }
  el.style.left = goog.style.getPixelStyleValue_((x), buggyGeckoSubPixelPos);
  el.style.top = goog.style.getPixelStyleValue_((y), buggyGeckoSubPixelPos);
};
goog.style.getPosition = function(element) {
  return new goog.math.Coordinate(element.offsetLeft, element.offsetTop);
};
goog.style.getClientViewportElement = function(opt_node) {
  var doc;
  if (opt_node) {
    doc = goog.dom.getOwnerDocument(opt_node);
  } else {
    doc = goog.dom.getDocument();
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9) && !goog.dom.getDomHelper(doc).isCss1CompatMode()) {
    return doc.body;
  }
  return doc.documentElement;
};
goog.style.getViewportPageOffset = function(doc) {
  var body = doc.body;
  var documentElement = doc.documentElement;
  var scrollLeft = body.scrollLeft || documentElement.scrollLeft;
  var scrollTop = body.scrollTop || documentElement.scrollTop;
  return new goog.math.Coordinate(scrollLeft, scrollTop);
};
goog.style.getBoundingClientRect_ = function(el) {
  var rect;
  try {
    rect = el.getBoundingClientRect();
  } catch (e) {
    return{"left":0, "top":0, "right":0, "bottom":0};
  }
  if (goog.userAgent.IE && el.ownerDocument.body) {
    var doc = el.ownerDocument;
    rect.left -= doc.documentElement.clientLeft + doc.body.clientLeft;
    rect.top -= doc.documentElement.clientTop + doc.body.clientTop;
  }
  return(rect);
};
goog.style.getOffsetParent = function(element) {
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(8)) {
    return element.offsetParent;
  }
  var doc = goog.dom.getOwnerDocument(element);
  var positionStyle = goog.style.getStyle_(element, "position");
  var skipStatic = positionStyle == "fixed" || positionStyle == "absolute";
  for (var parent = element.parentNode;parent && parent != doc;parent = parent.parentNode) {
    positionStyle = goog.style.getStyle_((parent), "position");
    skipStatic = skipStatic && positionStyle == "static" && parent != doc.documentElement && parent != doc.body;
    if (!skipStatic && (parent.scrollWidth > parent.clientWidth || parent.scrollHeight > parent.clientHeight || positionStyle == "fixed" || positionStyle == "absolute" || positionStyle == "relative")) {
      return(parent);
    }
  }
  return null;
};
goog.style.getVisibleRectForElement = function(element) {
  var visibleRect = new goog.math.Box(0, Infinity, Infinity, 0);
  var dom = goog.dom.getDomHelper(element);
  var body = dom.getDocument().body;
  var documentElement = dom.getDocument().documentElement;
  var scrollEl = dom.getDocumentScrollElement();
  for (var el = element;el = goog.style.getOffsetParent(el);) {
    if ((!goog.userAgent.IE || el.clientWidth != 0) && (!goog.userAgent.WEBKIT || el.clientHeight != 0 || el != body) && (el != body && el != documentElement && goog.style.getStyle_(el, "overflow") != "visible")) {
      var pos = goog.style.getPageOffset(el);
      var client = goog.style.getClientLeftTop(el);
      pos.x += client.x;
      pos.y += client.y;
      visibleRect.top = Math.max(visibleRect.top, pos.y);
      visibleRect.right = Math.min(visibleRect.right, pos.x + el.clientWidth);
      visibleRect.bottom = Math.min(visibleRect.bottom, pos.y + el.clientHeight);
      visibleRect.left = Math.max(visibleRect.left, pos.x);
    }
  }
  var scrollX = scrollEl.scrollLeft, scrollY = scrollEl.scrollTop;
  visibleRect.left = Math.max(visibleRect.left, scrollX);
  visibleRect.top = Math.max(visibleRect.top, scrollY);
  var winSize = dom.getViewportSize();
  visibleRect.right = Math.min(visibleRect.right, scrollX + winSize.width);
  visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + winSize.height);
  return visibleRect.top >= 0 && visibleRect.left >= 0 && visibleRect.bottom > visibleRect.top && visibleRect.right > visibleRect.left ? visibleRect : null;
};
goog.style.getContainerOffsetToScrollInto = function(element, container, opt_center) {
  var elementPos = goog.style.getPageOffset(element);
  var containerPos = goog.style.getPageOffset(container);
  var containerBorder = goog.style.getBorderBox(container);
  var relX = elementPos.x - containerPos.x - containerBorder.left;
  var relY = elementPos.y - containerPos.y - containerBorder.top;
  var spaceX = container.clientWidth - element.offsetWidth;
  var spaceY = container.clientHeight - element.offsetHeight;
  var scrollLeft = container.scrollLeft;
  var scrollTop = container.scrollTop;
  if (opt_center) {
    scrollLeft += relX - spaceX / 2;
    scrollTop += relY - spaceY / 2;
  } else {
    scrollLeft += Math.min(relX, Math.max(relX - spaceX, 0));
    scrollTop += Math.min(relY, Math.max(relY - spaceY, 0));
  }
  return new goog.math.Coordinate(scrollLeft, scrollTop);
};
goog.style.scrollIntoContainerView = function(element, container, opt_center) {
  var offset = goog.style.getContainerOffsetToScrollInto(element, container, opt_center);
  container.scrollLeft = offset.x;
  container.scrollTop = offset.y;
};
goog.style.getClientLeftTop = function(el) {
  if (goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("1.9")) {
    var left = parseFloat(goog.style.getComputedStyle(el, "borderLeftWidth"));
    if (goog.style.isRightToLeft(el)) {
      var scrollbarWidth = el.offsetWidth - el.clientWidth - left - parseFloat(goog.style.getComputedStyle(el, "borderRightWidth"));
      left += scrollbarWidth;
    }
    return new goog.math.Coordinate(left, parseFloat(goog.style.getComputedStyle(el, "borderTopWidth")));
  }
  return new goog.math.Coordinate(el.clientLeft, el.clientTop);
};
goog.style.getPageOffset = function(el) {
  var box, doc = goog.dom.getOwnerDocument(el);
  var positionStyle = goog.style.getStyle_(el, "position");
  goog.asserts.assertObject(el, "Parameter is required");
  var BUGGY_GECKO_BOX_OBJECT = !goog.style.GET_BOUNDING_CLIENT_RECT_ALWAYS_EXISTS && goog.userAgent.GECKO && doc.getBoxObjectFor && !el.getBoundingClientRect && positionStyle == "absolute" && (box = doc.getBoxObjectFor(el)) && (box.screenX < 0 || box.screenY < 0);
  var pos = new goog.math.Coordinate(0, 0);
  var viewportElement = goog.style.getClientViewportElement(doc);
  if (el == viewportElement) {
    return pos;
  }
  if (goog.style.GET_BOUNDING_CLIENT_RECT_ALWAYS_EXISTS || el.getBoundingClientRect) {
    box = goog.style.getBoundingClientRect_(el);
    var scrollCoord = goog.dom.getDomHelper(doc).getDocumentScroll();
    pos.x = box.left + scrollCoord.x;
    pos.y = box.top + scrollCoord.y;
  } else {
    if (doc.getBoxObjectFor && !BUGGY_GECKO_BOX_OBJECT) {
      box = doc.getBoxObjectFor(el);
      var vpBox = doc.getBoxObjectFor(viewportElement);
      pos.x = box.screenX - vpBox.screenX;
      pos.y = box.screenY - vpBox.screenY;
    } else {
      var parent = el;
      do {
        pos.x += parent.offsetLeft;
        pos.y += parent.offsetTop;
        if (parent != el) {
          pos.x += parent.clientLeft || 0;
          pos.y += parent.clientTop || 0;
        }
        if (goog.userAgent.WEBKIT && goog.style.getComputedPosition(parent) == "fixed") {
          pos.x += doc.body.scrollLeft;
          pos.y += doc.body.scrollTop;
          break;
        }
        parent = parent.offsetParent;
      } while (parent && parent != el);
      if (goog.userAgent.OPERA || goog.userAgent.WEBKIT && positionStyle == "absolute") {
        pos.y -= doc.body.offsetTop;
      }
      for (parent = el;(parent = goog.style.getOffsetParent(parent)) && parent != doc.body && parent != viewportElement;) {
        pos.x -= parent.scrollLeft;
        if (!goog.userAgent.OPERA || parent.tagName != "TR") {
          pos.y -= parent.scrollTop;
        }
      }
    }
  }
  return pos;
};
goog.style.getPageOffsetLeft = function(el) {
  return goog.style.getPageOffset(el).x;
};
goog.style.getPageOffsetTop = function(el) {
  return goog.style.getPageOffset(el).y;
};
goog.style.getFramedPageOffset = function(el, relativeWin) {
  var position = new goog.math.Coordinate(0, 0);
  var currentWin = goog.dom.getWindow(goog.dom.getOwnerDocument(el));
  var currentEl = el;
  do {
    var offset = currentWin == relativeWin ? goog.style.getPageOffset(currentEl) : goog.style.getClientPositionForElement_(goog.asserts.assert(currentEl));
    position.x += offset.x;
    position.y += offset.y;
  } while (currentWin && currentWin != relativeWin && (currentEl = currentWin.frameElement) && (currentWin = currentWin.parent));
  return position;
};
goog.style.translateRectForAnotherFrame = function(rect, origBase, newBase) {
  if (origBase.getDocument() != newBase.getDocument()) {
    var body = origBase.getDocument().body;
    var pos = goog.style.getFramedPageOffset(body, newBase.getWindow());
    pos = goog.math.Coordinate.difference(pos, goog.style.getPageOffset(body));
    if (goog.userAgent.IE && !origBase.isCss1CompatMode()) {
      pos = goog.math.Coordinate.difference(pos, origBase.getDocumentScroll());
    }
    rect.left += pos.x;
    rect.top += pos.y;
  }
};
goog.style.getRelativePosition = function(a, b) {
  var ap = goog.style.getClientPosition(a);
  var bp = goog.style.getClientPosition(b);
  return new goog.math.Coordinate(ap.x - bp.x, ap.y - bp.y);
};
goog.style.getClientPositionForElement_ = function(el) {
  var pos;
  if (goog.style.GET_BOUNDING_CLIENT_RECT_ALWAYS_EXISTS || el.getBoundingClientRect) {
    var box = goog.style.getBoundingClientRect_(el);
    pos = new goog.math.Coordinate(box.left, box.top);
  } else {
    var scrollCoord = goog.dom.getDomHelper(el).getDocumentScroll();
    var pageCoord = goog.style.getPageOffset(el);
    pos = new goog.math.Coordinate(pageCoord.x - scrollCoord.x, pageCoord.y - scrollCoord.y);
  }
  if (goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher(12)) {
    return goog.math.Coordinate.sum(pos, goog.style.getCssTranslation(el));
  } else {
    return pos;
  }
};
goog.style.getClientPosition = function(el) {
  goog.asserts.assert(el);
  if (el.nodeType == goog.dom.NodeType.ELEMENT) {
    return goog.style.getClientPositionForElement_((el));
  } else {
    var isAbstractedEvent = goog.isFunction(el.getBrowserEvent);
    var be = (el);
    var targetEvent = el;
    if (el.targetTouches) {
      targetEvent = el.targetTouches[0];
    } else {
      if (isAbstractedEvent && be.getBrowserEvent().targetTouches) {
        targetEvent = be.getBrowserEvent().targetTouches[0];
      }
    }
    return new goog.math.Coordinate(targetEvent.clientX, targetEvent.clientY);
  }
};
goog.style.setPageOffset = function(el, x, opt_y) {
  var cur = goog.style.getPageOffset(el);
  if (x instanceof goog.math.Coordinate) {
    opt_y = x.y;
    x = x.x;
  }
  var dx = x - cur.x;
  var dy = opt_y - cur.y;
  goog.style.setPosition(el, el.offsetLeft + dx, el.offsetTop + dy);
};
goog.style.setSize = function(element, w, opt_h) {
  var h;
  if (w instanceof goog.math.Size) {
    h = w.height;
    w = w.width;
  } else {
    if (opt_h == undefined) {
      throw Error("missing height argument");
    }
    h = opt_h;
  }
  goog.style.setWidth(element, (w));
  goog.style.setHeight(element, (h));
};
goog.style.getPixelStyleValue_ = function(value, round) {
  if (typeof value == "number") {
    value = (round ? Math.round(value) : value) + "px";
  }
  return value;
};
goog.style.setHeight = function(element, height) {
  element.style.height = goog.style.getPixelStyleValue_(height, true);
};
goog.style.setWidth = function(element, width) {
  element.style.width = goog.style.getPixelStyleValue_(width, true);
};
goog.style.getSize = function(element) {
  return goog.style.evaluateWithTemporaryDisplay_(goog.style.getSizeWithDisplay_, (element));
};
goog.style.evaluateWithTemporaryDisplay_ = function(fn, element) {
  if (goog.style.getStyle_(element, "display") != "none") {
    return fn(element);
  }
  var style = element.style;
  var originalDisplay = style.display;
  var originalVisibility = style.visibility;
  var originalPosition = style.position;
  style.visibility = "hidden";
  style.position = "absolute";
  style.display = "inline";
  var retVal = fn(element);
  style.display = originalDisplay;
  style.position = originalPosition;
  style.visibility = originalVisibility;
  return retVal;
};
goog.style.getSizeWithDisplay_ = function(element) {
  var offsetWidth = element.offsetWidth;
  var offsetHeight = element.offsetHeight;
  var webkitOffsetsZero = goog.userAgent.WEBKIT && !offsetWidth && !offsetHeight;
  if ((!goog.isDef(offsetWidth) || webkitOffsetsZero) && element.getBoundingClientRect) {
    var clientRect = goog.style.getBoundingClientRect_(element);
    return new goog.math.Size(clientRect.right - clientRect.left, clientRect.bottom - clientRect.top);
  }
  return new goog.math.Size(offsetWidth, offsetHeight);
};
goog.style.getTransformedSize = function(element) {
  if (!element.getBoundingClientRect) {
    return null;
  }
  var clientRect = goog.style.evaluateWithTemporaryDisplay_(goog.style.getBoundingClientRect_, element);
  return new goog.math.Size(clientRect.right - clientRect.left, clientRect.bottom - clientRect.top);
};
goog.style.getBounds = function(element) {
  var o = goog.style.getPageOffset(element);
  var s = goog.style.getSize(element);
  return new goog.math.Rect(o.x, o.y, s.width, s.height);
};
goog.style.toCamelCase = function(selector) {
  return goog.string.toCamelCase(String(selector));
};
goog.style.toSelectorCase = function(selector) {
  return goog.string.toSelectorCase(selector);
};
goog.style.getOpacity = function(el) {
  var style = el.style;
  var result = "";
  if ("opacity" in style) {
    result = style.opacity;
  } else {
    if ("MozOpacity" in style) {
      result = style.MozOpacity;
    } else {
      if ("filter" in style) {
        var match = style.filter.match(/alpha\(opacity=([\d.]+)\)/);
        if (match) {
          result = String(match[1] / 100);
        }
      }
    }
  }
  return result == "" ? result : Number(result);
};
goog.style.setOpacity = function(el, alpha) {
  var style = el.style;
  if ("opacity" in style) {
    style.opacity = alpha;
  } else {
    if ("MozOpacity" in style) {
      style.MozOpacity = alpha;
    } else {
      if ("filter" in style) {
        if (alpha === "") {
          style.filter = "";
        } else {
          style.filter = "alpha(opacity\x3d" + alpha * 100 + ")";
        }
      }
    }
  }
};
goog.style.setTransparentBackgroundImage = function(el, src) {
  var style = el.style;
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("8")) {
    style.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader(" + 'src\x3d"' + src + '", sizingMethod\x3d"crop")';
  } else {
    style.backgroundImage = "url(" + src + ")";
    style.backgroundPosition = "top left";
    style.backgroundRepeat = "no-repeat";
  }
};
goog.style.clearTransparentBackgroundImage = function(el) {
  var style = el.style;
  if ("filter" in style) {
    style.filter = "";
  } else {
    style.backgroundImage = "none";
  }
};
goog.style.showElement = function(el, display) {
  goog.style.setElementShown(el, display);
};
goog.style.setElementShown = function(el, isShown) {
  el.style.display = isShown ? "" : "none";
};
goog.style.isElementShown = function(el) {
  return el.style.display != "none";
};
goog.style.installStyles = function(stylesString, opt_node) {
  var dh = goog.dom.getDomHelper(opt_node);
  var styleSheet = null;
  var doc = dh.getDocument();
  if (goog.userAgent.IE && doc.createStyleSheet) {
    styleSheet = doc.createStyleSheet();
    goog.style.setStyles(styleSheet, stylesString);
  } else {
    var head = dh.getElementsByTagNameAndClass("head")[0];
    if (!head) {
      var body = dh.getElementsByTagNameAndClass("body")[0];
      head = dh.createDom("head");
      body.parentNode.insertBefore(head, body);
    }
    styleSheet = dh.createDom("style");
    goog.style.setStyles(styleSheet, stylesString);
    dh.appendChild(head, styleSheet);
  }
  return styleSheet;
};
goog.style.uninstallStyles = function(styleSheet) {
  var node = styleSheet.ownerNode || styleSheet.owningElement || (styleSheet);
  goog.dom.removeNode(node);
};
goog.style.setStyles = function(element, stylesString) {
  if (goog.userAgent.IE && goog.isDef(element.cssText)) {
    element.cssText = stylesString;
  } else {
    element.innerHTML = stylesString;
  }
};
goog.style.setPreWrap = function(el) {
  var style = el.style;
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("8")) {
    style.whiteSpace = "pre";
    style.wordWrap = "break-word";
  } else {
    if (goog.userAgent.GECKO) {
      style.whiteSpace = "-moz-pre-wrap";
    } else {
      style.whiteSpace = "pre-wrap";
    }
  }
};
goog.style.setInlineBlock = function(el) {
  var style = el.style;
  style.position = "relative";
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("8")) {
    style.zoom = "1";
    style.display = "inline";
  } else {
    if (goog.userAgent.GECKO) {
      style.display = goog.userAgent.isVersionOrHigher("1.9a") ? "inline-block" : "-moz-inline-box";
    } else {
      style.display = "inline-block";
    }
  }
};
goog.style.isRightToLeft = function(el) {
  return "rtl" == goog.style.getStyle_(el, "direction");
};
goog.style.unselectableStyle_ = goog.userAgent.GECKO ? "MozUserSelect" : goog.userAgent.WEBKIT ? "WebkitUserSelect" : null;
goog.style.isUnselectable = function(el) {
  if (goog.style.unselectableStyle_) {
    return el.style[goog.style.unselectableStyle_].toLowerCase() == "none";
  } else {
    if (goog.userAgent.IE || goog.userAgent.OPERA) {
      return el.getAttribute("unselectable") == "on";
    }
  }
  return false;
};
goog.style.setUnselectable = function(el, unselectable, opt_noRecurse) {
  var descendants = !opt_noRecurse ? el.getElementsByTagName("*") : null;
  var name = goog.style.unselectableStyle_;
  if (name) {
    var value = unselectable ? "none" : "";
    el.style[name] = value;
    if (descendants) {
      for (var i = 0, descendant;descendant = descendants[i];i++) {
        descendant.style[name] = value;
      }
    }
  } else {
    if (goog.userAgent.IE || goog.userAgent.OPERA) {
      var value = unselectable ? "on" : "";
      el.setAttribute("unselectable", value);
      if (descendants) {
        for (var i = 0, descendant;descendant = descendants[i];i++) {
          descendant.setAttribute("unselectable", value);
        }
      }
    }
  }
};
goog.style.getBorderBoxSize = function(element) {
  return new goog.math.Size(element.offsetWidth, element.offsetHeight);
};
goog.style.setBorderBoxSize = function(element, size) {
  var doc = goog.dom.getOwnerDocument(element);
  var isCss1CompatMode = goog.dom.getDomHelper(doc).isCss1CompatMode();
  if (goog.userAgent.IE && (!isCss1CompatMode || !goog.userAgent.isVersionOrHigher("8"))) {
    var style = element.style;
    if (isCss1CompatMode) {
      var paddingBox = goog.style.getPaddingBox(element);
      var borderBox = goog.style.getBorderBox(element);
      style.pixelWidth = size.width - borderBox.left - paddingBox.left - paddingBox.right - borderBox.right;
      style.pixelHeight = size.height - borderBox.top - paddingBox.top - paddingBox.bottom - borderBox.bottom;
    } else {
      style.pixelWidth = size.width;
      style.pixelHeight = size.height;
    }
  } else {
    goog.style.setBoxSizingSize_(element, size, "border-box");
  }
};
goog.style.getContentBoxSize = function(element) {
  var doc = goog.dom.getOwnerDocument(element);
  var ieCurrentStyle = goog.userAgent.IE && element.currentStyle;
  if (ieCurrentStyle && goog.dom.getDomHelper(doc).isCss1CompatMode() && ieCurrentStyle.width != "auto" && ieCurrentStyle.height != "auto" && !ieCurrentStyle.boxSizing) {
    var width = goog.style.getIePixelValue_(element, ieCurrentStyle.width, "width", "pixelWidth");
    var height = goog.style.getIePixelValue_(element, ieCurrentStyle.height, "height", "pixelHeight");
    return new goog.math.Size(width, height);
  } else {
    var borderBoxSize = goog.style.getBorderBoxSize(element);
    var paddingBox = goog.style.getPaddingBox(element);
    var borderBox = goog.style.getBorderBox(element);
    return new goog.math.Size(borderBoxSize.width - borderBox.left - paddingBox.left - paddingBox.right - borderBox.right, borderBoxSize.height - borderBox.top - paddingBox.top - paddingBox.bottom - borderBox.bottom);
  }
};
goog.style.setContentBoxSize = function(element, size) {
  var doc = goog.dom.getOwnerDocument(element);
  var isCss1CompatMode = goog.dom.getDomHelper(doc).isCss1CompatMode();
  if (goog.userAgent.IE && (!isCss1CompatMode || !goog.userAgent.isVersionOrHigher("8"))) {
    var style = element.style;
    if (isCss1CompatMode) {
      style.pixelWidth = size.width;
      style.pixelHeight = size.height;
    } else {
      var paddingBox = goog.style.getPaddingBox(element);
      var borderBox = goog.style.getBorderBox(element);
      style.pixelWidth = size.width + borderBox.left + paddingBox.left + paddingBox.right + borderBox.right;
      style.pixelHeight = size.height + borderBox.top + paddingBox.top + paddingBox.bottom + borderBox.bottom;
    }
  } else {
    goog.style.setBoxSizingSize_(element, size, "content-box");
  }
};
goog.style.setBoxSizingSize_ = function(element, size, boxSizing) {
  var style = element.style;
  if (goog.userAgent.GECKO) {
    style.MozBoxSizing = boxSizing;
  } else {
    if (goog.userAgent.WEBKIT) {
      style.WebkitBoxSizing = boxSizing;
    } else {
      style.boxSizing = boxSizing;
    }
  }
  style.width = Math.max(size.width, 0) + "px";
  style.height = Math.max(size.height, 0) + "px";
};
goog.style.getIePixelValue_ = function(element, value, name, pixelName) {
  if (/^\d+px?$/.test(value)) {
    return parseInt(value, 10);
  } else {
    var oldStyleValue = element.style[name];
    var oldRuntimeValue = element.runtimeStyle[name];
    element.runtimeStyle[name] = element.currentStyle[name];
    element.style[name] = value;
    var pixelValue = element.style[pixelName];
    element.style[name] = oldStyleValue;
    element.runtimeStyle[name] = oldRuntimeValue;
    return pixelValue;
  }
};
goog.style.getIePixelDistance_ = function(element, propName) {
  var value = goog.style.getCascadedStyle(element, propName);
  return value ? goog.style.getIePixelValue_(element, value, "left", "pixelLeft") : 0;
};
goog.style.getBox_ = function(element, stylePrefix) {
  if (goog.userAgent.IE) {
    var left = goog.style.getIePixelDistance_(element, stylePrefix + "Left");
    var right = goog.style.getIePixelDistance_(element, stylePrefix + "Right");
    var top = goog.style.getIePixelDistance_(element, stylePrefix + "Top");
    var bottom = goog.style.getIePixelDistance_(element, stylePrefix + "Bottom");
    return new goog.math.Box(top, right, bottom, left);
  } else {
    var left = (goog.style.getComputedStyle(element, stylePrefix + "Left"));
    var right = (goog.style.getComputedStyle(element, stylePrefix + "Right"));
    var top = (goog.style.getComputedStyle(element, stylePrefix + "Top"));
    var bottom = (goog.style.getComputedStyle(element, stylePrefix + "Bottom"));
    return new goog.math.Box(parseFloat(top), parseFloat(right), parseFloat(bottom), parseFloat(left));
  }
};
goog.style.getPaddingBox = function(element) {
  return goog.style.getBox_(element, "padding");
};
goog.style.getMarginBox = function(element) {
  return goog.style.getBox_(element, "margin");
};
goog.style.ieBorderWidthKeywords_ = {"thin":2, "medium":4, "thick":6};
goog.style.getIePixelBorder_ = function(element, prop) {
  if (goog.style.getCascadedStyle(element, prop + "Style") == "none") {
    return 0;
  }
  var width = goog.style.getCascadedStyle(element, prop + "Width");
  if (width in goog.style.ieBorderWidthKeywords_) {
    return goog.style.ieBorderWidthKeywords_[width];
  }
  return goog.style.getIePixelValue_(element, width, "left", "pixelLeft");
};
goog.style.getBorderBox = function(element) {
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    var left = goog.style.getIePixelBorder_(element, "borderLeft");
    var right = goog.style.getIePixelBorder_(element, "borderRight");
    var top = goog.style.getIePixelBorder_(element, "borderTop");
    var bottom = goog.style.getIePixelBorder_(element, "borderBottom");
    return new goog.math.Box(top, right, bottom, left);
  } else {
    var left = (goog.style.getComputedStyle(element, "borderLeftWidth"));
    var right = (goog.style.getComputedStyle(element, "borderRightWidth"));
    var top = (goog.style.getComputedStyle(element, "borderTopWidth"));
    var bottom = (goog.style.getComputedStyle(element, "borderBottomWidth"));
    return new goog.math.Box(parseFloat(top), parseFloat(right), parseFloat(bottom), parseFloat(left));
  }
};
goog.style.getFontFamily = function(el) {
  var doc = goog.dom.getOwnerDocument(el);
  var font = "";
  if (doc.body.createTextRange && goog.dom.contains(doc, el)) {
    var range = doc.body.createTextRange();
    range.moveToElementText(el);
    try {
      font = range.queryCommandValue("FontName");
    } catch (e) {
      font = "";
    }
  }
  if (!font) {
    font = goog.style.getStyle_(el, "fontFamily");
  }
  var fontsArray = font.split(",");
  if (fontsArray.length > 1) {
    font = fontsArray[0];
  }
  return goog.string.stripQuotes(font, "\"'");
};
goog.style.lengthUnitRegex_ = /[^\d]+$/;
goog.style.getLengthUnits = function(value) {
  var units = value.match(goog.style.lengthUnitRegex_);
  return units && units[0] || null;
};
goog.style.ABSOLUTE_CSS_LENGTH_UNITS_ = {"cm":1, "in":1, "mm":1, "pc":1, "pt":1};
goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_ = {"em":1, "ex":1};
goog.style.getFontSize = function(el) {
  var fontSize = goog.style.getStyle_(el, "fontSize");
  var sizeUnits = goog.style.getLengthUnits(fontSize);
  if (fontSize && "px" == sizeUnits) {
    return parseInt(fontSize, 10);
  }
  if (goog.userAgent.IE) {
    if (sizeUnits in goog.style.ABSOLUTE_CSS_LENGTH_UNITS_) {
      return goog.style.getIePixelValue_(el, fontSize, "left", "pixelLeft");
    } else {
      if (el.parentNode && el.parentNode.nodeType == goog.dom.NodeType.ELEMENT && sizeUnits in goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_) {
        var parentElement = (el.parentNode);
        var parentSize = goog.style.getStyle_(parentElement, "fontSize");
        return goog.style.getIePixelValue_(parentElement, fontSize == parentSize ? "1em" : fontSize, "left", "pixelLeft");
      }
    }
  }
  var sizeElement = goog.dom.createDom("span", {"style":"visibility:hidden;position:absolute;" + "line-height:0;padding:0;margin:0;border:0;height:1em;"});
  goog.dom.appendChild(el, sizeElement);
  fontSize = sizeElement.offsetHeight;
  goog.dom.removeNode(sizeElement);
  return fontSize;
};
goog.style.parseStyleAttribute = function(value) {
  var result = {};
  goog.array.forEach(value.split(/\s*;\s*/), function(pair) {
    var keyValue = pair.split(/\s*:\s*/);
    if (keyValue.length == 2) {
      result[goog.string.toCamelCase(keyValue[0].toLowerCase())] = keyValue[1];
    }
  });
  return result;
};
goog.style.toStyleAttribute = function(obj) {
  var buffer = [];
  goog.object.forEach(obj, function(value, key) {
    buffer.push(goog.string.toSelectorCase(key), ":", value, ";");
  });
  return buffer.join("");
};
goog.style.setFloat = function(el, value) {
  el.style[goog.userAgent.IE ? "styleFloat" : "cssFloat"] = value;
};
goog.style.getFloat = function(el) {
  return el.style[goog.userAgent.IE ? "styleFloat" : "cssFloat"] || "";
};
goog.style.getScrollbarWidth = function(opt_className) {
  var outerDiv = goog.dom.createElement("div");
  if (opt_className) {
    outerDiv.className = opt_className;
  }
  outerDiv.style.cssText = "overflow:auto;" + "position:absolute;top:0;width:100px;height:100px";
  var innerDiv = goog.dom.createElement("div");
  goog.style.setSize(innerDiv, "200px", "200px");
  outerDiv.appendChild(innerDiv);
  goog.dom.appendChild(goog.dom.getDocument().body, outerDiv);
  var width = outerDiv.offsetWidth - outerDiv.clientWidth;
  goog.dom.removeNode(outerDiv);
  return width;
};
goog.style.MATRIX_TRANSLATION_REGEX_ = new RegExp("matrix\\([0-9\\.\\-]+, [0-9\\.\\-]+, " + "[0-9\\.\\-]+, [0-9\\.\\-]+, " + "([0-9\\.\\-]+)p?x?, ([0-9\\.\\-]+)p?x?\\)");
goog.style.getCssTranslation = function(element) {
  var transform = goog.style.getComputedTransform(element);
  if (!transform) {
    return new goog.math.Coordinate(0, 0);
  }
  var matches = transform.match(goog.style.MATRIX_TRANSLATION_REGEX_);
  if (!matches) {
    return new goog.math.Coordinate(0, 0);
  }
  return new goog.math.Coordinate(parseFloat(matches[1]), parseFloat(matches[2]));
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      throw "Invalid match arg: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(match);
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)));
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__28609 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__28609;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__28613 = cljs.core._EQ_;
    var expr__28614 = limit;
    if (cljs.core.truth_(pred__28613.call(null, 1, expr__28614))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__28613.call(null, 2, expr__28614))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(re), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)).split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4124__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4124__auto__)) {
            var m = temp__4124__auto__;
            var index = s__$1.indexOf(m);
            var G__28616 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__28617 = limit__$1 - 1;
            var G__28618 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__28616;
            limit__$1 = G__28617;
            parts = G__28618;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__28619 = index - 1;
        index = G__28619;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4124__auto___28620 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4124__auto___28620)) {
        var replacement_28621 = temp__4124__auto___28620;
        buffer.append("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(replacement_28621));
      } else {
        buffer.append(ch);
      }
      var G__28622 = index + 1;
      index = G__28622;
      continue;
    }
    break;
  }
};
goog.provide("goog.dom.xml");
goog.require("goog.dom");
goog.require("goog.dom.NodeType");
goog.dom.xml.MAX_XML_SIZE_KB = 2 * 1024;
goog.dom.xml.MAX_ELEMENT_DEPTH = 256;
goog.dom.xml.createDocument = function(opt_rootTagName, opt_namespaceUri) {
  if (opt_namespaceUri && !opt_rootTagName) {
    throw Error("Can't create document with namespace and no root tag");
  }
  if (document.implementation && document.implementation.createDocument) {
    return document.implementation.createDocument(opt_namespaceUri || "", opt_rootTagName || "", null);
  } else {
    if (typeof ActiveXObject != "undefined") {
      var doc = goog.dom.xml.createMsXmlDocument_();
      if (doc) {
        if (opt_rootTagName) {
          doc.appendChild(doc.createNode(goog.dom.NodeType.ELEMENT, opt_rootTagName, opt_namespaceUri || ""));
        }
        return doc;
      }
    }
  }
  throw Error("Your browser does not support creating new documents");
};
goog.dom.xml.loadXml = function(xml) {
  if (typeof DOMParser != "undefined") {
    return(new DOMParser).parseFromString(xml, "application/xml");
  } else {
    if (typeof ActiveXObject != "undefined") {
      var doc = goog.dom.xml.createMsXmlDocument_();
      doc.loadXML(xml);
      return doc;
    }
  }
  throw Error("Your browser does not support loading xml documents");
};
goog.dom.xml.serialize = function(xml) {
  if (typeof XMLSerializer != "undefined") {
    return(new XMLSerializer).serializeToString(xml);
  }
  var text = xml.xml;
  if (text) {
    return text;
  }
  throw Error("Your browser does not support serializing XML documents");
};
goog.dom.xml.selectSingleNode = function(node, path) {
  if (typeof node.selectSingleNode != "undefined") {
    var doc = goog.dom.getOwnerDocument(node);
    if (typeof doc.setProperty != "undefined") {
      doc.setProperty("SelectionLanguage", "XPath");
    }
    return node.selectSingleNode(path);
  } else {
    if (document.implementation.hasFeature("XPath", "3.0")) {
      var doc = goog.dom.getOwnerDocument(node);
      var resolver = doc.createNSResolver(doc.documentElement);
      var result = doc.evaluate(path, node, resolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
      return result.singleNodeValue;
    }
  }
  return null;
};
goog.dom.xml.selectNodes = function(node, path) {
  if (typeof node.selectNodes != "undefined") {
    var doc = goog.dom.getOwnerDocument(node);
    if (typeof doc.setProperty != "undefined") {
      doc.setProperty("SelectionLanguage", "XPath");
    }
    return node.selectNodes(path);
  } else {
    if (document.implementation.hasFeature("XPath", "3.0")) {
      var doc = goog.dom.getOwnerDocument(node);
      var resolver = doc.createNSResolver(doc.documentElement);
      var nodes = doc.evaluate(path, node, resolver, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
      var results = [];
      var count = nodes.snapshotLength;
      for (var i = 0;i < count;i++) {
        results.push(nodes.snapshotItem(i));
      }
      return results;
    } else {
      return[];
    }
  }
};
goog.dom.xml.setAttributes = function(element, attributes) {
  for (var key in attributes) {
    if (attributes.hasOwnProperty(key)) {
      element.setAttribute(key, attributes[key]);
    }
  }
};
goog.dom.xml.createMsXmlDocument_ = function() {
  var doc = new ActiveXObject("MSXML2.DOMDocument");
  if (doc) {
    doc.resolveExternals = false;
    doc.validateOnParse = false;
    try {
      doc.setProperty("ProhibitDTD", true);
      doc.setProperty("MaxXMLSize", goog.dom.xml.MAX_XML_SIZE_KB);
      doc.setProperty("MaxElementDepth", goog.dom.xml.MAX_ELEMENT_DEPTH);
    } catch (e) {
    }
  }
  return doc;
};
goog.provide("domina");
goog.require("cljs.core");
goog.require("goog.dom.forms");
goog.require("goog.dom");
goog.require("goog.dom.classes");
goog.require("goog.dom.xml");
goog.require("goog.dom");
goog.require("goog.dom.classes");
goog.require("goog.dom.forms");
goog.require("goog.string");
goog.require("cljs.core");
goog.require("domina.support");
goog.require("goog.events");
goog.require("goog.string");
goog.require("domina.support");
goog.require("goog.style");
goog.require("goog.style");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("goog.events");
goog.require("goog.dom.xml");
goog.require("cljs.core");
domina.re_html = /<|&#?\w+;/;
domina.re_leading_whitespace = /^\s+/;
domina.re_xhtml_tag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/i;
domina.re_tag_name = /<([\w:]+)/;
domina.re_no_inner_html = /<(?:script|style)/i;
domina.re_tbody = /<tbody/i;
var opt_wrapper_28159 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3cselect multiple\x3d'multiple'\x3e", "\x3c/select\x3e"], null);
var table_section_wrapper_28160 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3ctable\x3e", "\x3c/table\x3e"], null);
var cell_wrapper_28161 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [3, "\x3ctable\x3e\x3ctbody\x3e\x3ctr\x3e", "\x3c/tr\x3e\x3c/tbody\x3e\x3c/table\x3e"], null);
domina.wrap_map = cljs.core.PersistentHashMap.fromArrays(["td", "optgroup", "tfoot", "tr", "area", new cljs.core.Keyword(null, "default", "default", -1987822328), "option", "legend", "thead", "col", "caption", "th", "colgroup", "tbody"], [cell_wrapper_28161, opt_wrapper_28159, table_section_wrapper_28160, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [2, "\x3ctable\x3e\x3ctbody\x3e", "\x3c/tbody\x3e\x3c/table\x3e"], null), new cljs.core.PersistentVector(null, 3, 
5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3cmap\x3e", "\x3c/map\x3e"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, "", ""], null), opt_wrapper_28159, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3cfieldset\x3e", "\x3c/fieldset\x3e"], null), table_section_wrapper_28160, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [2, "\x3ctable\x3e\x3ctbody\x3e\x3c/tbody\x3e\x3ccolgroup\x3e", 
"\x3c/colgroup\x3e\x3c/table\x3e"], null), table_section_wrapper_28160, cell_wrapper_28161, table_section_wrapper_28160, table_section_wrapper_28160]);
domina.remove_extraneous_tbody_BANG_ = function remove_extraneous_tbody_BANG_(div, html, tag_name, start_wrap) {
  var no_tbody_QMARK_ = cljs.core.not.call(null, cljs.core.re_find.call(null, domina.re_tbody, html));
  var tbody = cljs.core._EQ_.call(null, tag_name, "table") && no_tbody_QMARK_ ? function() {
    var and__3628__auto__ = div.firstChild;
    if (cljs.core.truth_(and__3628__auto__)) {
      return div.firstChild.childNodes;
    } else {
      return and__3628__auto__;
    }
  }() : cljs.core._EQ_.call(null, start_wrap, "\x3ctable\x3e") && no_tbody_QMARK_ ? div.childNodes : cljs.core.PersistentVector.EMPTY;
  var seq__28166 = cljs.core.seq.call(null, tbody);
  var chunk__28167 = null;
  var count__28168 = 0;
  var i__28169 = 0;
  while (true) {
    if (i__28169 < count__28168) {
      var child = cljs.core._nth.call(null, chunk__28167, i__28169);
      if (cljs.core._EQ_.call(null, child.nodeName, "tbody") && cljs.core._EQ_.call(null, child.childNodes.length, 0)) {
        child.parentNode.removeChild(child);
      } else {
      }
      var G__28170 = seq__28166;
      var G__28171 = chunk__28167;
      var G__28172 = count__28168;
      var G__28173 = i__28169 + 1;
      seq__28166 = G__28170;
      chunk__28167 = G__28171;
      count__28168 = G__28172;
      i__28169 = G__28173;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__28166);
      if (temp__4126__auto__) {
        var seq__28166__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__28166__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__28166__$1);
          var G__28174 = cljs.core.chunk_rest.call(null, seq__28166__$1);
          var G__28175 = c__4410__auto__;
          var G__28176 = cljs.core.count.call(null, c__4410__auto__);
          var G__28177 = 0;
          seq__28166 = G__28174;
          chunk__28167 = G__28175;
          count__28168 = G__28176;
          i__28169 = G__28177;
          continue;
        } else {
          var child = cljs.core.first.call(null, seq__28166__$1);
          if (cljs.core._EQ_.call(null, child.nodeName, "tbody") && cljs.core._EQ_.call(null, child.childNodes.length, 0)) {
            child.parentNode.removeChild(child);
          } else {
          }
          var G__28178 = cljs.core.next.call(null, seq__28166__$1);
          var G__28179 = null;
          var G__28180 = 0;
          var G__28181 = 0;
          seq__28166 = G__28178;
          chunk__28167 = G__28179;
          count__28168 = G__28180;
          i__28169 = G__28181;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
domina.restore_leading_whitespace_BANG_ = function restore_leading_whitespace_BANG_(div, html) {
  return div.insertBefore(document.createTextNode(cljs.core.first.call(null, cljs.core.re_find.call(null, domina.re_leading_whitespace, html))), div.firstChild);
};
domina.html_to_dom = function html_to_dom(html) {
  var html__$1 = clojure.string.replace.call(null, html, domina.re_xhtml_tag, "\x3c$1\x3e\x3c/$2\x3e");
  var tag_name = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.second.call(null, cljs.core.re_find.call(null, domina.re_tag_name, html__$1)))).toLowerCase();
  var vec__28183 = cljs.core.get.call(null, domina.wrap_map, tag_name, (new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(domina.wrap_map));
  var depth = cljs.core.nth.call(null, vec__28183, 0, null);
  var start_wrap = cljs.core.nth.call(null, vec__28183, 1, null);
  var end_wrap = cljs.core.nth.call(null, vec__28183, 2, null);
  var div = function() {
    var wrapper = function() {
      var div = document.createElement("div");
      div.innerHTML = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(start_wrap) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(html__$1) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(end_wrap);
      return div;
    }();
    var level = depth;
    while (true) {
      if (level > 0) {
        var G__28184 = wrapper.lastChild;
        var G__28185 = level - 1;
        wrapper = G__28184;
        level = G__28185;
        continue;
      } else {
        return wrapper;
      }
      break;
    }
  }();
  if (cljs.core.truth_(domina.support.extraneous_tbody_QMARK_)) {
    domina.remove_extraneous_tbody_BANG_.call(null, div, html__$1, tag_name, start_wrap);
  } else {
  }
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = cljs.core.not.call(null, domina.support.leading_whitespace_QMARK_);
    if (and__3628__auto__) {
      return cljs.core.re_find.call(null, domina.re_leading_whitespace, html__$1);
    } else {
      return and__3628__auto__;
    }
  }())) {
    domina.restore_leading_whitespace_BANG_.call(null, div, html__$1);
  } else {
  }
  return div.childNodes;
};
domina.string_to_dom = function string_to_dom(s) {
  if (cljs.core.truth_(cljs.core.re_find.call(null, domina.re_html, s))) {
    return domina.html_to_dom.call(null, s);
  } else {
    return document.createTextNode(s);
  }
};
domina.DomContent = function() {
  var obj28187 = {};
  return obj28187;
}();
domina.nodes = function nodes(content) {
  if (function() {
    var and__3628__auto__ = content;
    if (and__3628__auto__) {
      return content.domina$DomContent$nodes$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return content.domina$DomContent$nodes$arity$1(content);
  } else {
    var x__4277__auto__ = content == null ? null : content;
    return function() {
      var or__3640__auto__ = domina.nodes[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = domina.nodes["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "DomContent.nodes", content);
        }
      }
    }().call(null, content);
  }
};
domina.single_node = function single_node(nodeseq) {
  if (function() {
    var and__3628__auto__ = nodeseq;
    if (and__3628__auto__) {
      return nodeseq.domina$DomContent$single_node$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return nodeseq.domina$DomContent$single_node$arity$1(nodeseq);
  } else {
    var x__4277__auto__ = nodeseq == null ? null : nodeseq;
    return function() {
      var or__3640__auto__ = domina.single_node[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = domina.single_node["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "DomContent.single-node", nodeseq);
        }
      }
    }().call(null, nodeseq);
  }
};
domina._STAR_debug_STAR_ = true;
domina.log_debug = function() {
  var log_debug__delegate = function(mesg) {
    if (cljs.core.truth_(function() {
      var and__3628__auto__ = domina._STAR_debug_STAR_;
      if (cljs.core.truth_(and__3628__auto__)) {
        return!cljs.core._EQ_.call(null, window.console, undefined);
      } else {
        return and__3628__auto__;
      }
    }())) {
      return console.log(cljs.core.apply.call(null, cljs.core.str, mesg));
    } else {
      return null;
    }
  };
  var log_debug = function(var_args) {
    var mesg = null;
    if (arguments.length > 0) {
      mesg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return log_debug__delegate.call(this, mesg);
  };
  log_debug.cljs$lang$maxFixedArity = 0;
  log_debug.cljs$lang$applyTo = function(arglist__28188) {
    var mesg = cljs.core.seq(arglist__28188);
    return log_debug__delegate(mesg);
  };
  log_debug.cljs$core$IFn$_invoke$arity$variadic = log_debug__delegate;
  return log_debug;
}();
domina.log = function() {
  var log__delegate = function(mesg) {
    if (cljs.core.truth_(window.console)) {
      return console.log(cljs.core.apply.call(null, cljs.core.str, mesg));
    } else {
      return null;
    }
  };
  var log = function(var_args) {
    var mesg = null;
    if (arguments.length > 0) {
      mesg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return log__delegate.call(this, mesg);
  };
  log.cljs$lang$maxFixedArity = 0;
  log.cljs$lang$applyTo = function(arglist__28189) {
    var mesg = cljs.core.seq(arglist__28189);
    return log__delegate(mesg);
  };
  log.cljs$core$IFn$_invoke$arity$variadic = log__delegate;
  return log;
}();
domina.by_id = function by_id(id) {
  return goog.dom.getElement(cljs.core.name.call(null, id));
};
domina.by_class = function by_class(class_name) {
  return domina.normalize_seq.call(null, goog.dom.getElementsByClass(cljs.core.name.call(null, class_name)));
};
domina.children = function children(content) {
  return cljs.core.doall.call(null, cljs.core.mapcat.call(null, goog.dom.getChildren, domina.nodes.call(null, content)));
};
domina.common_ancestor = function() {
  var common_ancestor__delegate = function(contents) {
    return cljs.core.apply.call(null, goog.dom.findCommonAncestor, cljs.core.map.call(null, domina.single_node, contents));
  };
  var common_ancestor = function(var_args) {
    var contents = null;
    if (arguments.length > 0) {
      contents = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return common_ancestor__delegate.call(this, contents);
  };
  common_ancestor.cljs$lang$maxFixedArity = 0;
  common_ancestor.cljs$lang$applyTo = function(arglist__28190) {
    var contents = cljs.core.seq(arglist__28190);
    return common_ancestor__delegate(contents);
  };
  common_ancestor.cljs$core$IFn$_invoke$arity$variadic = common_ancestor__delegate;
  return common_ancestor;
}();
domina.ancestor_QMARK_ = function ancestor_QMARK_(ancestor_content, descendant_content) {
  return cljs.core._EQ_.call(null, domina.common_ancestor.call(null, ancestor_content, descendant_content), domina.single_node.call(null, ancestor_content));
};
domina.clone = function clone(content) {
  return cljs.core.map.call(null, function(p1__28191_SHARP_) {
    return p1__28191_SHARP_.cloneNode(true);
  }, domina.nodes.call(null, content));
};
domina.append_BANG_ = function append_BANG_(parent_content, child_content) {
  domina.apply_with_cloning.call(null, goog.dom.appendChild, parent_content, child_content);
  return parent_content;
};
domina.insert_BANG_ = function insert_BANG_(parent_content, child_content, idx) {
  domina.apply_with_cloning.call(null, function(p1__28192_SHARP_, p2__28193_SHARP_) {
    return goog.dom.insertChildAt(p1__28192_SHARP_, p2__28193_SHARP_, idx);
  }, parent_content, child_content);
  return parent_content;
};
domina.prepend_BANG_ = function prepend_BANG_(parent_content, child_content) {
  domina.insert_BANG_.call(null, parent_content, child_content, 0);
  return parent_content;
};
domina.insert_before_BANG_ = function insert_before_BANG_(content, new_content) {
  domina.apply_with_cloning.call(null, function(p1__28195_SHARP_, p2__28194_SHARP_) {
    return goog.dom.insertSiblingBefore(p2__28194_SHARP_, p1__28195_SHARP_);
  }, content, new_content);
  return content;
};
domina.insert_after_BANG_ = function insert_after_BANG_(content, new_content) {
  domina.apply_with_cloning.call(null, function(p1__28197_SHARP_, p2__28196_SHARP_) {
    return goog.dom.insertSiblingAfter(p2__28196_SHARP_, p1__28197_SHARP_);
  }, content, new_content);
  return content;
};
domina.swap_content_BANG_ = function swap_content_BANG_(old_content, new_content) {
  domina.apply_with_cloning.call(null, function(p1__28199_SHARP_, p2__28198_SHARP_) {
    return goog.dom.replaceNode(p2__28198_SHARP_, p1__28199_SHARP_);
  }, old_content, new_content);
  return old_content;
};
domina.detach_BANG_ = function detach_BANG_(content) {
  return cljs.core.doall.call(null, cljs.core.map.call(null, goog.dom.removeNode, domina.nodes.call(null, content)));
};
domina.destroy_BANG_ = function destroy_BANG_(content) {
  return cljs.core.dorun.call(null, cljs.core.map.call(null, goog.dom.removeNode, domina.nodes.call(null, content)));
};
domina.destroy_children_BANG_ = function destroy_children_BANG_(content) {
  cljs.core.dorun.call(null, cljs.core.map.call(null, goog.dom.removeChildren, domina.nodes.call(null, content)));
  return content;
};
domina.style = function style(content, name) {
  var s = goog.style.getStyle(domina.single_node.call(null, content), cljs.core.name.call(null, name));
  if (cljs.core.truth_(clojure.string.blank_QMARK_.call(null, s))) {
    return null;
  } else {
    return s;
  }
};
domina.attr = function attr(content, name) {
  return domina.single_node.call(null, content).getAttribute(cljs.core.name.call(null, name));
};
domina.set_style_BANG_ = function() {
  var set_style_BANG___delegate = function(content, name, value) {
    var seq__28204_28208 = cljs.core.seq.call(null, domina.nodes.call(null, content));
    var chunk__28205_28209 = null;
    var count__28206_28210 = 0;
    var i__28207_28211 = 0;
    while (true) {
      if (i__28207_28211 < count__28206_28210) {
        var n_28212 = cljs.core._nth.call(null, chunk__28205_28209, i__28207_28211);
        goog.style.setStyle(n_28212, cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
        var G__28213 = seq__28204_28208;
        var G__28214 = chunk__28205_28209;
        var G__28215 = count__28206_28210;
        var G__28216 = i__28207_28211 + 1;
        seq__28204_28208 = G__28213;
        chunk__28205_28209 = G__28214;
        count__28206_28210 = G__28215;
        i__28207_28211 = G__28216;
        continue;
      } else {
        var temp__4126__auto___28217 = cljs.core.seq.call(null, seq__28204_28208);
        if (temp__4126__auto___28217) {
          var seq__28204_28218__$1 = temp__4126__auto___28217;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__28204_28218__$1)) {
            var c__4410__auto___28219 = cljs.core.chunk_first.call(null, seq__28204_28218__$1);
            var G__28220 = cljs.core.chunk_rest.call(null, seq__28204_28218__$1);
            var G__28221 = c__4410__auto___28219;
            var G__28222 = cljs.core.count.call(null, c__4410__auto___28219);
            var G__28223 = 0;
            seq__28204_28208 = G__28220;
            chunk__28205_28209 = G__28221;
            count__28206_28210 = G__28222;
            i__28207_28211 = G__28223;
            continue;
          } else {
            var n_28224 = cljs.core.first.call(null, seq__28204_28218__$1);
            goog.style.setStyle(n_28224, cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
            var G__28225 = cljs.core.next.call(null, seq__28204_28218__$1);
            var G__28226 = null;
            var G__28227 = 0;
            var G__28228 = 0;
            seq__28204_28208 = G__28225;
            chunk__28205_28209 = G__28226;
            count__28206_28210 = G__28227;
            i__28207_28211 = G__28228;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return content;
  };
  var set_style_BANG_ = function(content, name, var_args) {
    var value = null;
    if (arguments.length > 2) {
      value = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return set_style_BANG___delegate.call(this, content, name, value);
  };
  set_style_BANG_.cljs$lang$maxFixedArity = 2;
  set_style_BANG_.cljs$lang$applyTo = function(arglist__28229) {
    var content = cljs.core.first(arglist__28229);
    arglist__28229 = cljs.core.next(arglist__28229);
    var name = cljs.core.first(arglist__28229);
    var value = cljs.core.rest(arglist__28229);
    return set_style_BANG___delegate(content, name, value);
  };
  set_style_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_style_BANG___delegate;
  return set_style_BANG_;
}();
domina.set_attr_BANG_ = function() {
  var set_attr_BANG___delegate = function(content, name, value) {
    var seq__28234_28238 = cljs.core.seq.call(null, domina.nodes.call(null, content));
    var chunk__28235_28239 = null;
    var count__28236_28240 = 0;
    var i__28237_28241 = 0;
    while (true) {
      if (i__28237_28241 < count__28236_28240) {
        var n_28242 = cljs.core._nth.call(null, chunk__28235_28239, i__28237_28241);
        n_28242.setAttribute(cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
        var G__28243 = seq__28234_28238;
        var G__28244 = chunk__28235_28239;
        var G__28245 = count__28236_28240;
        var G__28246 = i__28237_28241 + 1;
        seq__28234_28238 = G__28243;
        chunk__28235_28239 = G__28244;
        count__28236_28240 = G__28245;
        i__28237_28241 = G__28246;
        continue;
      } else {
        var temp__4126__auto___28247 = cljs.core.seq.call(null, seq__28234_28238);
        if (temp__4126__auto___28247) {
          var seq__28234_28248__$1 = temp__4126__auto___28247;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__28234_28248__$1)) {
            var c__4410__auto___28249 = cljs.core.chunk_first.call(null, seq__28234_28248__$1);
            var G__28250 = cljs.core.chunk_rest.call(null, seq__28234_28248__$1);
            var G__28251 = c__4410__auto___28249;
            var G__28252 = cljs.core.count.call(null, c__4410__auto___28249);
            var G__28253 = 0;
            seq__28234_28238 = G__28250;
            chunk__28235_28239 = G__28251;
            count__28236_28240 = G__28252;
            i__28237_28241 = G__28253;
            continue;
          } else {
            var n_28254 = cljs.core.first.call(null, seq__28234_28248__$1);
            n_28254.setAttribute(cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
            var G__28255 = cljs.core.next.call(null, seq__28234_28248__$1);
            var G__28256 = null;
            var G__28257 = 0;
            var G__28258 = 0;
            seq__28234_28238 = G__28255;
            chunk__28235_28239 = G__28256;
            count__28236_28240 = G__28257;
            i__28237_28241 = G__28258;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return content;
  };
  var set_attr_BANG_ = function(content, name, var_args) {
    var value = null;
    if (arguments.length > 2) {
      value = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return set_attr_BANG___delegate.call(this, content, name, value);
  };
  set_attr_BANG_.cljs$lang$maxFixedArity = 2;
  set_attr_BANG_.cljs$lang$applyTo = function(arglist__28259) {
    var content = cljs.core.first(arglist__28259);
    arglist__28259 = cljs.core.next(arglist__28259);
    var name = cljs.core.first(arglist__28259);
    var value = cljs.core.rest(arglist__28259);
    return set_attr_BANG___delegate(content, name, value);
  };
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_attr_BANG___delegate;
  return set_attr_BANG_;
}();
domina.remove_attr_BANG_ = function remove_attr_BANG_(content, name) {
  var seq__28264_28268 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__28265_28269 = null;
  var count__28266_28270 = 0;
  var i__28267_28271 = 0;
  while (true) {
    if (i__28267_28271 < count__28266_28270) {
      var n_28272 = cljs.core._nth.call(null, chunk__28265_28269, i__28267_28271);
      n_28272.removeAttribute(cljs.core.name.call(null, name));
      var G__28273 = seq__28264_28268;
      var G__28274 = chunk__28265_28269;
      var G__28275 = count__28266_28270;
      var G__28276 = i__28267_28271 + 1;
      seq__28264_28268 = G__28273;
      chunk__28265_28269 = G__28274;
      count__28266_28270 = G__28275;
      i__28267_28271 = G__28276;
      continue;
    } else {
      var temp__4126__auto___28277 = cljs.core.seq.call(null, seq__28264_28268);
      if (temp__4126__auto___28277) {
        var seq__28264_28278__$1 = temp__4126__auto___28277;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__28264_28278__$1)) {
          var c__4410__auto___28279 = cljs.core.chunk_first.call(null, seq__28264_28278__$1);
          var G__28280 = cljs.core.chunk_rest.call(null, seq__28264_28278__$1);
          var G__28281 = c__4410__auto___28279;
          var G__28282 = cljs.core.count.call(null, c__4410__auto___28279);
          var G__28283 = 0;
          seq__28264_28268 = G__28280;
          chunk__28265_28269 = G__28281;
          count__28266_28270 = G__28282;
          i__28267_28271 = G__28283;
          continue;
        } else {
          var n_28284 = cljs.core.first.call(null, seq__28264_28278__$1);
          n_28284.removeAttribute(cljs.core.name.call(null, name));
          var G__28285 = cljs.core.next.call(null, seq__28264_28278__$1);
          var G__28286 = null;
          var G__28287 = 0;
          var G__28288 = 0;
          seq__28264_28268 = G__28285;
          chunk__28265_28269 = G__28286;
          count__28266_28270 = G__28287;
          i__28267_28271 = G__28288;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.parse_style_attributes = function parse_style_attributes(style) {
  return cljs.core.reduce.call(null, function(acc, pair) {
    var vec__28290 = pair.split(/\s*:\s*/);
    var k = cljs.core.nth.call(null, vec__28290, 0, null);
    var v = cljs.core.nth.call(null, vec__28290, 1, null);
    if (cljs.core.truth_(function() {
      var and__3628__auto__ = k;
      if (cljs.core.truth_(and__3628__auto__)) {
        return v;
      } else {
        return and__3628__auto__;
      }
    }())) {
      return cljs.core.assoc.call(null, acc, cljs.core.keyword.call(null, k.toLowerCase()), v);
    } else {
      return acc;
    }
  }, cljs.core.PersistentArrayMap.EMPTY, style.split(/\s*;\s*/));
};
domina.styles = function styles(content) {
  var style = domina.attr.call(null, content, "style");
  if (typeof style === "string") {
    return domina.parse_style_attributes.call(null, style);
  } else {
    if (style == null) {
      return cljs.core.PersistentArrayMap.EMPTY;
    } else {
      if (cljs.core.truth_(style.cssText)) {
        return domina.parse_style_attributes.call(null, style.cssText);
      } else {
        return cljs.core.PersistentArrayMap.EMPTY;
      }
    }
  }
};
domina.attrs = function attrs(content) {
  var node = domina.single_node.call(null, content);
  var attrs__$1 = node.attributes;
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.filter.call(null, cljs.core.complement.call(null, cljs.core.nil_QMARK_), cljs.core.map.call(null, function(node, attrs__$1) {
    return function(p1__28291_SHARP_) {
      var attr = attrs__$1.item(p1__28291_SHARP_);
      var value = attr.nodeValue;
      if (cljs.core.not_EQ_.call(null, null, value) && cljs.core.not_EQ_.call(null, "", value)) {
        return new cljs.core.PersistentArrayMap.fromArray([cljs.core.keyword.call(null, attr.nodeName.toLowerCase()), attr.nodeValue], true, false);
      } else {
        return null;
      }
    };
  }(node, attrs__$1), cljs.core.range.call(null, attrs__$1.length))));
};
domina.set_styles_BANG_ = function set_styles_BANG_(content, styles) {
  var seq__28298_28304 = cljs.core.seq.call(null, styles);
  var chunk__28299_28305 = null;
  var count__28300_28306 = 0;
  var i__28301_28307 = 0;
  while (true) {
    if (i__28301_28307 < count__28300_28306) {
      var vec__28302_28308 = cljs.core._nth.call(null, chunk__28299_28305, i__28301_28307);
      var name_28309 = cljs.core.nth.call(null, vec__28302_28308, 0, null);
      var value_28310 = cljs.core.nth.call(null, vec__28302_28308, 1, null);
      domina.set_style_BANG_.call(null, content, name_28309, value_28310);
      var G__28311 = seq__28298_28304;
      var G__28312 = chunk__28299_28305;
      var G__28313 = count__28300_28306;
      var G__28314 = i__28301_28307 + 1;
      seq__28298_28304 = G__28311;
      chunk__28299_28305 = G__28312;
      count__28300_28306 = G__28313;
      i__28301_28307 = G__28314;
      continue;
    } else {
      var temp__4126__auto___28315 = cljs.core.seq.call(null, seq__28298_28304);
      if (temp__4126__auto___28315) {
        var seq__28298_28316__$1 = temp__4126__auto___28315;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__28298_28316__$1)) {
          var c__4410__auto___28317 = cljs.core.chunk_first.call(null, seq__28298_28316__$1);
          var G__28318 = cljs.core.chunk_rest.call(null, seq__28298_28316__$1);
          var G__28319 = c__4410__auto___28317;
          var G__28320 = cljs.core.count.call(null, c__4410__auto___28317);
          var G__28321 = 0;
          seq__28298_28304 = G__28318;
          chunk__28299_28305 = G__28319;
          count__28300_28306 = G__28320;
          i__28301_28307 = G__28321;
          continue;
        } else {
          var vec__28303_28322 = cljs.core.first.call(null, seq__28298_28316__$1);
          var name_28323 = cljs.core.nth.call(null, vec__28303_28322, 0, null);
          var value_28324 = cljs.core.nth.call(null, vec__28303_28322, 1, null);
          domina.set_style_BANG_.call(null, content, name_28323, value_28324);
          var G__28325 = cljs.core.next.call(null, seq__28298_28316__$1);
          var G__28326 = null;
          var G__28327 = 0;
          var G__28328 = 0;
          seq__28298_28304 = G__28325;
          chunk__28299_28305 = G__28326;
          count__28300_28306 = G__28327;
          i__28301_28307 = G__28328;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.set_attrs_BANG_ = function set_attrs_BANG_(content, attrs) {
  var seq__28335_28341 = cljs.core.seq.call(null, attrs);
  var chunk__28336_28342 = null;
  var count__28337_28343 = 0;
  var i__28338_28344 = 0;
  while (true) {
    if (i__28338_28344 < count__28337_28343) {
      var vec__28339_28345 = cljs.core._nth.call(null, chunk__28336_28342, i__28338_28344);
      var name_28346 = cljs.core.nth.call(null, vec__28339_28345, 0, null);
      var value_28347 = cljs.core.nth.call(null, vec__28339_28345, 1, null);
      domina.set_attr_BANG_.call(null, content, name_28346, value_28347);
      var G__28348 = seq__28335_28341;
      var G__28349 = chunk__28336_28342;
      var G__28350 = count__28337_28343;
      var G__28351 = i__28338_28344 + 1;
      seq__28335_28341 = G__28348;
      chunk__28336_28342 = G__28349;
      count__28337_28343 = G__28350;
      i__28338_28344 = G__28351;
      continue;
    } else {
      var temp__4126__auto___28352 = cljs.core.seq.call(null, seq__28335_28341);
      if (temp__4126__auto___28352) {
        var seq__28335_28353__$1 = temp__4126__auto___28352;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__28335_28353__$1)) {
          var c__4410__auto___28354 = cljs.core.chunk_first.call(null, seq__28335_28353__$1);
          var G__28355 = cljs.core.chunk_rest.call(null, seq__28335_28353__$1);
          var G__28356 = c__4410__auto___28354;
          var G__28357 = cljs.core.count.call(null, c__4410__auto___28354);
          var G__28358 = 0;
          seq__28335_28341 = G__28355;
          chunk__28336_28342 = G__28356;
          count__28337_28343 = G__28357;
          i__28338_28344 = G__28358;
          continue;
        } else {
          var vec__28340_28359 = cljs.core.first.call(null, seq__28335_28353__$1);
          var name_28360 = cljs.core.nth.call(null, vec__28340_28359, 0, null);
          var value_28361 = cljs.core.nth.call(null, vec__28340_28359, 1, null);
          domina.set_attr_BANG_.call(null, content, name_28360, value_28361);
          var G__28362 = cljs.core.next.call(null, seq__28335_28353__$1);
          var G__28363 = null;
          var G__28364 = 0;
          var G__28365 = 0;
          seq__28335_28341 = G__28362;
          chunk__28336_28342 = G__28363;
          count__28337_28343 = G__28364;
          i__28338_28344 = G__28365;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.has_class_QMARK_ = function has_class_QMARK_(content, class$) {
  return goog.dom.classes.has(domina.single_node.call(null, content), class$);
};
domina.add_class_BANG_ = function add_class_BANG_(content, class$) {
  var seq__28370_28374 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__28371_28375 = null;
  var count__28372_28376 = 0;
  var i__28373_28377 = 0;
  while (true) {
    if (i__28373_28377 < count__28372_28376) {
      var node_28378 = cljs.core._nth.call(null, chunk__28371_28375, i__28373_28377);
      goog.dom.classes.add(node_28378, class$);
      var G__28379 = seq__28370_28374;
      var G__28380 = chunk__28371_28375;
      var G__28381 = count__28372_28376;
      var G__28382 = i__28373_28377 + 1;
      seq__28370_28374 = G__28379;
      chunk__28371_28375 = G__28380;
      count__28372_28376 = G__28381;
      i__28373_28377 = G__28382;
      continue;
    } else {
      var temp__4126__auto___28383 = cljs.core.seq.call(null, seq__28370_28374);
      if (temp__4126__auto___28383) {
        var seq__28370_28384__$1 = temp__4126__auto___28383;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__28370_28384__$1)) {
          var c__4410__auto___28385 = cljs.core.chunk_first.call(null, seq__28370_28384__$1);
          var G__28386 = cljs.core.chunk_rest.call(null, seq__28370_28384__$1);
          var G__28387 = c__4410__auto___28385;
          var G__28388 = cljs.core.count.call(null, c__4410__auto___28385);
          var G__28389 = 0;
          seq__28370_28374 = G__28386;
          chunk__28371_28375 = G__28387;
          count__28372_28376 = G__28388;
          i__28373_28377 = G__28389;
          continue;
        } else {
          var node_28390 = cljs.core.first.call(null, seq__28370_28384__$1);
          goog.dom.classes.add(node_28390, class$);
          var G__28391 = cljs.core.next.call(null, seq__28370_28384__$1);
          var G__28392 = null;
          var G__28393 = 0;
          var G__28394 = 0;
          seq__28370_28374 = G__28391;
          chunk__28371_28375 = G__28392;
          count__28372_28376 = G__28393;
          i__28373_28377 = G__28394;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.remove_class_BANG_ = function remove_class_BANG_(content, class$) {
  var seq__28399_28403 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__28400_28404 = null;
  var count__28401_28405 = 0;
  var i__28402_28406 = 0;
  while (true) {
    if (i__28402_28406 < count__28401_28405) {
      var node_28407 = cljs.core._nth.call(null, chunk__28400_28404, i__28402_28406);
      goog.dom.classes.remove(node_28407, class$);
      var G__28408 = seq__28399_28403;
      var G__28409 = chunk__28400_28404;
      var G__28410 = count__28401_28405;
      var G__28411 = i__28402_28406 + 1;
      seq__28399_28403 = G__28408;
      chunk__28400_28404 = G__28409;
      count__28401_28405 = G__28410;
      i__28402_28406 = G__28411;
      continue;
    } else {
      var temp__4126__auto___28412 = cljs.core.seq.call(null, seq__28399_28403);
      if (temp__4126__auto___28412) {
        var seq__28399_28413__$1 = temp__4126__auto___28412;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__28399_28413__$1)) {
          var c__4410__auto___28414 = cljs.core.chunk_first.call(null, seq__28399_28413__$1);
          var G__28415 = cljs.core.chunk_rest.call(null, seq__28399_28413__$1);
          var G__28416 = c__4410__auto___28414;
          var G__28417 = cljs.core.count.call(null, c__4410__auto___28414);
          var G__28418 = 0;
          seq__28399_28403 = G__28415;
          chunk__28400_28404 = G__28416;
          count__28401_28405 = G__28417;
          i__28402_28406 = G__28418;
          continue;
        } else {
          var node_28419 = cljs.core.first.call(null, seq__28399_28413__$1);
          goog.dom.classes.remove(node_28419, class$);
          var G__28420 = cljs.core.next.call(null, seq__28399_28413__$1);
          var G__28421 = null;
          var G__28422 = 0;
          var G__28423 = 0;
          seq__28399_28403 = G__28420;
          chunk__28400_28404 = G__28421;
          count__28401_28405 = G__28422;
          i__28402_28406 = G__28423;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.toggle_class_BANG_ = function toggle_class_BANG_(content, class$) {
  var seq__28428_28432 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__28429_28433 = null;
  var count__28430_28434 = 0;
  var i__28431_28435 = 0;
  while (true) {
    if (i__28431_28435 < count__28430_28434) {
      var node_28436 = cljs.core._nth.call(null, chunk__28429_28433, i__28431_28435);
      goog.dom.classes.toggle(node_28436, class$);
      var G__28437 = seq__28428_28432;
      var G__28438 = chunk__28429_28433;
      var G__28439 = count__28430_28434;
      var G__28440 = i__28431_28435 + 1;
      seq__28428_28432 = G__28437;
      chunk__28429_28433 = G__28438;
      count__28430_28434 = G__28439;
      i__28431_28435 = G__28440;
      continue;
    } else {
      var temp__4126__auto___28441 = cljs.core.seq.call(null, seq__28428_28432);
      if (temp__4126__auto___28441) {
        var seq__28428_28442__$1 = temp__4126__auto___28441;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__28428_28442__$1)) {
          var c__4410__auto___28443 = cljs.core.chunk_first.call(null, seq__28428_28442__$1);
          var G__28444 = cljs.core.chunk_rest.call(null, seq__28428_28442__$1);
          var G__28445 = c__4410__auto___28443;
          var G__28446 = cljs.core.count.call(null, c__4410__auto___28443);
          var G__28447 = 0;
          seq__28428_28432 = G__28444;
          chunk__28429_28433 = G__28445;
          count__28430_28434 = G__28446;
          i__28431_28435 = G__28447;
          continue;
        } else {
          var node_28448 = cljs.core.first.call(null, seq__28428_28442__$1);
          goog.dom.classes.toggle(node_28448, class$);
          var G__28449 = cljs.core.next.call(null, seq__28428_28442__$1);
          var G__28450 = null;
          var G__28451 = 0;
          var G__28452 = 0;
          seq__28428_28432 = G__28449;
          chunk__28429_28433 = G__28450;
          count__28430_28434 = G__28451;
          i__28431_28435 = G__28452;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.classes = function classes(content) {
  return cljs.core.seq.call(null, goog.dom.classes.get(domina.single_node.call(null, content)));
};
domina.set_classes_BANG_ = function set_classes_BANG_(content, classes) {
  var classes_28461__$1 = cljs.core.coll_QMARK_.call(null, classes) ? clojure.string.join.call(null, " ", classes) : classes;
  var seq__28457_28462 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__28458_28463 = null;
  var count__28459_28464 = 0;
  var i__28460_28465 = 0;
  while (true) {
    if (i__28460_28465 < count__28459_28464) {
      var node_28466 = cljs.core._nth.call(null, chunk__28458_28463, i__28460_28465);
      goog.dom.classes.set(node_28466, classes_28461__$1);
      var G__28467 = seq__28457_28462;
      var G__28468 = chunk__28458_28463;
      var G__28469 = count__28459_28464;
      var G__28470 = i__28460_28465 + 1;
      seq__28457_28462 = G__28467;
      chunk__28458_28463 = G__28468;
      count__28459_28464 = G__28469;
      i__28460_28465 = G__28470;
      continue;
    } else {
      var temp__4126__auto___28471 = cljs.core.seq.call(null, seq__28457_28462);
      if (temp__4126__auto___28471) {
        var seq__28457_28472__$1 = temp__4126__auto___28471;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__28457_28472__$1)) {
          var c__4410__auto___28473 = cljs.core.chunk_first.call(null, seq__28457_28472__$1);
          var G__28474 = cljs.core.chunk_rest.call(null, seq__28457_28472__$1);
          var G__28475 = c__4410__auto___28473;
          var G__28476 = cljs.core.count.call(null, c__4410__auto___28473);
          var G__28477 = 0;
          seq__28457_28462 = G__28474;
          chunk__28458_28463 = G__28475;
          count__28459_28464 = G__28476;
          i__28460_28465 = G__28477;
          continue;
        } else {
          var node_28478 = cljs.core.first.call(null, seq__28457_28472__$1);
          goog.dom.classes.set(node_28478, classes_28461__$1);
          var G__28479 = cljs.core.next.call(null, seq__28457_28472__$1);
          var G__28480 = null;
          var G__28481 = 0;
          var G__28482 = 0;
          seq__28457_28462 = G__28479;
          chunk__28458_28463 = G__28480;
          count__28459_28464 = G__28481;
          i__28460_28465 = G__28482;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.text = function text(content) {
  return goog.string.trim(goog.dom.getTextContent(domina.single_node.call(null, content)));
};
domina.set_text_BANG_ = function set_text_BANG_(content, value) {
  var seq__28487_28491 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__28488_28492 = null;
  var count__28489_28493 = 0;
  var i__28490_28494 = 0;
  while (true) {
    if (i__28490_28494 < count__28489_28493) {
      var node_28495 = cljs.core._nth.call(null, chunk__28488_28492, i__28490_28494);
      goog.dom.setTextContent(node_28495, value);
      var G__28496 = seq__28487_28491;
      var G__28497 = chunk__28488_28492;
      var G__28498 = count__28489_28493;
      var G__28499 = i__28490_28494 + 1;
      seq__28487_28491 = G__28496;
      chunk__28488_28492 = G__28497;
      count__28489_28493 = G__28498;
      i__28490_28494 = G__28499;
      continue;
    } else {
      var temp__4126__auto___28500 = cljs.core.seq.call(null, seq__28487_28491);
      if (temp__4126__auto___28500) {
        var seq__28487_28501__$1 = temp__4126__auto___28500;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__28487_28501__$1)) {
          var c__4410__auto___28502 = cljs.core.chunk_first.call(null, seq__28487_28501__$1);
          var G__28503 = cljs.core.chunk_rest.call(null, seq__28487_28501__$1);
          var G__28504 = c__4410__auto___28502;
          var G__28505 = cljs.core.count.call(null, c__4410__auto___28502);
          var G__28506 = 0;
          seq__28487_28491 = G__28503;
          chunk__28488_28492 = G__28504;
          count__28489_28493 = G__28505;
          i__28490_28494 = G__28506;
          continue;
        } else {
          var node_28507 = cljs.core.first.call(null, seq__28487_28501__$1);
          goog.dom.setTextContent(node_28507, value);
          var G__28508 = cljs.core.next.call(null, seq__28487_28501__$1);
          var G__28509 = null;
          var G__28510 = 0;
          var G__28511 = 0;
          seq__28487_28491 = G__28508;
          chunk__28488_28492 = G__28509;
          count__28489_28493 = G__28510;
          i__28490_28494 = G__28511;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.value = function value(content) {
  return goog.dom.forms.getValue(domina.single_node.call(null, content));
};
domina.set_value_BANG_ = function set_value_BANG_(content, value) {
  var seq__28516_28520 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__28517_28521 = null;
  var count__28518_28522 = 0;
  var i__28519_28523 = 0;
  while (true) {
    if (i__28519_28523 < count__28518_28522) {
      var node_28524 = cljs.core._nth.call(null, chunk__28517_28521, i__28519_28523);
      goog.dom.forms.setValue(node_28524, value);
      var G__28525 = seq__28516_28520;
      var G__28526 = chunk__28517_28521;
      var G__28527 = count__28518_28522;
      var G__28528 = i__28519_28523 + 1;
      seq__28516_28520 = G__28525;
      chunk__28517_28521 = G__28526;
      count__28518_28522 = G__28527;
      i__28519_28523 = G__28528;
      continue;
    } else {
      var temp__4126__auto___28529 = cljs.core.seq.call(null, seq__28516_28520);
      if (temp__4126__auto___28529) {
        var seq__28516_28530__$1 = temp__4126__auto___28529;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__28516_28530__$1)) {
          var c__4410__auto___28531 = cljs.core.chunk_first.call(null, seq__28516_28530__$1);
          var G__28532 = cljs.core.chunk_rest.call(null, seq__28516_28530__$1);
          var G__28533 = c__4410__auto___28531;
          var G__28534 = cljs.core.count.call(null, c__4410__auto___28531);
          var G__28535 = 0;
          seq__28516_28520 = G__28532;
          chunk__28517_28521 = G__28533;
          count__28518_28522 = G__28534;
          i__28519_28523 = G__28535;
          continue;
        } else {
          var node_28536 = cljs.core.first.call(null, seq__28516_28530__$1);
          goog.dom.forms.setValue(node_28536, value);
          var G__28537 = cljs.core.next.call(null, seq__28516_28530__$1);
          var G__28538 = null;
          var G__28539 = 0;
          var G__28540 = 0;
          seq__28516_28520 = G__28537;
          chunk__28517_28521 = G__28538;
          count__28518_28522 = G__28539;
          i__28519_28523 = G__28540;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.html = function html(content) {
  return domina.single_node.call(null, content).innerHTML;
};
domina.replace_children_BANG_ = function replace_children_BANG_(content, inner_content) {
  return domina.append_BANG_.call(null, domina.destroy_children_BANG_.call(null, content), inner_content);
};
domina.set_inner_html_BANG_ = function set_inner_html_BANG_(content, html_string) {
  var allows_inner_html_QMARK_ = cljs.core.not.call(null, cljs.core.re_find.call(null, domina.re_no_inner_html, html_string));
  var leading_whitespace_QMARK_ = cljs.core.re_find.call(null, domina.re_leading_whitespace, html_string);
  var tag_name = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.second.call(null, cljs.core.re_find.call(null, domina.re_tag_name, html_string)))).toLowerCase();
  var special_tag_QMARK_ = cljs.core.contains_QMARK_.call(null, domina.wrap_map, tag_name);
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = allows_inner_html_QMARK_;
    if (and__3628__auto__) {
      var and__3628__auto____$1 = function() {
        var or__3640__auto__ = domina.support.leading_whitespace_QMARK_;
        if (cljs.core.truth_(or__3640__auto__)) {
          return or__3640__auto__;
        } else {
          return cljs.core.not.call(null, leading_whitespace_QMARK_);
        }
      }();
      if (cljs.core.truth_(and__3628__auto____$1)) {
        return!special_tag_QMARK_;
      } else {
        return and__3628__auto____$1;
      }
    } else {
      return and__3628__auto__;
    }
  }())) {
    var value_28551 = clojure.string.replace.call(null, html_string, domina.re_xhtml_tag, "\x3c$1\x3e\x3c/$2\x3e");
    try {
      var seq__28547_28552 = cljs.core.seq.call(null, domina.nodes.call(null, content));
      var chunk__28548_28553 = null;
      var count__28549_28554 = 0;
      var i__28550_28555 = 0;
      while (true) {
        if (i__28550_28555 < count__28549_28554) {
          var node_28556 = cljs.core._nth.call(null, chunk__28548_28553, i__28550_28555);
          node_28556.innerHTML = value_28551;
          var G__28557 = seq__28547_28552;
          var G__28558 = chunk__28548_28553;
          var G__28559 = count__28549_28554;
          var G__28560 = i__28550_28555 + 1;
          seq__28547_28552 = G__28557;
          chunk__28548_28553 = G__28558;
          count__28549_28554 = G__28559;
          i__28550_28555 = G__28560;
          continue;
        } else {
          var temp__4126__auto___28561 = cljs.core.seq.call(null, seq__28547_28552);
          if (temp__4126__auto___28561) {
            var seq__28547_28562__$1 = temp__4126__auto___28561;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__28547_28562__$1)) {
              var c__4410__auto___28563 = cljs.core.chunk_first.call(null, seq__28547_28562__$1);
              var G__28564 = cljs.core.chunk_rest.call(null, seq__28547_28562__$1);
              var G__28565 = c__4410__auto___28563;
              var G__28566 = cljs.core.count.call(null, c__4410__auto___28563);
              var G__28567 = 0;
              seq__28547_28552 = G__28564;
              chunk__28548_28553 = G__28565;
              count__28549_28554 = G__28566;
              i__28550_28555 = G__28567;
              continue;
            } else {
              var node_28568 = cljs.core.first.call(null, seq__28547_28562__$1);
              node_28568.innerHTML = value_28551;
              var G__28569 = cljs.core.next.call(null, seq__28547_28562__$1);
              var G__28570 = null;
              var G__28571 = 0;
              var G__28572 = 0;
              seq__28547_28552 = G__28569;
              chunk__28548_28553 = G__28570;
              count__28549_28554 = G__28571;
              i__28550_28555 = G__28572;
              continue;
            }
          } else {
          }
        }
        break;
      }
    } catch (e28546) {
      if (e28546 instanceof Error) {
        var e_28573 = e28546;
        domina.replace_children_BANG_.call(null, content, value_28551);
      } else {
        throw e28546;
      }
    }
  } else {
    domina.replace_children_BANG_.call(null, content, html_string);
  }
  return content;
};
domina.set_html_BANG_ = function set_html_BANG_(content, inner_content) {
  if (typeof inner_content === "string") {
    return domina.set_inner_html_BANG_.call(null, content, inner_content);
  } else {
    return domina.replace_children_BANG_.call(null, content, inner_content);
  }
};
domina.get_data = function() {
  var get_data = null;
  var get_data__2 = function(node, key) {
    return get_data.call(null, node, key, false);
  };
  var get_data__3 = function(node, key, bubble) {
    var m = domina.single_node.call(null, node).__domina_data;
    var value = cljs.core.truth_(m) ? cljs.core.get.call(null, m, key) : null;
    if (cljs.core.truth_(function() {
      var and__3628__auto__ = bubble;
      if (cljs.core.truth_(and__3628__auto__)) {
        return value == null;
      } else {
        return and__3628__auto__;
      }
    }())) {
      var temp__4126__auto__ = domina.single_node.call(null, node).parentNode;
      if (cljs.core.truth_(temp__4126__auto__)) {
        var parent = temp__4126__auto__;
        return get_data.call(null, parent, key, true);
      } else {
        return null;
      }
    } else {
      return value;
    }
  };
  get_data = function(node, key, bubble) {
    switch(arguments.length) {
      case 2:
        return get_data__2.call(this, node, key);
      case 3:
        return get_data__3.call(this, node, key, bubble);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_data.cljs$core$IFn$_invoke$arity$2 = get_data__2;
  get_data.cljs$core$IFn$_invoke$arity$3 = get_data__3;
  return get_data;
}();
domina.set_data_BANG_ = function set_data_BANG_(node, key, value) {
  var m = function() {
    var or__3640__auto__ = domina.single_node.call(null, node).__domina_data;
    if (cljs.core.truth_(or__3640__auto__)) {
      return or__3640__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }();
  return domina.single_node.call(null, node).__domina_data = cljs.core.assoc.call(null, m, key, value);
};
domina.apply_with_cloning = function apply_with_cloning(f, parent_content, child_content) {
  var parents = domina.nodes.call(null, parent_content);
  var children = domina.nodes.call(null, child_content);
  var first_child = function() {
    var frag = document.createDocumentFragment();
    var seq__28580_28584 = cljs.core.seq.call(null, children);
    var chunk__28581_28585 = null;
    var count__28582_28586 = 0;
    var i__28583_28587 = 0;
    while (true) {
      if (i__28583_28587 < count__28582_28586) {
        var child_28588 = cljs.core._nth.call(null, chunk__28581_28585, i__28583_28587);
        frag.appendChild(child_28588);
        var G__28589 = seq__28580_28584;
        var G__28590 = chunk__28581_28585;
        var G__28591 = count__28582_28586;
        var G__28592 = i__28583_28587 + 1;
        seq__28580_28584 = G__28589;
        chunk__28581_28585 = G__28590;
        count__28582_28586 = G__28591;
        i__28583_28587 = G__28592;
        continue;
      } else {
        var temp__4126__auto___28593 = cljs.core.seq.call(null, seq__28580_28584);
        if (temp__4126__auto___28593) {
          var seq__28580_28594__$1 = temp__4126__auto___28593;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__28580_28594__$1)) {
            var c__4410__auto___28595 = cljs.core.chunk_first.call(null, seq__28580_28594__$1);
            var G__28596 = cljs.core.chunk_rest.call(null, seq__28580_28594__$1);
            var G__28597 = c__4410__auto___28595;
            var G__28598 = cljs.core.count.call(null, c__4410__auto___28595);
            var G__28599 = 0;
            seq__28580_28584 = G__28596;
            chunk__28581_28585 = G__28597;
            count__28582_28586 = G__28598;
            i__28583_28587 = G__28599;
            continue;
          } else {
            var child_28600 = cljs.core.first.call(null, seq__28580_28594__$1);
            frag.appendChild(child_28600);
            var G__28601 = cljs.core.next.call(null, seq__28580_28594__$1);
            var G__28602 = null;
            var G__28603 = 0;
            var G__28604 = 0;
            seq__28580_28584 = G__28601;
            chunk__28581_28585 = G__28602;
            count__28582_28586 = G__28603;
            i__28583_28587 = G__28604;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return frag;
  }();
  var other_children = cljs.core.doall.call(null, cljs.core.repeatedly.call(null, cljs.core.count.call(null, parents) - 1, function(parents, children, first_child) {
    return function() {
      return first_child.cloneNode(true);
    };
  }(parents, children, first_child)));
  if (cljs.core.seq.call(null, parents)) {
    f.call(null, cljs.core.first.call(null, parents), first_child);
    return cljs.core.doall.call(null, cljs.core.map.call(null, function(parents, children, first_child, other_children) {
      return function(p1__28574_SHARP_, p2__28575_SHARP_) {
        return f.call(null, p1__28574_SHARP_, p2__28575_SHARP_);
      };
    }(parents, children, first_child, other_children), cljs.core.rest.call(null, parents), other_children));
  } else {
    return null;
  }
};
domina.lazy_nl_via_item = function() {
  var lazy_nl_via_item = null;
  var lazy_nl_via_item__1 = function(nl) {
    return lazy_nl_via_item.call(null, nl, 0);
  };
  var lazy_nl_via_item__2 = function(nl, n) {
    if (n < nl.length) {
      return new cljs.core.LazySeq(null, function() {
        return cljs.core.cons.call(null, nl.item(n), lazy_nl_via_item.call(null, nl, n + 1));
      }, null, null);
    } else {
      return null;
    }
  };
  lazy_nl_via_item = function(nl, n) {
    switch(arguments.length) {
      case 1:
        return lazy_nl_via_item__1.call(this, nl);
      case 2:
        return lazy_nl_via_item__2.call(this, nl, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  lazy_nl_via_item.cljs$core$IFn$_invoke$arity$1 = lazy_nl_via_item__1;
  lazy_nl_via_item.cljs$core$IFn$_invoke$arity$2 = lazy_nl_via_item__2;
  return lazy_nl_via_item;
}();
domina.lazy_nl_via_array_ref = function() {
  var lazy_nl_via_array_ref = null;
  var lazy_nl_via_array_ref__1 = function(nl) {
    return lazy_nl_via_array_ref.call(null, nl, 0);
  };
  var lazy_nl_via_array_ref__2 = function(nl, n) {
    if (n < nl.length) {
      return new cljs.core.LazySeq(null, function() {
        return cljs.core.cons.call(null, nl[n], lazy_nl_via_array_ref.call(null, nl, n + 1));
      }, null, null);
    } else {
      return null;
    }
  };
  lazy_nl_via_array_ref = function(nl, n) {
    switch(arguments.length) {
      case 1:
        return lazy_nl_via_array_ref__1.call(this, nl);
      case 2:
        return lazy_nl_via_array_ref__2.call(this, nl, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  lazy_nl_via_array_ref.cljs$core$IFn$_invoke$arity$1 = lazy_nl_via_array_ref__1;
  lazy_nl_via_array_ref.cljs$core$IFn$_invoke$arity$2 = lazy_nl_via_array_ref__2;
  return lazy_nl_via_array_ref;
}();
domina.lazy_nodelist = function lazy_nodelist(nl) {
  if (cljs.core.truth_(nl.item)) {
    return domina.lazy_nl_via_item.call(null, nl);
  } else {
    return domina.lazy_nl_via_array_ref.call(null, nl);
  }
};
domina.array_like_QMARK_ = function array_like_QMARK_(obj) {
  var and__3628__auto__ = obj;
  if (cljs.core.truth_(and__3628__auto__)) {
    var and__3628__auto____$1 = cljs.core.not.call(null, obj.nodeName);
    if (and__3628__auto____$1) {
      return obj.length;
    } else {
      return and__3628__auto____$1;
    }
  } else {
    return and__3628__auto__;
  }
};
domina.normalize_seq = function normalize_seq(list_thing) {
  if (list_thing == null) {
    return cljs.core.List.EMPTY;
  } else {
    if (function() {
      var G__28606 = list_thing;
      if (G__28606) {
        var bit__4304__auto__ = G__28606.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4304__auto__ || G__28606.cljs$core$ISeqable$) {
          return true;
        } else {
          if (!G__28606.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__28606);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__28606);
      }
    }()) {
      return cljs.core.seq.call(null, list_thing);
    } else {
      if (cljs.core.truth_(domina.array_like_QMARK_.call(null, list_thing))) {
        return domina.lazy_nodelist.call(null, list_thing);
      } else {
        return cljs.core.seq.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [list_thing], null));
      }
    }
  }
};
domina.DomContent["_"] = true;
domina.nodes["_"] = function(content) {
  if (content == null) {
    return cljs.core.List.EMPTY;
  } else {
    if (function() {
      var G__28607 = content;
      if (G__28607) {
        var bit__4304__auto__ = G__28607.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4304__auto__ || G__28607.cljs$core$ISeqable$) {
          return true;
        } else {
          if (!G__28607.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__28607);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__28607);
      }
    }()) {
      return cljs.core.seq.call(null, content);
    } else {
      if (cljs.core.truth_(domina.array_like_QMARK_.call(null, content))) {
        return domina.lazy_nodelist.call(null, content);
      } else {
        return cljs.core.seq.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [content], null));
      }
    }
  }
};
domina.single_node["_"] = function(content) {
  if (content == null) {
    return null;
  } else {
    if (function() {
      var G__28608 = content;
      if (G__28608) {
        var bit__4304__auto__ = G__28608.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4304__auto__ || G__28608.cljs$core$ISeqable$) {
          return true;
        } else {
          if (!G__28608.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__28608);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__28608);
      }
    }()) {
      return cljs.core.first.call(null, content);
    } else {
      if (cljs.core.truth_(domina.array_like_QMARK_.call(null, content))) {
        return content.item(0);
      } else {
        return content;
      }
    }
  }
};
domina.DomContent["string"] = true;
domina.nodes["string"] = function(s) {
  return cljs.core.doall.call(null, domina.nodes.call(null, domina.string_to_dom.call(null, s)));
};
domina.single_node["string"] = function(s) {
  return domina.single_node.call(null, domina.string_to_dom.call(null, s));
};
if (cljs.core.truth_(typeof NodeList != "undefined")) {
  NodeList.prototype.cljs$core$ISeqable$ = true;
  NodeList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return domina.lazy_nodelist.call(null, nodelist__$1);
  };
  NodeList.prototype.cljs$core$IIndexed$ = true;
  NodeList.prototype.cljs$core$IIndexed$_nth$arity$2 = function(nodelist, n) {
    var nodelist__$1 = this;
    return nodelist__$1.item(n);
  };
  NodeList.prototype.cljs$core$IIndexed$_nth$arity$3 = function(nodelist, n, not_found) {
    var nodelist__$1 = this;
    if (nodelist__$1.length <= n) {
      return not_found;
    } else {
      return cljs.core.nth.call(null, nodelist__$1, n);
    }
  };
  NodeList.prototype.cljs$core$ICounted$ = true;
  NodeList.prototype.cljs$core$ICounted$_count$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return nodelist__$1.length;
  };
} else {
}
if (cljs.core.truth_(typeof StaticNodeList != "undefined")) {
  StaticNodeList.prototype.cljs$core$ISeqable$ = true;
  StaticNodeList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return domina.lazy_nodelist.call(null, nodelist__$1);
  };
  StaticNodeList.prototype.cljs$core$IIndexed$ = true;
  StaticNodeList.prototype.cljs$core$IIndexed$_nth$arity$2 = function(nodelist, n) {
    var nodelist__$1 = this;
    return nodelist__$1.item(n);
  };
  StaticNodeList.prototype.cljs$core$IIndexed$_nth$arity$3 = function(nodelist, n, not_found) {
    var nodelist__$1 = this;
    if (nodelist__$1.length <= n) {
      return not_found;
    } else {
      return cljs.core.nth.call(null, nodelist__$1, n);
    }
  };
  StaticNodeList.prototype.cljs$core$ICounted$ = true;
  StaticNodeList.prototype.cljs$core$ICounted$_count$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return nodelist__$1.length;
  };
} else {
}
if (cljs.core.truth_(typeof HTMLCollection != "undefined")) {
  HTMLCollection.prototype.cljs$core$ISeqable$ = true;
  HTMLCollection.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
    var coll__$1 = this;
    return domina.lazy_nodelist.call(null, coll__$1);
  };
  HTMLCollection.prototype.cljs$core$IIndexed$ = true;
  HTMLCollection.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
    var coll__$1 = this;
    return coll__$1.item(n);
  };
  HTMLCollection.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
    var coll__$1 = this;
    if (coll__$1.length <= n) {
      return not_found;
    } else {
      return cljs.core.nth.call(null, coll__$1, n);
    }
  };
  HTMLCollection.prototype.cljs$core$ICounted$ = true;
  HTMLCollection.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
    var coll__$1 = this;
    return coll__$1.length;
  };
} else {
}
;goog.provide("cljs.looperscript.logging");
goog.require("cljs.core");
goog.require("domina");
goog.require("domina");
cljs.looperscript.logging.log = function() {
  var log__delegate = function(args) {
    var s = cljs.core.apply.call(null, cljs.core.str, cljs.core.conj.call(null, cljs.core.vec.call(null, args), "\n"));
    domina.append_BANG_.call(null, domina.by_id.call(null, "console"), "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s) + "\x3cp /\x3e");
    return console.log(s);
  };
  var log = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return log__delegate.call(this, args);
  };
  log.cljs$lang$maxFixedArity = 0;
  log.cljs$lang$applyTo = function(arglist__26760) {
    var args = cljs.core.seq(arglist__26760);
    return log__delegate(args);
  };
  log.cljs$core$IFn$_invoke$arity$variadic = log__delegate;
  return log;
}();
cljs.looperscript.logging.log__GT_ = function() {
  var log__GT___delegate = function(args) {
    cljs.core.apply.call(null, cljs.looperscript.logging.log, args);
    return cljs.core.first.call(null, args);
  };
  var log__GT_ = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return log__GT___delegate.call(this, args);
  };
  log__GT_.cljs$lang$maxFixedArity = 0;
  log__GT_.cljs$lang$applyTo = function(arglist__26761) {
    var args = cljs.core.seq(arglist__26761);
    return log__GT___delegate(args);
  };
  log__GT_.cljs$core$IFn$_invoke$arity$variadic = log__GT___delegate;
  return log__GT_;
}();
goog.provide("cljs.looperscript.iterator");
goog.require("cljs.core");
goog.require("cljs.looperscript.logging");
goog.require("cljs.looperscript.logging");
cljs.looperscript.iterator._pop_BANG_ = function _pop_BANG_(stack) {
  var res = cljs.core.last.call(null, cljs.core.deref.call(null, stack));
  cljs.core.swap_BANG_.call(null, stack, cljs.core.comp.call(null, cljs.core.vec, cljs.core.drop_last));
  return res;
};
cljs.looperscript.iterator.push_BANG_ = function push_BANG_(stack, x) {
  if (!(x == null)) {
    return cljs.core.swap_BANG_.call(null, stack, cljs.core.conj, x);
  } else {
    return null;
  }
};
cljs.looperscript.iterator.vec_push_BANG_ = function vec_push_BANG_(stack, v) {
  var seq__26706 = cljs.core.seq.call(null, cljs.core.reverse.call(null, v));
  var chunk__26707 = null;
  var count__26708 = 0;
  var i__26709 = 0;
  while (true) {
    if (i__26709 < count__26708) {
      var i = cljs.core._nth.call(null, chunk__26707, i__26709);
      cljs.looperscript.iterator.push_BANG_.call(null, stack, i);
      var G__26710 = seq__26706;
      var G__26711 = chunk__26707;
      var G__26712 = count__26708;
      var G__26713 = i__26709 + 1;
      seq__26706 = G__26710;
      chunk__26707 = G__26711;
      count__26708 = G__26712;
      i__26709 = G__26713;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__26706);
      if (temp__4126__auto__) {
        var seq__26706__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__26706__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__26706__$1);
          var G__26714 = cljs.core.chunk_rest.call(null, seq__26706__$1);
          var G__26715 = c__4410__auto__;
          var G__26716 = cljs.core.count.call(null, c__4410__auto__);
          var G__26717 = 0;
          seq__26706 = G__26714;
          chunk__26707 = G__26715;
          count__26708 = G__26716;
          i__26709 = G__26717;
          continue;
        } else {
          var i = cljs.core.first.call(null, seq__26706__$1);
          cljs.looperscript.iterator.push_BANG_.call(null, stack, i);
          var G__26718 = cljs.core.next.call(null, seq__26706__$1);
          var G__26719 = null;
          var G__26720 = 0;
          var G__26721 = 0;
          seq__26706 = G__26718;
          chunk__26707 = G__26719;
          count__26708 = G__26720;
          i__26709 = G__26721;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.looperscript.iterator.dethunk = function dethunk(x) {
  var r = x;
  while (true) {
    if (cljs.core.fn_QMARK_.call(null, r)) {
      var G__26722 = r.call(null);
      r = G__26722;
      continue;
    } else {
      return r;
    }
    break;
  }
};
cljs.looperscript.iterator.get_next_stack_val = function get_next_stack_val(stack) {
  var x = cljs.looperscript.iterator.dethunk.call(null, cljs.looperscript.iterator._pop_BANG_.call(null, stack));
  if ((cljs.core.seq_QMARK_.call(null, x) || cljs.core.vector_QMARK_.call(null, x)) && !(cljs.core.first.call(null, x) instanceof cljs.core.Keyword)) {
    var seq__26727_26731 = cljs.core.seq.call(null, cljs.core.reverse.call(null, x));
    var chunk__26728_26732 = null;
    var count__26729_26733 = 0;
    var i__26730_26734 = 0;
    while (true) {
      if (i__26730_26734 < count__26729_26733) {
        var i_26735 = cljs.core._nth.call(null, chunk__26728_26732, i__26730_26734);
        cljs.looperscript.iterator.push_BANG_.call(null, stack, i_26735);
        var G__26736 = seq__26727_26731;
        var G__26737 = chunk__26728_26732;
        var G__26738 = count__26729_26733;
        var G__26739 = i__26730_26734 + 1;
        seq__26727_26731 = G__26736;
        chunk__26728_26732 = G__26737;
        count__26729_26733 = G__26738;
        i__26730_26734 = G__26739;
        continue;
      } else {
        var temp__4126__auto___26740 = cljs.core.seq.call(null, seq__26727_26731);
        if (temp__4126__auto___26740) {
          var seq__26727_26741__$1 = temp__4126__auto___26740;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__26727_26741__$1)) {
            var c__4410__auto___26742 = cljs.core.chunk_first.call(null, seq__26727_26741__$1);
            var G__26743 = cljs.core.chunk_rest.call(null, seq__26727_26741__$1);
            var G__26744 = c__4410__auto___26742;
            var G__26745 = cljs.core.count.call(null, c__4410__auto___26742);
            var G__26746 = 0;
            seq__26727_26731 = G__26743;
            chunk__26728_26732 = G__26744;
            count__26729_26733 = G__26745;
            i__26730_26734 = G__26746;
            continue;
          } else {
            var i_26747 = cljs.core.first.call(null, seq__26727_26741__$1);
            cljs.looperscript.iterator.push_BANG_.call(null, stack, i_26747);
            var G__26748 = cljs.core.next.call(null, seq__26727_26741__$1);
            var G__26749 = null;
            var G__26750 = 0;
            var G__26751 = 0;
            seq__26727_26731 = G__26748;
            chunk__26728_26732 = G__26749;
            count__26729_26733 = G__26750;
            i__26730_26734 = G__26751;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return get_next_stack_val.call(null, stack);
  } else {
    return x;
  }
};
cljs.looperscript.iterator.modifier_QMARK_ = function modifier_QMARK_(x) {
  return cljs.core.vector_QMARK_.call(null, x) && cljs.core._EQ_.call(null, cljs.core.first.call(null, x), new cljs.core.Keyword(null, "modifier", "modifier", 1634442788));
};
cljs.looperscript.iterator.modifier_fn_QMARK_ = function modifier_fn_QMARK_(x) {
  return cljs.core.vector_QMARK_.call(null, x) && cljs.core._EQ_.call(null, cljs.core.first.call(null, x), new cljs.core.Keyword(null, "modifier-fn", "modifier-fn", -1624543303));
};
cljs.looperscript.iterator.justify = function justify(n) {
  var p = cljs.core.mod.call(null, n, 12);
  var oct = n - p;
  var vec__26753 = cljs.core.get.call(null, cljs.core.PersistentHashMap.fromArrays([0, 7, 1, 4, 6, 3, 2, 11, 9, 5, 10, 8], [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 1], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [3, 2], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [16, 15], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [5, 
  4], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [45, 32], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [6, 5], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [9, 8], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [15, 8], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [5, 3], null), 
  new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [4, 3], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [16, 9], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [8, 5], null)]), p);
  var num = cljs.core.nth.call(null, vec__26753, 0, null);
  var den = cljs.core.nth.call(null, vec__26753, 1, null);
  if (cljs.core.not.call(null, num)) {
    return n;
  } else {
    return oct + 12 * (Math.log.call(null, num / den) / Math.log.call(null, 2));
  }
};
cljs.looperscript.iterator.apply_modifiers = function apply_modifiers(mods, x) {
  return cljs.core.reduce.call(null, function(n, m) {
    if (cljs.core.fn_QMARK_.call(null, m)) {
      return m.call(null, n);
    } else {
      var pred__26757 = cljs.core._EQ_;
      var expr__26758 = cljs.core.keyword.call(null, cljs.core.first.call(null, m));
      if (cljs.core.truth_(pred__26757.call(null, new cljs.core.Keyword(null, "fraction", "fraction", 107940680), expr__26758))) {
        return n * cljs.core.second.call(null, m);
      } else {
        if (cljs.core.truth_(pred__26757.call(null, new cljs.core.Keyword(null, "plus", "plus", 211540661), expr__26758))) {
          return n + cljs.core.second.call(null, m);
        } else {
          if (cljs.core.truth_(pred__26757.call(null, new cljs.core.Keyword(null, "just", "just", 466318146), expr__26758))) {
            return cljs.looperscript.iterator.justify.call(null, n);
          } else {
            throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(expr__26758));
          }
        }
      }
    }
  }, x, mods);
};
cljs.looperscript.iterator.iterator = function iterator(v) {
  var stack = cljs.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
  var modifiers = cljs.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
  return function(stack, modifiers) {
    return function() {
      while (true) {
        if (cljs.core.empty_QMARK_.call(null, cljs.core.deref.call(null, stack))) {
          cljs.core.reset_BANG_.call(null, modifiers, cljs.core.PersistentVector.EMPTY);
          cljs.looperscript.iterator.vec_push_BANG_.call(null, stack, v);
        } else {
        }
        var x = cljs.looperscript.iterator.get_next_stack_val.call(null, stack);
        if (x == null || cljs.core.sequential_QMARK_.call(null, x) && cljs.core.empty_QMARK_.call(null, x)) {
          continue;
        } else {
          if (cljs.looperscript.iterator.modifier_fn_QMARK_.call(null, x)) {
            cljs.core.swap_BANG_.call(null, modifiers, cljs.core.conj, cljs.core.second.call(null, x));
            continue;
          } else {
            if (cljs.looperscript.iterator.modifier_QMARK_.call(null, x)) {
              cljs.core.swap_BANG_.call(null, modifiers, cljs.core.conj, cljs.core.map.call(null, cljs.looperscript.iterator.dethunk, cljs.core.second.call(null, x)));
              continue;
            } else {
              return cljs.looperscript.iterator.apply_modifiers.call(null, cljs.core.deref.call(null, modifiers), x);
            }
          }
        }
        break;
      }
    };
  }(stack, modifiers);
};
goog.provide("instaparse.print");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
instaparse.print.paren_for_tags = function paren_for_tags(tag_set, hidden_QMARK_, parser) {
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = cljs.core.not.call(null, hidden_QMARK_);
    if (and__3628__auto__) {
      return tag_set.call(null, parser.call(null, new cljs.core.Keyword(null, "tag", "tag", -1290361223)));
    } else {
      return and__3628__auto__;
    }
  }())) {
    return "(" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.combinators__GT_str.call(null, parser, false)) + ")";
  } else {
    return instaparse.print.combinators__GT_str.call(null, parser, false);
  }
};
instaparse.print.paren_for_compound = cljs.core.partial.call(null, instaparse.print.paren_for_tags, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "cat", "cat", -1457810207), null, new cljs.core.Keyword(null, "ord", "ord", 1142548323), null, new cljs.core.Keyword(null, "alt", "alt", -3214426), null], null), null));
instaparse.print.regexp_replace = function regexp_replace(s) {
  var G__29153 = s;
  switch(G__29153) {
    case "\n":
      return "\\n";
      break;
    case "\b":
      return "\\b";
      break;
    case "\f":
      return "\\f";
      break;
    case "\r":
      return "\\r";
      break;
    case "\t":
      return "\\t";
      break;
    default:
      return s;
  }
};
instaparse.print.regexp__GT_str = function regexp__GT_str(r) {
  return clojure.string.replace.call(null, '#"' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.subs.call(null, r.source, 1)) + '"', /[\s]/, instaparse.print.regexp_replace);
};
instaparse.print.combinators__GT_str = function() {
  var combinators__GT_str = null;
  var combinators__GT_str__1 = function(p) {
    return combinators__GT_str.call(null, p, false);
  };
  var combinators__GT_str__2 = function(p__29155, hidden_QMARK_) {
    var map__29160 = p__29155;
    var map__29160__$1 = cljs.core.seq_QMARK_.call(null, map__29160) ? cljs.core.apply.call(null, cljs.core.hash_map, map__29160) : map__29160;
    var p = map__29160__$1;
    var tag = cljs.core.get.call(null, map__29160__$1, new cljs.core.Keyword(null, "tag", "tag", -1290361223));
    var parsers = cljs.core.get.call(null, map__29160__$1, new cljs.core.Keyword(null, "parsers", "parsers", -804353827));
    var parser2 = cljs.core.get.call(null, map__29160__$1, new cljs.core.Keyword(null, "parser2", "parser2", 1013754688));
    var parser1 = cljs.core.get.call(null, map__29160__$1, new cljs.core.Keyword(null, "parser1", "parser1", -439601422));
    var parser = cljs.core.get.call(null, map__29160__$1, new cljs.core.Keyword(null, "parser", "parser", -1543495310));
    if (cljs.core.truth_(function() {
      var and__3628__auto__ = cljs.core.not.call(null, hidden_QMARK_);
      if (and__3628__auto__) {
        return(new cljs.core.Keyword(null, "hide", "hide", -596913169)).cljs$core$IFn$_invoke$arity$1(p);
      } else {
        return and__3628__auto__;
      }
    }())) {
      return "\x3c" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(combinators__GT_str.call(null, p, true)) + "\x3e";
    } else {
      var G__29161 = tag instanceof cljs.core.Keyword ? tag.fqn : null;
      switch(G__29161) {
        case "neg":
          return "!" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_compound.call(null, hidden_QMARK_, parser));
          break;
        case "cat":
          return clojure.string.join.call(null, " ", cljs.core.map.call(null, cljs.core.partial.call(null, instaparse.print.paren_for_tags, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ord", "ord", 1142548323), null, new cljs.core.Keyword(null, "alt", "alt", -3214426), null], null), null), hidden_QMARK_), parsers));
          break;
        case "ord":
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_tags.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "alt", "alt", -3214426), null], null), null), hidden_QMARK_, parser1)) + " / " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_tags.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "alt", 
          "alt", -3214426), null], null), null), hidden_QMARK_, parser2));
          break;
        case "alt":
          return clojure.string.join.call(null, " | ", cljs.core.map.call(null, cljs.core.partial.call(null, instaparse.print.paren_for_tags, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ord", "ord", 1142548323), null], null), null), hidden_QMARK_), parsers));
          break;
        case "look":
          return "\x26" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_compound.call(null, hidden_QMARK_, parser));
          break;
        case "nt":
          return cljs.core.subs.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "keyword", "keyword", 811389747)).cljs$core$IFn$_invoke$arity$1(p)), 1);
          break;
        case "rep":
          if (cljs.core.not_EQ_.call(null, (new cljs.core.Keyword(null, "min", "min", 444991522)).cljs$core$IFn$_invoke$arity$1(p), (new cljs.core.Keyword(null, "max", "max", 61366548)).cljs$core$IFn$_invoke$arity$1(p))) {
            return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_compound.call(null, hidden_QMARK_, parser)) + "{" + cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "min", "min", 444991522)).cljs$core$IFn$_invoke$arity$1(p)) + "," + cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "max", "max", 61366548)).cljs$core$IFn$_invoke$arity$1(p)) + "}";
          } else {
            return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_compound.call(null, hidden_QMARK_, parser)) + "{" + cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "min", "min", 444991522)).cljs$core$IFn$_invoke$arity$1(p)) + "}";
          }
          break;
        case "star":
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_compound.call(null, hidden_QMARK_, parser)) + "*";
          break;
        case "string":
          var sb__4581__auto__ = new goog.string.StringBuffer;
          var _STAR_print_fn_STAR_29162_29165 = cljs.core._STAR_print_fn_STAR_;
          try {
            cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_fn_STAR_29162_29165, sb__4581__auto__, G__29161, map__29160, map__29160__$1, p, tag, parsers, parser2, parser1, parser) {
              return function(x__4582__auto__) {
                return sb__4581__auto__.append(x__4582__auto__);
              };
            }(_STAR_print_fn_STAR_29162_29165, sb__4581__auto__, G__29161, map__29160, map__29160__$1, p, tag, parsers, parser2, parser1, parser);
            cljs.core.pr.call(null, (new cljs.core.Keyword(null, "string", "string", -1989541586)).cljs$core$IFn$_invoke$arity$1(p));
          } finally {
            cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_29162_29165;
          }
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4581__auto__);
          break;
        case "regexp":
          return instaparse.print.regexp__GT_str.call(null, (new cljs.core.Keyword(null, "regexp", "regexp", -541372782)).cljs$core$IFn$_invoke$arity$1(p));
          break;
        case "plus":
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_compound.call(null, hidden_QMARK_, parser)) + "+";
          break;
        case "epsilon":
          return "\u03b5";
          break;
        case "string-ci":
          var sb__4581__auto__ = new goog.string.StringBuffer;
          var _STAR_print_fn_STAR_29163_29166 = cljs.core._STAR_print_fn_STAR_;
          try {
            cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_fn_STAR_29163_29166, sb__4581__auto__, G__29161, map__29160, map__29160__$1, p, tag, parsers, parser2, parser1, parser) {
              return function(x__4582__auto__) {
                return sb__4581__auto__.append(x__4582__auto__);
              };
            }(_STAR_print_fn_STAR_29163_29166, sb__4581__auto__, G__29161, map__29160, map__29160__$1, p, tag, parsers, parser2, parser1, parser);
            cljs.core.pr.call(null, (new cljs.core.Keyword(null, "string", "string", -1989541586)).cljs$core$IFn$_invoke$arity$1(p));
          } finally {
            cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_29163_29166;
          }
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4581__auto__);
          break;
        case "opt":
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_compound.call(null, hidden_QMARK_, parser)) + "?";
          break;
        default:
          throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag));;
      }
    }
  };
  combinators__GT_str = function(p__29155, hidden_QMARK_) {
    switch(arguments.length) {
      case 1:
        return combinators__GT_str__1.call(this, p__29155);
      case 2:
        return combinators__GT_str__2.call(this, p__29155, hidden_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  combinators__GT_str.cljs$core$IFn$_invoke$arity$1 = combinators__GT_str__1;
  combinators__GT_str.cljs$core$IFn$_invoke$arity$2 = combinators__GT_str__2;
  return combinators__GT_str;
}();
instaparse.print.rule__GT_str = function rule__GT_str(terminal, parser) {
  if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "reduction-type", "reduction-type", -488293450)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser)), new cljs.core.Keyword(null, "raw", "raw", 1604651272))) {
    return "\x3c" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.name.call(null, terminal)) + "\x3e \x3d " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.combinators__GT_str.call(null, parser));
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.name.call(null, terminal)) + " \x3d " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.combinators__GT_str.call(null, parser));
  }
};
instaparse.print.Parser__GT_str = function Parser__GT_str(p__29167) {
  var map__29177 = p__29167;
  var map__29177__$1 = cljs.core.seq_QMARK_.call(null, map__29177) ? cljs.core.apply.call(null, cljs.core.hash_map, map__29177) : map__29177;
  var grammar = cljs.core.get.call(null, map__29177__$1, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267));
  var start = cljs.core.get.call(null, map__29177__$1, new cljs.core.Keyword(null, "start-production", "start-production", 687546537));
  return clojure.string.join.call(null, "\n", cljs.core.cons.call(null, instaparse.print.rule__GT_str.call(null, start, grammar.call(null, start)), function() {
    var iter__4379__auto__ = function(map__29177, map__29177__$1, grammar, start) {
      return function iter__29178(s__29179) {
        return new cljs.core.LazySeq(null, function(map__29177, map__29177__$1, grammar, start) {
          return function() {
            var s__29179__$1 = s__29179;
            while (true) {
              var temp__4126__auto__ = cljs.core.seq.call(null, s__29179__$1);
              if (temp__4126__auto__) {
                var s__29179__$2 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__29179__$2)) {
                  var c__4377__auto__ = cljs.core.chunk_first.call(null, s__29179__$2);
                  var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                  var b__29181 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                  if (function() {
                    var i__29180 = 0;
                    while (true) {
                      if (i__29180 < size__4378__auto__) {
                        var vec__29184 = cljs.core._nth.call(null, c__4377__auto__, i__29180);
                        var terminal = cljs.core.nth.call(null, vec__29184, 0, null);
                        var parser = cljs.core.nth.call(null, vec__29184, 1, null);
                        if (cljs.core.not_EQ_.call(null, terminal, start)) {
                          cljs.core.chunk_append.call(null, b__29181, instaparse.print.rule__GT_str.call(null, terminal, parser));
                          var G__29186 = i__29180 + 1;
                          i__29180 = G__29186;
                          continue;
                        } else {
                          var G__29187 = i__29180 + 1;
                          i__29180 = G__29187;
                          continue;
                        }
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__29181), iter__29178.call(null, cljs.core.chunk_rest.call(null, s__29179__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__29181), null);
                  }
                } else {
                  var vec__29185 = cljs.core.first.call(null, s__29179__$2);
                  var terminal = cljs.core.nth.call(null, vec__29185, 0, null);
                  var parser = cljs.core.nth.call(null, vec__29185, 1, null);
                  if (cljs.core.not_EQ_.call(null, terminal, start)) {
                    return cljs.core.cons.call(null, instaparse.print.rule__GT_str.call(null, terminal, parser), iter__29178.call(null, cljs.core.rest.call(null, s__29179__$2)));
                  } else {
                    var G__29188 = cljs.core.rest.call(null, s__29179__$2);
                    s__29179__$1 = G__29188;
                    continue;
                  }
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(map__29177, map__29177__$1, grammar, start), null, null);
      };
    }(map__29177, map__29177__$1, grammar, start);
    return iter__4379__auto__.call(null, grammar);
  }()));
};
goog.provide("instaparse.failure");
goog.require("cljs.core");
goog.require("instaparse.print");
goog.require("instaparse.print");
instaparse.failure.index__GT_line_column = function index__GT_line_column(index, text) {
  var line = 1;
  var col = 1;
  var counter = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, index, counter)) {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "line", "line", 212345235), line, new cljs.core.Keyword(null, "column", "column", 2078222095), col], null);
    } else {
      if (cljs.core._EQ_.call(null, "\n", cljs.core.get.call(null, text, counter))) {
        var G__28953 = line + 1;
        var G__28954 = 1;
        var G__28955 = counter + 1;
        line = G__28953;
        col = G__28954;
        counter = G__28955;
        continue;
      } else {
        var G__28956 = line;
        var G__28957 = col + 1;
        var G__28958 = counter + 1;
        line = G__28956;
        col = G__28957;
        counter = G__28958;
        continue;
      }
    }
    break;
  }
};
instaparse.failure.newline_chars = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["\n", null, "\r", null], null), null);
instaparse.failure.line_seq = function line_seq(s) {
  if (cljs.core.empty_QMARK_.call(null, s)) {
    return null;
  } else {
    return cljs.core.map.call(null, cljs.core.partial.call(null, cljs.core.apply, cljs.core.str), cljs.core.filter.call(null, function(p1__28959_SHARP_) {
      return cljs.core.not.call(null, instaparse.failure.newline_chars.call(null, cljs.core.first.call(null, p1__28959_SHARP_)));
    }, cljs.core.partition_by.call(null, instaparse.failure.newline_chars, s)));
  }
};
instaparse.failure.get_line = function get_line(n, text) {
  return cljs.core.nth.call(null, instaparse.failure.line_seq.call(null, text), n - 1);
};
instaparse.failure.marker = function marker(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    if (n <= 1) {
      return "^";
    } else {
      return cljs.core.apply.call(null, cljs.core.str, cljs.core.concat.call(null, cljs.core.repeat.call(null, n - 1, " "), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["^"], null)));
    }
  } else {
    return null;
  }
};
instaparse.failure.augment_failure = function augment_failure(failure, text) {
  var lc = instaparse.failure.index__GT_line_column.call(null, (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(failure), text);
  return cljs.core.merge.call(null, failure, lc, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "text", "text", -1790561697), instaparse.failure.get_line.call(null, (new cljs.core.Keyword(null, "line", "line", 212345235)).cljs$core$IFn$_invoke$arity$1(lc), text)], null));
};
instaparse.failure.print_reason = function print_reason(r) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "NOT", "NOT", -1689245341)).cljs$core$IFn$_invoke$arity$1(r))) {
    cljs.core.print.call(null, "NOT ");
    return cljs.core.println.call(null, (new cljs.core.Keyword(null, "NOT", "NOT", -1689245341)).cljs$core$IFn$_invoke$arity$1(r));
  } else {
    if (r instanceof java.util.regex.Pattern) {
      return cljs.core.println.call(null, instaparse.print.regexp__GT_str.call(null, r));
    } else {
      return cljs.core.prn.call(null, r);
    }
  }
};
instaparse.failure.pprint_failure = function pprint_failure(p__28960) {
  var map__28970 = p__28960;
  var map__28970__$1 = cljs.core.seq_QMARK_.call(null, map__28970) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28970) : map__28970;
  var reason = cljs.core.get.call(null, map__28970__$1, new cljs.core.Keyword(null, "reason", "reason", -2070751759));
  var text = cljs.core.get.call(null, map__28970__$1, new cljs.core.Keyword(null, "text", "text", -1790561697));
  var column = cljs.core.get.call(null, map__28970__$1, new cljs.core.Keyword(null, "column", "column", 2078222095));
  var line = cljs.core.get.call(null, map__28970__$1, new cljs.core.Keyword(null, "line", "line", 212345235));
  cljs.core.println.call(null, "Parse error at line", line, ", column", column, ":\n");
  cljs.core.println.call(null, text);
  cljs.core.println.call(null, instaparse.failure.marker.call(null, column));
  var full_reasons = cljs.core.distinct.call(null, cljs.core.map.call(null, new cljs.core.Keyword(null, "expecting", "expecting", -57706705), cljs.core.filter.call(null, new cljs.core.Keyword(null, "full", "full", 436801220), reason)));
  var partial_reasons = cljs.core.distinct.call(null, cljs.core.map.call(null, new cljs.core.Keyword(null, "expecting", "expecting", -57706705), cljs.core.filter.call(null, cljs.core.complement.call(null, new cljs.core.Keyword(null, "full", "full", 436801220)), reason)));
  var total = cljs.core.count.call(null, full_reasons) + cljs.core.count.call(null, partial_reasons);
  if (total === 0) {
  } else {
    if (cljs.core._EQ_.call(null, 1, total)) {
      cljs.core.println.call(null, "Expected:");
    } else {
      cljs.core.println.call(null, "Expected one of:");
    }
  }
  var seq__28971_28979 = cljs.core.seq.call(null, full_reasons);
  var chunk__28972_28980 = null;
  var count__28973_28981 = 0;
  var i__28974_28982 = 0;
  while (true) {
    if (i__28974_28982 < count__28973_28981) {
      var r_28983 = cljs.core._nth.call(null, chunk__28972_28980, i__28974_28982);
      cljs.core.pr.call(null, r_28983);
      cljs.core.println.call(null, " (followed by end-of-string)");
      var G__28984 = seq__28971_28979;
      var G__28985 = chunk__28972_28980;
      var G__28986 = count__28973_28981;
      var G__28987 = i__28974_28982 + 1;
      seq__28971_28979 = G__28984;
      chunk__28972_28980 = G__28985;
      count__28973_28981 = G__28986;
      i__28974_28982 = G__28987;
      continue;
    } else {
      var temp__4126__auto___28988 = cljs.core.seq.call(null, seq__28971_28979);
      if (temp__4126__auto___28988) {
        var seq__28971_28989__$1 = temp__4126__auto___28988;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__28971_28989__$1)) {
          var c__4410__auto___28990 = cljs.core.chunk_first.call(null, seq__28971_28989__$1);
          var G__28991 = cljs.core.chunk_rest.call(null, seq__28971_28989__$1);
          var G__28992 = c__4410__auto___28990;
          var G__28993 = cljs.core.count.call(null, c__4410__auto___28990);
          var G__28994 = 0;
          seq__28971_28979 = G__28991;
          chunk__28972_28980 = G__28992;
          count__28973_28981 = G__28993;
          i__28974_28982 = G__28994;
          continue;
        } else {
          var r_28995 = cljs.core.first.call(null, seq__28971_28989__$1);
          cljs.core.pr.call(null, r_28995);
          cljs.core.println.call(null, " (followed by end-of-string)");
          var G__28996 = cljs.core.next.call(null, seq__28971_28989__$1);
          var G__28997 = null;
          var G__28998 = 0;
          var G__28999 = 0;
          seq__28971_28979 = G__28996;
          chunk__28972_28980 = G__28997;
          count__28973_28981 = G__28998;
          i__28974_28982 = G__28999;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var seq__28975 = cljs.core.seq.call(null, partial_reasons);
  var chunk__28976 = null;
  var count__28977 = 0;
  var i__28978 = 0;
  while (true) {
    if (i__28978 < count__28977) {
      var r = cljs.core._nth.call(null, chunk__28976, i__28978);
      instaparse.failure.print_reason.call(null, r);
      var G__29000 = seq__28975;
      var G__29001 = chunk__28976;
      var G__29002 = count__28977;
      var G__29003 = i__28978 + 1;
      seq__28975 = G__29000;
      chunk__28976 = G__29001;
      count__28977 = G__29002;
      i__28978 = G__29003;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__28975);
      if (temp__4126__auto__) {
        var seq__28975__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__28975__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__28975__$1);
          var G__29004 = cljs.core.chunk_rest.call(null, seq__28975__$1);
          var G__29005 = c__4410__auto__;
          var G__29006 = cljs.core.count.call(null, c__4410__auto__);
          var G__29007 = 0;
          seq__28975 = G__29004;
          chunk__28976 = G__29005;
          count__28977 = G__29006;
          i__28978 = G__29007;
          continue;
        } else {
          var r = cljs.core.first.call(null, seq__28975__$1);
          instaparse.failure.print_reason.call(null, r);
          var G__29008 = cljs.core.next.call(null, seq__28975__$1);
          var G__29009 = null;
          var G__29010 = 0;
          var G__29011 = 0;
          seq__28975 = G__29008;
          chunk__28976 = G__29009;
          count__28977 = G__29010;
          i__28978 = G__29011;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
goog.provide("instaparse.gll");
goog.require("cljs.core");
goog.require("instaparse.combinators_source");
goog.require("instaparse.print");
goog.require("instaparse.print");
goog.require("instaparse.combinators_source");
goog.require("instaparse.reduction");
goog.require("instaparse.reduction");
goog.require("instaparse.failure");
goog.require("instaparse.failure");
goog.require("instaparse.auto_flatten_seq");
goog.require("instaparse.auto_flatten_seq");
instaparse.gll.ISegment = function() {
  var obj28722 = {};
  return obj28722;
}();
instaparse.gll.subsegment = function subsegment(this$, start_index, end_index_minus_one) {
  if (function() {
    var and__3628__auto__ = this$;
    if (and__3628__auto__) {
      return this$.instaparse$gll$ISegment$subsegment$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return this$.instaparse$gll$ISegment$subsegment$arity$3(this$, start_index, end_index_minus_one);
  } else {
    var x__4277__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3640__auto__ = instaparse.gll.subsegment[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = instaparse.gll.subsegment["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISegment.subsegment", this$);
        }
      }
    }().call(null, this$, start_index, end_index_minus_one);
  }
};
instaparse.gll.toString = function toString(this$) {
  if (function() {
    var and__3628__auto__ = this$;
    if (and__3628__auto__) {
      return this$.instaparse$gll$ISegment$toString$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return this$.instaparse$gll$ISegment$toString$arity$1(this$);
  } else {
    var x__4277__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3640__auto__ = instaparse.gll.toString[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = instaparse.gll.toString["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISegment.toString", this$);
        }
      }
    }().call(null, this$);
  }
};
instaparse.gll.Segment = function(text, offset, count) {
  this.text = text;
  this.offset = offset;
  this.count = count;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
instaparse.gll.Segment.cljs$lang$type = true;
instaparse.gll.Segment.cljs$lang$ctorStr = "instaparse.gll/Segment";
instaparse.gll.Segment.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "instaparse.gll/Segment");
};
instaparse.gll.Segment.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.count;
};
instaparse.gll.Segment.prototype.instaparse$gll$ISegment$ = true;
instaparse.gll.Segment.prototype.instaparse$gll$ISegment$subsegment$arity$3 = function(this$, start, end) {
  var self__ = this;
  var this$__$1 = this;
  return new instaparse.gll.Segment(self__.text, self__.offset + start, end - start);
};
instaparse.gll.Segment.prototype.instaparse$gll$ISegment$toString$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.subs.call(null, self__.text, self__.offset, self__.offset + self__.count);
};
instaparse.gll.__GT_Segment = function __GT_Segment(text, offset, count) {
  return new instaparse.gll.Segment(text, offset, count);
};
instaparse.gll.get_parser = function get_parser(grammar, p) {
  return cljs.core.get.call(null, grammar, p, p);
};
instaparse.gll._parse = function _parse(parser, index, tramp) {
  var G__28724 = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser).fqn : null;
  switch(G__28724) {
    case "neg":
      return instaparse.gll.negative_lookahead_parse.call(null, parser, index, tramp);
      break;
    case "cat":
      return instaparse.gll.cat_parse.call(null, parser, index, tramp);
      break;
    case "ord":
      return instaparse.gll.ordered_alt_parse.call(null, parser, index, tramp);
      break;
    case "alt":
      return instaparse.gll.alt_parse.call(null, parser, index, tramp);
      break;
    case "look":
      return instaparse.gll.lookahead_parse.call(null, parser, index, tramp);
      break;
    case "nt":
      return instaparse.gll.non_terminal_parse.call(null, parser, index, tramp);
      break;
    case "rep":
      return instaparse.gll.rep_parse.call(null, parser, index, tramp);
      break;
    case "star":
      return instaparse.gll.star_parse.call(null, parser, index, tramp);
      break;
    case "string":
      return instaparse.gll.string_parse.call(null, parser, index, tramp);
      break;
    case "regexp":
      return instaparse.gll.regexp_parse.call(null, parser, index, tramp);
      break;
    case "plus":
      return instaparse.gll.plus_parse.call(null, parser, index, tramp);
      break;
    case "epsilon":
      return instaparse.gll.epsilon_parse.call(null, parser, index, tramp);
      break;
    case "string-ci":
      return instaparse.gll.string_case_insensitive_parse.call(null, parser, index, tramp);
      break;
    case "opt":
      return instaparse.gll.opt_parse.call(null, parser, index, tramp);
      break;
    default:
      throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser)));;
  }
};
instaparse.gll._full_parse = function _full_parse(parser, index, tramp) {
  var G__28727 = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser).fqn : null;
  switch(G__28727) {
    case "neg":
      return instaparse.gll.negative_lookahead_parse.call(null, parser, index, tramp);
      break;
    case "cat":
      return instaparse.gll.cat_full_parse.call(null, parser, index, tramp);
      break;
    case "ord":
      return instaparse.gll.ordered_alt_full_parse.call(null, parser, index, tramp);
      break;
    case "alt":
      return instaparse.gll.alt_full_parse.call(null, parser, index, tramp);
      break;
    case "look":
      return instaparse.gll.lookahead_full_parse.call(null, parser, index, tramp);
      break;
    case "nt":
      return instaparse.gll.non_terminal_full_parse.call(null, parser, index, tramp);
      break;
    case "rep":
      return instaparse.gll.rep_full_parse.call(null, parser, index, tramp);
      break;
    case "star":
      return instaparse.gll.star_full_parse.call(null, parser, index, tramp);
      break;
    case "string":
      return instaparse.gll.string_full_parse.call(null, parser, index, tramp);
      break;
    case "regexp":
      return instaparse.gll.regexp_full_parse.call(null, parser, index, tramp);
      break;
    case "plus":
      return instaparse.gll.plus_full_parse.call(null, parser, index, tramp);
      break;
    case "epsilon":
      return instaparse.gll.epsilon_full_parse.call(null, parser, index, tramp);
      break;
    case "string-ci":
      return instaparse.gll.string_case_insensitive_full_parse.call(null, parser, index, tramp);
      break;
    case "opt":
      return instaparse.gll.opt_full_parse.call(null, parser, index, tramp);
      break;
    default:
      throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser)));;
  }
};
instaparse.gll.Failure = function(index, reason, __meta, __extmap) {
  this.index = index;
  this.reason = reason;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
instaparse.gll.Failure.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4236__auto__, k__4237__auto__) {
  var self__ = this;
  var this__4236__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4236__auto____$1, k__4237__auto__, null);
};
instaparse.gll.Failure.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4238__auto__, k28730, else__4239__auto__) {
  var self__ = this;
  var this__4238__auto____$1 = this;
  var G__28732 = k28730 instanceof cljs.core.Keyword ? k28730.fqn : null;
  switch(G__28732) {
    case "reason":
      return self__.reason;
      break;
    case "index":
      return self__.index;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k28730, else__4239__auto__);
  }
};
instaparse.gll.Failure.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4250__auto__, writer__4251__auto__, opts__4252__auto__) {
  var self__ = this;
  var this__4250__auto____$1 = this;
  var pr_pair__4253__auto__ = function(this__4250__auto____$1) {
    return function(keyval__4254__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4251__auto__, cljs.core.pr_writer, "", " ", "", opts__4252__auto__, keyval__4254__auto__);
    };
  }(this__4250__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4251__auto__, pr_pair__4253__auto__, "#instaparse.gll.Failure{", ", ", "}", opts__4252__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "index", "index", -1531685915), self__.index], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "reason", "reason", -2070751759), self__.reason], null)], null), self__.__extmap));
};
instaparse.gll.Failure.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4234__auto__) {
  var self__ = this;
  var this__4234__auto____$1 = this;
  return self__.__meta;
};
instaparse.gll.Failure.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4230__auto__) {
  var self__ = this;
  var this__4230__auto____$1 = this;
  return new instaparse.gll.Failure(self__.index, self__.reason, self__.__meta, self__.__extmap, self__.__hash);
};
instaparse.gll.Failure.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4240__auto__) {
  var self__ = this;
  var this__4240__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
instaparse.gll.Failure.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4231__auto__) {
  var self__ = this;
  var this__4231__auto____$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_imap.call(null, this__4231__auto____$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
instaparse.gll.Failure.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4232__auto__, other__4233__auto__) {
  var self__ = this;
  var this__4232__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = other__4233__auto__;
    if (cljs.core.truth_(and__3628__auto__)) {
      return this__4232__auto____$1.constructor === other__4233__auto__.constructor && cljs.core.equiv_map.call(null, this__4232__auto____$1, other__4233__auto__);
    } else {
      return and__3628__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
instaparse.gll.Failure.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4245__auto__, k__4246__auto__) {
  var self__ = this;
  var this__4245__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "index", "index", -1531685915), null, new cljs.core.Keyword(null, "reason", "reason", -2070751759), null], null), null), k__4246__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4245__auto____$1), self__.__meta), k__4246__auto__);
  } else {
    return new instaparse.gll.Failure(self__.index, self__.reason, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4246__auto__)), null);
  }
};
instaparse.gll.Failure.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4243__auto__, k__4244__auto__, G__28729) {
  var self__ = this;
  var this__4243__auto____$1 = this;
  var pred__28733 = cljs.core.keyword_identical_QMARK_;
  var expr__28734 = k__4244__auto__;
  if (cljs.core.truth_(pred__28733.call(null, new cljs.core.Keyword(null, "index", "index", -1531685915), expr__28734))) {
    return new instaparse.gll.Failure(G__28729, self__.reason, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__28733.call(null, new cljs.core.Keyword(null, "reason", "reason", -2070751759), expr__28734))) {
      return new instaparse.gll.Failure(self__.index, G__28729, self__.__meta, self__.__extmap, null);
    } else {
      return new instaparse.gll.Failure(self__.index, self__.reason, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4244__auto__, G__28729), null);
    }
  }
};
instaparse.gll.Failure.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4248__auto__) {
  var self__ = this;
  var this__4248__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "index", "index", -1531685915), self__.index], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "reason", "reason", -2070751759), self__.reason], null)], null), self__.__extmap));
};
instaparse.gll.Failure.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4235__auto__, G__28729) {
  var self__ = this;
  var this__4235__auto____$1 = this;
  return new instaparse.gll.Failure(self__.index, self__.reason, G__28729, self__.__extmap, self__.__hash);
};
instaparse.gll.Failure.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4241__auto__, entry__4242__auto__) {
  var self__ = this;
  var this__4241__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4242__auto__)) {
    return cljs.core._assoc.call(null, this__4241__auto____$1, cljs.core._nth.call(null, entry__4242__auto__, 0), cljs.core._nth.call(null, entry__4242__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4241__auto____$1, entry__4242__auto__);
  }
};
instaparse.gll.Failure.cljs$lang$type = true;
instaparse.gll.Failure.cljs$lang$ctorPrSeq = function(this__4270__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "instaparse.gll/Failure");
};
instaparse.gll.Failure.cljs$lang$ctorPrWriter = function(this__4270__auto__, writer__4271__auto__) {
  return cljs.core._write.call(null, writer__4271__auto__, "instaparse.gll/Failure");
};
instaparse.gll.__GT_Failure = function __GT_Failure(index, reason) {
  return new instaparse.gll.Failure(index, reason);
};
instaparse.gll.map__GT_Failure = function map__GT_Failure(G__28731) {
  return new instaparse.gll.Failure((new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(G__28731), (new cljs.core.Keyword(null, "reason", "reason", -2070751759)).cljs$core$IFn$_invoke$arity$1(G__28731), null, cljs.core.dissoc.call(null, G__28731, new cljs.core.Keyword(null, "index", "index", -1531685915), new cljs.core.Keyword(null, "reason", "reason", -2070751759)));
};
instaparse.gll.string__GT_segment = function string__GT_segment(s) {
  return new instaparse.gll.Segment(s, 0, cljs.core.count.call(null, s));
};
instaparse.gll.Tramp = function(grammar, text, segment, fail_index, node_builder, stack, next_stack, generation, negative_listeners, msg_cache, nodes, success, failure, __meta, __extmap) {
  this.grammar = grammar;
  this.text = text;
  this.segment = segment;
  this.fail_index = fail_index;
  this.node_builder = node_builder;
  this.stack = stack;
  this.next_stack = next_stack;
  this.generation = generation;
  this.negative_listeners = negative_listeners;
  this.msg_cache = msg_cache;
  this.nodes = nodes;
  this.success = success;
  this.failure = failure;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 13) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
instaparse.gll.Tramp.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4236__auto__, k__4237__auto__) {
  var self__ = this;
  var this__4236__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4236__auto____$1, k__4237__auto__, null);
};
instaparse.gll.Tramp.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4238__auto__, k28738, else__4239__auto__) {
  var self__ = this;
  var this__4238__auto____$1 = this;
  var G__28740 = k28738 instanceof cljs.core.Keyword ? k28738.fqn : null;
  switch(G__28740) {
    case "msg-cache":
      return self__.msg_cache;
      break;
    case "negative-listeners":
      return self__.negative_listeners;
      break;
    case "generation":
      return self__.generation;
      break;
    case "failure":
      return self__.failure;
      break;
    case "fail-index":
      return self__.fail_index;
      break;
    case "grammar":
      return self__.grammar;
      break;
    case "success":
      return self__.success;
      break;
    case "nodes":
      return self__.nodes;
      break;
    case "node-builder":
      return self__.node_builder;
      break;
    case "segment":
      return self__.segment;
      break;
    case "stack":
      return self__.stack;
      break;
    case "next-stack":
      return self__.next_stack;
      break;
    case "text":
      return self__.text;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k28738, else__4239__auto__);
  }
};
instaparse.gll.Tramp.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4250__auto__, writer__4251__auto__, opts__4252__auto__) {
  var self__ = this;
  var this__4250__auto____$1 = this;
  var pr_pair__4253__auto__ = function(this__4250__auto____$1) {
    return function(keyval__4254__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4251__auto__, cljs.core.pr_writer, "", " ", "", opts__4252__auto__, keyval__4254__auto__);
    };
  }(this__4250__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4251__auto__, pr_pair__4253__auto__, "#instaparse.gll.Tramp{", ", ", "}", opts__4252__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), self__.grammar], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "text", "text", -1790561697), self__.text], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "segment", "segment", -964921196), self__.segment], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "fail-index", "fail-index", 248726923), self__.fail_index], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "node-builder", "node-builder", -1956562605), self__.node_builder], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "stack", "stack", -793405930), self__.stack], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "next-stack", "next-stack", -481930728), self__.next_stack], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "generation", "generation", -2132542044), self__.generation], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "negative-listeners", "negative-listeners", 55241092), self__.negative_listeners], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "msg-cache", "msg-cache", -733775070), self__.msg_cache], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "nodes", "nodes", -2099585805), self__.nodes], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "success", "success", 1890645906), self__.success], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "failure", "failure", 720415879), self__.failure], null)], null), self__.__extmap));
};
instaparse.gll.Tramp.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4234__auto__) {
  var self__ = this;
  var this__4234__auto____$1 = this;
  return self__.__meta;
};
instaparse.gll.Tramp.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4230__auto__) {
  var self__ = this;
  var this__4230__auto____$1 = this;
  return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, self__.__hash);
};
instaparse.gll.Tramp.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4240__auto__) {
  var self__ = this;
  var this__4240__auto____$1 = this;
  return 13 + cljs.core.count.call(null, self__.__extmap);
};
instaparse.gll.Tramp.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4231__auto__) {
  var self__ = this;
  var this__4231__auto____$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_imap.call(null, this__4231__auto____$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
instaparse.gll.Tramp.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4232__auto__, other__4233__auto__) {
  var self__ = this;
  var this__4232__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = other__4233__auto__;
    if (cljs.core.truth_(and__3628__auto__)) {
      return this__4232__auto____$1.constructor === other__4233__auto__.constructor && cljs.core.equiv_map.call(null, this__4232__auto____$1, other__4233__auto__);
    } else {
      return and__3628__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
instaparse.gll.Tramp.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4245__auto__, k__4246__auto__) {
  var self__ = this;
  var this__4245__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [new cljs.core.Keyword(null, "msg-cache", "msg-cache", -733775070), null, new cljs.core.Keyword(null, "negative-listeners", "negative-listeners", 55241092), null, new cljs.core.Keyword(null, "generation", "generation", -2132542044), null, new cljs.core.Keyword(null, "failure", "failure", 720415879), null, new cljs.core.Keyword(null, "fail-index", "fail-index", 248726923), null, 
  new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), null, new cljs.core.Keyword(null, "success", "success", 1890645906), null, new cljs.core.Keyword(null, "nodes", "nodes", -2099585805), null, new cljs.core.Keyword(null, "node-builder", "node-builder", -1956562605), null, new cljs.core.Keyword(null, "segment", "segment", -964921196), null, new cljs.core.Keyword(null, "stack", "stack", -793405930), null, new cljs.core.Keyword(null, "next-stack", "next-stack", -481930728), null, new cljs.core.Keyword(null, 
  "text", "text", -1790561697), null], null), null), k__4246__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4245__auto____$1), self__.__meta), k__4246__auto__);
  } else {
    return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4246__auto__)), null);
  }
};
instaparse.gll.Tramp.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4243__auto__, k__4244__auto__, G__28737) {
  var self__ = this;
  var this__4243__auto____$1 = this;
  var pred__28741 = cljs.core.keyword_identical_QMARK_;
  var expr__28742 = k__4244__auto__;
  if (cljs.core.truth_(pred__28741.call(null, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), expr__28742))) {
    return new instaparse.gll.Tramp(G__28737, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__28741.call(null, new cljs.core.Keyword(null, "text", "text", -1790561697), expr__28742))) {
      return new instaparse.gll.Tramp(self__.grammar, G__28737, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__28741.call(null, new cljs.core.Keyword(null, "segment", "segment", -964921196), expr__28742))) {
        return new instaparse.gll.Tramp(self__.grammar, self__.text, G__28737, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__28741.call(null, new cljs.core.Keyword(null, "fail-index", "fail-index", 248726923), expr__28742))) {
          return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, G__28737, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__28741.call(null, new cljs.core.Keyword(null, "node-builder", "node-builder", -1956562605), expr__28742))) {
            return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, G__28737, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
          } else {
            if (cljs.core.truth_(pred__28741.call(null, new cljs.core.Keyword(null, "stack", "stack", -793405930), expr__28742))) {
              return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, G__28737, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
            } else {
              if (cljs.core.truth_(pred__28741.call(null, new cljs.core.Keyword(null, "next-stack", "next-stack", -481930728), expr__28742))) {
                return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, G__28737, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
              } else {
                if (cljs.core.truth_(pred__28741.call(null, new cljs.core.Keyword(null, "generation", "generation", -2132542044), expr__28742))) {
                  return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, G__28737, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
                } else {
                  if (cljs.core.truth_(pred__28741.call(null, new cljs.core.Keyword(null, "negative-listeners", "negative-listeners", 55241092), expr__28742))) {
                    return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, G__28737, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
                  } else {
                    if (cljs.core.truth_(pred__28741.call(null, new cljs.core.Keyword(null, "msg-cache", "msg-cache", -733775070), expr__28742))) {
                      return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, G__28737, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
                    } else {
                      if (cljs.core.truth_(pred__28741.call(null, new cljs.core.Keyword(null, "nodes", "nodes", -2099585805), expr__28742))) {
                        return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, G__28737, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
                      } else {
                        if (cljs.core.truth_(pred__28741.call(null, new cljs.core.Keyword(null, "success", "success", 1890645906), expr__28742))) {
                          return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, G__28737, self__.failure, self__.__meta, self__.__extmap, null);
                        } else {
                          if (cljs.core.truth_(pred__28741.call(null, new cljs.core.Keyword(null, "failure", "failure", 720415879), expr__28742))) {
                            return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, G__28737, self__.__meta, self__.__extmap, null);
                          } else {
                            return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4244__auto__, G__28737), null);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
instaparse.gll.Tramp.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4248__auto__) {
  var self__ = this;
  var this__4248__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), self__.grammar], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "text", "text", -1790561697), self__.text], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "segment", "segment", -964921196), self__.segment], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "fail-index", "fail-index", 248726923), self__.fail_index], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "node-builder", "node-builder", -1956562605), self__.node_builder], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "stack", "stack", -793405930), self__.stack], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "next-stack", "next-stack", -481930728), self__.next_stack], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "generation", "generation", -2132542044), self__.generation], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "negative-listeners", "negative-listeners", 55241092), self__.negative_listeners], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "msg-cache", "msg-cache", -733775070), self__.msg_cache], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "nodes", "nodes", -2099585805), self__.nodes], null), 
  new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "success", "success", 1890645906), self__.success], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "failure", "failure", 720415879), self__.failure], null)], null), self__.__extmap));
};
instaparse.gll.Tramp.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4235__auto__, G__28737) {
  var self__ = this;
  var this__4235__auto____$1 = this;
  return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, G__28737, self__.__extmap, self__.__hash);
};
instaparse.gll.Tramp.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4241__auto__, entry__4242__auto__) {
  var self__ = this;
  var this__4241__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4242__auto__)) {
    return cljs.core._assoc.call(null, this__4241__auto____$1, cljs.core._nth.call(null, entry__4242__auto__, 0), cljs.core._nth.call(null, entry__4242__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4241__auto____$1, entry__4242__auto__);
  }
};
instaparse.gll.Tramp.cljs$lang$type = true;
instaparse.gll.Tramp.cljs$lang$ctorPrSeq = function(this__4270__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "instaparse.gll/Tramp");
};
instaparse.gll.Tramp.cljs$lang$ctorPrWriter = function(this__4270__auto__, writer__4271__auto__) {
  return cljs.core._write.call(null, writer__4271__auto__, "instaparse.gll/Tramp");
};
instaparse.gll.__GT_Tramp = function __GT_Tramp(grammar, text, segment, fail_index, node_builder, stack, next_stack, generation, negative_listeners, msg_cache, nodes, success, failure) {
  return new instaparse.gll.Tramp(grammar, text, segment, fail_index, node_builder, stack, next_stack, generation, negative_listeners, msg_cache, nodes, success, failure);
};
instaparse.gll.map__GT_Tramp = function map__GT_Tramp(G__28739) {
  return new instaparse.gll.Tramp((new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(G__28739), (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(G__28739), (new cljs.core.Keyword(null, "segment", "segment", -964921196)).cljs$core$IFn$_invoke$arity$1(G__28739), (new cljs.core.Keyword(null, "fail-index", "fail-index", 248726923)).cljs$core$IFn$_invoke$arity$1(G__28739), (new cljs.core.Keyword(null, "node-builder", "node-builder", 
  -1956562605)).cljs$core$IFn$_invoke$arity$1(G__28739), (new cljs.core.Keyword(null, "stack", "stack", -793405930)).cljs$core$IFn$_invoke$arity$1(G__28739), (new cljs.core.Keyword(null, "next-stack", "next-stack", -481930728)).cljs$core$IFn$_invoke$arity$1(G__28739), (new cljs.core.Keyword(null, "generation", "generation", -2132542044)).cljs$core$IFn$_invoke$arity$1(G__28739), (new cljs.core.Keyword(null, "negative-listeners", "negative-listeners", 55241092)).cljs$core$IFn$_invoke$arity$1(G__28739), 
  (new cljs.core.Keyword(null, "msg-cache", "msg-cache", -733775070)).cljs$core$IFn$_invoke$arity$1(G__28739), (new cljs.core.Keyword(null, "nodes", "nodes", -2099585805)).cljs$core$IFn$_invoke$arity$1(G__28739), (new cljs.core.Keyword(null, "success", "success", 1890645906)).cljs$core$IFn$_invoke$arity$1(G__28739), (new cljs.core.Keyword(null, "failure", "failure", 720415879)).cljs$core$IFn$_invoke$arity$1(G__28739), null, cljs.core.dissoc.call(null, G__28739, new cljs.core.Keyword(null, "grammar", 
  "grammar", 1881328267), new cljs.core.Keyword(null, "text", "text", -1790561697), new cljs.core.Keyword(null, "segment", "segment", -964921196), new cljs.core.Keyword(null, "fail-index", "fail-index", 248726923), new cljs.core.Keyword(null, "node-builder", "node-builder", -1956562605), new cljs.core.Keyword(null, "stack", "stack", -793405930), new cljs.core.Keyword(null, "next-stack", "next-stack", -481930728), new cljs.core.Keyword(null, "generation", "generation", -2132542044), new cljs.core.Keyword(null, 
  "negative-listeners", "negative-listeners", 55241092), new cljs.core.Keyword(null, "msg-cache", "msg-cache", -733775070), new cljs.core.Keyword(null, "nodes", "nodes", -2099585805), new cljs.core.Keyword(null, "success", "success", 1890645906), new cljs.core.Keyword(null, "failure", "failure", 720415879)));
};
instaparse.gll.make_tramp = function() {
  var make_tramp = null;
  var make_tramp__2 = function(grammar, text) {
    return make_tramp.call(null, grammar, text, instaparse.gll.string__GT_segment.call(null, text), -1, null);
  };
  var make_tramp__3 = function(grammar, text, segment) {
    return make_tramp.call(null, grammar, text, segment, -1, null);
  };
  var make_tramp__4 = function(grammar, text, fail_index, node_builder) {
    return make_tramp.call(null, grammar, text, instaparse.gll.string__GT_segment.call(null, text), fail_index, node_builder);
  };
  var make_tramp__5 = function(grammar, text, segment, fail_index, node_builder) {
    return new instaparse.gll.Tramp(grammar, text, segment, fail_index, node_builder, cljs.core.PersistentVector.EMPTY, cljs.core.PersistentVector.EMPTY, 0, cljs.core.PersistentVector.EMPTY, cljs.core.PersistentArrayMap.EMPTY, cljs.core.PersistentArrayMap.EMPTY, null, new instaparse.gll.Failure(0, cljs.core.PersistentVector.EMPTY));
  };
  make_tramp = function(grammar, text, segment, fail_index, node_builder) {
    switch(arguments.length) {
      case 2:
        return make_tramp__2.call(this, grammar, text);
      case 3:
        return make_tramp__3.call(this, grammar, text, segment);
      case 4:
        return make_tramp__4.call(this, grammar, text, segment, fail_index);
      case 5:
        return make_tramp__5.call(this, grammar, text, segment, fail_index, node_builder);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_tramp.cljs$core$IFn$_invoke$arity$2 = make_tramp__2;
  make_tramp.cljs$core$IFn$_invoke$arity$3 = make_tramp__3;
  make_tramp.cljs$core$IFn$_invoke$arity$4 = make_tramp__4;
  make_tramp.cljs$core$IFn$_invoke$arity$5 = make_tramp__5;
  return make_tramp;
}();
instaparse.gll.make_success = function make_success(result, index) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "result", "result", 1415092211), result, new cljs.core.Keyword(null, "index", "index", -1531685915), index], null);
};
instaparse.gll.total_success_QMARK_ = function total_success_QMARK_(tramp, s) {
  return cljs.core._EQ_.call(null, cljs.core.count.call(null, tramp.text), (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(s));
};
instaparse.gll.Node = function(listeners, full_listeners, results, full_results, __meta, __extmap) {
  this.listeners = listeners;
  this.full_listeners = full_listeners;
  this.results = results;
  this.full_results = full_results;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 4) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
instaparse.gll.Node.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4236__auto__, k__4237__auto__) {
  var self__ = this;
  var this__4236__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4236__auto____$1, k__4237__auto__, null);
};
instaparse.gll.Node.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4238__auto__, k28746, else__4239__auto__) {
  var self__ = this;
  var this__4238__auto____$1 = this;
  var G__28748 = k28746 instanceof cljs.core.Keyword ? k28746.fqn : null;
  switch(G__28748) {
    case "full-results":
      return self__.full_results;
      break;
    case "results":
      return self__.results;
      break;
    case "full-listeners":
      return self__.full_listeners;
      break;
    case "listeners":
      return self__.listeners;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k28746, else__4239__auto__);
  }
};
instaparse.gll.Node.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4250__auto__, writer__4251__auto__, opts__4252__auto__) {
  var self__ = this;
  var this__4250__auto____$1 = this;
  var pr_pair__4253__auto__ = function(this__4250__auto____$1) {
    return function(keyval__4254__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4251__auto__, cljs.core.pr_writer, "", " ", "", opts__4252__auto__, keyval__4254__auto__);
    };
  }(this__4250__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4251__auto__, pr_pair__4253__auto__, "#instaparse.gll.Node{", ", ", "}", opts__4252__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "listeners", "listeners", 394544445), self__.listeners], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "full-listeners", "full-listeners", 50621827), self__.full_listeners], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "results", "results", -1134170113), self__.results], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "full-results", "full-results", -1500225407), self__.full_results], null)], null), self__.__extmap));
};
instaparse.gll.Node.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4234__auto__) {
  var self__ = this;
  var this__4234__auto____$1 = this;
  return self__.__meta;
};
instaparse.gll.Node.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4230__auto__) {
  var self__ = this;
  var this__4230__auto____$1 = this;
  return new instaparse.gll.Node(self__.listeners, self__.full_listeners, self__.results, self__.full_results, self__.__meta, self__.__extmap, self__.__hash);
};
instaparse.gll.Node.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4240__auto__) {
  var self__ = this;
  var this__4240__auto____$1 = this;
  return 4 + cljs.core.count.call(null, self__.__extmap);
};
instaparse.gll.Node.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4231__auto__) {
  var self__ = this;
  var this__4231__auto____$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_imap.call(null, this__4231__auto____$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
instaparse.gll.Node.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4232__auto__, other__4233__auto__) {
  var self__ = this;
  var this__4232__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = other__4233__auto__;
    if (cljs.core.truth_(and__3628__auto__)) {
      return this__4232__auto____$1.constructor === other__4233__auto__.constructor && cljs.core.equiv_map.call(null, this__4232__auto____$1, other__4233__auto__);
    } else {
      return and__3628__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
instaparse.gll.Node.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4245__auto__, k__4246__auto__) {
  var self__ = this;
  var this__4245__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "full-results", "full-results", -1500225407), null, new cljs.core.Keyword(null, "full-listeners", "full-listeners", 50621827), null, new cljs.core.Keyword(null, "listeners", "listeners", 394544445), null, new cljs.core.Keyword(null, "results", "results", -1134170113), null], null), null), k__4246__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4245__auto____$1), self__.__meta), k__4246__auto__);
  } else {
    return new instaparse.gll.Node(self__.listeners, self__.full_listeners, self__.results, self__.full_results, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4246__auto__)), null);
  }
};
instaparse.gll.Node.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4243__auto__, k__4244__auto__, G__28745) {
  var self__ = this;
  var this__4243__auto____$1 = this;
  var pred__28749 = cljs.core.keyword_identical_QMARK_;
  var expr__28750 = k__4244__auto__;
  if (cljs.core.truth_(pred__28749.call(null, new cljs.core.Keyword(null, "listeners", "listeners", 394544445), expr__28750))) {
    return new instaparse.gll.Node(G__28745, self__.full_listeners, self__.results, self__.full_results, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__28749.call(null, new cljs.core.Keyword(null, "full-listeners", "full-listeners", 50621827), expr__28750))) {
      return new instaparse.gll.Node(self__.listeners, G__28745, self__.results, self__.full_results, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__28749.call(null, new cljs.core.Keyword(null, "results", "results", -1134170113), expr__28750))) {
        return new instaparse.gll.Node(self__.listeners, self__.full_listeners, G__28745, self__.full_results, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__28749.call(null, new cljs.core.Keyword(null, "full-results", "full-results", -1500225407), expr__28750))) {
          return new instaparse.gll.Node(self__.listeners, self__.full_listeners, self__.results, G__28745, self__.__meta, self__.__extmap, null);
        } else {
          return new instaparse.gll.Node(self__.listeners, self__.full_listeners, self__.results, self__.full_results, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4244__auto__, G__28745), null);
        }
      }
    }
  }
};
instaparse.gll.Node.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4248__auto__) {
  var self__ = this;
  var this__4248__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "listeners", "listeners", 394544445), self__.listeners], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "full-listeners", "full-listeners", 50621827), self__.full_listeners], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "results", "results", -1134170113), self__.results], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "full-results", "full-results", -1500225407), self__.full_results], null)], null), self__.__extmap));
};
instaparse.gll.Node.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4235__auto__, G__28745) {
  var self__ = this;
  var this__4235__auto____$1 = this;
  return new instaparse.gll.Node(self__.listeners, self__.full_listeners, self__.results, self__.full_results, G__28745, self__.__extmap, self__.__hash);
};
instaparse.gll.Node.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4241__auto__, entry__4242__auto__) {
  var self__ = this;
  var this__4241__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4242__auto__)) {
    return cljs.core._assoc.call(null, this__4241__auto____$1, cljs.core._nth.call(null, entry__4242__auto__, 0), cljs.core._nth.call(null, entry__4242__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4241__auto____$1, entry__4242__auto__);
  }
};
instaparse.gll.Node.cljs$lang$type = true;
instaparse.gll.Node.cljs$lang$ctorPrSeq = function(this__4270__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "instaparse.gll/Node");
};
instaparse.gll.Node.cljs$lang$ctorPrWriter = function(this__4270__auto__, writer__4271__auto__) {
  return cljs.core._write.call(null, writer__4271__auto__, "instaparse.gll/Node");
};
instaparse.gll.__GT_Node = function __GT_Node(listeners, full_listeners, results, full_results) {
  return new instaparse.gll.Node(listeners, full_listeners, results, full_results);
};
instaparse.gll.map__GT_Node = function map__GT_Node(G__28747) {
  return new instaparse.gll.Node((new cljs.core.Keyword(null, "listeners", "listeners", 394544445)).cljs$core$IFn$_invoke$arity$1(G__28747), (new cljs.core.Keyword(null, "full-listeners", "full-listeners", 50621827)).cljs$core$IFn$_invoke$arity$1(G__28747), (new cljs.core.Keyword(null, "results", "results", -1134170113)).cljs$core$IFn$_invoke$arity$1(G__28747), (new cljs.core.Keyword(null, "full-results", "full-results", -1500225407)).cljs$core$IFn$_invoke$arity$1(G__28747), null, cljs.core.dissoc.call(null, 
  G__28747, new cljs.core.Keyword(null, "listeners", "listeners", 394544445), new cljs.core.Keyword(null, "full-listeners", "full-listeners", 50621827), new cljs.core.Keyword(null, "results", "results", -1134170113), new cljs.core.Keyword(null, "full-results", "full-results", -1500225407)));
};
instaparse.gll.make_node = function make_node() {
  return new instaparse.gll.Node(cljs.core.PersistentVector.EMPTY, cljs.core.PersistentVector.EMPTY, cljs.core.PersistentHashSet.EMPTY, cljs.core.PersistentHashSet.EMPTY);
};
instaparse.gll.push_stack = function push_stack(tramp, item) {
  return tramp.stack = cljs.core.conj.call(null, tramp.stack, item);
};
instaparse.gll.push_message = function push_message(tramp, listener, result) {
  var cache = tramp.msg_cache;
  var i = (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(result);
  var k = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [listener, i], null);
  var c = cljs.core.get.call(null, cache, k, 0);
  var f = function(cache, i, k, c) {
    return function() {
      return listener.call(null, result);
    };
  }(cache, i, k, c);
  if (c > tramp.generation) {
    tramp.next_stack = cljs.core.conj.call(null, tramp.next_stack, f);
  } else {
    tramp.stack = cljs.core.conj.call(null, tramp.stack, f);
  }
  return tramp.msg_cache = cljs.core.assoc.call(null, tramp.msg_cache, k, c + 1);
};
instaparse.gll.listener_exists_QMARK_ = function listener_exists_QMARK_(tramp, node_key) {
  var nodes = tramp.nodes;
  var temp__4126__auto__ = nodes.call(null, node_key);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var node = temp__4126__auto__;
    return cljs.core.count.call(null, node.listeners) > 0;
  } else {
    return null;
  }
};
instaparse.gll.full_listener_exists_QMARK_ = function full_listener_exists_QMARK_(tramp, node_key) {
  var nodes = tramp.nodes;
  var temp__4126__auto__ = nodes.call(null, node_key);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var node = temp__4126__auto__;
    return cljs.core.count.call(null, node.full_listeners) > 0 || cljs.core.count.call(null, node.listeners) > 0;
  } else {
    return null;
  }
};
instaparse.gll.result_exists_QMARK_ = function result_exists_QMARK_(tramp, node_key) {
  var nodes = tramp.nodes;
  var temp__4126__auto__ = nodes.call(null, node_key);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var node = temp__4126__auto__;
    return cljs.core.count.call(null, node.full_results) > 0 || cljs.core.count.call(null, node.results) > 0;
  } else {
    return null;
  }
};
instaparse.gll.full_result_exists_QMARK_ = function full_result_exists_QMARK_(tramp, node_key) {
  var nodes = tramp.nodes;
  var temp__4126__auto__ = nodes.call(null, node_key);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var node = temp__4126__auto__;
    return cljs.core.count.call(null, node.full_results) > 0;
  } else {
    return null;
  }
};
instaparse.gll.node_get = function node_get(tramp, node_key) {
  var nodes = tramp.nodes;
  var temp__4124__auto__ = nodes.call(null, node_key);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var node = temp__4124__auto__;
    return node;
  } else {
    var node = instaparse.gll.make_node.call(null);
    tramp.nodes = cljs.core.assoc.call(null, tramp.nodes, node_key, node);
    return node;
  }
};
instaparse.gll.safe_with_meta = function safe_with_meta(obj, metamap) {
  if (function() {
    var G__28754 = obj;
    if (G__28754) {
      var bit__4304__auto__ = G__28754.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4304__auto__ || G__28754.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__28754.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__28754);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__28754);
    }
  }()) {
    return cljs.core.with_meta.call(null, obj, metamap);
  } else {
    return obj;
  }
};
instaparse.gll.push_result = function push_result(tramp, node_key, result) {
  var node = instaparse.gll.node_get.call(null, tramp, node_key);
  var parser = node_key.call(null, 1);
  var result__$1 = cljs.core.truth_((new cljs.core.Keyword(null, "hide", "hide", -596913169)).cljs$core$IFn$_invoke$arity$1(parser)) ? cljs.core.assoc.call(null, result, new cljs.core.Keyword(null, "result", "result", 1415092211), null) : result;
  var result__$2 = function() {
    var temp__4124__auto__ = (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var reduction_function = temp__4124__auto__;
      return instaparse.gll.make_success.call(null, instaparse.gll.safe_with_meta.call(null, instaparse.reduction.apply_reduction.call(null, reduction_function, (new cljs.core.Keyword(null, "result", "result", 1415092211)).cljs$core$IFn$_invoke$arity$1(result__$1)), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("instaparse.gll", "start-index", "instaparse.gll/start-index", 404653620), node_key.call(null, 0), new cljs.core.Keyword("instaparse.gll", "end-index", "instaparse.gll/end-index", 
      -1851404441), (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(result__$1)], null)), (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(result__$1));
    } else {
      return result__$1;
    }
  }();
  var total_QMARK_ = instaparse.gll.total_success_QMARK_.call(null, tramp, result__$2);
  var results = total_QMARK_ ? node.full_results : node.results;
  if (cljs.core.not.call(null, results.call(null, result__$2))) {
    if (total_QMARK_) {
      node.full_results = cljs.core.conj.call(null, node.full_results, result__$2);
    } else {
      node.results = cljs.core.conj.call(null, node.results, result__$2);
    }
    var seq__28763_28771 = cljs.core.seq.call(null, node.listeners);
    var chunk__28764_28772 = null;
    var count__28765_28773 = 0;
    var i__28766_28774 = 0;
    while (true) {
      if (i__28766_28774 < count__28765_28773) {
        var listener_28775 = cljs.core._nth.call(null, chunk__28764_28772, i__28766_28774);
        instaparse.gll.push_message.call(null, tramp, listener_28775, result__$2);
        var G__28776 = seq__28763_28771;
        var G__28777 = chunk__28764_28772;
        var G__28778 = count__28765_28773;
        var G__28779 = i__28766_28774 + 1;
        seq__28763_28771 = G__28776;
        chunk__28764_28772 = G__28777;
        count__28765_28773 = G__28778;
        i__28766_28774 = G__28779;
        continue;
      } else {
        var temp__4126__auto___28780 = cljs.core.seq.call(null, seq__28763_28771);
        if (temp__4126__auto___28780) {
          var seq__28763_28781__$1 = temp__4126__auto___28780;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__28763_28781__$1)) {
            var c__4410__auto___28782 = cljs.core.chunk_first.call(null, seq__28763_28781__$1);
            var G__28783 = cljs.core.chunk_rest.call(null, seq__28763_28781__$1);
            var G__28784 = c__4410__auto___28782;
            var G__28785 = cljs.core.count.call(null, c__4410__auto___28782);
            var G__28786 = 0;
            seq__28763_28771 = G__28783;
            chunk__28764_28772 = G__28784;
            count__28765_28773 = G__28785;
            i__28766_28774 = G__28786;
            continue;
          } else {
            var listener_28787 = cljs.core.first.call(null, seq__28763_28781__$1);
            instaparse.gll.push_message.call(null, tramp, listener_28787, result__$2);
            var G__28788 = cljs.core.next.call(null, seq__28763_28781__$1);
            var G__28789 = null;
            var G__28790 = 0;
            var G__28791 = 0;
            seq__28763_28771 = G__28788;
            chunk__28764_28772 = G__28789;
            count__28765_28773 = G__28790;
            i__28766_28774 = G__28791;
            continue;
          }
        } else {
        }
      }
      break;
    }
    if (total_QMARK_) {
      var seq__28767 = cljs.core.seq.call(null, node.full_listeners);
      var chunk__28768 = null;
      var count__28769 = 0;
      var i__28770 = 0;
      while (true) {
        if (i__28770 < count__28769) {
          var listener = cljs.core._nth.call(null, chunk__28768, i__28770);
          instaparse.gll.push_message.call(null, tramp, listener, result__$2);
          var G__28792 = seq__28767;
          var G__28793 = chunk__28768;
          var G__28794 = count__28769;
          var G__28795 = i__28770 + 1;
          seq__28767 = G__28792;
          chunk__28768 = G__28793;
          count__28769 = G__28794;
          i__28770 = G__28795;
          continue;
        } else {
          var temp__4126__auto__ = cljs.core.seq.call(null, seq__28767);
          if (temp__4126__auto__) {
            var seq__28767__$1 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__28767__$1)) {
              var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__28767__$1);
              var G__28796 = cljs.core.chunk_rest.call(null, seq__28767__$1);
              var G__28797 = c__4410__auto__;
              var G__28798 = cljs.core.count.call(null, c__4410__auto__);
              var G__28799 = 0;
              seq__28767 = G__28796;
              chunk__28768 = G__28797;
              count__28769 = G__28798;
              i__28770 = G__28799;
              continue;
            } else {
              var listener = cljs.core.first.call(null, seq__28767__$1);
              instaparse.gll.push_message.call(null, tramp, listener, result__$2);
              var G__28800 = cljs.core.next.call(null, seq__28767__$1);
              var G__28801 = null;
              var G__28802 = 0;
              var G__28803 = 0;
              seq__28767 = G__28800;
              chunk__28768 = G__28801;
              count__28769 = G__28802;
              i__28770 = G__28803;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    } else {
      return null;
    }
  } else {
    return null;
  }
};
instaparse.gll.push_listener = function push_listener(tramp, node_key, listener) {
  var listener_already_exists_QMARK_ = instaparse.gll.listener_exists_QMARK_.call(null, tramp, node_key);
  var node = instaparse.gll.node_get.call(null, tramp, node_key);
  node.listeners = cljs.core.conj.call(null, node.listeners, listener);
  var seq__28812_28820 = cljs.core.seq.call(null, node.results);
  var chunk__28813_28821 = null;
  var count__28814_28822 = 0;
  var i__28815_28823 = 0;
  while (true) {
    if (i__28815_28823 < count__28814_28822) {
      var result_28824 = cljs.core._nth.call(null, chunk__28813_28821, i__28815_28823);
      instaparse.gll.push_message.call(null, tramp, listener, result_28824);
      var G__28825 = seq__28812_28820;
      var G__28826 = chunk__28813_28821;
      var G__28827 = count__28814_28822;
      var G__28828 = i__28815_28823 + 1;
      seq__28812_28820 = G__28825;
      chunk__28813_28821 = G__28826;
      count__28814_28822 = G__28827;
      i__28815_28823 = G__28828;
      continue;
    } else {
      var temp__4126__auto___28829 = cljs.core.seq.call(null, seq__28812_28820);
      if (temp__4126__auto___28829) {
        var seq__28812_28830__$1 = temp__4126__auto___28829;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__28812_28830__$1)) {
          var c__4410__auto___28831 = cljs.core.chunk_first.call(null, seq__28812_28830__$1);
          var G__28832 = cljs.core.chunk_rest.call(null, seq__28812_28830__$1);
          var G__28833 = c__4410__auto___28831;
          var G__28834 = cljs.core.count.call(null, c__4410__auto___28831);
          var G__28835 = 0;
          seq__28812_28820 = G__28832;
          chunk__28813_28821 = G__28833;
          count__28814_28822 = G__28834;
          i__28815_28823 = G__28835;
          continue;
        } else {
          var result_28836 = cljs.core.first.call(null, seq__28812_28830__$1);
          instaparse.gll.push_message.call(null, tramp, listener, result_28836);
          var G__28837 = cljs.core.next.call(null, seq__28812_28830__$1);
          var G__28838 = null;
          var G__28839 = 0;
          var G__28840 = 0;
          seq__28812_28820 = G__28837;
          chunk__28813_28821 = G__28838;
          count__28814_28822 = G__28839;
          i__28815_28823 = G__28840;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var seq__28816_28841 = cljs.core.seq.call(null, node.full_results);
  var chunk__28817_28842 = null;
  var count__28818_28843 = 0;
  var i__28819_28844 = 0;
  while (true) {
    if (i__28819_28844 < count__28818_28843) {
      var result_28845 = cljs.core._nth.call(null, chunk__28817_28842, i__28819_28844);
      instaparse.gll.push_message.call(null, tramp, listener, result_28845);
      var G__28846 = seq__28816_28841;
      var G__28847 = chunk__28817_28842;
      var G__28848 = count__28818_28843;
      var G__28849 = i__28819_28844 + 1;
      seq__28816_28841 = G__28846;
      chunk__28817_28842 = G__28847;
      count__28818_28843 = G__28848;
      i__28819_28844 = G__28849;
      continue;
    } else {
      var temp__4126__auto___28850 = cljs.core.seq.call(null, seq__28816_28841);
      if (temp__4126__auto___28850) {
        var seq__28816_28851__$1 = temp__4126__auto___28850;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__28816_28851__$1)) {
          var c__4410__auto___28852 = cljs.core.chunk_first.call(null, seq__28816_28851__$1);
          var G__28853 = cljs.core.chunk_rest.call(null, seq__28816_28851__$1);
          var G__28854 = c__4410__auto___28852;
          var G__28855 = cljs.core.count.call(null, c__4410__auto___28852);
          var G__28856 = 0;
          seq__28816_28841 = G__28853;
          chunk__28817_28842 = G__28854;
          count__28818_28843 = G__28855;
          i__28819_28844 = G__28856;
          continue;
        } else {
          var result_28857 = cljs.core.first.call(null, seq__28816_28851__$1);
          instaparse.gll.push_message.call(null, tramp, listener, result_28857);
          var G__28858 = cljs.core.next.call(null, seq__28816_28851__$1);
          var G__28859 = null;
          var G__28860 = 0;
          var G__28861 = 0;
          seq__28816_28841 = G__28858;
          chunk__28817_28842 = G__28859;
          count__28818_28843 = G__28860;
          i__28819_28844 = G__28861;
          continue;
        }
      } else {
      }
    }
    break;
  }
  if (cljs.core.not.call(null, listener_already_exists_QMARK_)) {
    return instaparse.gll.push_stack.call(null, tramp, function(listener_already_exists_QMARK_, node) {
      return function() {
        return instaparse.gll._parse.call(null, node_key.call(null, 1), node_key.call(null, 0), tramp);
      };
    }(listener_already_exists_QMARK_, node));
  } else {
    return null;
  }
};
instaparse.gll.push_full_listener = function push_full_listener(tramp, node_key, listener) {
  var full_listener_already_exists_QMARK_ = instaparse.gll.full_listener_exists_QMARK_.call(null, tramp, node_key);
  var node = instaparse.gll.node_get.call(null, tramp, node_key);
  node.full_listeners = cljs.core.conj.call(null, node.full_listeners, listener);
  var seq__28866_28870 = cljs.core.seq.call(null, node.full_results);
  var chunk__28867_28871 = null;
  var count__28868_28872 = 0;
  var i__28869_28873 = 0;
  while (true) {
    if (i__28869_28873 < count__28868_28872) {
      var result_28874 = cljs.core._nth.call(null, chunk__28867_28871, i__28869_28873);
      instaparse.gll.push_message.call(null, tramp, listener, result_28874);
      var G__28875 = seq__28866_28870;
      var G__28876 = chunk__28867_28871;
      var G__28877 = count__28868_28872;
      var G__28878 = i__28869_28873 + 1;
      seq__28866_28870 = G__28875;
      chunk__28867_28871 = G__28876;
      count__28868_28872 = G__28877;
      i__28869_28873 = G__28878;
      continue;
    } else {
      var temp__4126__auto___28879 = cljs.core.seq.call(null, seq__28866_28870);
      if (temp__4126__auto___28879) {
        var seq__28866_28880__$1 = temp__4126__auto___28879;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__28866_28880__$1)) {
          var c__4410__auto___28881 = cljs.core.chunk_first.call(null, seq__28866_28880__$1);
          var G__28882 = cljs.core.chunk_rest.call(null, seq__28866_28880__$1);
          var G__28883 = c__4410__auto___28881;
          var G__28884 = cljs.core.count.call(null, c__4410__auto___28881);
          var G__28885 = 0;
          seq__28866_28870 = G__28882;
          chunk__28867_28871 = G__28883;
          count__28868_28872 = G__28884;
          i__28869_28873 = G__28885;
          continue;
        } else {
          var result_28886 = cljs.core.first.call(null, seq__28866_28880__$1);
          instaparse.gll.push_message.call(null, tramp, listener, result_28886);
          var G__28887 = cljs.core.next.call(null, seq__28866_28880__$1);
          var G__28888 = null;
          var G__28889 = 0;
          var G__28890 = 0;
          seq__28866_28870 = G__28887;
          chunk__28867_28871 = G__28888;
          count__28868_28872 = G__28889;
          i__28869_28873 = G__28890;
          continue;
        }
      } else {
      }
    }
    break;
  }
  if (cljs.core.not.call(null, full_listener_already_exists_QMARK_)) {
    return instaparse.gll.push_stack.call(null, tramp, function(full_listener_already_exists_QMARK_, node) {
      return function() {
        return instaparse.gll._full_parse.call(null, node_key.call(null, 1), node_key.call(null, 0), tramp);
      };
    }(full_listener_already_exists_QMARK_, node));
  } else {
    return null;
  }
};
instaparse.gll.push_negative_listener = function push_negative_listener(tramp, negative_listener) {
  return tramp.negative_listeners = cljs.core.conj.call(null, tramp.negative_listeners, negative_listener);
};
instaparse.gll.fail = function fail(tramp, node_key, index, reason) {
  tramp.failure = function(failure) {
    var current_index = (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(failure);
    var G__28892 = cljs.core.compare.call(null, index, current_index);
    switch(G__28892) {
      case 1:
        return new instaparse.gll.Failure(index, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [reason], null));
        break;
      case 0:
        return new instaparse.gll.Failure(index, cljs.core.conj.call(null, (new cljs.core.Keyword(null, "reason", "reason", -2070751759)).cljs$core$IFn$_invoke$arity$1(failure), reason));
        break;
      case -1:
        return failure;
        break;
      default:
        throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.compare.call(null, index, current_index)));;
    }
  }.call(null, tramp.failure);
  if (cljs.core._EQ_.call(null, index, tramp.fail_index)) {
    return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, instaparse.gll.build_node_with_meta.call(null, tramp.node_builder, new cljs.core.Keyword("instaparse", "failure", "instaparse/failure", 1422918607), cljs.core.subs.call(null, tramp.text, index), index, cljs.core.count.call(null, tramp.text)), cljs.core.count.call(null, tramp.text)));
  } else {
    return null;
  }
};
instaparse.gll.step = function step(tramp) {
  var top = cljs.core.peek.call(null, tramp.stack);
  tramp.stack = cljs.core.pop.call(null, tramp.stack);
  return top.call(null);
};
instaparse.gll.run = function() {
  var run = null;
  var run__1 = function(tramp) {
    return run.call(null, tramp, null);
  };
  var run__2 = function(tramp, found_result_QMARK_) {
    while (true) {
      var stack = tramp.stack;
      if (cljs.core.truth_(tramp.success)) {
        return new cljs.core.LazySeq(null, function(tramp, found_result_QMARK_, stack) {
          return function() {
            return cljs.core.cons.call(null, (new cljs.core.Keyword(null, "result", "result", 1415092211)).cljs$core$IFn$_invoke$arity$1(tramp.success), function() {
              tramp.success = null;
              return run.call(null, tramp, true);
            }());
          };
        }(tramp, found_result_QMARK_, stack), null, null);
      } else {
        if (cljs.core.count.call(null, stack) > 0) {
          instaparse.gll.step.call(null, tramp);
          var G__28894 = tramp;
          var G__28895 = found_result_QMARK_;
          tramp = G__28894;
          found_result_QMARK_ = G__28895;
          continue;
        } else {
          if (cljs.core.count.call(null, tramp.negative_listeners) > 0) {
            var listener = cljs.core.peek.call(null, tramp.negative_listeners);
            listener.call(null);
            tramp.negative_listeners = cljs.core.pop.call(null, tramp.negative_listeners);
            var G__28896 = tramp;
            var G__28897 = found_result_QMARK_;
            tramp = G__28896;
            found_result_QMARK_ = G__28897;
            continue;
          } else {
            if (cljs.core.truth_(found_result_QMARK_)) {
              var next_stack = tramp.next_stack;
              tramp.stack = next_stack;
              tramp.next_stack = cljs.core.PersistentVector.EMPTY;
              tramp.generation = tramp.generation + 1;
              var G__28898 = tramp;
              var G__28899 = null;
              tramp = G__28898;
              found_result_QMARK_ = G__28899;
              continue;
            } else {
              return null;
            }
          }
        }
      }
      break;
    }
  };
  run = function(tramp, found_result_QMARK_) {
    switch(arguments.length) {
      case 1:
        return run__1.call(this, tramp);
      case 2:
        return run__2.call(this, tramp, found_result_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  run.cljs$core$IFn$_invoke$arity$1 = run__1;
  run.cljs$core$IFn$_invoke$arity$2 = run__2;
  return run;
}();
instaparse.gll.NodeListener = function NodeListener(node_key, tramp) {
  return function(result) {
    return instaparse.gll.push_result.call(null, tramp, node_key, result);
  };
};
instaparse.gll.LookListener = function LookListener(node_key, tramp) {
  return function(result) {
    return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, null, node_key.call(null, 0)));
  };
};
instaparse.gll.CatListener = function CatListener(results_so_far, parser_sequence, node_key, tramp) {
  return function(result) {
    var map__28901 = result;
    var map__28901__$1 = cljs.core.seq_QMARK_.call(null, map__28901) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28901) : map__28901;
    var parsed_result = cljs.core.get.call(null, map__28901__$1, new cljs.core.Keyword(null, "result", "result", 1415092211));
    var continue_index = cljs.core.get.call(null, map__28901__$1, new cljs.core.Keyword(null, "index", "index", -1531685915));
    var new_results_so_far = instaparse.auto_flatten_seq.conj_flat.call(null, results_so_far, parsed_result);
    if (cljs.core.seq.call(null, parser_sequence)) {
      return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [continue_index, cljs.core.first.call(null, parser_sequence)], null), CatListener.call(null, new_results_so_far, cljs.core.next.call(null, parser_sequence), node_key, tramp));
    } else {
      return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, new_results_so_far, continue_index));
    }
  };
};
instaparse.gll.CatFullListener = function CatFullListener(results_so_far, parser_sequence, node_key, tramp) {
  return function(result) {
    var map__28903 = result;
    var map__28903__$1 = cljs.core.seq_QMARK_.call(null, map__28903) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28903) : map__28903;
    var parsed_result = cljs.core.get.call(null, map__28903__$1, new cljs.core.Keyword(null, "result", "result", 1415092211));
    var continue_index = cljs.core.get.call(null, map__28903__$1, new cljs.core.Keyword(null, "index", "index", -1531685915));
    var new_results_so_far = instaparse.auto_flatten_seq.conj_flat.call(null, results_so_far, parsed_result);
    if (instaparse.reduction.singleton_QMARK_.call(null, parser_sequence)) {
      return instaparse.gll.push_full_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [continue_index, cljs.core.first.call(null, parser_sequence)], null), CatFullListener.call(null, new_results_so_far, cljs.core.next.call(null, parser_sequence), node_key, tramp));
    } else {
      if (cljs.core.seq.call(null, parser_sequence)) {
        return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [continue_index, cljs.core.first.call(null, parser_sequence)], null), CatFullListener.call(null, new_results_so_far, cljs.core.next.call(null, parser_sequence), node_key, tramp));
      } else {
        return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, new_results_so_far, continue_index));
      }
    }
  };
};
instaparse.gll.PlusListener = function PlusListener(results_so_far, parser, prev_index, node_key, tramp) {
  return function(result) {
    var map__28905 = result;
    var map__28905__$1 = cljs.core.seq_QMARK_.call(null, map__28905) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28905) : map__28905;
    var parsed_result = cljs.core.get.call(null, map__28905__$1, new cljs.core.Keyword(null, "result", "result", 1415092211));
    var continue_index = cljs.core.get.call(null, map__28905__$1, new cljs.core.Keyword(null, "index", "index", -1531685915));
    if (cljs.core._EQ_.call(null, continue_index, prev_index)) {
      if (cljs.core.count.call(null, results_so_far) === 0) {
        return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, null, continue_index));
      } else {
        return null;
      }
    } else {
      var new_results_so_far = instaparse.auto_flatten_seq.conj_flat.call(null, results_so_far, parsed_result);
      instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [continue_index, parser], null), PlusListener.call(null, new_results_so_far, parser, continue_index, node_key, tramp));
      return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, new_results_so_far, continue_index));
    }
  };
};
instaparse.gll.PlusFullListener = function PlusFullListener(results_so_far, parser, prev_index, node_key, tramp) {
  return function(result) {
    var map__28907 = result;
    var map__28907__$1 = cljs.core.seq_QMARK_.call(null, map__28907) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28907) : map__28907;
    var parsed_result = cljs.core.get.call(null, map__28907__$1, new cljs.core.Keyword(null, "result", "result", 1415092211));
    var continue_index = cljs.core.get.call(null, map__28907__$1, new cljs.core.Keyword(null, "index", "index", -1531685915));
    if (cljs.core._EQ_.call(null, continue_index, prev_index)) {
      if (cljs.core.count.call(null, results_so_far) === 0) {
        return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, null, continue_index));
      } else {
        return null;
      }
    } else {
      var new_results_so_far = instaparse.auto_flatten_seq.conj_flat.call(null, results_so_far, parsed_result);
      if (cljs.core._EQ_.call(null, continue_index, cljs.core.count.call(null, (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(tramp)))) {
        return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, new_results_so_far, continue_index));
      } else {
        return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [continue_index, parser], null), PlusFullListener.call(null, new_results_so_far, parser, continue_index, node_key, tramp));
      }
    }
  };
};
instaparse.gll.RepListener = function RepListener(results_so_far, parser, m, n, prev_index, node_key, tramp) {
  return function(result) {
    var map__28909 = result;
    var map__28909__$1 = cljs.core.seq_QMARK_.call(null, map__28909) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28909) : map__28909;
    var parsed_result = cljs.core.get.call(null, map__28909__$1, new cljs.core.Keyword(null, "result", "result", 1415092211));
    var continue_index = cljs.core.get.call(null, map__28909__$1, new cljs.core.Keyword(null, "index", "index", -1531685915));
    var new_results_so_far = instaparse.auto_flatten_seq.conj_flat.call(null, results_so_far, parsed_result);
    if (m <= cljs.core.count.call(null, new_results_so_far) && cljs.core.count.call(null, new_results_so_far) <= n) {
      instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, new_results_so_far, continue_index));
    } else {
    }
    if (cljs.core.count.call(null, new_results_so_far) < n) {
      return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [continue_index, parser], null), RepListener.call(null, new_results_so_far, parser, m, n, continue_index, node_key, tramp));
    } else {
      return null;
    }
  };
};
instaparse.gll.RepFullListener = function RepFullListener(results_so_far, parser, m, n, prev_index, node_key, tramp) {
  return function(result) {
    var map__28911 = result;
    var map__28911__$1 = cljs.core.seq_QMARK_.call(null, map__28911) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28911) : map__28911;
    var parsed_result = cljs.core.get.call(null, map__28911__$1, new cljs.core.Keyword(null, "result", "result", 1415092211));
    var continue_index = cljs.core.get.call(null, map__28911__$1, new cljs.core.Keyword(null, "index", "index", -1531685915));
    var new_results_so_far = instaparse.auto_flatten_seq.conj_flat.call(null, results_so_far, parsed_result);
    if (cljs.core._EQ_.call(null, continue_index, cljs.core.count.call(null, (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(tramp)))) {
      if (m <= cljs.core.count.call(null, new_results_so_far) && cljs.core.count.call(null, new_results_so_far) <= n) {
        return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, new_results_so_far, continue_index));
      } else {
        return null;
      }
    } else {
      if (cljs.core.count.call(null, new_results_so_far) < n) {
        return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [continue_index, parser], null), RepFullListener.call(null, new_results_so_far, parser, m, n, continue_index, node_key, tramp));
      } else {
        return null;
      }
    }
  };
};
instaparse.gll.TopListener = function TopListener(tramp) {
  return function(result) {
    return tramp.success = result;
  };
};
instaparse.gll.string_parse = function string_parse(this$, index, tramp) {
  var string = (new cljs.core.Keyword(null, "string", "string", -1989541586)).cljs$core$IFn$_invoke$arity$1(this$);
  var text = tramp.text;
  var end = function() {
    var x__3954__auto__ = cljs.core.count.call(null, text);
    var y__3955__auto__ = index + cljs.core.count.call(null, string);
    return x__3954__auto__ < y__3955__auto__ ? x__3954__auto__ : y__3955__auto__;
  }();
  var head = cljs.core.subs.call(null, text, index, end);
  if (cljs.core._EQ_.call(null, string, head)) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, string, end));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "string", "string", -1989541586), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), string], null));
  }
};
instaparse.gll.string_full_parse = function string_full_parse(this$, index, tramp) {
  var string = (new cljs.core.Keyword(null, "string", "string", -1989541586)).cljs$core$IFn$_invoke$arity$1(this$);
  var text = tramp.text;
  var end = function() {
    var x__3954__auto__ = cljs.core.count.call(null, text);
    var y__3955__auto__ = index + cljs.core.count.call(null, string);
    return x__3954__auto__ < y__3955__auto__ ? x__3954__auto__ : y__3955__auto__;
  }();
  var head = cljs.core.subs.call(null, text, index, end);
  if (cljs.core._EQ_.call(null, end, cljs.core.count.call(null, text)) && cljs.core._EQ_.call(null, string, head)) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, string, end));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "string", "string", -1989541586), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), string, new cljs.core.Keyword(null, "full", "full", 436801220), true], null));
  }
};
instaparse.gll.equals_ignore_case = function equals_ignore_case(s1, s2) {
  return cljs.core._EQ_.call(null, s1.toUpperCase(), s2.toUpperCase());
};
instaparse.gll.string_case_insensitive_parse = function string_case_insensitive_parse(this$, index, tramp) {
  var string = (new cljs.core.Keyword(null, "string", "string", -1989541586)).cljs$core$IFn$_invoke$arity$1(this$);
  var text = tramp.text;
  var end = function() {
    var x__3954__auto__ = cljs.core.count.call(null, text);
    var y__3955__auto__ = index + cljs.core.count.call(null, string);
    return x__3954__auto__ < y__3955__auto__ ? x__3954__auto__ : y__3955__auto__;
  }();
  var head = cljs.core.subs.call(null, text, index, end);
  if (instaparse.gll.equals_ignore_case.call(null, string, head)) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, string, end));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "string", "string", -1989541586), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), string], null));
  }
};
instaparse.gll.string_case_insensitive_full_parse = function string_case_insensitive_full_parse(this$, index, tramp) {
  var string = (new cljs.core.Keyword(null, "string", "string", -1989541586)).cljs$core$IFn$_invoke$arity$1(this$);
  var text = tramp.text;
  var end = function() {
    var x__3954__auto__ = cljs.core.count.call(null, text);
    var y__3955__auto__ = index + cljs.core.count.call(null, string);
    return x__3954__auto__ < y__3955__auto__ ? x__3954__auto__ : y__3955__auto__;
  }();
  var head = cljs.core.subs.call(null, text, index, end);
  if (cljs.core._EQ_.call(null, end, cljs.core.count.call(null, text)) && instaparse.gll.equals_ignore_case.call(null, string, head)) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, string, end));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "string", "string", -1989541586), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), string, new cljs.core.Keyword(null, "full", "full", 436801220), true], null));
  }
};
instaparse.gll.re_match_at_front = function re_match_at_front(regexp, text) {
  var re = new RegExp(regexp.source, "g");
  var m = re.exec(text);
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = m;
    if (cljs.core.truth_(and__3628__auto__)) {
      return m.index === 0;
    } else {
      return and__3628__auto__;
    }
  }())) {
    return cljs.core.first.call(null, m);
  } else {
    return null;
  }
};
instaparse.gll.regexp_parse = function regexp_parse(this$, index, tramp) {
  var regexp = (new cljs.core.Keyword(null, "regexp", "regexp", -541372782)).cljs$core$IFn$_invoke$arity$1(this$);
  var text = tramp.segment;
  var substring = instaparse.gll.toString.call(null, instaparse.gll.subsegment.call(null, text, index, cljs.core.count.call(null, text)));
  var match = instaparse.gll.re_match_at_front.call(null, regexp, substring);
  if (cljs.core.truth_(match)) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, match, index + cljs.core.count.call(null, match)));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "regexp", "regexp", -541372782), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), regexp], null));
  }
};
instaparse.gll.regexp_full_parse = function regexp_full_parse(this$, index, tramp) {
  var regexp = (new cljs.core.Keyword(null, "regexp", "regexp", -541372782)).cljs$core$IFn$_invoke$arity$1(this$);
  var text = (new cljs.core.Keyword(null, "segment", "segment", -964921196)).cljs$core$IFn$_invoke$arity$1(tramp);
  var substring = instaparse.gll.toString.call(null, instaparse.gll.subsegment.call(null, text, index, cljs.core.count.call(null, text)));
  var match = instaparse.gll.re_match_at_front.call(null, regexp, substring);
  var desired_length = cljs.core.count.call(null, text) - index;
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = match;
    if (cljs.core.truth_(and__3628__auto__)) {
      return cljs.core._EQ_.call(null, cljs.core.count.call(null, match), desired_length);
    } else {
      return and__3628__auto__;
    }
  }())) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, match, cljs.core.count.call(null, text)));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "regexp", "regexp", -541372782), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), regexp, new cljs.core.Keyword(null, "full", "full", 436801220), true], null));
  }
};
var empty_cat_result_28912 = instaparse.auto_flatten_seq.EMPTY;
instaparse.gll.cat_parse = function(empty_cat_result_28912) {
  return function cat_parse(this$, index, tramp) {
    var parsers = (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(this$);
    return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, cljs.core.first.call(null, parsers)], null), instaparse.gll.CatListener.call(null, empty_cat_result_28912, cljs.core.next.call(null, parsers), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
  };
}(empty_cat_result_28912);
instaparse.gll.cat_full_parse = function(empty_cat_result_28912) {
  return function cat_full_parse(this$, index, tramp) {
    var parsers = (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(this$);
    return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, cljs.core.first.call(null, parsers)], null), instaparse.gll.CatFullListener.call(null, empty_cat_result_28912, cljs.core.next.call(null, parsers), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
  };
}(empty_cat_result_28912);
instaparse.gll.plus_parse = function(empty_cat_result_28912) {
  return function plus_parse(this$, index, tramp) {
    var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
    return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.PlusListener.call(null, empty_cat_result_28912, parser, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
  };
}(empty_cat_result_28912);
instaparse.gll.plus_full_parse = function(empty_cat_result_28912) {
  return function plus_full_parse(this$, index, tramp) {
    var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
    return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.PlusFullListener.call(null, empty_cat_result_28912, parser, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
  };
}(empty_cat_result_28912);
instaparse.gll.rep_parse = function(empty_cat_result_28912) {
  return function rep_parse(this$, index, tramp) {
    var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
    var m = (new cljs.core.Keyword(null, "min", "min", 444991522)).cljs$core$IFn$_invoke$arity$1(this$);
    var n = (new cljs.core.Keyword(null, "max", "max", 61366548)).cljs$core$IFn$_invoke$arity$1(this$);
    if (m === 0) {
      instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
      if (n >= 1) {
        return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.RepListener.call(null, empty_cat_result_28912, parser, 1, n, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
      } else {
        return null;
      }
    } else {
      return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.RepListener.call(null, empty_cat_result_28912, parser, m, n, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
    }
  };
}(empty_cat_result_28912);
instaparse.gll.rep_full_parse = function(empty_cat_result_28912) {
  return function rep_full_parse(this$, index, tramp) {
    var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
    var m = (new cljs.core.Keyword(null, "min", "min", 444991522)).cljs$core$IFn$_invoke$arity$1(this$);
    var n = (new cljs.core.Keyword(null, "max", "max", 61366548)).cljs$core$IFn$_invoke$arity$1(this$);
    if (m === 0) {
      instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
      if (n >= 1) {
        return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.RepFullListener.call(null, empty_cat_result_28912, parser, 1, n, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
      } else {
        return null;
      }
    } else {
      return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.RepFullListener.call(null, empty_cat_result_28912, parser, m, n, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
    }
  };
}(empty_cat_result_28912);
instaparse.gll.star_parse = function(empty_cat_result_28912) {
  return function star_parse(this$, index, tramp) {
    var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
    instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.PlusListener.call(null, empty_cat_result_28912, parser, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
  };
}(empty_cat_result_28912);
instaparse.gll.star_full_parse = function(empty_cat_result_28912) {
  return function star_full_parse(this$, index, tramp) {
    var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
    if (cljs.core._EQ_.call(null, index, cljs.core.count.call(null, (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(tramp)))) {
      return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
    } else {
      return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.PlusFullListener.call(null, empty_cat_result_28912, parser, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
    }
  };
}(empty_cat_result_28912);
instaparse.gll.alt_parse = function alt_parse(this$, index, tramp) {
  var parsers = (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(this$);
  var seq__28917 = cljs.core.seq.call(null, parsers);
  var chunk__28918 = null;
  var count__28919 = 0;
  var i__28920 = 0;
  while (true) {
    if (i__28920 < count__28919) {
      var parser = cljs.core._nth.call(null, chunk__28918, i__28920);
      instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
      var G__28921 = seq__28917;
      var G__28922 = chunk__28918;
      var G__28923 = count__28919;
      var G__28924 = i__28920 + 1;
      seq__28917 = G__28921;
      chunk__28918 = G__28922;
      count__28919 = G__28923;
      i__28920 = G__28924;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__28917);
      if (temp__4126__auto__) {
        var seq__28917__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__28917__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__28917__$1);
          var G__28925 = cljs.core.chunk_rest.call(null, seq__28917__$1);
          var G__28926 = c__4410__auto__;
          var G__28927 = cljs.core.count.call(null, c__4410__auto__);
          var G__28928 = 0;
          seq__28917 = G__28925;
          chunk__28918 = G__28926;
          count__28919 = G__28927;
          i__28920 = G__28928;
          continue;
        } else {
          var parser = cljs.core.first.call(null, seq__28917__$1);
          instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
          var G__28929 = cljs.core.next.call(null, seq__28917__$1);
          var G__28930 = null;
          var G__28931 = 0;
          var G__28932 = 0;
          seq__28917 = G__28929;
          chunk__28918 = G__28930;
          count__28919 = G__28931;
          i__28920 = G__28932;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
instaparse.gll.alt_full_parse = function alt_full_parse(this$, index, tramp) {
  var parsers = (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(this$);
  var seq__28937 = cljs.core.seq.call(null, parsers);
  var chunk__28938 = null;
  var count__28939 = 0;
  var i__28940 = 0;
  while (true) {
    if (i__28940 < count__28939) {
      var parser = cljs.core._nth.call(null, chunk__28938, i__28940);
      instaparse.gll.push_full_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
      var G__28941 = seq__28937;
      var G__28942 = chunk__28938;
      var G__28943 = count__28939;
      var G__28944 = i__28940 + 1;
      seq__28937 = G__28941;
      chunk__28938 = G__28942;
      count__28939 = G__28943;
      i__28940 = G__28944;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__28937);
      if (temp__4126__auto__) {
        var seq__28937__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__28937__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__28937__$1);
          var G__28945 = cljs.core.chunk_rest.call(null, seq__28937__$1);
          var G__28946 = c__4410__auto__;
          var G__28947 = cljs.core.count.call(null, c__4410__auto__);
          var G__28948 = 0;
          seq__28937 = G__28945;
          chunk__28938 = G__28946;
          count__28939 = G__28947;
          i__28940 = G__28948;
          continue;
        } else {
          var parser = cljs.core.first.call(null, seq__28937__$1);
          instaparse.gll.push_full_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
          var G__28949 = cljs.core.next.call(null, seq__28937__$1);
          var G__28950 = null;
          var G__28951 = 0;
          var G__28952 = 0;
          seq__28937 = G__28949;
          chunk__28938 = G__28950;
          count__28939 = G__28951;
          i__28940 = G__28952;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
instaparse.gll.ordered_alt_parse = function ordered_alt_parse(this$, index, tramp) {
  var parser1 = (new cljs.core.Keyword(null, "parser1", "parser1", -439601422)).cljs$core$IFn$_invoke$arity$1(this$);
  var parser2 = (new cljs.core.Keyword(null, "parser2", "parser2", 1013754688)).cljs$core$IFn$_invoke$arity$1(this$);
  var node_key_parser1 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser1], null);
  var node_key_parser2 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser2], null);
  var listener = instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp);
  instaparse.gll.push_listener.call(null, tramp, node_key_parser1, listener);
  return instaparse.gll.push_negative_listener.call(null, tramp, function(parser1, parser2, node_key_parser1, node_key_parser2, listener) {
    return function() {
      return instaparse.gll.push_listener.call(null, tramp, node_key_parser2, listener);
    };
  }(parser1, parser2, node_key_parser1, node_key_parser2, listener));
};
instaparse.gll.ordered_alt_full_parse = function ordered_alt_full_parse(this$, index, tramp) {
  var parser1 = (new cljs.core.Keyword(null, "parser1", "parser1", -439601422)).cljs$core$IFn$_invoke$arity$1(this$);
  var parser2 = (new cljs.core.Keyword(null, "parser2", "parser2", 1013754688)).cljs$core$IFn$_invoke$arity$1(this$);
  var node_key_parser1 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser1], null);
  var node_key_parser2 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser2], null);
  var listener = instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp);
  instaparse.gll.push_full_listener.call(null, tramp, node_key_parser1, listener);
  return instaparse.gll.push_negative_listener.call(null, tramp, function(parser1, parser2, node_key_parser1, node_key_parser2, listener) {
    return function() {
      return instaparse.gll.push_full_listener.call(null, tramp, node_key_parser2, listener);
    };
  }(parser1, parser2, node_key_parser1, node_key_parser2, listener));
};
instaparse.gll.opt_parse = function opt_parse(this$, index, tramp) {
  var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
  instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
  return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
};
instaparse.gll.opt_full_parse = function opt_full_parse(this$, index, tramp) {
  var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
  instaparse.gll.push_full_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
  if (cljs.core._EQ_.call(null, index, cljs.core.count.call(null, (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(tramp)))) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "optional", "optional", 2053951509), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), new cljs.core.Keyword(null, "end-of-string", "end-of-string", 1567354241)], null));
  }
};
instaparse.gll.non_terminal_parse = function non_terminal_parse(this$, index, tramp) {
  var parser = instaparse.gll.get_parser.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(tramp), (new cljs.core.Keyword(null, "keyword", "keyword", 811389747)).cljs$core$IFn$_invoke$arity$1(this$));
  return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
};
instaparse.gll.non_terminal_full_parse = function non_terminal_full_parse(this$, index, tramp) {
  var parser = instaparse.gll.get_parser.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(tramp), (new cljs.core.Keyword(null, "keyword", "keyword", 811389747)).cljs$core$IFn$_invoke$arity$1(this$));
  return instaparse.gll.push_full_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
};
instaparse.gll.lookahead_parse = function lookahead_parse(this$, index, tramp) {
  var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
  return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.LookListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
};
instaparse.gll.lookahead_full_parse = function lookahead_full_parse(this$, index, tramp) {
  if (cljs.core._EQ_.call(null, index, cljs.core.count.call(null, (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(tramp)))) {
    return instaparse.gll.lookahead_parse.call(null, this$, index, tramp);
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "lookahead", "lookahead", -400102393), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), new cljs.core.Keyword(null, "end-of-string", "end-of-string", 1567354241)], null));
  }
};
instaparse.gll.negative_lookahead_parse = function negative_lookahead_parse(this$, index, tramp) {
  var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
  var node_key = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null);
  if (cljs.core.truth_(instaparse.gll.result_exists_QMARK_.call(null, tramp, node_key))) {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "negative-lookahead", "negative-lookahead", 874382387)], null));
  } else {
    instaparse.gll.push_listener.call(null, tramp, node_key, function() {
      var fail_send = new cljs.core.Delay(function(parser, node_key) {
        return function() {
          return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "negative-lookahead", "negative-lookahead", 874382387), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "NOT", "NOT", 
          -1689245341), instaparse.print.combinators__GT_str.call(null, parser)], null)], null));
        };
      }(parser, node_key), null);
      return function(fail_send, parser, node_key) {
        return function(result) {
          return cljs.core.force.call(null, fail_send);
        };
      }(fail_send, parser, node_key);
    }());
    return instaparse.gll.push_negative_listener.call(null, tramp, function(parser, node_key) {
      return function() {
        if (cljs.core.not.call(null, instaparse.gll.result_exists_QMARK_.call(null, tramp, node_key))) {
          return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
        } else {
          return null;
        }
      };
    }(parser, node_key));
  }
};
instaparse.gll.epsilon_parse = function epsilon_parse(this$, index, tramp) {
  return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
};
instaparse.gll.epsilon_full_parse = function epsilon_full_parse(this$, index, tramp) {
  if (cljs.core._EQ_.call(null, index, cljs.core.count.call(null, (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(tramp)))) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "Epsilon", "Epsilon", 133418452), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), new cljs.core.Keyword(null, "end-of-string", "end-of-string", 1567354241)], null));
  }
};
instaparse.gll.start_parser = function start_parser(tramp, parser, partial_QMARK_) {
  if (cljs.core.truth_(partial_QMARK_)) {
    return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, parser], null), instaparse.gll.TopListener.call(null, tramp));
  } else {
    return instaparse.gll.push_full_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, parser], null), instaparse.gll.TopListener.call(null, tramp));
  }
};
instaparse.gll.parses = function parses(grammar, start, text, partial_QMARK_) {
  var tramp = instaparse.gll.make_tramp.call(null, grammar, text);
  var parser = instaparse.combinators_source.nt.call(null, start);
  instaparse.gll.start_parser.call(null, tramp, parser, partial_QMARK_);
  var temp__4124__auto__ = instaparse.gll.run.call(null, tramp);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var all_parses = temp__4124__auto__;
    return all_parses;
  } else {
    return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, instaparse.failure.augment_failure.call(null, tramp.failure, text));
  }
};
instaparse.gll.parse = function parse(grammar, start, text, partial_QMARK_) {
  var tramp = instaparse.gll.make_tramp.call(null, grammar, text);
  var parser = instaparse.combinators_source.nt.call(null, start);
  instaparse.gll.start_parser.call(null, tramp, parser, partial_QMARK_);
  var temp__4124__auto__ = instaparse.gll.run.call(null, tramp);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var all_parses = temp__4124__auto__;
    return cljs.core.first.call(null, all_parses);
  } else {
    return instaparse.failure.augment_failure.call(null, tramp.failure, text);
  }
};
instaparse.gll.build_node_with_meta = function build_node_with_meta(node_builder, tag, content, start, end) {
  return cljs.core.with_meta.call(null, node_builder.call(null, tag, content), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("instaparse.gll", "start-index", "instaparse.gll/start-index", 404653620), start, new cljs.core.Keyword("instaparse.gll", "end-index", "instaparse.gll/end-index", -1851404441), end], null));
};
instaparse.gll.build_total_failure_node = function build_total_failure_node(node_builder, start, text) {
  var build_failure_node = instaparse.gll.build_node_with_meta.call(null, node_builder, new cljs.core.Keyword("instaparse", "failure", "instaparse/failure", 1422918607), text, 0, cljs.core.count.call(null, text));
  var build_start_node = instaparse.gll.build_node_with_meta.call(null, node_builder, start, build_failure_node, 0, cljs.core.count.call(null, text));
  return build_start_node;
};
instaparse.gll.parses_total_after_fail = function parses_total_after_fail(grammar, start, text, fail_index, partial_QMARK_, node_builder) {
  var tramp = instaparse.gll.make_tramp.call(null, grammar, text, fail_index, node_builder);
  var parser = instaparse.combinators_source.nt.call(null, start);
  instaparse.gll.start_parser.call(null, tramp, parser, partial_QMARK_);
  var temp__4124__auto__ = instaparse.gll.run.call(null, tramp);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var all_parses = temp__4124__auto__;
    return all_parses;
  } else {
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, instaparse.gll.build_total_failure_node.call(null, node_builder, start, text));
  }
};
instaparse.gll.merge_meta = function merge_meta(obj, metamap) {
  return cljs.core.with_meta.call(null, obj, cljs.core.merge.call(null, metamap, cljs.core.meta.call(null, obj)));
};
instaparse.gll.parses_total = function parses_total(grammar, start, text, partial_QMARK_, node_builder) {
  var all_parses = instaparse.gll.parses.call(null, grammar, start, text, partial_QMARK_);
  if (cljs.core.seq.call(null, all_parses)) {
    return all_parses;
  } else {
    return instaparse.gll.merge_meta.call(null, instaparse.gll.parses_total_after_fail.call(null, grammar, start, text, (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, all_parses)), partial_QMARK_, node_builder), cljs.core.meta.call(null, all_parses));
  }
};
instaparse.gll.parse_total_after_fail = function parse_total_after_fail(grammar, start, text, fail_index, partial_QMARK_, node_builder) {
  var tramp = instaparse.gll.make_tramp.call(null, grammar, text, fail_index, node_builder);
  var parser = instaparse.combinators_source.nt.call(null, start);
  instaparse.gll.start_parser.call(null, tramp, parser, partial_QMARK_);
  var temp__4124__auto__ = instaparse.gll.run.call(null, tramp);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var all_parses = temp__4124__auto__;
    return cljs.core.first.call(null, all_parses);
  } else {
    return instaparse.gll.build_total_failure_node.call(null, node_builder, start, text);
  }
};
instaparse.gll.parse_total = function parse_total(grammar, start, text, partial_QMARK_, node_builder) {
  var result = instaparse.gll.parse.call(null, grammar, start, text, partial_QMARK_);
  if (!(result instanceof instaparse.gll.Failure)) {
    return result;
  } else {
    return instaparse.gll.merge_meta.call(null, instaparse.gll.parse_total_after_fail.call(null, grammar, start, text, (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(result), partial_QMARK_, node_builder), result);
  }
};
goog.provide("instaparse.transform");
goog.require("cljs.core");
goog.require("instaparse.gll");
instaparse.transform.map_preserving_meta = function map_preserving_meta(f, l) {
  return cljs.core.with_meta.call(null, cljs.core.map.call(null, f, l), cljs.core.meta.call(null, l));
};
instaparse.transform.merge_meta = function merge_meta(obj, metamap) {
  if (function() {
    var G__29131 = obj;
    if (G__29131) {
      var bit__4304__auto__ = G__29131.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4304__auto__ || G__29131.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__29131.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__29131);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__29131);
    }
  }()) {
    return instaparse.gll.merge_meta.call(null, obj, metamap);
  } else {
    return obj;
  }
};
instaparse.transform.enlive_transform = function enlive_transform(transform_map, parse_tree) {
  var transform = transform_map.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parse_tree));
  if (cljs.core.truth_(transform)) {
    return instaparse.transform.merge_meta.call(null, cljs.core.apply.call(null, transform, cljs.core.map.call(null, cljs.core.partial.call(null, enlive_transform, transform_map), (new cljs.core.Keyword(null, "content", "content", 15833224)).cljs$core$IFn$_invoke$arity$1(parse_tree))), cljs.core.meta.call(null, parse_tree));
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parse_tree))) {
      return cljs.core.assoc.call(null, parse_tree, new cljs.core.Keyword(null, "content", "content", 15833224), cljs.core.map.call(null, cljs.core.partial.call(null, enlive_transform, transform_map), (new cljs.core.Keyword(null, "content", "content", 15833224)).cljs$core$IFn$_invoke$arity$1(parse_tree)));
    } else {
      return parse_tree;
    }
  }
};
instaparse.transform.hiccup_transform = function hiccup_transform(transform_map, parse_tree) {
  var transform = transform_map.call(null, cljs.core.first.call(null, parse_tree));
  if (cljs.core.truth_(transform)) {
    return instaparse.transform.merge_meta.call(null, cljs.core.apply.call(null, transform, cljs.core.map.call(null, cljs.core.partial.call(null, hiccup_transform, transform_map), cljs.core.next.call(null, parse_tree))), cljs.core.meta.call(null, parse_tree));
  } else {
    if (cljs.core.sequential_QMARK_.call(null, parse_tree) && cljs.core.seq.call(null, parse_tree)) {
      return cljs.core.with_meta.call(null, cljs.core.into.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, parse_tree)], null), cljs.core.map.call(null, cljs.core.partial.call(null, hiccup_transform, transform_map), cljs.core.next.call(null, parse_tree))), cljs.core.meta.call(null, parse_tree));
    } else {
      return parse_tree;
    }
  }
};
instaparse.transform.transform = function transform(transform_map, parse_tree) {
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = cljs.core.map_QMARK_.call(null, parse_tree);
    if (and__3628__auto__) {
      return(new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parse_tree);
    } else {
      return and__3628__auto__;
    }
  }())) {
    return instaparse.transform.enlive_transform.call(null, transform_map, parse_tree);
  } else {
    if (cljs.core.vector_QMARK_.call(null, parse_tree) && cljs.core.first.call(null, parse_tree) instanceof cljs.core.Keyword) {
      return instaparse.transform.hiccup_transform.call(null, transform_map, parse_tree);
    } else {
      if (cljs.core.sequential_QMARK_.call(null, parse_tree)) {
        return instaparse.transform.map_preserving_meta.call(null, cljs.core.partial.call(null, transform, transform_map), parse_tree);
      } else {
        if (parse_tree instanceof instaparse.gll.Failure) {
          return parse_tree;
        } else {
          throw "Invalid parse-tree, not recognized as either enlive or hiccup format.";
        }
      }
    }
  }
};
goog.provide("cljs.looperscript.address_bar");
goog.require("cljs.core");
goog.require("domina");
goog.require("domina");
cljs.looperscript.address_bar.default_loop_text = "bpm 237/.5\npart click sound h time 2 volume .5 1\npart form sound b rate .3 .6 .6 .6 time 8/1 8\npart beat sound d\ntime 2 3 2 3 2 2 3";
cljs.looperscript.address_bar.put_text_in_get = function put_text_in_get(s) {
  var preface = document["location"]["pathname"];
  return history.pushState(new Object, "", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(preface) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s));
};
cljs.looperscript.address_bar.text__GT_link = function text__GT_link() {
  var text = escape(btoa(editor.getValue()));
  return cljs.looperscript.address_bar.put_text_in_get.call(null, "?loop\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(text));
};
cljs.looperscript.address_bar.get_text_from_get = function get_text_from_get() {
  var t = cljs.core.last.call(null, cljs.core.re_find.call(null, /^\?loop=([\s\S]*)/, document["location"]["search"]));
  if (cljs.core.truth_(t)) {
    return atob(unescape(t));
  } else {
    return null;
  }
};
cljs.looperscript.address_bar.set_loop_text = function set_loop_text(s) {
  editor.setValue(s);
  editor.moveCursorTo(0, 0);
  return editor.clearSelection();
};
cljs.looperscript.address_bar.load_link__GT_text = function load_link__GT_text(default$) {
  var get_text = cljs.looperscript.address_bar.get_text_from_get.call(null);
  var loop_text = function() {
    var or__3640__auto__ = get_text;
    if (cljs.core.truth_(or__3640__auto__)) {
      return or__3640__auto__;
    } else {
      return default$;
    }
  }();
  return cljs.looperscript.address_bar.set_loop_text.call(null, loop_text);
};
cljs.looperscript.address_bar.load_link__GT_text.call(null, cljs.looperscript.address_bar.default_loop_text);
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj29266 = {};
  return obj29266;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__3628__auto__ = reader;
    if (and__3628__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4277__auto__ = reader == null ? null : reader;
    return function() {
      var or__3640__auto__ = cljs.reader.read_char[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.reader.read_char["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__3628__auto__ = reader;
    if (and__3628__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4277__auto__ = reader == null ? null : reader;
    return function() {
      var or__3640__auto__ = cljs.reader.unread[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.reader.unread["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__3640__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__3640__auto__)) {
    return or__3640__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__29267) {
    var rdr = cljs.core.first(arglist__29267);
    var msg = cljs.core.rest(arglist__29267);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__3628__auto__ = !(ch === "#");
  if (and__3628__auto__) {
    var and__3628__auto____$1 = !(ch === "'");
    if (and__3628__auto____$1) {
      var and__3628__auto____$2 = !(ch === ":");
      if (and__3628__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__3628__auto____$2;
      }
    } else {
      return and__3628__auto____$1;
    }
  } else {
    return and__3628__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__29268 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__29269 = cljs.reader.read_char.call(null, rdr);
      sb = G__29268;
      ch = G__29269;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var ie8_fix = groups[2];
  var zero = cljs.core._EQ_.call(null, ie8_fix, "") ? null : ie8_fix;
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : [null, null];
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return-parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__29270 = cljs.reader.read_char.call(null, rdr);
      ch = G__29270;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4124__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var macrofn = temp__4124__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__29271 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__29271;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__29272 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__29272;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4124__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var obj = temp__4124__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__3640__auto__ = ch == null;
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__3640__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__29273 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__29274 = cljs.reader.read_char.call(null, reader);
      buffer = G__29273;
      ch = G__29274;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__29275 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__29276 = cljs.reader.read_char.call(null, reader);
        buffer = G__29275;
        ch = G__29276;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__29277 = function() {
            buffer.append(ch);
            return buffer;
          }();
          var G__29278 = cljs.reader.read_char.call(null, reader);
          buffer = G__29277;
          ch = G__29278;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__29283 = function() {
            var G__29281 = buffer;
            G__29281.append(nch);
            return G__29281;
          }();
          var G__29284 = cljs.reader.read_char.call(null, reader);
          buffer = G__29283;
          ch = G__29284;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__29285 = function() {
            var G__29282 = buffer;
            G__29282.append(ch);
            return G__29282;
          }();
          var G__29286 = cljs.reader.read_char.call(null, reader);
          buffer = G__29285;
          ch = G__29286;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        return not_found;
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        return f;
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__29288 = o;
    if (G__29288) {
      var bit__4304__auto__ = G__29288.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4304__auto__ || G__29288.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__29288.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__29288);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__29288);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__29289 = reader;
        var G__29290 = eof_is_error;
        var G__29291 = sentinel;
        var G__29292 = is_recursive;
        reader = G__29289;
        eof_is_error = G__29290;
        sentinel = G__29291;
        is_recursive = G__29292;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__29293 = cljs.reader.read_comment.call(null, reader, ch);
          var G__29294 = eof_is_error;
          var G__29295 = sentinel;
          var G__29296 = is_recursive;
          reader = G__29293;
          eof_is_error = G__29294;
          sentinel = G__29295;
          is_recursive = G__29296;
          continue;
        } else {
          var f = cljs.reader.macros.call(null, ch);
          var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : cljs.reader.read_symbol.call(null, reader, ch);
          if (res === reader) {
            var G__29297 = reader;
            var G__29298 = eof_is_error;
            var G__29299 = sentinel;
            var G__29300 = is_recursive;
            reader = G__29297;
            eof_is_error = G__29298;
            sentinel = G__29299;
            is_recursive = G__29300;
            continue;
          } else {
            return res;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      var b = new goog.string.StringBuffer(s);
      while (true) {
        if (b.getLength() < width) {
          var G__29301 = b.append("0");
          b = G__29301;
          continue;
        } else {
          return b.toString();
        }
        break;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(msg) + " Failed:  " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(low) + "\x3c\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + "\x3c\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(high));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__29303 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__29303, 0, null);
  var years = cljs.core.nth.call(null, vec__29303, 1, null);
  var months = cljs.core.nth.call(null, vec__29303, 2, null);
  var days = cljs.core.nth.call(null, vec__29303, 3, null);
  var hours = cljs.core.nth.call(null, vec__29303, 4, null);
  var minutes = cljs.core.nth.call(null, vec__29303, 5, null);
  var seconds = cljs.core.nth.call(null, vec__29303, 6, null);
  var fraction = cljs.core.nth.call(null, vec__29303, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__29303, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__29303, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__29303, 10, null);
  var v = vec__29303;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, "Unrecognized date/time syntax: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__3640__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__3640__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__3640__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__3640__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__3640__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__3640__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__3640__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__3640__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4124__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var vec__29305 = temp__4124__auto__;
    var years = cljs.core.nth.call(null, vec__29305, 0, null);
    var months = cljs.core.nth.call(null, vec__29305, 1, null);
    var days = cljs.core.nth.call(null, vec__29305, 2, null);
    var hours = cljs.core.nth.call(null, vec__29305, 3, null);
    var minutes = cljs.core.nth.call(null, vec__29305, 4, null);
    var seconds = cljs.core.nth.call(null, vec__29305, 5, null);
    var ms = cljs.core.nth.call(null, vec__29305, 6, null);
    var offset = cljs.core.nth.call(null, vec__29305, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, "Unrecognized date/time syntax: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ts));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__29318_29330 = cljs.core.seq.call(null, form);
    var chunk__29319_29331 = null;
    var count__29320_29332 = 0;
    var i__29321_29333 = 0;
    while (true) {
      if (i__29321_29333 < count__29320_29332) {
        var x_29334 = cljs.core._nth.call(null, chunk__29319_29331, i__29321_29333);
        arr.push(x_29334);
        var G__29335 = seq__29318_29330;
        var G__29336 = chunk__29319_29331;
        var G__29337 = count__29320_29332;
        var G__29338 = i__29321_29333 + 1;
        seq__29318_29330 = G__29335;
        chunk__29319_29331 = G__29336;
        count__29320_29332 = G__29337;
        i__29321_29333 = G__29338;
        continue;
      } else {
        var temp__4126__auto___29339 = cljs.core.seq.call(null, seq__29318_29330);
        if (temp__4126__auto___29339) {
          var seq__29318_29340__$1 = temp__4126__auto___29339;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__29318_29340__$1)) {
            var c__4410__auto___29341 = cljs.core.chunk_first.call(null, seq__29318_29340__$1);
            var G__29342 = cljs.core.chunk_rest.call(null, seq__29318_29340__$1);
            var G__29343 = c__4410__auto___29341;
            var G__29344 = cljs.core.count.call(null, c__4410__auto___29341);
            var G__29345 = 0;
            seq__29318_29330 = G__29342;
            chunk__29319_29331 = G__29343;
            count__29320_29332 = G__29344;
            i__29321_29333 = G__29345;
            continue;
          } else {
            var x_29346 = cljs.core.first.call(null, seq__29318_29340__$1);
            arr.push(x_29346);
            var G__29347 = cljs.core.next.call(null, seq__29318_29340__$1);
            var G__29348 = null;
            var G__29349 = 0;
            var G__29350 = 0;
            seq__29318_29330 = G__29347;
            chunk__29319_29331 = G__29348;
            count__29320_29332 = G__29349;
            i__29321_29333 = G__29350;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj29323 = {};
        return obj29323;
      }();
      var seq__29324_29351 = cljs.core.seq.call(null, form);
      var chunk__29325_29352 = null;
      var count__29326_29353 = 0;
      var i__29327_29354 = 0;
      while (true) {
        if (i__29327_29354 < count__29326_29353) {
          var vec__29328_29355 = cljs.core._nth.call(null, chunk__29325_29352, i__29327_29354);
          var k_29356 = cljs.core.nth.call(null, vec__29328_29355, 0, null);
          var v_29357 = cljs.core.nth.call(null, vec__29328_29355, 1, null);
          obj[cljs.core.name.call(null, k_29356)] = v_29357;
          var G__29358 = seq__29324_29351;
          var G__29359 = chunk__29325_29352;
          var G__29360 = count__29326_29353;
          var G__29361 = i__29327_29354 + 1;
          seq__29324_29351 = G__29358;
          chunk__29325_29352 = G__29359;
          count__29326_29353 = G__29360;
          i__29327_29354 = G__29361;
          continue;
        } else {
          var temp__4126__auto___29362 = cljs.core.seq.call(null, seq__29324_29351);
          if (temp__4126__auto___29362) {
            var seq__29324_29363__$1 = temp__4126__auto___29362;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__29324_29363__$1)) {
              var c__4410__auto___29364 = cljs.core.chunk_first.call(null, seq__29324_29363__$1);
              var G__29365 = cljs.core.chunk_rest.call(null, seq__29324_29363__$1);
              var G__29366 = c__4410__auto___29364;
              var G__29367 = cljs.core.count.call(null, c__4410__auto___29364);
              var G__29368 = 0;
              seq__29324_29351 = G__29365;
              chunk__29325_29352 = G__29366;
              count__29326_29353 = G__29367;
              i__29327_29354 = G__29368;
              continue;
            } else {
              var vec__29329_29369 = cljs.core.first.call(null, seq__29324_29363__$1);
              var k_29370 = cljs.core.nth.call(null, vec__29329_29369, 0, null);
              var v_29371 = cljs.core.nth.call(null, vec__29329_29369, 1, null);
              obj[cljs.core.name.call(null, k_29370)] = v_29371;
              var G__29372 = cljs.core.next.call(null, seq__29324_29363__$1);
              var G__29373 = null;
              var G__29374 = 0;
              var G__29375 = 0;
              seq__29324_29351 = G__29372;
              chunk__29325_29352 = G__29373;
              count__29326_29353 = G__29374;
              i__29327_29354 = G__29375;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, null, "JS literal expects a vector or map containing only string or unqualified keyword keys");
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag);
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag);
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("instaparse.cfg");
goog.require("cljs.core");
goog.require("instaparse.gll");
goog.require("instaparse.reduction");
goog.require("instaparse.combinators_source");
goog.require("cljs.reader");
goog.require("cljs.reader");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("instaparse.gll");
goog.require("instaparse.reduction");
goog.require("instaparse.combinators_source");
instaparse.cfg._STAR_case_insensitive_literals_STAR_ = false;
instaparse.cfg.single_quoted_string = /'[^'\\]*(?:\\.[^'\\]*)*'/;
instaparse.cfg.single_quoted_regexp = /#'[^'\\]*(?:\\.[^'\\]*)*'/;
instaparse.cfg.double_quoted_string = /\"[^\"\\]*(?:\\.[^\"\\]*)*\"/;
instaparse.cfg.double_quoted_regexp = /#\"[^\"\\]*(?:\\.[^\"\\]*)*\"/;
instaparse.cfg.inside_comment = /(?:(?!(?:\(\*|\*\)))[\s\S])*/;
instaparse.cfg.ws = "[,\\s]*";
instaparse.cfg.opt_whitespace = instaparse.combinators_source.hide.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "opt-whitespace", "opt-whitespace", 1115207927)));
instaparse.cfg.cfg = instaparse.reduction.apply_standard_reductions.call(null, new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "neg", "neg", 1800032960), new cljs.core.Keyword(null, "cat", "cat", -1457810207), new cljs.core.Keyword(null, "ord", "ord", 1142548323), new cljs.core.Keyword(null, "rule-separator", "rule-separator", 1539322213), new cljs.core.Keyword(null, "alt", "alt", -3214426), new cljs.core.Keyword(null, 
"look", "look", -539441433), new cljs.core.Keyword(null, "rule", "rule", 729973257), new cljs.core.Keyword(null, "nt", "nt", -835425781), new cljs.core.Keyword(null, "hide-nt", "hide-nt", -228813845), new cljs.core.Keyword(null, "inside-comment", "inside-comment", 1258069708), new cljs.core.Keyword(null, "star", "star", 279424429), new cljs.core.Keyword(null, "string", "string", -1989541586), new cljs.core.Keyword(null, "rules", "rules", 1198912366), new cljs.core.Keyword(null, "hide", "hide", -596913169), 
new cljs.core.Keyword(null, "paren", "paren", -294107600), new cljs.core.Keyword(null, "alt-or-ord", "alt-or-ord", 310249425), new cljs.core.Keyword(null, "regexp", "regexp", -541372782), new cljs.core.Keyword(null, "factor", "factor", -2103172748), new cljs.core.Keyword(null, "comment", "comment", 532206069), new cljs.core.Keyword(null, "plus", "plus", 211540661), new cljs.core.Keyword(null, "epsilon", "epsilon", -730158570), new cljs.core.Keyword(null, "opt-whitespace", "opt-whitespace", 1115207927), 
new cljs.core.Keyword(null, "opt", "opt", -794706369)], [instaparse.combinators_source.cat.call(null, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "!")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "factor", "factor", -2103172748))), instaparse.combinators_source.plus.call(null, instaparse.combinators_source.cat.call(null, instaparse.cfg.opt_whitespace, instaparse.combinators_source.alt.call(null, 
instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "factor", "factor", -2103172748)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "look", "look", -539441433)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "neg", "neg", 1800032960))), instaparse.cfg.opt_whitespace)), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "cat", "cat", -1457810207)), instaparse.combinators_source.plus.call(null, 
instaparse.combinators_source.cat.call(null, instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "/")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "cat", "cat", -1457810207))))), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.string.call(null, ":"), instaparse.combinators_source.string.call(null, ":\x3d"), instaparse.combinators_source.string.call(null, 
"::\x3d"), instaparse.combinators_source.string.call(null, "\x3d")), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "cat", "cat", -1457810207)), instaparse.combinators_source.star.call(null, instaparse.combinators_source.cat.call(null, instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "|")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, 
new cljs.core.Keyword(null, "cat", "cat", -1457810207))))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "\x26")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "factor", "factor", -2103172748))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.alt.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, 
"nt", "nt", -835425781)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "hide-nt", "hide-nt", -228813845))), instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "rule-separator", "rule-separator", 1539322213))), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "alt-or-ord", "alt-or-ord", 310249425)), instaparse.combinators_source.hide.call(null, 
instaparse.combinators_source.alt.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "opt-whitespace", "opt-whitespace", 1115207927)), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "opt-whitespace", "opt-whitespace", 1115207927)), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.string.call(null, ";"), instaparse.combinators_source.string.call(null, ".")), instaparse.combinators_source.nt.call(null, 
new cljs.core.Keyword(null, "opt-whitespace", "opt-whitespace", 1115207927)))))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.neg.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "epsilon", "epsilon", -730158570))), instaparse.combinators_source.regexp.call(null, "[^, \\r\\t\\n\x3c\x3e(){}\\[\\]+*?:\x3d|'\"#\x26!;./]+")), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, 
"\x3c")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "nt", "nt", -835425781)), instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "\x3e"))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.regexp.call(null, instaparse.cfg.inside_comment), instaparse.combinators_source.star.call(null, instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, 
new cljs.core.Keyword(null, "comment", "comment", 532206069)), instaparse.combinators_source.regexp.call(null, instaparse.cfg.inside_comment)))), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.cat.call(null, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "{")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "alt-or-ord", "alt-or-ord", 310249425)), instaparse.cfg.opt_whitespace, 
instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "}"))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "factor", "factor", -2103172748)), instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "*")))), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.regexp.call(null, instaparse.cfg.single_quoted_string), 
instaparse.combinators_source.regexp.call(null, instaparse.cfg.double_quoted_string)), instaparse.combinators_source.hide_tag.call(null, instaparse.combinators_source.cat.call(null, instaparse.cfg.opt_whitespace, instaparse.combinators_source.plus.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "rule", "rule", 729973257))))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, 
"\x3c")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "alt-or-ord", "alt-or-ord", 310249425)), instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "\x3e"))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "(")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, 
new cljs.core.Keyword(null, "alt-or-ord", "alt-or-ord", 310249425)), instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, ")"))), instaparse.combinators_source.hide_tag.call(null, instaparse.combinators_source.alt.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "alt", "alt", -3214426)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "ord", "ord", 1142548323)))), instaparse.combinators_source.alt.call(null, 
instaparse.combinators_source.regexp.call(null, instaparse.cfg.single_quoted_regexp), instaparse.combinators_source.regexp.call(null, instaparse.cfg.double_quoted_regexp)), instaparse.combinators_source.hide_tag.call(null, instaparse.combinators_source.alt.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "nt", "nt", -835425781)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "string", "string", -1989541586)), instaparse.combinators_source.nt.call(null, 
new cljs.core.Keyword(null, "regexp", "regexp", -541372782)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "opt", "opt", -794706369)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "star", "star", 279424429)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "plus", "plus", 211540661)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "paren", "paren", -294107600)), instaparse.combinators_source.nt.call(null, 
new cljs.core.Keyword(null, "hide", "hide", -596913169)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "epsilon", "epsilon", -730158570)))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.string.call(null, "(*"), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "inside-comment", "inside-comment", 1258069708)), instaparse.combinators_source.string.call(null, "*)")), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, 
new cljs.core.Keyword(null, "factor", "factor", -2103172748)), instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "+"))), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.string.call(null, "Epsilon"), instaparse.combinators_source.string.call(null, "epsilon"), instaparse.combinators_source.string.call(null, "EPSILON"), instaparse.combinators_source.string.call(null, "eps"), instaparse.combinators_source.string.call(null, 
"\u03b5")), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.regexp.call(null, instaparse.cfg.ws), instaparse.combinators_source.star.call(null, instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "comment", "comment", 532206069)), instaparse.combinators_source.regexp.call(null, instaparse.cfg.ws)))), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.cat.call(null, instaparse.combinators_source.hide.call(null, 
instaparse.combinators_source.string.call(null, "[")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "alt-or-ord", "alt-or-ord", 310249425)), instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "]"))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "factor", "factor", -2103172748)), instaparse.cfg.opt_whitespace, 
instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "?"))))]));
instaparse.cfg.tag = cljs.core.first;
instaparse.cfg.contents = cljs.core.next;
instaparse.cfg.content = cljs.core.fnext;
instaparse.cfg.escape = function escape__$1(s) {
  var sq = cljs.core.seq.call(null, s);
  var v = cljs.core.PersistentVector.EMPTY;
  while (true) {
    var temp__4124__auto__ = cljs.core.first.call(null, sq);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var c = temp__4124__auto__;
      var G__29066 = c;
      switch(G__29066) {
        case "\\":
          var temp__4124__auto____$1 = cljs.core.second.call(null, sq);
          if (cljs.core.truth_(temp__4124__auto____$1)) {
            var c2 = temp__4124__auto____$1;
            if (cljs.core._EQ_.call(null, c2, "'")) {
              var G__29068 = cljs.core.drop.call(null, 2, sq);
              var G__29069 = cljs.core.conj.call(null, v, c2);
              sq = G__29068;
              v = G__29069;
              continue;
            } else {
              var G__29070 = cljs.core.drop.call(null, 2, sq);
              var G__29071 = cljs.core.conj.call(null, v, c, c2);
              sq = G__29070;
              v = G__29071;
              continue;
            }
          } else {
            throw "Encountered backslash character at end of string:" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s);
          }
          break;
        case '"':
          var G__29072 = cljs.core.next.call(null, sq);
          var G__29073 = cljs.core.conj.call(null, v, "\\", '"');
          sq = G__29072;
          v = G__29073;
          continue;
          break;
        default:
          var G__29074 = cljs.core.next.call(null, sq);
          var G__29075 = cljs.core.conj.call(null, v, c);
          sq = G__29074;
          v = G__29075;
          continue;
      }
    } else {
      return cljs.core.apply.call(null, cljs.core.str, v);
    }
    break;
  }
};
instaparse.cfg.safe_read_string = function safe_read_string(s) {
  return cljs.reader.read_string_STAR_.call(null, cljs.reader.push_back_reader.call(null, s), null);
};
instaparse.cfg.process_string = function process_string(s) {
  var stripped = cljs.core.subs.call(null, s, 1, cljs.core.count.call(null, s) - 1);
  var remove_escaped_single_quotes = instaparse.cfg.escape.call(null, stripped);
  var final_string = instaparse.cfg.safe_read_string.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(remove_escaped_single_quotes) + '"');
  return final_string;
};
instaparse.cfg.process_regexp = function process_regexp(s) {
  var stripped = cljs.core.subs.call(null, s, 2, cljs.core.count.call(null, s) - 1);
  var remove_escaped_single_quotes = instaparse.cfg.escape.call(null, stripped);
  var final_string = cljs.core.re_pattern.call(null, remove_escaped_single_quotes);
  return final_string;
};
instaparse.cfg.build_rule = function build_rule(tree) {
  while (true) {
    var G__29078 = instaparse.cfg.tag.call(null, tree) instanceof cljs.core.Keyword ? instaparse.cfg.tag.call(null, tree).fqn : null;
    switch(G__29078) {
      case "neg":
        return instaparse.combinators_source.neg.call(null, build_rule.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "cat":
        return cljs.core.apply.call(null, instaparse.combinators_source.cat, cljs.core.map.call(null, build_rule, instaparse.cfg.contents.call(null, tree)));
        break;
      case "ord":
        return cljs.core.apply.call(null, instaparse.combinators_source.ord, cljs.core.map.call(null, build_rule, instaparse.cfg.contents.call(null, tree)));
        break;
      case "alt":
        return cljs.core.apply.call(null, instaparse.combinators_source.alt, cljs.core.map.call(null, build_rule, instaparse.cfg.contents.call(null, tree)));
        break;
      case "look":
        return instaparse.combinators_source.look.call(null, build_rule.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "rule":
        var vec__29079 = instaparse.cfg.contents.call(null, tree);
        var nt = cljs.core.nth.call(null, vec__29079, 0, null);
        var alt_or_ord = cljs.core.nth.call(null, vec__29079, 1, null);
        if (cljs.core._EQ_.call(null, instaparse.cfg.tag.call(null, nt), new cljs.core.Keyword(null, "hide-nt", "hide-nt", -228813845))) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, instaparse.cfg.content.call(null, instaparse.cfg.content.call(null, nt))), instaparse.combinators_source.hide_tag.call(null, build_rule.call(null, alt_or_ord))], null);
        } else {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, instaparse.cfg.content.call(null, nt)), build_rule.call(null, alt_or_ord)], null);
        }
        break;
      case "nt":
        return instaparse.combinators_source.nt.call(null, cljs.core.keyword.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "star":
        return instaparse.combinators_source.star.call(null, build_rule.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "string":
        return(cljs.core.truth_(instaparse.cfg._STAR_case_insensitive_literals_STAR_) ? instaparse.combinators_source.string_ci : instaparse.combinators_source.string).call(null, instaparse.cfg.process_string.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "hide":
        return instaparse.combinators_source.hide.call(null, build_rule.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "paren":
        var G__29081 = instaparse.cfg.content.call(null, tree);
        tree = G__29081;
        continue;
        break;
      case "regexp":
        return instaparse.combinators_source.regexp.call(null, instaparse.cfg.process_regexp.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "plus":
        return instaparse.combinators_source.plus.call(null, build_rule.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "epsilon":
        return instaparse.combinators_source.Epsilon;
        break;
      case "opt":
        return instaparse.combinators_source.opt.call(null, build_rule.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      default:
        throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.cfg.tag.call(null, tree)));;
    }
    break;
  }
};
instaparse.cfg.seq_nt = function seq_nt(parser) {
  while (true) {
    var G__29083 = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser).fqn : null;
    switch(G__29083) {
      case "neg":
        var G__29085 = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser);
        parser = G__29085;
        continue;
        break;
      case "cat":
        return cljs.core.mapcat.call(null, seq_nt, (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(parser));
        break;
      case "ord":
        return cljs.core.mapcat.call(null, seq_nt, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "parser1", "parser1", -439601422)).cljs$core$IFn$_invoke$arity$1(parser), (new cljs.core.Keyword(null, "parser2", "parser2", 1013754688)).cljs$core$IFn$_invoke$arity$1(parser)], null));
        break;
      case "alt":
        return cljs.core.mapcat.call(null, seq_nt, (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(parser));
        break;
      case "look":
        var G__29086 = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser);
        parser = G__29086;
        continue;
        break;
      case "nt":
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "keyword", "keyword", 811389747)).cljs$core$IFn$_invoke$arity$1(parser)], null);
        break;
      case "rep":
        var G__29087 = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser);
        parser = G__29087;
        continue;
        break;
      case "star":
        var G__29088 = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser);
        parser = G__29088;
        continue;
        break;
      case "string":
        return cljs.core.PersistentVector.EMPTY;
        break;
      case "regexp":
        return cljs.core.PersistentVector.EMPTY;
        break;
      case "plus":
        var G__29089 = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser);
        parser = G__29089;
        continue;
        break;
      case "epsilon":
        return cljs.core.PersistentVector.EMPTY;
        break;
      case "string-ci":
        return cljs.core.PersistentVector.EMPTY;
        break;
      case "opt":
        var G__29090 = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser);
        parser = G__29090;
        continue;
        break;
      default:
        throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser)));;
    }
    break;
  }
};
instaparse.cfg.check_grammar = function check_grammar(grammar_map) {
  var valid_nts_29099 = cljs.core.set.call(null, cljs.core.keys.call(null, grammar_map));
  var seq__29095_29100 = cljs.core.seq.call(null, cljs.core.distinct.call(null, cljs.core.mapcat.call(null, instaparse.cfg.seq_nt, cljs.core.vals.call(null, grammar_map))));
  var chunk__29096_29101 = null;
  var count__29097_29102 = 0;
  var i__29098_29103 = 0;
  while (true) {
    if (i__29098_29103 < count__29097_29102) {
      var nt_29104 = cljs.core._nth.call(null, chunk__29096_29101, i__29098_29103);
      if (cljs.core.truth_(valid_nts_29099.call(null, nt_29104))) {
      } else {
        throw "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.subs.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(nt_29104), 1)) + "occurs on the right-hand side of your grammar, but not on the left";
      }
      var G__29105 = seq__29095_29100;
      var G__29106 = chunk__29096_29101;
      var G__29107 = count__29097_29102;
      var G__29108 = i__29098_29103 + 1;
      seq__29095_29100 = G__29105;
      chunk__29096_29101 = G__29106;
      count__29097_29102 = G__29107;
      i__29098_29103 = G__29108;
      continue;
    } else {
      var temp__4126__auto___29109 = cljs.core.seq.call(null, seq__29095_29100);
      if (temp__4126__auto___29109) {
        var seq__29095_29110__$1 = temp__4126__auto___29109;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__29095_29110__$1)) {
          var c__4410__auto___29111 = cljs.core.chunk_first.call(null, seq__29095_29110__$1);
          var G__29112 = cljs.core.chunk_rest.call(null, seq__29095_29110__$1);
          var G__29113 = c__4410__auto___29111;
          var G__29114 = cljs.core.count.call(null, c__4410__auto___29111);
          var G__29115 = 0;
          seq__29095_29100 = G__29112;
          chunk__29096_29101 = G__29113;
          count__29097_29102 = G__29114;
          i__29098_29103 = G__29115;
          continue;
        } else {
          var nt_29116 = cljs.core.first.call(null, seq__29095_29110__$1);
          if (cljs.core.truth_(valid_nts_29099.call(null, nt_29116))) {
          } else {
            throw "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.subs.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(nt_29116), 1)) + "occurs on the right-hand side of your grammar, but not on the left";
          }
          var G__29117 = cljs.core.next.call(null, seq__29095_29110__$1);
          var G__29118 = null;
          var G__29119 = 0;
          var G__29120 = 0;
          seq__29095_29100 = G__29117;
          chunk__29096_29101 = G__29118;
          count__29097_29102 = G__29119;
          i__29098_29103 = G__29120;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return grammar_map;
};
instaparse.cfg.build_parser = function build_parser(spec, output_format) {
  var rules = instaparse.gll.parse.call(null, instaparse.cfg.cfg, new cljs.core.Keyword(null, "rules", "rules", 1198912366), spec, false);
  if (rules instanceof instaparse.gll.Failure) {
    throw "Error parsing grammar specification:\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
      var sb__4581__auto__ = new goog.string.StringBuffer;
      var _STAR_print_fn_STAR_29122_29123 = cljs.core._STAR_print_fn_STAR_;
      try {
        cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_fn_STAR_29122_29123, sb__4581__auto__, rules) {
          return function(x__4582__auto__) {
            return sb__4581__auto__.append(x__4582__auto__);
          };
        }(_STAR_print_fn_STAR_29122_29123, sb__4581__auto__, rules);
        cljs.core.println.call(null, rules);
      } finally {
        cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_29122_29123;
      }
      return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4581__auto__);
    }());
  } else {
    var productions = cljs.core.map.call(null, instaparse.cfg.build_rule, rules);
    var start_production = cljs.core.first.call(null, cljs.core.first.call(null, productions));
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), instaparse.cfg.check_grammar.call(null, instaparse.reduction.apply_standard_reductions.call(null, output_format, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, productions))), new cljs.core.Keyword(null, "start-production", "start-production", 687546537), start_production, new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), output_format], null);
  }
};
instaparse.cfg.build_parser_from_combinators = function build_parser_from_combinators(grammar_map, output_format, start_production) {
  if (start_production == null) {
    throw "When you build a parser from a map of parser combinators, you must provide a start production using the :start keyword argument.";
  } else {
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), instaparse.cfg.check_grammar.call(null, instaparse.reduction.apply_standard_reductions.call(null, output_format, grammar_map)), new cljs.core.Keyword(null, "start-production", "start-production", 687546537), start_production, new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), output_format], null);
  }
};
instaparse.cfg.ebnf = function ebnf(spec) {
  if (cljs.core.truth_(cljs.core.re_find.call(null, /[:=]/, spec))) {
    var rules = instaparse.gll.parse.call(null, instaparse.cfg.cfg, new cljs.core.Keyword(null, "rules", "rules", 1198912366), spec, false);
    if (rules instanceof instaparse.gll.Failure) {
      throw "Error parsing grammar specification:\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
        var sb__4581__auto__ = new goog.string.StringBuffer;
        var _STAR_print_fn_STAR_29126_29128 = cljs.core._STAR_print_fn_STAR_;
        try {
          cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_fn_STAR_29126_29128, sb__4581__auto__, rules) {
            return function(x__4582__auto__) {
              return sb__4581__auto__.append(x__4582__auto__);
            };
          }(_STAR_print_fn_STAR_29126_29128, sb__4581__auto__, rules);
          cljs.core.println.call(null, rules);
        } finally {
          cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_29126_29128;
        }
        return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4581__auto__);
      }());
    } else {
      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, instaparse.cfg.build_rule, rules));
    }
  } else {
    var rhs = instaparse.gll.parse.call(null, instaparse.cfg.cfg, new cljs.core.Keyword(null, "alt-or-ord", "alt-or-ord", 310249425), spec, false);
    if (rhs instanceof instaparse.gll.Failure) {
      throw "Error parsing grammar specification:\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
        var sb__4581__auto__ = new goog.string.StringBuffer;
        var _STAR_print_fn_STAR_29127_29129 = cljs.core._STAR_print_fn_STAR_;
        try {
          cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_fn_STAR_29127_29129, sb__4581__auto__, rhs) {
            return function(x__4582__auto__) {
              return sb__4581__auto__.append(x__4582__auto__);
            };
          }(_STAR_print_fn_STAR_29127_29129, sb__4581__auto__, rhs);
          cljs.core.println.call(null, rhs);
        } finally {
          cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_29127_29129;
        }
        return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4581__auto__);
      }());
    } else {
      return instaparse.cfg.build_rule.call(null, cljs.core.first.call(null, rhs));
    }
  }
};
goog.provide("instaparse.abnf");
goog.require("cljs.core");
goog.require("instaparse.combinators_source");
goog.require("instaparse.combinators_source");
goog.require("instaparse.reduction");
goog.require("instaparse.reduction");
goog.require("instaparse.gll");
goog.require("instaparse.gll");
goog.require("instaparse.cfg");
goog.require("instaparse.cfg");
goog.require("instaparse.transform");
goog.require("instaparse.transform");
instaparse.abnf._STAR_case_insensitive_STAR_ = false;
instaparse.abnf.abnf_core = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "CRLF", "CRLF", 11418756), new cljs.core.Keyword(null, "HTAB", "HTAB", 11392612), new cljs.core.Keyword(null, "LWSP", "LWSP", 782998598), new cljs.core.Keyword(null, "LF", "LF", 1177033158), new cljs.core.Keyword(null, "VCHAR", "VCHAR", 1962437706), new cljs.core.Keyword(null, "DIGIT", "DIGIT", 341251338), new cljs.core.Keyword(null, "SP", "SP", 124290284), new cljs.core.Keyword(null, "HEXDIG", "HEXDIG", 
-200221072), new cljs.core.Keyword(null, "CTL", "CTL", -9995632), new cljs.core.Keyword(null, "DQUOTE", "DQUOTE", -571169808), new cljs.core.Keyword(null, "WSP", "WSP", -1046948716), new cljs.core.Keyword(null, "CR", "CR", -1654295403), new cljs.core.Keyword(null, "OCTET", "OCTET", -743420682), new cljs.core.Keyword(null, "ALPHA", "ALPHA", -1463859144), new cljs.core.Keyword(null, "CHAR", "CHAR", -1280338086), new cljs.core.Keyword(null, "BIT", "BIT", -1854474115)], [instaparse.combinators_source.string.call(null, 
"\r\n"), instaparse.combinators_source.string.call(null, "\t"), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.alt.call(null, instaparse.combinators_source.string.call(null, " "), instaparse.combinators_source.string.call(null, "\t")), instaparse.combinators_source.star.call(null, instaparse.combinators_source.cat.call(null, instaparse.combinators_source.string.call(null, "\r\n"), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.string.call(null, 
" "), instaparse.combinators_source.string.call(null, "\t"))))), instaparse.combinators_source.string.call(null, "\n"), instaparse.combinators_source.regexp.call(null, "[\\u0021-\\u007E]"), instaparse.combinators_source.regexp.call(null, "[0-9]"), instaparse.combinators_source.string.call(null, " "), instaparse.combinators_source.regexp.call(null, "[0-9A-Fa-f]"), instaparse.combinators_source.regexp.call(null, "[\\u0000-\\u001F|\\u007F]"), instaparse.combinators_source.string.call(null, '"'), instaparse.combinators_source.alt.call(null, 
instaparse.combinators_source.string.call(null, " "), instaparse.combinators_source.string.call(null, "\t")), instaparse.combinators_source.string.call(null, "\r"), instaparse.combinators_source.regexp.call(null, "[\\u0000-\\u00FF]"), instaparse.combinators_source.regexp.call(null, "[a-zA-Z]"), instaparse.combinators_source.regexp.call(null, "[\\u0001-\\u007F]"), instaparse.combinators_source.regexp.call(null, "[01]")]);
instaparse.abnf.abnf_grammar = "\n\x3crulelist\x3e \x3d \x3copt-whitespace\x3e (rule | hide-tag-rule)+;\nrule \x3d rulename-left \x3cdefined-as\x3e alternation \x3copt-whitespace\x3e;\nhide-tag-rule \x3d hide-tag \x3cdefined-as\x3e alternation \x3copt-whitespace\x3e;\nrulename-left \x3d rulename;\nrulename-right \x3d rulename;\n\x3crulename\x3e \x3d #'[a-zA-Z][-a-zA-Z0-9]*';\n\x3chide-tag\x3e \x3d \x3c'\x3c' opt-whitespace\x3e rulename-left \x3copt-whitespace '\x3e'\x3e;\ndefined-as \x3d \x3copt-whitespace\x3e ('\x3d' | '\x3d/') \x3copt-whitespace\x3e;\nalternation \x3d concatenation (\x3copt-whitespace '/' opt-whitespace\x3e concatenation)*;\nconcatenation \x3d repetition (\x3cwhitespace\x3e repetition)*;\nrepetition \x3d [repeat] \x3copt-whitespace\x3e element;\nrepeat \x3d NUM | (NUM? '*' NUM?);\n\x3celement\x3e \x3d rulename-right | group | hide | option | char-val | num-val\n          | look | neg | regexp;\nlook \x3d \x3c'\x26' opt-whitespace\x3e element;\nneg \x3d \x3c'!' opt-whitespace\x3e element;\n\x3cgroup\x3e \x3d \x3c'(' opt-whitespace\x3e alternation \x3copt-whitespace ')'\x3e;\noption \x3d \x3c'[' opt-whitespace\x3e alternation \x3copt-whitespace ']'\x3e;\nhide \x3d \x3c'\x3c' opt-whitespace\x3e alternation \x3copt-whitespace '\x3e'\x3e;\nchar-val \x3d \x3c'\\u0022'\x3e #'[\\u0020-\\u0021\\u0023-\\u007E]'* \x3c'\\u0022'\x3e (* double-quoted strings *)\n         | \x3c'\\u0027'\x3e #'[\\u0020-\\u0026(-~]'* \x3c'\\u0027'\x3e;  (* single-quoted strings *)\n\x3cnum-val\x3e \x3d \x3c'%'\x3e (bin-val | dec-val | hex-val);\nbin-val \x3d \x3c'b'\x3e bin-char\n          [ (\x3c'.'\x3e bin-char)+ | ('-' bin-char) ];\nbin-char \x3d ('0' | '1')+;\ndec-val \x3d \x3c'd'\x3e dec-char\n          [ (\x3c'.'\x3e dec-char)+ | ('-' dec-char) ];\ndec-char \x3d DIGIT+;\nhex-val \x3d \x3c'x'\x3e hex-char\n          [ (\x3c'.'\x3e hex-char)+ | ('-' hex-char) ];\nhex-char \x3d HEXDIG+;\nNUM \x3d DIGIT+;\n\x3cDIGIT\x3e \x3d #'[0-9]';\n\x3cHEXDIG\x3e \x3d #'[0-9A-Fa-f]';\nopt-whitespace \x3d #'\\s*(?:;.*?(?:\\u000D?\\u000A\\s*|$))*';\nwhitespace \x3d #'\\s+(?:;.*?\\u000D?\\u000A\\s*)*';\nregexp \x3d #\"#'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\"\n       | #\"#\\\"[^\\\"\\\\]*(?:\\\\.[^\\\"\\\\]*)*\\\"\"\n";
instaparse.abnf.char_range = function char_range(char1, char2) {
  return instaparse.combinators_source.regexp.call(null, "[" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(char1) + "-" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(char2) + "]");
};
instaparse.abnf.get_char_combinator = function() {
  var get_char_combinator = null;
  var get_char_combinator__1 = function(num1) {
    return instaparse.combinators_source.string.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.char$.call(null, num1)));
  };
  var get_char_combinator__3 = function() {
    var G__29020__delegate = function(num1, num2, nums) {
      var v = cljs.core.vec.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [num1, num2], null), nums));
      if (cljs.core._EQ_.call(null, v.call(null, 1), "-")) {
        return instaparse.abnf.char_range.call(null, cljs.core.char$.call(null, v.call(null, 0)), cljs.core.char$.call(null, v.call(null, 2)));
      } else {
        return cljs.core.apply.call(null, instaparse.combinators_source.alt, function() {
          var iter__4379__auto__ = function(v) {
            return function iter__29016(s__29017) {
              return new cljs.core.LazySeq(null, function(v) {
                return function() {
                  var s__29017__$1 = s__29017;
                  while (true) {
                    var temp__4126__auto__ = cljs.core.seq.call(null, s__29017__$1);
                    if (temp__4126__auto__) {
                      var s__29017__$2 = temp__4126__auto__;
                      if (cljs.core.chunked_seq_QMARK_.call(null, s__29017__$2)) {
                        var c__4377__auto__ = cljs.core.chunk_first.call(null, s__29017__$2);
                        var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                        var b__29019 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                        if (function() {
                          var i__29018 = 0;
                          while (true) {
                            if (i__29018 < size__4378__auto__) {
                              var n = cljs.core._nth.call(null, c__4377__auto__, i__29018);
                              cljs.core.chunk_append.call(null, b__29019, instaparse.combinators_source.string.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.char$.call(null, n))));
                              var G__29021 = i__29018 + 1;
                              i__29018 = G__29021;
                              continue;
                            } else {
                              return true;
                            }
                            break;
                          }
                        }()) {
                          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__29019), iter__29016.call(null, cljs.core.chunk_rest.call(null, s__29017__$2)));
                        } else {
                          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__29019), null);
                        }
                      } else {
                        var n = cljs.core.first.call(null, s__29017__$2);
                        return cljs.core.cons.call(null, instaparse.combinators_source.string.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.char$.call(null, n))), iter__29016.call(null, cljs.core.rest.call(null, s__29017__$2)));
                      }
                    } else {
                      return null;
                    }
                    break;
                  }
                };
              }(v), null, null);
            };
          }(v);
          return iter__4379__auto__.call(null, v);
        }());
      }
    };
    var G__29020 = function(num1, num2, var_args) {
      var nums = null;
      if (arguments.length > 2) {
        nums = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29020__delegate.call(this, num1, num2, nums);
    };
    G__29020.cljs$lang$maxFixedArity = 2;
    G__29020.cljs$lang$applyTo = function(arglist__29022) {
      var num1 = cljs.core.first(arglist__29022);
      arglist__29022 = cljs.core.next(arglist__29022);
      var num2 = cljs.core.first(arglist__29022);
      var nums = cljs.core.rest(arglist__29022);
      return G__29020__delegate(num1, num2, nums);
    };
    G__29020.cljs$core$IFn$_invoke$arity$variadic = G__29020__delegate;
    return G__29020;
  }();
  get_char_combinator = function(num1, num2, var_args) {
    var nums = var_args;
    switch(arguments.length) {
      case 1:
        return get_char_combinator__1.call(this, num1);
      default:
        return get_char_combinator__3.cljs$core$IFn$_invoke$arity$variadic(num1, num2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_char_combinator.cljs$lang$maxFixedArity = 2;
  get_char_combinator.cljs$lang$applyTo = get_char_combinator__3.cljs$lang$applyTo;
  get_char_combinator.cljs$core$IFn$_invoke$arity$1 = get_char_combinator__1;
  get_char_combinator.cljs$core$IFn$_invoke$arity$variadic = get_char_combinator__3.cljs$core$IFn$_invoke$arity$variadic;
  return get_char_combinator;
}();
instaparse.abnf.project = function project(m, ks) {
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__4379__auto__ = function iter__29027(s__29028) {
      return new cljs.core.LazySeq(null, function() {
        var s__29028__$1 = s__29028;
        while (true) {
          var temp__4126__auto__ = cljs.core.seq.call(null, s__29028__$1);
          if (temp__4126__auto__) {
            var s__29028__$2 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__29028__$2)) {
              var c__4377__auto__ = cljs.core.chunk_first.call(null, s__29028__$2);
              var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
              var b__29030 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
              if (function() {
                var i__29029 = 0;
                while (true) {
                  if (i__29029 < size__4378__auto__) {
                    var k = cljs.core._nth.call(null, c__4377__auto__, i__29029);
                    if (cljs.core.contains_QMARK_.call(null, m, k)) {
                      cljs.core.chunk_append.call(null, b__29030, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, m.call(null, k)], null));
                      var G__29031 = i__29029 + 1;
                      i__29029 = G__29031;
                      continue;
                    } else {
                      var G__29032 = i__29029 + 1;
                      i__29029 = G__29032;
                      continue;
                    }
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__29030), iter__29027.call(null, cljs.core.chunk_rest.call(null, s__29028__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__29030), null);
              }
            } else {
              var k = cljs.core.first.call(null, s__29028__$2);
              if (cljs.core.contains_QMARK_.call(null, m, k)) {
                return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, m.call(null, k)], null), iter__29027.call(null, cljs.core.rest.call(null, s__29028__$2)));
              } else {
                var G__29033 = cljs.core.rest.call(null, s__29028__$2);
                s__29028__$1 = G__29033;
                continue;
              }
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4379__auto__.call(null, ks);
  }());
};
instaparse.abnf.merge_core = function merge_core(grammar_map) {
  return cljs.core.merge.call(null, instaparse.abnf.project.call(null, instaparse.abnf.abnf_core, cljs.core.distinct.call(null, cljs.core.mapcat.call(null, instaparse.cfg.seq_nt, cljs.core.vals.call(null, grammar_map)))), grammar_map);
};
instaparse.abnf.hide_tag_QMARK_ = function hide_tag_QMARK_(p) {
  return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(p), instaparse.reduction.raw_non_terminal_reduction);
};
instaparse.abnf.alt_preserving_hide_tag = function alt_preserving_hide_tag(p1, p2) {
  var hide_tag_p1_QMARK_ = instaparse.abnf.hide_tag_QMARK_.call(null, p1);
  var hide_tag_p2_QMARK_ = instaparse.abnf.hide_tag_QMARK_.call(null, p2);
  if (hide_tag_p1_QMARK_ && hide_tag_p2_QMARK_) {
    return instaparse.combinators_source.hide_tag.call(null, instaparse.combinators_source.alt.call(null, cljs.core.dissoc.call(null, p1, new cljs.core.Keyword(null, "red", "red", -969428204)), cljs.core.dissoc.call(null, p2, new cljs.core.Keyword(null, "red", "red", -969428204))));
  } else {
    if (hide_tag_p1_QMARK_) {
      return instaparse.combinators_source.hide_tag.call(null, instaparse.combinators_source.alt.call(null, cljs.core.dissoc.call(null, p1, new cljs.core.Keyword(null, "red", "red", -969428204)), p2));
    } else {
      if (hide_tag_p2_QMARK_) {
        return instaparse.combinators_source.hide_tag.call(null, instaparse.combinators_source.alt.call(null, p1, cljs.core.dissoc.call(null, p2, new cljs.core.Keyword(null, "red", "red", -969428204))));
      } else {
        return instaparse.combinators_source.alt.call(null, p1, p2);
      }
    }
  }
};
instaparse.abnf.abnf_transformer = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "neg", "neg", 1800032960), new cljs.core.Keyword(null, "hide-tag-rule", "hide-tag-rule", 150267589), new cljs.core.Keyword(null, "look", "look", -539441433), new cljs.core.Keyword(null, "bin-char", "bin-char", -1662780697), new cljs.core.Keyword(null, "rule", "rule", 729973257), new cljs.core.Keyword(null, "rulename-right", "rulename-right", 1125609193), new cljs.core.Keyword(null, "NUM", "NUM", 
-218662260), new cljs.core.Keyword(null, "char-val", "char-val", 1408617933), new cljs.core.Keyword(null, "hide", "hide", -596913169), new cljs.core.Keyword(null, "option", "option", 65132272), new cljs.core.Keyword(null, "hex-char", "hex-char", 764443568), new cljs.core.Keyword(null, "bin-val", "bin-val", 1705209105), new cljs.core.Keyword(null, "dec-val", "dec-val", -1263870894), new cljs.core.Keyword(null, "concatenation", "concatenation", -951369614), new cljs.core.Keyword(null, "alternation", 
"alternation", -1162147630), new cljs.core.Keyword(null, "regexp", "regexp", -541372782), new cljs.core.Keyword(null, "repetition", "repetition", 1938392115), new cljs.core.Keyword(null, "rulename-left", "rulename-left", -1824251564), new cljs.core.Keyword(null, "repeat", "repeat", 832692087), new cljs.core.Keyword(null, "hex-val", "hex-val", 1267737401), new cljs.core.Keyword(null, "dec-char", "dec-char", -646625154)], [instaparse.combinators_source.neg, function(tag, rule) {
  return new cljs.core.PersistentArrayMap.fromArray([tag, instaparse.combinators_source.hide_tag.call(null, rule)], true, false);
}, instaparse.combinators_source.look, function() {
  var G__29038__delegate = function(cs) {
    return parseInt(cljs.core.apply.call(null, cljs.core.str, cs), 2);
  };
  var G__29038 = function(var_args) {
    var cs = null;
    if (arguments.length > 0) {
      cs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return G__29038__delegate.call(this, cs);
  };
  G__29038.cljs$lang$maxFixedArity = 0;
  G__29038.cljs$lang$applyTo = function(arglist__29039) {
    var cs = cljs.core.seq(arglist__29039);
    return G__29038__delegate(cs);
  };
  G__29038.cljs$core$IFn$_invoke$arity$variadic = G__29038__delegate;
  return G__29038;
}(), cljs.core.hash_map, function() {
  var G__29040__delegate = function(rest__29035_SHARP_) {
    if (cljs.core.truth_(instaparse.abnf._STAR_case_insensitive_STAR_)) {
      return instaparse.combinators_source.nt.call(null, cljs.core.keyword.call(null, clojure.string.upper_case.call(null, cljs.core.apply.call(null, cljs.core.str, rest__29035_SHARP_))));
    } else {
      return instaparse.combinators_source.nt.call(null, cljs.core.keyword.call(null, cljs.core.apply.call(null, cljs.core.str, rest__29035_SHARP_)));
    }
  };
  var G__29040 = function(var_args) {
    var rest__29035_SHARP_ = null;
    if (arguments.length > 0) {
      rest__29035_SHARP_ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return G__29040__delegate.call(this, rest__29035_SHARP_);
  };
  G__29040.cljs$lang$maxFixedArity = 0;
  G__29040.cljs$lang$applyTo = function(arglist__29041) {
    var rest__29035_SHARP_ = cljs.core.seq(arglist__29041);
    return G__29040__delegate(rest__29035_SHARP_);
  };
  G__29040.cljs$core$IFn$_invoke$arity$variadic = G__29040__delegate;
  return G__29040;
}(), function() {
  var G__29042__delegate = function(rest__29036_SHARP_) {
    return parseInt(cljs.core.apply.call(null, cljs.core.str, rest__29036_SHARP_));
  };
  var G__29042 = function(var_args) {
    var rest__29036_SHARP_ = null;
    if (arguments.length > 0) {
      rest__29036_SHARP_ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return G__29042__delegate.call(this, rest__29036_SHARP_);
  };
  G__29042.cljs$lang$maxFixedArity = 0;
  G__29042.cljs$lang$applyTo = function(arglist__29043) {
    var rest__29036_SHARP_ = cljs.core.seq(arglist__29043);
    return G__29042__delegate(rest__29036_SHARP_);
  };
  G__29042.cljs$core$IFn$_invoke$arity$variadic = G__29042__delegate;
  return G__29042;
}(), function() {
  var G__29044__delegate = function(cs) {
    return instaparse.combinators_source.string_ci.call(null, cljs.core.apply.call(null, cljs.core.str, cs));
  };
  var G__29044 = function(var_args) {
    var cs = null;
    if (arguments.length > 0) {
      cs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return G__29044__delegate.call(this, cs);
  };
  G__29044.cljs$lang$maxFixedArity = 0;
  G__29044.cljs$lang$applyTo = function(arglist__29045) {
    var cs = cljs.core.seq(arglist__29045);
    return G__29044__delegate(cs);
  };
  G__29044.cljs$core$IFn$_invoke$arity$variadic = G__29044__delegate;
  return G__29044;
}(), instaparse.combinators_source.hide, instaparse.combinators_source.opt, function() {
  var G__29046__delegate = function(cs) {
    return parseInt(cljs.core.apply.call(null, cljs.core.str, cs), 16);
  };
  var G__29046 = function(var_args) {
    var cs = null;
    if (arguments.length > 0) {
      cs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return G__29046__delegate.call(this, cs);
  };
  G__29046.cljs$lang$maxFixedArity = 0;
  G__29046.cljs$lang$applyTo = function(arglist__29047) {
    var cs = cljs.core.seq(arglist__29047);
    return G__29046__delegate(cs);
  };
  G__29046.cljs$core$IFn$_invoke$arity$variadic = G__29046__delegate;
  return G__29046;
}(), instaparse.abnf.get_char_combinator, instaparse.abnf.get_char_combinator, instaparse.combinators_source.cat, instaparse.combinators_source.alt, cljs.core.comp.call(null, instaparse.combinators_source.regexp, instaparse.cfg.process_regexp), function() {
  var G__29048 = null;
  var G__29048__1 = function(element) {
    return element;
  };
  var G__29048__2 = function(repeat, element) {
    if (cljs.core.empty_QMARK_.call(null, repeat)) {
      return instaparse.combinators_source.star.call(null, element);
    } else {
      if (cljs.core._EQ_.call(null, cljs.core.count.call(null, repeat), 2)) {
        return instaparse.combinators_source.rep.call(null, (new cljs.core.Keyword(null, "low", "low", -1601362409)).cljs$core$IFn$_invoke$arity$1(repeat), (new cljs.core.Keyword(null, "high", "high", 2027297808)).cljs$core$IFn$_invoke$arity$1(repeat), element);
      } else {
        if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "low", "low", -1601362409)).cljs$core$IFn$_invoke$arity$1(repeat), 1)) {
          return instaparse.combinators_source.plus.call(null, element);
        } else {
          if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "high", "high", 2027297808)).cljs$core$IFn$_invoke$arity$1(repeat), 1)) {
            return instaparse.combinators_source.opt.call(null, element);
          } else {
            return instaparse.combinators_source.rep.call(null, function() {
              var or__3640__auto__ = (new cljs.core.Keyword(null, "low", "low", -1601362409)).cljs$core$IFn$_invoke$arity$1(repeat);
              if (cljs.core.truth_(or__3640__auto__)) {
                return or__3640__auto__;
              } else {
                return 0;
              }
            }(), function() {
              var or__3640__auto__ = (new cljs.core.Keyword(null, "high", "high", 2027297808)).cljs$core$IFn$_invoke$arity$1(repeat);
              if (cljs.core.truth_(or__3640__auto__)) {
                return or__3640__auto__;
              } else {
                return Infinity;
              }
            }(), element);
          }
        }
      }
    }
  };
  G__29048 = function(repeat, element) {
    switch(arguments.length) {
      case 1:
        return G__29048__1.call(this, repeat);
      case 2:
        return G__29048__2.call(this, repeat, element);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__29048.cljs$core$IFn$_invoke$arity$1 = G__29048__1;
  G__29048.cljs$core$IFn$_invoke$arity$2 = G__29048__2;
  return G__29048;
}(), function() {
  var G__29049__delegate = function(rest__29034_SHARP_) {
    if (cljs.core.truth_(instaparse.abnf._STAR_case_insensitive_STAR_)) {
      return cljs.core.keyword.call(null, clojure.string.upper_case.call(null, cljs.core.apply.call(null, cljs.core.str, rest__29034_SHARP_)));
    } else {
      return cljs.core.keyword.call(null, cljs.core.apply.call(null, cljs.core.str, rest__29034_SHARP_));
    }
  };
  var G__29049 = function(var_args) {
    var rest__29034_SHARP_ = null;
    if (arguments.length > 0) {
      rest__29034_SHARP_ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return G__29049__delegate.call(this, rest__29034_SHARP_);
  };
  G__29049.cljs$lang$maxFixedArity = 0;
  G__29049.cljs$lang$applyTo = function(arglist__29050) {
    var rest__29034_SHARP_ = cljs.core.seq(arglist__29050);
    return G__29049__delegate(rest__29034_SHARP_);
  };
  G__29049.cljs$core$IFn$_invoke$arity$variadic = G__29049__delegate;
  return G__29049;
}(), function() {
  var G__29051__delegate = function(items) {
    var G__29037 = cljs.core.count.call(null, items);
    switch(G__29037) {
      case 1:
        if (cljs.core._EQ_.call(null, cljs.core.first.call(null, items), "*")) {
          return cljs.core.PersistentArrayMap.EMPTY;
        } else {
          return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "low", "low", -1601362409), cljs.core.first.call(null, items), new cljs.core.Keyword(null, "high", "high", 2027297808), cljs.core.first.call(null, items)], null);
        }
        break;
      case 2:
        if (cljs.core._EQ_.call(null, cljs.core.first.call(null, items), "*")) {
          return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "high", "high", 2027297808), cljs.core.second.call(null, items)], null);
        } else {
          return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "low", "low", -1601362409), cljs.core.first.call(null, items)], null);
        }
        break;
      case 3:
        return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "low", "low", -1601362409), cljs.core.first.call(null, items), new cljs.core.Keyword(null, "high", "high", 2027297808), cljs.core.nth.call(null, items, 2)], null);
        break;
      default:
        throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.count.call(null, items)));;
    }
  };
  var G__29051 = function(var_args) {
    var items = null;
    if (arguments.length > 0) {
      items = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return G__29051__delegate.call(this, items);
  };
  G__29051.cljs$lang$maxFixedArity = 0;
  G__29051.cljs$lang$applyTo = function(arglist__29053) {
    var items = cljs.core.seq(arglist__29053);
    return G__29051__delegate(items);
  };
  G__29051.cljs$core$IFn$_invoke$arity$variadic = G__29051__delegate;
  return G__29051;
}(), instaparse.abnf.get_char_combinator, function() {
  var G__29054__delegate = function(cs) {
    return parseInt(cljs.core.apply.call(null, cljs.core.str, cs));
  };
  var G__29054 = function(var_args) {
    var cs = null;
    if (arguments.length > 0) {
      cs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return G__29054__delegate.call(this, cs);
  };
  G__29054.cljs$lang$maxFixedArity = 0;
  G__29054.cljs$lang$applyTo = function(arglist__29055) {
    var cs = cljs.core.seq(arglist__29055);
    return G__29054__delegate(cs);
  };
  G__29054.cljs$core$IFn$_invoke$arity$variadic = G__29054__delegate;
  return G__29054;
}()]);
instaparse.abnf.abnf_parser = instaparse.reduction.apply_standard_reductions.call(null, new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), instaparse.cfg.ebnf.call(null, instaparse.abnf.abnf_grammar));
instaparse.abnf.rules__GT_grammar_map = function rules__GT_grammar_map(rules) {
  return instaparse.abnf.merge_core.call(null, cljs.core.apply.call(null, cljs.core.merge_with, instaparse.abnf.alt_preserving_hide_tag, rules));
};
instaparse.abnf.abnf = function abnf(spec) {
  if (cljs.core.truth_(cljs.core.re_find.call(null, /=/, spec))) {
    var rule_tree = instaparse.gll.parse.call(null, instaparse.abnf.abnf_parser, new cljs.core.Keyword(null, "rulelist", "rulelist", -1871218473), spec, false);
    if (rule_tree instanceof instaparse.gll.Failure) {
      throw "Error parsing grammar specification:\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
        var sb__4581__auto__ = new goog.string.StringBuffer;
        var _STAR_print_fn_STAR_29058_29060 = cljs.core._STAR_print_fn_STAR_;
        try {
          cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_fn_STAR_29058_29060, sb__4581__auto__, rule_tree) {
            return function(x__4582__auto__) {
              return sb__4581__auto__.append(x__4582__auto__);
            };
          }(_STAR_print_fn_STAR_29058_29060, sb__4581__auto__, rule_tree);
          cljs.core.println.call(null, rule_tree);
        } finally {
          cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_29058_29060;
        }
        return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4581__auto__);
      }());
    } else {
      return instaparse.abnf.rules__GT_grammar_map.call(null, instaparse.transform.transform.call(null, instaparse.abnf.abnf_transformer, rule_tree));
    }
  } else {
    var rhs_tree = instaparse.gll.parse.call(null, instaparse.abnf.abnf_parser, new cljs.core.Keyword(null, "alternation", "alternation", -1162147630), spec, false);
    if (rhs_tree instanceof instaparse.gll.Failure) {
      throw "Error parsing grammar specification:\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
        var sb__4581__auto__ = new goog.string.StringBuffer;
        var _STAR_print_fn_STAR_29059_29061 = cljs.core._STAR_print_fn_STAR_;
        try {
          cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_fn_STAR_29059_29061, sb__4581__auto__, rhs_tree) {
            return function(x__4582__auto__) {
              return sb__4581__auto__.append(x__4582__auto__);
            };
          }(_STAR_print_fn_STAR_29059_29061, sb__4581__auto__, rhs_tree);
          cljs.core.println.call(null, rhs_tree);
        } finally {
          cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_29059_29061;
        }
        return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4581__auto__);
      }());
    } else {
      return instaparse.transform.transform.call(null, instaparse.abnf.abnf_transformer, rhs_tree);
    }
  }
};
instaparse.abnf.build_parser = function build_parser(spec, output_format) {
  var rule_tree = instaparse.gll.parse.call(null, instaparse.abnf.abnf_parser, new cljs.core.Keyword(null, "rulelist", "rulelist", -1871218473), spec, false);
  if (rule_tree instanceof instaparse.gll.Failure) {
    throw "Error parsing grammar specification:\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
      var sb__4581__auto__ = new goog.string.StringBuffer;
      var _STAR_print_fn_STAR_29063_29064 = cljs.core._STAR_print_fn_STAR_;
      try {
        cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_fn_STAR_29063_29064, sb__4581__auto__, rule_tree) {
          return function(x__4582__auto__) {
            return sb__4581__auto__.append(x__4582__auto__);
          };
        }(_STAR_print_fn_STAR_29063_29064, sb__4581__auto__, rule_tree);
        cljs.core.println.call(null, rule_tree);
      } finally {
        cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_29063_29064;
      }
      return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4581__auto__);
    }());
  } else {
    var rules = instaparse.transform.transform.call(null, instaparse.abnf.abnf_transformer, rule_tree);
    var grammar_map = instaparse.abnf.rules__GT_grammar_map.call(null, rules);
    var start_production = cljs.core.first.call(null, cljs.core.first.call(null, cljs.core.first.call(null, rules)));
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), instaparse.cfg.check_grammar.call(null, instaparse.reduction.apply_standard_reductions.call(null, output_format, grammar_map)), new cljs.core.Keyword(null, "start-production", "start-production", 687546537), start_production, new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), output_format], null);
  }
};
goog.provide("cljs.looperscript.audio");
goog.require("cljs.core");
cljs.looperscript.audio.log = function() {
  var log__delegate = function(args) {
    return console.log(cljs.core.apply.call(null, cljs.core.str, args));
  };
  var log = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return log__delegate.call(this, args);
  };
  log.cljs$lang$maxFixedArity = 0;
  log.cljs$lang$applyTo = function(arglist__26583) {
    var args = cljs.core.seq(arglist__26583);
    return log__delegate(args);
  };
  log.cljs$core$IFn$_invoke$arity$variadic = log__delegate;
  return log;
}();
cljs.looperscript.audio.ctx = new webkitAudioContext;
if (cljs.looperscript.audio.ctx == null) {
  cljs.looperscript.audio.ctx = new AudioContext;
} else {
}
cljs.looperscript.audio.drums = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["kick", "snare", "hat", "sidestick", "ride-bell", "ride"], null);
cljs.looperscript.audio.sample_lags = new cljs.core.PersistentArrayMap(null, 6, ["kick", .026, "snare", .0293, "hat", .0267, "sidestick", .0245, "ride-bell", .0395, "ride", .0443], null);
cljs.looperscript.audio.drum_codes = new cljs.core.PersistentArrayMap(null, 6, ["k", "kick", "s", "snare", "h", "hat", "d", "sidestick", "b", "ride-bell", "r", "ride"], null);
cljs.looperscript.audio.buffers = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cljs.looperscript.audio.sample_folder = "/media/webaudio/sample/mp3s/";
cljs.looperscript.audio.on_decode = function on_decode(buffer, fname) {
  cljs.core.swap_BANG_.call(null, cljs.looperscript.audio.buffers, cljs.core.assoc, fname, buffer);
  return console.log("loaded", fname, cljs.core.rand_int.call(null, 99));
};
cljs.looperscript.audio.on_mp3_load = function on_mp3_load(req, fname) {
  return cljs.looperscript.audio.ctx.decodeAudioData(req.response, function(p1__26584_SHARP_) {
    return cljs.looperscript.audio.on_decode.call(null, p1__26584_SHARP_, fname);
  });
};
cljs.looperscript.audio.load_file = function load_file(fname) {
  var req = new XMLHttpRequest;
  var full_name = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.looperscript.audio.sample_folder) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(fname) + ".mp3";
  req.open("GET", full_name);
  req["responseType"] = "arraybuffer";
  req["onload"] = function(req, full_name) {
    return function() {
      return cljs.looperscript.audio.on_mp3_load.call(null, req, fname);
    };
  }(req, full_name);
  return req.send();
};
cljs.looperscript.audio.load_some_drums = function load_some_drums() {
  var seq__26589 = cljs.core.seq.call(null, cljs.looperscript.audio.drums);
  var chunk__26590 = null;
  var count__26591 = 0;
  var i__26592 = 0;
  while (true) {
    if (i__26592 < count__26591) {
      var d = cljs.core._nth.call(null, chunk__26590, i__26592);
      cljs.looperscript.audio.load_file.call(null, d);
      var G__26593 = seq__26589;
      var G__26594 = chunk__26590;
      var G__26595 = count__26591;
      var G__26596 = i__26592 + 1;
      seq__26589 = G__26593;
      chunk__26590 = G__26594;
      count__26591 = G__26595;
      i__26592 = G__26596;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__26589);
      if (temp__4126__auto__) {
        var seq__26589__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__26589__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__26589__$1);
          var G__26597 = cljs.core.chunk_rest.call(null, seq__26589__$1);
          var G__26598 = c__4410__auto__;
          var G__26599 = cljs.core.count.call(null, c__4410__auto__);
          var G__26600 = 0;
          seq__26589 = G__26597;
          chunk__26590 = G__26598;
          count__26591 = G__26599;
          i__26592 = G__26600;
          continue;
        } else {
          var d = cljs.core.first.call(null, seq__26589__$1);
          cljs.looperscript.audio.load_file.call(null, d);
          var G__26601 = cljs.core.next.call(null, seq__26589__$1);
          var G__26602 = null;
          var G__26603 = 0;
          var G__26604 = 0;
          seq__26589 = G__26601;
          chunk__26590 = G__26602;
          count__26591 = G__26603;
          i__26592 = G__26604;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.looperscript.audio.play_sound = function play_sound(fname, start_time, vol, rate) {
  var buf_s = cljs.looperscript.audio.ctx.createBufferSource();
  var gain = cljs.looperscript.audio.ctx.createGain();
  buf_s["buffer"] = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.looperscript.audio.buffers), fname);
  buf_s["playbackRate"]["value"] = rate;
  gain["gain"]["value"] = vol;
  buf_s.connect(gain);
  gain.connect(cljs.looperscript.audio.ctx["destination"]);
  buf_s.start(start_time);
  return buf_s;
};
cljs.looperscript.audio.play_tone = function play_tone(freq, start_time, dur, vol, pan, synth, overtones) {
  var osc = cljs.looperscript.audio.ctx.createOscillator();
  var gain = cljs.looperscript.audio.ctx.createGain();
  osc["type"] = synth;
  osc["frequency"]["value"] = freq;
  gain["gain"]["value"] = .1 * vol;
  osc.connect(gain);
  gain.connect(cljs.looperscript.audio.ctx["destination"]);
  osc.start(start_time);
  osc.stop(start_time + dur);
  return osc;
};
cljs.looperscript.audio.play_filtered_tone = function play_filtered_tone(freq, start_time, dur, vol, pan, filt_freq, synth, overtones) {
  var oscs = function() {
    var iter__4379__auto__ = function iter__26615(s__26616) {
      return new cljs.core.LazySeq(null, function() {
        var s__26616__$1 = s__26616;
        while (true) {
          var temp__4126__auto__ = cljs.core.seq.call(null, s__26616__$1);
          if (temp__4126__auto__) {
            var s__26616__$2 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__26616__$2)) {
              var c__4377__auto__ = cljs.core.chunk_first.call(null, s__26616__$2);
              var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
              var b__26618 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
              if (function() {
                var i__26617 = 0;
                while (true) {
                  if (i__26617 < size__4378__auto__) {
                    var i = cljs.core._nth.call(null, c__4377__auto__, i__26617);
                    cljs.core.chunk_append.call(null, b__26618, cljs.looperscript.audio.ctx.createOscillator());
                    var G__26625 = i__26617 + 1;
                    i__26617 = G__26625;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__26618), iter__26615.call(null, cljs.core.chunk_rest.call(null, s__26616__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__26618), null);
              }
            } else {
              var i = cljs.core.first.call(null, s__26616__$2);
              return cljs.core.cons.call(null, cljs.looperscript.audio.ctx.createOscillator(), iter__26615.call(null, cljs.core.rest.call(null, s__26616__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4379__auto__.call(null, cljs.core.range.call(null, cljs.core.count.call(null, overtones)));
  }();
  var gain = cljs.looperscript.audio.ctx.createGain();
  var q = .25;
  var filter = cljs.looperscript.audio.ctx.createBiquadFilter();
  var panner = cljs.looperscript.audio.ctx.createPanner();
  gain["gain"]["value"] = .1 * vol;
  filter["frequency"]["value"] = filt_freq;
  filter["Q"]["value"] = q;
  panner["panningModel"] = "equalpower";
  panner.setPosition(pan, 0, 0);
  gain.connect(filter);
  filter.connect(panner);
  panner.connect(cljs.looperscript.audio.ctx["destination"]);
  var seq__26619_26626 = cljs.core.seq.call(null, cljs.core.map.call(null, cljs.core.vector, oscs, overtones));
  var chunk__26620_26627 = null;
  var count__26621_26628 = 0;
  var i__26622_26629 = 0;
  while (true) {
    if (i__26622_26629 < count__26621_26628) {
      var vec__26623_26630 = cljs.core._nth.call(null, chunk__26620_26627, i__26622_26629);
      var osc_26631 = cljs.core.nth.call(null, vec__26623_26630, 0, null);
      var o_26632 = cljs.core.nth.call(null, vec__26623_26630, 1, null);
      osc_26631["type"] = synth;
      osc_26631["frequency"]["value"] = o_26632 * freq;
      osc_26631.connect(gain);
      osc_26631.start(start_time);
      osc_26631.stop(start_time + dur);
      var G__26633 = seq__26619_26626;
      var G__26634 = chunk__26620_26627;
      var G__26635 = count__26621_26628;
      var G__26636 = i__26622_26629 + 1;
      seq__26619_26626 = G__26633;
      chunk__26620_26627 = G__26634;
      count__26621_26628 = G__26635;
      i__26622_26629 = G__26636;
      continue;
    } else {
      var temp__4126__auto___26637 = cljs.core.seq.call(null, seq__26619_26626);
      if (temp__4126__auto___26637) {
        var seq__26619_26638__$1 = temp__4126__auto___26637;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__26619_26638__$1)) {
          var c__4410__auto___26639 = cljs.core.chunk_first.call(null, seq__26619_26638__$1);
          var G__26640 = cljs.core.chunk_rest.call(null, seq__26619_26638__$1);
          var G__26641 = c__4410__auto___26639;
          var G__26642 = cljs.core.count.call(null, c__4410__auto___26639);
          var G__26643 = 0;
          seq__26619_26626 = G__26640;
          chunk__26620_26627 = G__26641;
          count__26621_26628 = G__26642;
          i__26622_26629 = G__26643;
          continue;
        } else {
          var vec__26624_26644 = cljs.core.first.call(null, seq__26619_26638__$1);
          var osc_26645 = cljs.core.nth.call(null, vec__26624_26644, 0, null);
          var o_26646 = cljs.core.nth.call(null, vec__26624_26644, 1, null);
          osc_26645["type"] = synth;
          osc_26645["frequency"]["value"] = o_26646 * freq;
          osc_26645.connect(gain);
          osc_26645.start(start_time);
          osc_26645.stop(start_time + dur);
          var G__26647 = cljs.core.next.call(null, seq__26619_26638__$1);
          var G__26648 = null;
          var G__26649 = 0;
          var G__26650 = 0;
          seq__26619_26626 = G__26647;
          chunk__26620_26627 = G__26648;
          count__26621_26628 = G__26649;
          i__26622_26629 = G__26650;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return oscs;
};
goog.provide("instaparse.viz");
goog.require("cljs.core");
instaparse.viz.span = function span(tree) {
  var m = cljs.core.meta.call(null, tree);
  var s = (new cljs.core.Keyword("instaparse.gll", "start-index", "instaparse.gll/start-index", 404653620)).cljs$core$IFn$_invoke$arity$1(m);
  var e = (new cljs.core.Keyword("instaparse.gll", "end-index", "instaparse.gll/end-index", -1851404441)).cljs$core$IFn$_invoke$arity$1(m);
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = s;
    if (cljs.core.truth_(and__3628__auto__)) {
      return e;
    } else {
      return and__3628__auto__;
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [s, e], null);
  } else {
    return null;
  }
};
goog.provide("instaparse.repeat");
goog.require("cljs.core");
goog.require("instaparse.combinators_source");
goog.require("instaparse.auto_flatten_seq");
goog.require("instaparse.viz");
goog.require("instaparse.gll");
goog.require("instaparse.reduction");
goog.require("instaparse.auto_flatten_seq");
goog.require("instaparse.failure");
goog.require("instaparse.combinators_source");
goog.require("instaparse.gll");
goog.require("instaparse.failure");
goog.require("instaparse.reduction");
goog.require("instaparse.viz");
instaparse.repeat.empty_result_QMARK_ = function empty_result_QMARK_(result) {
  return cljs.core.vector_QMARK_.call(null, result) && cljs.core._EQ_.call(null, cljs.core.count.call(null, result), 1) || cljs.core.map_QMARK_.call(null, result) && cljs.core.contains_QMARK_.call(null, result, new cljs.core.Keyword(null, "tag", "tag", -1290361223)) && cljs.core.empty_QMARK_.call(null, cljs.core.get.call(null, result, new cljs.core.Keyword(null, "content", "content", 15833224))) || cljs.core.empty_QMARK_.call(null, result);
};
instaparse.repeat.failure_signal = instaparse.gll.__GT_Failure.call(null, null, null);
instaparse.repeat.get_end = function() {
  var get_end = null;
  var get_end__1 = function(parse) {
    var vec__28658 = instaparse.viz.span.call(null, parse);
    var start = cljs.core.nth.call(null, vec__28658, 0, null);
    var end = cljs.core.nth.call(null, vec__28658, 1, null);
    if (cljs.core.truth_(end)) {
      return cljs.core.long$.call(null, end);
    } else {
      return cljs.core.count.call(null, parse);
    }
  };
  var get_end__2 = function(parse, index) {
    var vec__28659 = instaparse.viz.span.call(null, parse);
    var start = cljs.core.nth.call(null, vec__28659, 0, null);
    var end = cljs.core.nth.call(null, vec__28659, 1, null);
    if (cljs.core.truth_(end)) {
      return cljs.core.long$.call(null, end);
    } else {
      return index + cljs.core.count.call(null, parse);
    }
  };
  get_end = function(parse, index) {
    switch(arguments.length) {
      case 1:
        return get_end__1.call(this, parse);
      case 2:
        return get_end__2.call(this, parse, index);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_end.cljs$core$IFn$_invoke$arity$1 = get_end__1;
  get_end.cljs$core$IFn$_invoke$arity$2 = get_end__2;
  return get_end;
}();
instaparse.repeat.parse_from_index = function parse_from_index(grammar, initial_parser, text, segment, index) {
  var tramp = instaparse.gll.make_tramp.call(null, grammar, text, segment);
  instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, initial_parser], null), instaparse.gll.TopListener.call(null, tramp));
  return instaparse.gll.run.call(null, tramp);
};
instaparse.repeat.select_parse = function select_parse(grammar, initial_parser, text, segment, index, parses) {
  var length = cljs.core.count.call(null, text);
  var parses__$1 = cljs.core.seq.call(null, parses);
  while (true) {
    if (parses__$1) {
      var parse = cljs.core.first.call(null, parses__$1);
      var vec__28661 = instaparse.viz.span.call(null, parse);
      var start = cljs.core.nth.call(null, vec__28661, 0, null);
      var end = cljs.core.nth.call(null, vec__28661, 1, null);
      var end__$1 = cljs.core.truth_(end) ? end : index + cljs.core.count.call(null, parse);
      if (cljs.core._EQ_.call(null, end__$1, length)) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [parse, end__$1, null], null);
      } else {
        var temp__4124__auto__ = cljs.core.seq.call(null, instaparse.repeat.parse_from_index.call(null, grammar, initial_parser, text, segment, end__$1));
        if (temp__4124__auto__) {
          var follow_ups = temp__4124__auto__;
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [parse, end__$1, follow_ups], null);
        } else {
          var G__28662 = cljs.core.next.call(null, parses__$1);
          parses__$1 = G__28662;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
instaparse.repeat.repeat_parse_hiccup = function() {
  var repeat_parse_hiccup = null;
  var repeat_parse_hiccup__5 = function(grammar, initial_parser, root_tag, text, segment) {
    return repeat_parse_hiccup.call(null, grammar, initial_parser, root_tag, text, segment, 0);
  };
  var repeat_parse_hiccup__6 = function(grammar, initial_parser, root_tag, text, segment, index) {
    var length = cljs.core.count.call(null, text);
    var first_result = instaparse.repeat.parse_from_index.call(null, grammar, initial_parser, text, segment, index);
    var index__$1 = cljs.core.long$.call(null, index);
    var parses = instaparse.auto_flatten_seq.auto_flatten_seq.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [root_tag], null));
    var G__28668 = instaparse.repeat.select_parse.call(null, grammar, initial_parser, text, segment, index__$1, first_result);
    var vec__28669 = G__28668;
    var parse = cljs.core.nth.call(null, vec__28669, 0, null);
    var end = cljs.core.nth.call(null, vec__28669, 1, null);
    var follow_ups = cljs.core.nth.call(null, vec__28669, 2, null);
    var selection = vec__28669;
    var index__$2 = index__$1;
    var parses__$1 = parses;
    var G__28668__$1 = G__28668;
    while (true) {
      var index__$3 = index__$2;
      var parses__$2 = parses__$1;
      var vec__28670 = G__28668__$1;
      var parse__$1 = cljs.core.nth.call(null, vec__28670, 0, null);
      var end__$1 = cljs.core.nth.call(null, vec__28670, 1, null);
      var follow_ups__$1 = cljs.core.nth.call(null, vec__28670, 2, null);
      var selection__$1 = vec__28670;
      if (selection__$1 == null) {
        return instaparse.repeat.failure_signal;
      } else {
        if (cljs.core._EQ_.call(null, index__$3, end__$1)) {
          return instaparse.repeat.failure_signal;
        } else {
          if (follow_ups__$1 == null) {
            return instaparse.gll.safe_with_meta.call(null, instaparse.auto_flatten_seq.convert_afs_to_vec.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, parses__$2, parse__$1)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optimize", "optimize", -1912349448), new cljs.core.Keyword(null, "memory", "memory", -1449401430), new cljs.core.Keyword("instaparse.gll", "start-index", "instaparse.gll/start-index", 404653620), 0, new cljs.core.Keyword("instaparse.gll", 
            "end-index", "instaparse.gll/end-index", -1851404441), length], null));
          } else {
            var G__28671 = cljs.core.long$.call(null, end__$1);
            var G__28672 = instaparse.auto_flatten_seq.conj_flat.call(null, parses__$2, parse__$1);
            var G__28673 = instaparse.repeat.select_parse.call(null, grammar, initial_parser, text, segment, end__$1, follow_ups__$1);
            index__$2 = G__28671;
            parses__$1 = G__28672;
            G__28668__$1 = G__28673;
            continue;
          }
        }
      }
      break;
    }
  };
  repeat_parse_hiccup = function(grammar, initial_parser, root_tag, text, segment, index) {
    switch(arguments.length) {
      case 5:
        return repeat_parse_hiccup__5.call(this, grammar, initial_parser, root_tag, text, segment);
      case 6:
        return repeat_parse_hiccup__6.call(this, grammar, initial_parser, root_tag, text, segment, index);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat_parse_hiccup.cljs$core$IFn$_invoke$arity$5 = repeat_parse_hiccup__5;
  repeat_parse_hiccup.cljs$core$IFn$_invoke$arity$6 = repeat_parse_hiccup__6;
  return repeat_parse_hiccup;
}();
instaparse.repeat.repeat_parse_enlive = function() {
  var repeat_parse_enlive = null;
  var repeat_parse_enlive__5 = function(grammar, initial_parser, root_tag, text, segment) {
    return repeat_parse_enlive.call(null, grammar, initial_parser, root_tag, text, segment, 0);
  };
  var repeat_parse_enlive__6 = function(grammar, initial_parser, root_tag, text, segment, index) {
    var length = cljs.core.count.call(null, text);
    var first_result = instaparse.repeat.parse_from_index.call(null, grammar, initial_parser, text, segment, index);
    var index__$1 = cljs.core.long$.call(null, index);
    var parses = instaparse.auto_flatten_seq.EMPTY;
    var G__28679 = instaparse.repeat.select_parse.call(null, grammar, initial_parser, text, segment, index__$1, first_result);
    var vec__28680 = G__28679;
    var parse = cljs.core.nth.call(null, vec__28680, 0, null);
    var end = cljs.core.nth.call(null, vec__28680, 1, null);
    var follow_ups = cljs.core.nth.call(null, vec__28680, 2, null);
    var selection = vec__28680;
    var index__$2 = index__$1;
    var parses__$1 = parses;
    var G__28679__$1 = G__28679;
    while (true) {
      var index__$3 = index__$2;
      var parses__$2 = parses__$1;
      var vec__28681 = G__28679__$1;
      var parse__$1 = cljs.core.nth.call(null, vec__28681, 0, null);
      var end__$1 = cljs.core.nth.call(null, vec__28681, 1, null);
      var follow_ups__$1 = cljs.core.nth.call(null, vec__28681, 2, null);
      var selection__$1 = vec__28681;
      if (selection__$1 == null) {
        return instaparse.repeat.failure_signal;
      } else {
        if (cljs.core._EQ_.call(null, index__$3, end__$1)) {
          return instaparse.repeat.failure_signal;
        } else {
          if (follow_ups__$1 == null) {
            return instaparse.gll.safe_with_meta.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), root_tag, new cljs.core.Keyword(null, "content", "content", 15833224), cljs.core.seq.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, parses__$2, parse__$1))], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optimize", "optimize", -1912349448), new cljs.core.Keyword(null, "memory", "memory", -1449401430), 
            new cljs.core.Keyword("instaparse.gll", "start-index", "instaparse.gll/start-index", 404653620), 0, new cljs.core.Keyword("instaparse.gll", "end-index", "instaparse.gll/end-index", -1851404441), length], null));
          } else {
            var G__28682 = cljs.core.long$.call(null, end__$1);
            var G__28683 = instaparse.auto_flatten_seq.conj_flat.call(null, parses__$2, parse__$1);
            var G__28684 = instaparse.repeat.select_parse.call(null, grammar, initial_parser, text, segment, end__$1, follow_ups__$1);
            index__$2 = G__28682;
            parses__$1 = G__28683;
            G__28679__$1 = G__28684;
            continue;
          }
        }
      }
      break;
    }
  };
  repeat_parse_enlive = function(grammar, initial_parser, root_tag, text, segment, index) {
    switch(arguments.length) {
      case 5:
        return repeat_parse_enlive__5.call(this, grammar, initial_parser, root_tag, text, segment);
      case 6:
        return repeat_parse_enlive__6.call(this, grammar, initial_parser, root_tag, text, segment, index);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat_parse_enlive.cljs$core$IFn$_invoke$arity$5 = repeat_parse_enlive__5;
  repeat_parse_enlive.cljs$core$IFn$_invoke$arity$6 = repeat_parse_enlive__6;
  return repeat_parse_enlive;
}();
instaparse.repeat.repeat_parse_no_tag = function() {
  var repeat_parse_no_tag = null;
  var repeat_parse_no_tag__4 = function(grammar, initial_parser, text, segment) {
    return repeat_parse_no_tag.call(null, grammar, initial_parser, text, segment, 0);
  };
  var repeat_parse_no_tag__5 = function(grammar, initial_parser, text, segment, index) {
    var length = cljs.core.count.call(null, text);
    var first_result = instaparse.repeat.parse_from_index.call(null, grammar, initial_parser, text, segment, index);
    var index__$1 = cljs.core.long$.call(null, index);
    var parses = instaparse.auto_flatten_seq.EMPTY;
    var G__28690 = instaparse.repeat.select_parse.call(null, grammar, initial_parser, text, segment, index__$1, first_result);
    var vec__28691 = G__28690;
    var parse = cljs.core.nth.call(null, vec__28691, 0, null);
    var end = cljs.core.nth.call(null, vec__28691, 1, null);
    var follow_ups = cljs.core.nth.call(null, vec__28691, 2, null);
    var selection = vec__28691;
    var index__$2 = index__$1;
    var parses__$1 = parses;
    var G__28690__$1 = G__28690;
    while (true) {
      var index__$3 = index__$2;
      var parses__$2 = parses__$1;
      var vec__28692 = G__28690__$1;
      var parse__$1 = cljs.core.nth.call(null, vec__28692, 0, null);
      var end__$1 = cljs.core.nth.call(null, vec__28692, 1, null);
      var follow_ups__$1 = cljs.core.nth.call(null, vec__28692, 2, null);
      var selection__$1 = vec__28692;
      if (selection__$1 == null) {
        return instaparse.repeat.failure_signal;
      } else {
        if (cljs.core._EQ_.call(null, index__$3, end__$1)) {
          return instaparse.repeat.failure_signal;
        } else {
          if (follow_ups__$1 == null) {
            return instaparse.gll.safe_with_meta.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, parses__$2, parse__$1), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optimize", "optimize", -1912349448), new cljs.core.Keyword(null, "memory", "memory", -1449401430), new cljs.core.Keyword("instaparse.gll", "start-index", "instaparse.gll/start-index", 404653620), 0, new cljs.core.Keyword("instaparse.gll", "end-index", "instaparse.gll/end-index", -1851404441), length], 
            null));
          } else {
            var G__28693 = cljs.core.long$.call(null, end__$1);
            var G__28694 = instaparse.auto_flatten_seq.conj_flat.call(null, parses__$2, parse__$1);
            var G__28695 = instaparse.repeat.select_parse.call(null, grammar, initial_parser, text, segment, end__$1, follow_ups__$1);
            index__$2 = G__28693;
            parses__$1 = G__28694;
            G__28690__$1 = G__28695;
            continue;
          }
        }
      }
      break;
    }
  };
  repeat_parse_no_tag = function(grammar, initial_parser, text, segment, index) {
    switch(arguments.length) {
      case 4:
        return repeat_parse_no_tag__4.call(this, grammar, initial_parser, text, segment);
      case 5:
        return repeat_parse_no_tag__5.call(this, grammar, initial_parser, text, segment, index);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat_parse_no_tag.cljs$core$IFn$_invoke$arity$4 = repeat_parse_no_tag__4;
  repeat_parse_no_tag.cljs$core$IFn$_invoke$arity$5 = repeat_parse_no_tag__5;
  return repeat_parse_no_tag;
}();
instaparse.repeat.repeat_parse = function() {
  var repeat_parse = null;
  var repeat_parse__4 = function(grammar, initial_parser, output_format, text) {
    return instaparse.repeat.repeat_parse_no_tag.call(null, grammar, initial_parser, text, instaparse.gll.string__GT_segment.call(null, text));
  };
  var repeat_parse__5 = function(grammar, initial_parser, output_format, root_tag, text) {
    if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), null, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), null], null), null)).call(null, output_format))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), null, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), null], null), null), new cljs.core.Symbol(null, "output-format", "output-format", -185851149, null)))));
    }
    if (cljs.core._EQ_.call(null, output_format, new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238))) {
      return instaparse.repeat.repeat_parse_hiccup.call(null, grammar, initial_parser, root_tag, text, instaparse.gll.string__GT_segment.call(null, text));
    } else {
      if (cljs.core._EQ_.call(null, output_format, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921))) {
        return instaparse.repeat.repeat_parse_enlive.call(null, grammar, initial_parser, root_tag, text, instaparse.gll.string__GT_segment.call(null, text));
      } else {
        return null;
      }
    }
  };
  repeat_parse = function(grammar, initial_parser, output_format, root_tag, text) {
    switch(arguments.length) {
      case 4:
        return repeat_parse__4.call(this, grammar, initial_parser, output_format, root_tag);
      case 5:
        return repeat_parse__5.call(this, grammar, initial_parser, output_format, root_tag, text);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat_parse.cljs$core$IFn$_invoke$arity$4 = repeat_parse__4;
  repeat_parse.cljs$core$IFn$_invoke$arity$5 = repeat_parse__5;
  return repeat_parse;
}();
instaparse.repeat.repeat_parse_with_header = function repeat_parse_with_header(grammar, header_parser, repeating_parser, output_format, root_tag, text) {
  var segment = instaparse.gll.string__GT_segment.call(null, text);
  var length = cljs.core.count.call(null, text);
  var header_results = instaparse.repeat.parse_from_index.call(null, grammar, header_parser, text, segment, 0);
  if (cljs.core.truth_(function() {
    var or__3640__auto__ = cljs.core.empty_QMARK_.call(null, header_results);
    if (or__3640__auto__) {
      return or__3640__auto__;
    } else {
      return(new cljs.core.Keyword(null, "hide", "hide", -596913169)).cljs$core$IFn$_invoke$arity$1(header_parser);
    }
  }())) {
    return instaparse.repeat.failure_signal;
  } else {
    var header_result = cljs.core.apply.call(null, cljs.core.max_key, instaparse.repeat.get_end, header_results);
    var end = instaparse.repeat.get_end.call(null, header_result);
    var repeat_result = instaparse.repeat.repeat_parse_no_tag.call(null, grammar, (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(repeating_parser), text, segment, end);
    var span_meta = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optimize", "optimize", -1912349448), new cljs.core.Keyword(null, "memory", "memory", -1449401430), new cljs.core.Keyword("instaparse.gll", "start-index", "instaparse.gll/start-index", 404653620), 0, new cljs.core.Keyword("instaparse.gll", "end-index", "instaparse.gll/end-index", -1851404441), length], null);
    if (repeat_result instanceof instaparse.gll.Failure || cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(repeating_parser), new cljs.core.Keyword(null, "star", "star", 279424429)) && instaparse.repeat.empty_result_QMARK_.call(null, repeat_result)) {
      return instaparse.repeat.failure_signal;
    } else {
      var G__28697 = output_format instanceof cljs.core.Keyword ? output_format.fqn : null;
      switch(G__28697) {
        case "hiccup":
          return instaparse.gll.safe_with_meta.call(null, instaparse.auto_flatten_seq.convert_afs_to_vec.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.auto_flatten_seq.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [root_tag], null)), header_result), repeat_result)), span_meta);
          break;
        case "enlive":
          return instaparse.gll.safe_with_meta.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), root_tag, new cljs.core.Keyword(null, "content", "content", 15833224), instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.EMPTY, header_result), repeat_result)], null), span_meta);
          break;
        default:
          return instaparse.gll.safe_with_meta.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.EMPTY, header_result), repeat_result), span_meta);
      }
    }
  }
};
instaparse.repeat.try_repeating_parse_strategy_with_header = function try_repeating_parse_strategy_with_header(grammar, text, start_production, start_rule, output_format) {
  var parsers = (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(start_rule);
  var repeating_parser = cljs.core.last.call(null, parsers);
  if (cljs.core.not.call(null, function() {
    var and__3628__auto__ = cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(start_rule), new cljs.core.Keyword(null, "cat", "cat", -1457810207));
    if (and__3628__auto__) {
      var and__3628__auto____$1 = (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "star", "star", 279424429), null, new cljs.core.Keyword(null, "plus", "plus", 211540661), null], null), null)).call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(repeating_parser));
      if (cljs.core.truth_(and__3628__auto____$1)) {
        return cljs.core.not.call(null, (new cljs.core.Keyword(null, "hide", "hide", -596913169)).cljs$core$IFn$_invoke$arity$1(repeating_parser)) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "hide", "hide", -596913169)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(repeating_parser)));
      } else {
        return and__3628__auto____$1;
      }
    } else {
      return and__3628__auto__;
    }
  }())) {
    return instaparse.repeat.failure_signal;
  } else {
    var header_parser = cljs.core.apply.call(null, instaparse.combinators_source.cat, cljs.core.butlast.call(null, parsers));
    if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(start_rule), instaparse.reduction.raw_non_terminal_reduction)) {
      return instaparse.repeat.repeat_parse_with_header.call(null, grammar, header_parser, repeating_parser, null, start_production, text);
    } else {
      return instaparse.repeat.repeat_parse_with_header.call(null, grammar, header_parser, repeating_parser, output_format, start_production, text);
    }
  }
};
instaparse.repeat.try_repeating_parse_strategy = function try_repeating_parse_strategy(parser, text, start_production) {
  var grammar = (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser);
  var output_format = (new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)).cljs$core$IFn$_invoke$arity$1(parser);
  var start_rule = cljs.core.get.call(null, grammar, start_production);
  if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "hide", "hide", -596913169)).cljs$core$IFn$_invoke$arity$1(start_rule), true)) {
    return instaparse.repeat.failure_signal;
  } else {
    if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(start_rule), instaparse.reduction.raw_non_terminal_reduction)) {
      if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(start_rule), new cljs.core.Keyword(null, "star", "star", 279424429))) {
        return instaparse.repeat.repeat_parse.call(null, grammar, (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(start_rule), output_format, text);
      } else {
        if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(start_rule), new cljs.core.Keyword(null, "plus", "plus", 211540661))) {
          var result = instaparse.repeat.repeat_parse.call(null, grammar, (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(start_rule), output_format, text);
          if (instaparse.repeat.empty_result_QMARK_.call(null, result)) {
            return instaparse.repeat.failure_signal;
          } else {
            return result;
          }
        } else {
          return instaparse.repeat.try_repeating_parse_strategy_with_header.call(null, grammar, text, start_production, start_rule, output_format);
        }
      }
    } else {
      if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(start_rule), new cljs.core.Keyword(null, "star", "star", 279424429))) {
        return instaparse.repeat.repeat_parse.call(null, grammar, (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(start_rule), output_format, start_production, text);
      } else {
        if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(start_rule), new cljs.core.Keyword(null, "plus", "plus", 211540661))) {
          var result = instaparse.repeat.repeat_parse.call(null, grammar, (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(start_rule), output_format, start_production, text);
          if (instaparse.repeat.empty_result_QMARK_.call(null, result)) {
            return instaparse.repeat.failure_signal;
          } else {
            return result;
          }
        } else {
          return instaparse.repeat.try_repeating_parse_strategy_with_header.call(null, grammar, text, start_production, start_rule, output_format);
        }
      }
    }
  }
};
instaparse.repeat.used_memory_optimization_QMARK_ = function used_memory_optimization_QMARK_(tree) {
  return cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "memory", "memory", -1449401430), (new cljs.core.Keyword(null, "optimize", "optimize", -1912349448)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, tree)));
};
goog.provide("instaparse.core");
goog.require("cljs.core");
goog.require("instaparse.transform");
goog.require("instaparse.combinators_source");
goog.require("instaparse.abnf");
goog.require("instaparse.gll");
goog.require("instaparse.print");
goog.require("instaparse.cfg");
goog.require("instaparse.reduction");
goog.require("instaparse.transform");
goog.require("instaparse.cfg");
goog.require("instaparse.abnf");
goog.require("instaparse.failure");
goog.require("instaparse.print");
goog.require("instaparse.combinators_source");
goog.require("instaparse.gll");
goog.require("instaparse.failure");
goog.require("instaparse.reduction");
goog.require("instaparse.repeat");
goog.require("instaparse.repeat");
instaparse.core._STAR_default_output_format_STAR_ = new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238);
instaparse.core.set_default_output_format_BANG_ = function set_default_output_format_BANG_(type) {
  if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), null, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), null], null), null)).call(null, type))) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), null, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), null], null), null), new cljs.core.Symbol(null, "type", "type", -1480165421, null)))));
  }
  return instaparse.core._STAR_default_output_format_STAR_ = type;
};
instaparse.core._STAR_default_input_format_STAR_ = new cljs.core.Keyword(null, "ebnf", "ebnf", 31967825);
instaparse.core.set_default_input_format_BANG_ = function set_default_input_format_BANG_(type) {
  if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ebnf", "ebnf", 31967825), null, new cljs.core.Keyword(null, "abnf", "abnf", -152462052), null], null), null)).call(null, type))) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ebnf", "ebnf", 31967825), null, new cljs.core.Keyword(null, "abnf", "abnf", -152462052), null], null), null), new cljs.core.Symbol(null, "type", "type", -1480165421, null)))));
  }
  return instaparse.core._STAR_default_input_format_STAR_ = type;
};
instaparse.core.unhide_parser = function unhide_parser(parser, unhide) {
  var G__28626 = unhide;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "all", "all", 892129742), G__28626)) {
    return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), instaparse.combinators_source.unhide_all.call(null, (new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)).cljs$core$IFn$_invoke$arity$1(parser), (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser)));
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "tags", "tags", 1771418977), G__28626)) {
      return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), instaparse.combinators_source.unhide_tags.call(null, (new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)).cljs$core$IFn$_invoke$arity$1(parser), (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser)));
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "content", "content", 15833224), G__28626)) {
        return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), instaparse.combinators_source.unhide_all_content.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser)));
      } else {
        if (cljs.core._EQ_.call(null, null, G__28626)) {
          return parser;
        } else {
          throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(unhide));
        }
      }
    }
  }
};
instaparse.core.parse = function() {
  var parse__delegate = function(parser, text, p__28627) {
    var map__28629 = p__28627;
    var map__28629__$1 = cljs.core.seq_QMARK_.call(null, map__28629) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28629) : map__28629;
    var options = map__28629__$1;
    if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [null, null, new cljs.core.Keyword(null, "tags", "tags", 1771418977), null, new cljs.core.Keyword(null, "content", "content", 15833224), null, new cljs.core.Keyword(null, "all", "all", 892129742), null], null), null), cljs.core.get.call(null, options, new cljs.core.Keyword(null, "unhide", "unhide", -413983695)))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [null, null, new cljs.core.Keyword(null, "tags", "tags", 1771418977), null, new cljs.core.Keyword(null, "content", "content", 15833224), null, new cljs.core.Keyword(null, "all", "all", 892129742), null], null), null), cljs.core.list(new cljs.core.Symbol(null, 
      "get", "get", -971253014, null), new cljs.core.Symbol(null, "options", "options", 1740170016, null), new cljs.core.Keyword(null, "unhide", "unhide", -413983695))))));
    }
    if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [null, null, new cljs.core.Keyword(null, "memory", "memory", -1449401430), null], null), null), cljs.core.get.call(null, options, new cljs.core.Keyword(null, "optimize", "optimize", -1912349448)))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [null, null, new cljs.core.Keyword(null, "memory", "memory", -1449401430), null], null), null), cljs.core.list(new cljs.core.Symbol(null, "get", "get", -971253014, null), new cljs.core.Symbol(null, "options", "options", 
      1740170016, null), new cljs.core.Keyword(null, "optimize", "optimize", -1912349448))))));
    }
    var start_production = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "start", "start", -355208981), (new cljs.core.Keyword(null, "start-production", "start-production", 687546537)).cljs$core$IFn$_invoke$arity$1(parser));
    var partial_QMARK_ = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "partial", "partial", 241141745), false);
    var optimize_QMARK_ = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "optimize", "optimize", -1912349448), false);
    var unhide = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "unhide", "unhide", -413983695));
    var parser__$1 = instaparse.core.unhide_parser.call(null, parser, unhide);
    if (cljs.core.truth_((new cljs.core.Keyword(null, "total", "total", 1916810418)).cljs$core$IFn$_invoke$arity$1(options))) {
      return instaparse.gll.parse_total.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser__$1), start_production, text, partial_QMARK_, instaparse.reduction.node_builders.call(null, (new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)).cljs$core$IFn$_invoke$arity$1(parser__$1)));
    } else {
      if (cljs.core.truth_(function() {
        var and__3628__auto__ = optimize_QMARK_;
        if (cljs.core.truth_(and__3628__auto__)) {
          return cljs.core.not.call(null, partial_QMARK_);
        } else {
          return and__3628__auto__;
        }
      }())) {
        var result = instaparse.repeat.try_repeating_parse_strategy.call(null, parser__$1, text, start_production);
        if (cljs.core.truth_(instaparse.core.failure_QMARK_.call(null, result))) {
          return instaparse.gll.parse.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser__$1), start_production, text, partial_QMARK_);
        } else {
          return result;
        }
      } else {
        return instaparse.gll.parse.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser__$1), start_production, text, partial_QMARK_);
      }
    }
  };
  var parse = function(parser, text, var_args) {
    var p__28627 = null;
    if (arguments.length > 2) {
      p__28627 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return parse__delegate.call(this, parser, text, p__28627);
  };
  parse.cljs$lang$maxFixedArity = 2;
  parse.cljs$lang$applyTo = function(arglist__28630) {
    var parser = cljs.core.first(arglist__28630);
    arglist__28630 = cljs.core.next(arglist__28630);
    var text = cljs.core.first(arglist__28630);
    var p__28627 = cljs.core.rest(arglist__28630);
    return parse__delegate(parser, text, p__28627);
  };
  parse.cljs$core$IFn$_invoke$arity$variadic = parse__delegate;
  return parse;
}();
instaparse.core.parses = function() {
  var parses__delegate = function(parser, text, p__28631) {
    var map__28633 = p__28631;
    var map__28633__$1 = cljs.core.seq_QMARK_.call(null, map__28633) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28633) : map__28633;
    var options = map__28633__$1;
    if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [null, null, new cljs.core.Keyword(null, "tags", "tags", 1771418977), null, new cljs.core.Keyword(null, "content", "content", 15833224), null, new cljs.core.Keyword(null, "all", "all", 892129742), null], null), null), cljs.core.get.call(null, options, new cljs.core.Keyword(null, "unhide", "unhide", -413983695)))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [null, null, new cljs.core.Keyword(null, "tags", "tags", 1771418977), null, new cljs.core.Keyword(null, "content", "content", 15833224), null, new cljs.core.Keyword(null, "all", "all", 892129742), null], null), null), cljs.core.list(new cljs.core.Symbol(null, 
      "get", "get", -971253014, null), new cljs.core.Symbol(null, "options", "options", 1740170016, null), new cljs.core.Keyword(null, "unhide", "unhide", -413983695))))));
    }
    var start_production = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "start", "start", -355208981), (new cljs.core.Keyword(null, "start-production", "start-production", 687546537)).cljs$core$IFn$_invoke$arity$1(parser));
    var partial_QMARK_ = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "partial", "partial", 241141745), false);
    var unhide = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "unhide", "unhide", -413983695));
    var parser__$1 = instaparse.core.unhide_parser.call(null, parser, unhide);
    if (cljs.core.truth_((new cljs.core.Keyword(null, "total", "total", 1916810418)).cljs$core$IFn$_invoke$arity$1(options))) {
      return instaparse.gll.parses_total.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser__$1), start_production, text, partial_QMARK_, instaparse.reduction.node_builders.call(null, (new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)).cljs$core$IFn$_invoke$arity$1(parser__$1)));
    } else {
      return instaparse.gll.parses.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser__$1), start_production, text, partial_QMARK_);
    }
  };
  var parses = function(parser, text, var_args) {
    var p__28631 = null;
    if (arguments.length > 2) {
      p__28631 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return parses__delegate.call(this, parser, text, p__28631);
  };
  parses.cljs$lang$maxFixedArity = 2;
  parses.cljs$lang$applyTo = function(arglist__28634) {
    var parser = cljs.core.first(arglist__28634);
    arglist__28634 = cljs.core.next(arglist__28634);
    var text = cljs.core.first(arglist__28634);
    var p__28631 = cljs.core.rest(arglist__28634);
    return parses__delegate(parser, text, p__28631);
  };
  parses.cljs$core$IFn$_invoke$arity$variadic = parses__delegate;
  return parses;
}();
instaparse.core.Parser = function(grammar, start_production, output_format, __meta, __extmap) {
  this.grammar = grammar;
  this.start_production = start_production;
  this.output_format = output_format;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667595;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 3) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
instaparse.core.Parser.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4236__auto__, k__4237__auto__) {
  var self__ = this;
  var this__4236__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4236__auto____$1, k__4237__auto__, null);
};
instaparse.core.Parser.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4238__auto__, k28636, else__4239__auto__) {
  var self__ = this;
  var this__4238__auto____$1 = this;
  var G__28639 = k28636 instanceof cljs.core.Keyword ? k28636.fqn : null;
  switch(G__28639) {
    case "output-format":
      return self__.output_format;
      break;
    case "start-production":
      return self__.start_production;
      break;
    case "grammar":
      return self__.grammar;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k28636, else__4239__auto__);
  }
};
instaparse.core.Parser.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4250__auto__, writer__4251__auto__, opts__4252__auto__) {
  var self__ = this;
  var this__4250__auto____$1 = this;
  var pr_pair__4253__auto__ = function(this__4250__auto____$1) {
    return function(keyval__4254__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4251__auto__, cljs.core.pr_writer, "", " ", "", opts__4252__auto__, keyval__4254__auto__);
    };
  }(this__4250__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4251__auto__, pr_pair__4253__auto__, "#instaparse.core.Parser{", ", ", "}", opts__4252__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), self__.grammar], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "start-production", "start-production", 687546537), self__.start_production], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), self__.output_format], null)], null), self__.__extmap));
};
instaparse.core.Parser.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4234__auto__) {
  var self__ = this;
  var this__4234__auto____$1 = this;
  return self__.__meta;
};
instaparse.core.Parser.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4230__auto__) {
  var self__ = this;
  var this__4230__auto____$1 = this;
  return new instaparse.core.Parser(self__.grammar, self__.start_production, self__.output_format, self__.__meta, self__.__extmap, self__.__hash);
};
instaparse.core.Parser.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4240__auto__) {
  var self__ = this;
  var this__4240__auto____$1 = this;
  return 3 + cljs.core.count.call(null, self__.__extmap);
};
instaparse.core.Parser.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4231__auto__) {
  var self__ = this;
  var this__4231__auto____$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_imap.call(null, this__4231__auto____$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
instaparse.core.Parser.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4232__auto__, other__4233__auto__) {
  var self__ = this;
  var this__4232__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = other__4233__auto__;
    if (cljs.core.truth_(and__3628__auto__)) {
      return this__4232__auto____$1.constructor === other__4233__auto__.constructor && cljs.core.equiv_map.call(null, this__4232__auto____$1, other__4233__auto__);
    } else {
      return and__3628__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
instaparse.core.Parser.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4245__auto__, k__4246__auto__) {
  var self__ = this;
  var this__4245__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "start-production", "start-production", 687546537), null, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), null, new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), null], null), null), k__4246__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4245__auto____$1), self__.__meta), k__4246__auto__);
  } else {
    return new instaparse.core.Parser(self__.grammar, self__.start_production, self__.output_format, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4246__auto__)), null);
  }
};
instaparse.core.Parser.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4243__auto__, k__4244__auto__, G__28635) {
  var self__ = this;
  var this__4243__auto____$1 = this;
  var pred__28640 = cljs.core.keyword_identical_QMARK_;
  var expr__28641 = k__4244__auto__;
  if (cljs.core.truth_(pred__28640.call(null, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), expr__28641))) {
    return new instaparse.core.Parser(G__28635, self__.start_production, self__.output_format, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__28640.call(null, new cljs.core.Keyword(null, "start-production", "start-production", 687546537), expr__28641))) {
      return new instaparse.core.Parser(self__.grammar, G__28635, self__.output_format, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__28640.call(null, new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), expr__28641))) {
        return new instaparse.core.Parser(self__.grammar, self__.start_production, G__28635, self__.__meta, self__.__extmap, null);
      } else {
        return new instaparse.core.Parser(self__.grammar, self__.start_production, self__.output_format, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4244__auto__, G__28635), null);
      }
    }
  }
};
instaparse.core.Parser.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4248__auto__) {
  var self__ = this;
  var this__4248__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), self__.grammar], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start-production", "start-production", 687546537), self__.start_production], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), self__.output_format], null)], null), self__.__extmap));
};
instaparse.core.Parser.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4235__auto__, G__28635) {
  var self__ = this;
  var this__4235__auto____$1 = this;
  return new instaparse.core.Parser(self__.grammar, self__.start_production, self__.output_format, G__28635, self__.__extmap, self__.__hash);
};
instaparse.core.Parser.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4241__auto__, entry__4242__auto__) {
  var self__ = this;
  var this__4241__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4242__auto__)) {
    return cljs.core._assoc.call(null, this__4241__auto____$1, cljs.core._nth.call(null, entry__4242__auto__, 0), cljs.core._nth.call(null, entry__4242__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4241__auto____$1, entry__4242__auto__);
  }
};
instaparse.core.Parser.prototype.call = function() {
  var G__28644 = null;
  var G__28644__2 = function(self__, text) {
    var self__ = this;
    var self____$1 = this;
    var parser = self____$1;
    return instaparse.core.parse.call(null, parser, text);
  };
  var G__28644__4 = function(self__, text, key1, val1) {
    var self__ = this;
    var self____$1 = this;
    var parser = self____$1;
    return instaparse.core.parse.call(null, parser, text, key1, val1);
  };
  var G__28644__6 = function(self__, text, key1, val1, key2, val2) {
    var self__ = this;
    var self____$1 = this;
    var parser = self____$1;
    return instaparse.core.parse.call(null, parser, text, key1, val1, key2, val2);
  };
  var G__28644__8 = function(self__, text, key1, val1, key2, val2, key3, val3) {
    var self__ = this;
    var self____$1 = this;
    var parser = self____$1;
    return instaparse.core.parse.call(null, parser, text, key1, val1, key2, val2, key3, val3);
  };
  G__28644 = function(self__, text, key1, val1, key2, val2, key3, val3) {
    switch(arguments.length) {
      case 2:
        return G__28644__2.call(this, self__, text);
      case 4:
        return G__28644__4.call(this, self__, text, key1, val1);
      case 6:
        return G__28644__6.call(this, self__, text, key1, val1, key2, val2);
      case 8:
        return G__28644__8.call(this, self__, text, key1, val1, key2, val2, key3, val3);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__28644.cljs$core$IFn$_invoke$arity$2 = G__28644__2;
  G__28644.cljs$core$IFn$_invoke$arity$4 = G__28644__4;
  G__28644.cljs$core$IFn$_invoke$arity$6 = G__28644__6;
  G__28644.cljs$core$IFn$_invoke$arity$8 = G__28644__8;
  return G__28644;
}();
instaparse.core.Parser.prototype.apply = function(self__, args28638) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args28638)));
};
instaparse.core.Parser.prototype.cljs$core$IFn$_invoke$arity$1 = function(text) {
  var self__ = this;
  var parser = this;
  return instaparse.core.parse.call(null, parser, text);
};
instaparse.core.Parser.prototype.cljs$core$IFn$_invoke$arity$3 = function(text, key1, val1) {
  var self__ = this;
  var parser = this;
  return instaparse.core.parse.call(null, parser, text, key1, val1);
};
instaparse.core.Parser.prototype.cljs$core$IFn$_invoke$arity$5 = function(text, key1, val1, key2, val2) {
  var self__ = this;
  var parser = this;
  return instaparse.core.parse.call(null, parser, text, key1, val1, key2, val2);
};
instaparse.core.Parser.prototype.cljs$core$IFn$_invoke$arity$7 = function(text, key1, val1, key2, val2, key3, val3) {
  var self__ = this;
  var parser = this;
  return instaparse.core.parse.call(null, parser, text, key1, val1, key2, val2, key3, val3);
};
instaparse.core.Parser.cljs$lang$type = true;
instaparse.core.Parser.cljs$lang$ctorPrSeq = function(this__4270__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "instaparse.core/Parser");
};
instaparse.core.Parser.cljs$lang$ctorPrWriter = function(this__4270__auto__, writer__4271__auto__) {
  return cljs.core._write.call(null, writer__4271__auto__, "instaparse.core/Parser");
};
instaparse.core.__GT_Parser = function __GT_Parser(grammar, start_production, output_format) {
  return new instaparse.core.Parser(grammar, start_production, output_format);
};
instaparse.core.map__GT_Parser = function map__GT_Parser(G__28637) {
  return new instaparse.core.Parser((new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(G__28637), (new cljs.core.Keyword(null, "start-production", "start-production", 687546537)).cljs$core$IFn$_invoke$arity$1(G__28637), (new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)).cljs$core$IFn$_invoke$arity$1(G__28637), null, cljs.core.dissoc.call(null, G__28637, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), new cljs.core.Keyword(null, 
  "start-production", "start-production", 687546537), new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)));
};
instaparse.core.Parser.prototype.cljs$core$IPrintWithWriter$ = true;
instaparse.core.Parser.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(parser, writer, _) {
  var parser__$1 = this;
  return cljs.core._write.call(null, writer, instaparse.print.Parser__GT_str.call(null, parser__$1));
};
instaparse.core.parser = function() {
  var parser__delegate = function(grammar_specification, p__28645) {
    var map__28650 = p__28645;
    var map__28650__$1 = cljs.core.seq_QMARK_.call(null, map__28650) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28650) : map__28650;
    var options = map__28650__$1;
    if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [null, null, new cljs.core.Keyword(null, "ebnf", "ebnf", 31967825), null, new cljs.core.Keyword(null, "abnf", "abnf", -152462052), null], null), null), cljs.core.get.call(null, options, new cljs.core.Keyword(null, "input-format", "input-format", -422703481)))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [null, null, new cljs.core.Keyword(null, "ebnf", "ebnf", 31967825), null, new cljs.core.Keyword(null, "abnf", "abnf", -152462052), null], null), null), cljs.core.list(new cljs.core.Symbol(null, "get", "get", -971253014, 
      null), new cljs.core.Symbol(null, "options", "options", 1740170016, null), new cljs.core.Keyword(null, "input-format", "input-format", -422703481))))));
    }
    if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [null, null, new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), null, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), null], null), null), cljs.core.get.call(null, options, new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [null, null, new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), null, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), null], null), null), cljs.core.list(new cljs.core.Symbol(null, "get", "get", -971253014, 
      null), new cljs.core.Symbol(null, "options", "options", 1740170016, null), new cljs.core.Keyword(null, "output-format", "output-format", -1826382676))))));
    }
    if (function() {
      var ws_parser = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "auto-whitespace", "auto-whitespace", 741152317));
      return ws_parser == null || cljs.core.contains_QMARK_.call(null, instaparse.core.standard_whitespace_parsers, ws_parser) || cljs.core.map_QMARK_.call(null, ws_parser) && cljs.core.contains_QMARK_.call(null, ws_parser, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)) && cljs.core.contains_QMARK_.call(null, ws_parser, new cljs.core.Keyword(null, "start-production", "start-production", 687546537));
    }()) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "let", "let", 358118826, null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ws-parser", "ws-parser", 937152647, null), cljs.core.list(new cljs.core.Symbol(null, "get", "get", -971253014, null), new cljs.core.Symbol(null, "options", "options", 1740170016, null), new cljs.core.Keyword(null, 
      "auto-whitespace", "auto-whitespace", 741152317))], null), cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "ws-parser", "ws-parser", 937152647, null)), cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.Symbol(null, "standard-whitespace-parsers", "standard-whitespace-parsers", -1387573457, null), new cljs.core.Symbol(null, 
      "ws-parser", "ws-parser", 937152647, null)), cljs.core.list(new cljs.core.Symbol(null, "and", "and", 668631710, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "ws-parser", "ws-parser", 937152647, null)), cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.Symbol(null, "ws-parser", "ws-parser", 937152647, null), new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)), cljs.core.list(new cljs.core.Symbol(null, 
      "contains?", "contains?", -1676812576, null), new cljs.core.Symbol(null, "ws-parser", "ws-parser", 937152647, null), new cljs.core.Keyword(null, "start-production", "start-production", 687546537))))))));
    }
    var input_format = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "input-format", "input-format", -422703481), instaparse.core._STAR_default_input_format_STAR_);
    var build_parser = function() {
      var G__28651 = input_format instanceof cljs.core.Keyword ? input_format.fqn : null;
      switch(G__28651) {
        case "ebnf":
          if (cljs.core.truth_(cljs.core.get.call(null, options, new cljs.core.Keyword(null, "string-ci", "string-ci", 374631805)))) {
            return function(G__28651, input_format, map__28650, map__28650__$1, options) {
              return function(spec, output_format) {
                var _STAR_case_insensitive_literals_STAR_28652 = instaparse.cfg._STAR_case_insensitive_literals_STAR_;
                try {
                  instaparse.cfg._STAR_case_insensitive_literals_STAR_ = true;
                  return instaparse.cfg.build_parser.call(null, spec, output_format);
                } finally {
                  instaparse.cfg._STAR_case_insensitive_literals_STAR_ = _STAR_case_insensitive_literals_STAR_28652;
                }
              };
            }(G__28651, input_format, map__28650, map__28650__$1, options);
          } else {
            return instaparse.cfg.build_parser;
          }
          break;
        case "abnf":
          return instaparse.abnf.build_parser;
          break;
        default:
          throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(input_format));;
      }
    }();
    var output_format = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), instaparse.core._STAR_default_output_format_STAR_);
    var start = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "start", "start", -355208981), null);
    var built_parser = typeof grammar_specification === "string" ? function() {
      var parser__$1 = build_parser.call(null, grammar_specification, output_format);
      if (cljs.core.truth_(start)) {
        return instaparse.core.map__GT_Parser.call(null, cljs.core.assoc.call(null, parser__$1, new cljs.core.Keyword(null, "start-production", "start-production", 687546537), start));
      } else {
        return instaparse.core.map__GT_Parser.call(null, parser__$1);
      }
    }() : cljs.core.map_QMARK_.call(null, grammar_specification) ? function() {
      var parser__$1 = instaparse.cfg.build_parser_from_combinators.call(null, grammar_specification, output_format, start);
      return instaparse.core.map__GT_Parser.call(null, parser__$1);
    }() : cljs.core.vector_QMARK_.call(null, grammar_specification) ? function() {
      var start__$1 = cljs.core.truth_(start) ? start : grammar_specification.call(null, 0);
      var parser__$1 = instaparse.cfg.build_parser_from_combinators.call(null, cljs.core.apply.call(null, cljs.core.hash_map, grammar_specification), output_format, start__$1);
      return instaparse.core.map__GT_Parser.call(null, parser__$1);
    }() : null;
    var auto_whitespace = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "auto-whitespace", "auto-whitespace", 741152317));
    var whitespace_parser = auto_whitespace instanceof cljs.core.Keyword ? cljs.core.get.call(null, instaparse.core.standard_whitespace_parsers, auto_whitespace) : auto_whitespace;
    var temp__4124__auto__ = whitespace_parser;
    if (cljs.core.truth_(temp__4124__auto__)) {
      var map__28653 = temp__4124__auto__;
      var map__28653__$1 = cljs.core.seq_QMARK_.call(null, map__28653) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28653) : map__28653;
      var ws_grammar = cljs.core.get.call(null, map__28653__$1, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267));
      var ws_start = cljs.core.get.call(null, map__28653__$1, new cljs.core.Keyword(null, "start-production", "start-production", 687546537));
      return cljs.core.assoc.call(null, built_parser, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), instaparse.combinators_source.auto_whitespace.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(built_parser), (new cljs.core.Keyword(null, "start-production", "start-production", 687546537)).cljs$core$IFn$_invoke$arity$1(built_parser), ws_grammar, ws_start));
    } else {
      return built_parser;
    }
  };
  var parser = function(grammar_specification, var_args) {
    var p__28645 = null;
    if (arguments.length > 1) {
      p__28645 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return parser__delegate.call(this, grammar_specification, p__28645);
  };
  parser.cljs$lang$maxFixedArity = 1;
  parser.cljs$lang$applyTo = function(arglist__28655) {
    var grammar_specification = cljs.core.first(arglist__28655);
    var p__28645 = cljs.core.rest(arglist__28655);
    return parser__delegate(grammar_specification, p__28645);
  };
  parser.cljs$core$IFn$_invoke$arity$variadic = parser__delegate;
  return parser;
}();
instaparse.core.failure_QMARK_ = function failure_QMARK_(result) {
  return result instanceof instaparse.gll.Failure || cljs.core.meta.call(null, result) instanceof instaparse.gll.Failure;
};
instaparse.core.get_failure = function get_failure(result) {
  if (result instanceof instaparse.gll.Failure) {
    return result;
  } else {
    if (cljs.core.meta.call(null, result) instanceof instaparse.gll.Failure) {
      return cljs.core.meta.call(null, result);
    } else {
      return null;
    }
  }
};
instaparse.core.transform = instaparse.transform.transform;
instaparse.core.standard_whitespace_parsers = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "standard", "standard", -1769206695), instaparse.core.parser.call(null, "whitespace \x3d #'\\s+'"), new cljs.core.Keyword(null, "comma", "comma", 1699024745), instaparse.core.parser.call(null, "whitespace \x3d #'[,\\s]+'")], null);
goog.provide("cljs.looperscript.interpret");
goog.require("cljs.core");
goog.require("cljs.looperscript.vector_fns");
goog.require("cljs.reader");
goog.require("cljs.looperscript.vector_fns");
goog.require("cljs.looperscript.vector_fns");
goog.require("instaparse.core");
goog.require("instaparse.core");
goog.require("cljs.reader");
cljs.looperscript.interpret.log = function() {
  var log__delegate = function(args) {
    return console.log(cljs.core.apply.call(null, cljs.core.str, args));
  };
  var log = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return log__delegate.call(this, args);
  };
  log.cljs$lang$maxFixedArity = 0;
  log.cljs$lang$applyTo = function(arglist__26658) {
    var args = cljs.core.seq(arglist__26658);
    return log__delegate(args);
  };
  log.cljs$core$IFn$_invoke$arity$variadic = log__delegate;
  return log;
}();
cljs.looperscript.interpret.remove_comments = function remove_comments(s) {
  return clojure.string.join.call(null, "\n", cljs.core.map.call(null, function(p1__26659_SHARP_) {
    return cljs.core.first.call(null, cljs.core.first.call(null, cljs.core.re_seq.call(null, /^([^;]+)/, p1__26659_SHARP_)));
  }, clojure.string.split_lines.call(null, s)));
};
cljs.looperscript.interpret.string__GT_number = function string__GT_number(s) {
  return cljs.reader.read_string.call(null, function() {
    var temp__4124__auto__ = cljs.core.re_find.call(null, /-0*(\.[0-9]+)/, s);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var n = temp__4124__auto__;
      return "-0" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.second.call(null, n));
    } else {
      var temp__4124__auto____$1 = cljs.core.re_find.call(null, /(^\.[0-9]+)/, s);
      if (cljs.core.truth_(temp__4124__auto____$1)) {
        var n = temp__4124__auto____$1;
        return "0" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.second.call(null, n));
      } else {
        var temp__4124__auto____$2 = cljs.core.re_find.call(null, /^0+([0-9][0-9.]+)/, s);
        if (cljs.core.truth_(temp__4124__auto____$2)) {
          var n = temp__4124__auto____$2;
          return cljs.core.last.call(null, n);
        } else {
          var temp__4124__auto____$3 = cljs.core.re_find.call(null, /^-0+([0-9.]+)/, s);
          if (cljs.core.truth_(temp__4124__auto____$3)) {
            var n = temp__4124__auto____$3;
            return "-" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.last.call(null, n));
          } else {
            return s;
          }
        }
      }
    }
  }());
};
cljs.looperscript.interpret.ratio__GT_note = function ratio__GT_note(r) {
  return Math.log.call(null, r) / Math.log.call(null, 2) * 12;
};
cljs.looperscript.interpret.splice = function splice(v) {
  return cljs.core.with_meta.call(null, function() {
    var accum = cljs.core.PersistentVector.EMPTY;
    var rem = v;
    while (true) {
      if (cljs.core.empty_QMARK_.call(null, rem)) {
        return accum;
      } else {
        var n = cljs.core.first.call(null, rem);
        if (cljs.core.vector_QMARK_.call(null, n)) {
          if (cljs.core.truth_((new cljs.core.Keyword(null, "splice", "splice", 449588165)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, n)))) {
            var G__26660 = cljs.core.into.call(null, accum, splice.call(null, n));
            var G__26661 = cljs.core.rest.call(null, rem);
            accum = G__26660;
            rem = G__26661;
            continue;
          } else {
            var G__26662 = cljs.core.conj.call(null, accum, splice.call(null, n));
            var G__26663 = cljs.core.rest.call(null, rem);
            accum = G__26662;
            rem = G__26663;
            continue;
          }
        } else {
          var G__26664 = cljs.core.conj.call(null, accum, n);
          var G__26665 = cljs.core.rest.call(null, rem);
          accum = G__26664;
          rem = G__26665;
          continue;
        }
      }
      break;
    }
  }(), cljs.core.meta.call(null, v));
};
cljs.looperscript.interpret.mark_for_splice = function mark_for_splice(col) {
  return cljs.core.with_meta.call(null, cljs.core.vec.call(null, col), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "splice", "splice", 449588165), true], null));
};
cljs.looperscript.interpret.maybe_process_vec = function maybe_process_vec(x) {
  if (cljs.core.vector_QMARK_.call(null, x)) {
    return cljs.looperscript.interpret._process_vec.call(null, x);
  } else {
    return x;
  }
};
cljs.looperscript.interpret._process_vec = function _process_vec(v) {
  var vec__26670 = v;
  var a = cljs.core.nth.call(null, vec__26670, 0, null);
  var b = cljs.core.nth.call(null, vec__26670, 1, null);
  var r = cljs.core.vec.call(null, cljs.core.rest.call(null, v));
  var r2 = cljs.core.vec.call(null, cljs.core.drop.call(null, 2, v));
  var vec__26671 = cljs.core.map.call(null, function(vec__26670, a, b, r, r2) {
    return function(p1__26666_SHARP_) {
      return cljs.core.get.call(null, cljs.looperscript.vector_fns.vec_fns, p1__26666_SHARP_);
    };
  }(vec__26670, a, b, r, r2), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [a, b], null));
  var afn = cljs.core.nth.call(null, vec__26671, 0, null);
  var bfn = cljs.core.nth.call(null, vec__26671, 1, null);
  var delve = function(vec__26670, a, b, r, r2, vec__26671, afn, bfn) {
    return function(p1__26667_SHARP_) {
      return cljs.looperscript.interpret.splice.call(null, cljs.core.map.call(null, cljs.looperscript.interpret.maybe_process_vec, p1__26667_SHARP_));
    };
  }(vec__26670, a, b, r, r2, vec__26671, afn, bfn);
  if (cljs.core.truth_(afn)) {
    return cljs.core.apply.call(null, afn, delve.call(null, r));
  } else {
    if (cljs.core.truth_(function() {
      var and__3628__auto__ = cljs.core._EQ_.call(null, a, "#");
      if (and__3628__auto__) {
        return bfn;
      } else {
        return and__3628__auto__;
      }
    }())) {
      return function(vec__26670, a, b, r, r2, vec__26671, afn, bfn, delve) {
        return function() {
          return cljs.core.apply.call(null, bfn, delve.call(null, r2));
        };
      }(vec__26670, a, b, r, r2, vec__26671, afn, bfn, delve);
    } else {
      if (cljs.core.truth_(function() {
        var and__3628__auto__ = cljs.core._EQ_.call(null, a, "@");
        if (and__3628__auto__) {
          return bfn;
        } else {
          return and__3628__auto__;
        }
      }())) {
        return cljs.looperscript.interpret.mark_for_splice.call(null, cljs.core.apply.call(null, bfn, delve.call(null, r2)));
      } else {
        if (cljs.core._EQ_.call(null, a, "@")) {
          return cljs.looperscript.interpret.mark_for_splice.call(null, delve.call(null, r));
        } else {
          if (cljs.core.sequential_QMARK_.call(null, v)) {
            return delve.call(null, v);
          } else {
            return v;
          }
        }
      }
    }
  }
};
cljs.looperscript.interpret.pre_process_to_eval__BANG_s = function pre_process_to_eval__BANG_s(v) {
  var vec__26675 = v;
  var a = cljs.core.nth.call(null, vec__26675, 0, null);
  var b = cljs.core.nth.call(null, vec__26675, 1, null);
  var r = cljs.core.vec.call(null, cljs.core.rest.call(null, v));
  var r2 = cljs.core.vec.call(null, cljs.core.drop.call(null, 2, v));
  var delve = function(vec__26675, a, b, r, r2) {
    return function(p1__26672_SHARP_) {
      return cljs.looperscript.interpret.splice.call(null, cljs.core.map.call(null, cljs.looperscript.interpret.maybe_process_vec, p1__26672_SHARP_));
    };
  }(vec__26675, a, b, r, r2);
  if (cljs.core._EQ_.call(null, a, "!")) {
    return cljs.looperscript.interpret._process_vec.call(null, r);
  } else {
    if (cljs.core.sequential_QMARK_.call(null, v)) {
      return cljs.core.mapv.call(null, function(vec__26675, a, b, r, r2, delve) {
        return function(p1__26673_SHARP_) {
          if (cljs.core.sequential_QMARK_.call(null, p1__26673_SHARP_)) {
            return pre_process_to_eval__BANG_s.call(null, p1__26673_SHARP_);
          } else {
            return p1__26673_SHARP_;
          }
        };
      }(vec__26675, a, b, r, r2, delve), v);
    } else {
      return v;
    }
  }
};
cljs.looperscript.interpret.process_vec = function process_vec(args) {
  if (!cljs.core.sequential_QMARK_.call(null, args)) {
    return args;
  } else {
    return cljs.looperscript.interpret._process_vec.call(null, cljs.looperscript.interpret.pre_process_to_eval__BANG_s.call(null, args));
  }
};
cljs.looperscript.interpret.walk_map_applying_fn_to_vals = function walk_map_applying_fn_to_vals(f, m) {
  return cljs.core.reduce.call(null, function(m__$1, p__26678) {
    var vec__26679 = p__26678;
    var k = cljs.core.nth.call(null, vec__26679, 0, null);
    var v = cljs.core.nth.call(null, vec__26679, 1, null);
    var res = cljs.core.map_QMARK_.call(null, v) ? walk_map_applying_fn_to_vals.call(null, f, v) : f.call(null, v);
    return cljs.core.assoc.call(null, m__$1, k, res);
  }, cljs.core.PersistentArrayMap.EMPTY, m);
};
cljs.looperscript.interpret.grammar = "s \x3d \x3csp*\x3e params init? \x3csp*\x3e parts\n  params \x3d param*\n  parts \x3d part*\n  \x3cparam\x3e \x3d (bpm | version) \x3csp*\x3e\n  bpm \x3d \x3c'bpm'\x3e \x3csp?\x3e (number | fraction | vec)\n  version \x3d \x3c'version'\x3e \x3csp?\x3e #'[a-zA-Z0-9.]+'\n  vec \x3d ('#' | '@' | '!')? \x3c('[' | '(')\x3e vec-code? (data-element | vec | sp |\n                                                    string | vec-code)* \x3c(']' | ')')\x3e\n  vec-code \x3d (" + 
cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.join.call(null, " | ", cljs.core.mapv.call(null, cljs.core.comp.call(null, function(p1__26680_SHARP_) {
  return cljs.core.apply.call(null, cljs.core.str, "'", p1__26680_SHARP_, "'");
}, cljs.core.partial.call(null, cljs.core.apply, cljs.core.str), cljs.core.rest, cljs.core.str), cljs.core.keys.call(null, cljs.looperscript.vector_fns.vec_fns)))) + ") \x3csp\x3e\n  part \x3d part-title \x3csp\x3e* aspect*\n  init \x3d \x3c'init'\x3e (\x3csp*\x3e vec)*\n  \x3cpart-title\x3e \x3d \x3c'part'\x3e sp (!aspect-keyword #'[a-zA-Z0-9_.-]+')\n  aspect \x3d aspect-header data\n  aspect-header \x3d aspect-keyword (sp* \x3c'\x26'\x3e sp* aspect-keyword)*\n  aspect-keyword \x3d ('time' | 'sound' | 'volume' | 'filter' | 'pan' | 'rate' | 'offset' |                              'synth' | 'overtones' | 'time+' | 'mute' | 'skip')\n  data \x3d data-element+\n  \x3cdata-element\x3e \x3d (ratio | hz | modifier | number | sp | vec | drum-code |\n  data-shorthand | synth-code)\n  \x3csynth-code\x3e \x3d ('sawtooth' | 'sine' | 'square' | 'triangle')\n  \x3cdata-shorthand\x3e \x3d v\n  v \x3d number \x3c'v'\x3e number\n  drum-code \x3d #'[bcdhkrs]'\n  modifier \x3d (plus | fraction | mod-code)\n  mod-code \x3d 'just'\n  plus \x3d \x3c'+'\x3e sp* (number | ratio | vec)\n  fraction \x3d number \x3c'/'\x3e number\n  hz \x3d (number | vec) sp* 'hz'\n  ratio \x3d number \x3c':'\x3e number\n  string \x3d \x3c'\"'\x3e #'([^\"]*)' \x3c'\"'\x3e\n  number \x3d #'-?([0-9]*\\.[0-9]*|[0-9]+)'\n      \x3csp\x3e \x3d \x3c#'[\\s,]+'\x3e";
cljs.looperscript.interpret.looper_parse = instaparse.core.parser.call(null, cljs.looperscript.interpret.grammar);
cljs.looperscript.interpret.looper_transform = function looper_transform(parse_tree) {
  return cljs.looperscript.interpret.walk_map_applying_fn_to_vals.call(null, cljs.looperscript.interpret.process_vec, instaparse.core.transform.call(null, cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "v", "v", 21465059), new cljs.core.Keyword(null, "vec", "vec", -657847931), new cljs.core.Keyword(null, "init", "init", -1875481434), new cljs.core.Keyword(null, "number", "number", 1570378438), new cljs.core.Keyword(null, "fraction", "fraction", 107940680), new cljs.core.Keyword(null, 
  "part", "part", 77757738), new cljs.core.Keyword(null, "aspect-header", "aspect-header", -1942088854), new cljs.core.Keyword(null, "parts", "parts", 849007691), new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.Keyword(null, "string", "string", -1989541586), new cljs.core.Keyword(null, "s", "s", 1705939918), new cljs.core.Keyword(null, "ratio", "ratio", -926560044), new cljs.core.Keyword(null, "mod-code", "mod-code", -1364300459), new cljs.core.Keyword(null, "aspect-keyword", 
  "aspect-keyword", 1878628821), new cljs.core.Keyword(null, "bpm", "bpm", -1042376389), new cljs.core.Keyword(null, "vec-code", "vec-code", 652666651), new cljs.core.Keyword(null, "data", "data", -232669377)], [cljs.looperscript.vector_fns.handle_v_keyword, cljs.core.vector, function() {
    var G__26690__delegate = function(args) {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "init", "init", -1875481434), cljs.core.vec.call(null, args)], null);
    };
    var G__26690 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__26690__delegate.call(this, args);
    };
    G__26690.cljs$lang$maxFixedArity = 0;
    G__26690.cljs$lang$applyTo = function(arglist__26691) {
      var args = cljs.core.seq(arglist__26691);
      return G__26690__delegate(args);
    };
    G__26690.cljs$core$IFn$_invoke$arity$variadic = G__26690__delegate;
    return G__26690;
  }(), cljs.looperscript.interpret.string__GT_number, function(n, d) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "fraction", "fraction", 107940680), n / d], null);
  }, function() {
    var G__26692__delegate = function(part_name, aspects) {
      return cljs.core.reduce.call(null, function(m, p__26686) {
        var vec__26687 = p__26686;
        var _ = cljs.core.nth.call(null, vec__26687, 0, null);
        var k = cljs.core.nth.call(null, vec__26687, 1, null);
        var v = cljs.core.nth.call(null, vec__26687, 2, null);
        return cljs.core.assoc.call(null, m, k, v);
      }, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), part_name], null), aspects);
    };
    var G__26692 = function(part_name, var_args) {
      var aspects = null;
      if (arguments.length > 1) {
        aspects = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__26692__delegate.call(this, part_name, aspects);
    };
    G__26692.cljs$lang$maxFixedArity = 1;
    G__26692.cljs$lang$applyTo = function(arglist__26693) {
      var part_name = cljs.core.first(arglist__26693);
      var aspects = cljs.core.rest(arglist__26693);
      return G__26692__delegate(part_name, aspects);
    };
    G__26692.cljs$core$IFn$_invoke$arity$variadic = G__26692__delegate;
    return G__26692;
  }(), cljs.core.vector, function() {
    var G__26694__delegate = function(args) {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "parts", "parts", 849007691), cljs.core.reduce.call(null, function(m, p) {
        return cljs.core.assoc.call(null, m, (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(p), p);
      }, cljs.core.PersistentArrayMap.EMPTY, args)], null);
    };
    var G__26694 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__26694__delegate.call(this, args);
    };
    G__26694.cljs$lang$maxFixedArity = 0;
    G__26694.cljs$lang$applyTo = function(arglist__26695) {
      var args = cljs.core.seq(arglist__26695);
      return G__26694__delegate(args);
    };
    G__26694.cljs$core$IFn$_invoke$arity$variadic = G__26694__delegate;
    return G__26694;
  }(), function() {
    var G__26696__delegate = function(p) {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "params", "params", 710516235), cljs.core.reduce.call(null, function(m, p__26688) {
        var vec__26689 = p__26688;
        var k = cljs.core.nth.call(null, vec__26689, 0, null);
        var v = cljs.core.nth.call(null, vec__26689, 1, null);
        return cljs.core.assoc.call(null, m, k, v);
      }, cljs.core.PersistentArrayMap.EMPTY, p)], null);
    };
    var G__26696 = function(var_args) {
      var p = null;
      if (arguments.length > 0) {
        p = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__26696__delegate.call(this, p);
    };
    G__26696.cljs$lang$maxFixedArity = 0;
    G__26696.cljs$lang$applyTo = function(arglist__26697) {
      var p = cljs.core.seq(arglist__26697);
      return G__26696__delegate(p);
    };
    G__26696.cljs$core$IFn$_invoke$arity$variadic = G__26696__delegate;
    return G__26696;
  }(), cljs.core.str, function() {
    var G__26698__delegate = function(args) {
      return cljs.core.reduce.call(null, function(m, x) {
        return cljs.core.into.call(null, m, x);
      }, cljs.core.PersistentArrayMap.EMPTY, args);
    };
    var G__26698 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__26698__delegate.call(this, args);
    };
    G__26698.cljs$lang$maxFixedArity = 0;
    G__26698.cljs$lang$applyTo = function(arglist__26699) {
      var args = cljs.core.seq(arglist__26699);
      return G__26698__delegate(args);
    };
    G__26698.cljs$core$IFn$_invoke$arity$variadic = G__26698__delegate;
    return G__26698;
  }(), function(n, d) {
    return cljs.looperscript.interpret.ratio__GT_note.call(null, n / d);
  }, cljs.core.comp.call(null, cljs.core.vector, cljs.core.keyword), cljs.core.keyword, function(x) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "bpm", "bpm", -1042376389), 60 / (cljs.core.vector_QMARK_.call(null, x) && cljs.core._EQ_.call(null, cljs.core.first.call(null, x), new cljs.core.Keyword(null, "fraction", "fraction", 107940680)) ? cljs.core.second.call(null, x) : cljs.core.vector_QMARK_.call(null, x) ? cljs.looperscript.interpret.process_vec.call(null, x) : x)], null);
  }, cljs.core.keyword, function() {
    var G__26700__delegate = function(rest__26681_SHARP_) {
      return cljs.looperscript.interpret.splice.call(null, rest__26681_SHARP_);
    };
    var G__26700 = function(var_args) {
      var rest__26681_SHARP_ = null;
      if (arguments.length > 0) {
        rest__26681_SHARP_ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__26700__delegate.call(this, rest__26681_SHARP_);
    };
    G__26700.cljs$lang$maxFixedArity = 0;
    G__26700.cljs$lang$applyTo = function(arglist__26701) {
      var rest__26681_SHARP_ = cljs.core.seq(arglist__26701);
      return G__26700__delegate(rest__26681_SHARP_);
    };
    G__26700.cljs$core$IFn$_invoke$arity$variadic = G__26700__delegate;
    return G__26700;
  }()]), parse_tree));
};
goog.provide("domina.events");
goog.require("cljs.core");
goog.require("goog.events");
goog.require("goog.events");
goog.require("goog.object");
goog.require("goog.object");
goog.require("domina");
domina.events.Event = function() {
  var obj29377 = {};
  return obj29377;
}();
domina.events.prevent_default = function prevent_default(evt) {
  if (function() {
    var and__3628__auto__ = evt;
    if (and__3628__auto__) {
      return evt.domina$events$Event$prevent_default$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return evt.domina$events$Event$prevent_default$arity$1(evt);
  } else {
    var x__4277__auto__ = evt == null ? null : evt;
    return function() {
      var or__3640__auto__ = domina.events.prevent_default[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = domina.events.prevent_default["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Event.prevent-default", evt);
        }
      }
    }().call(null, evt);
  }
};
domina.events.stop_propagation = function stop_propagation(evt) {
  if (function() {
    var and__3628__auto__ = evt;
    if (and__3628__auto__) {
      return evt.domina$events$Event$stop_propagation$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return evt.domina$events$Event$stop_propagation$arity$1(evt);
  } else {
    var x__4277__auto__ = evt == null ? null : evt;
    return function() {
      var or__3640__auto__ = domina.events.stop_propagation[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = domina.events.stop_propagation["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Event.stop-propagation", evt);
        }
      }
    }().call(null, evt);
  }
};
domina.events.target = function target(evt) {
  if (function() {
    var and__3628__auto__ = evt;
    if (and__3628__auto__) {
      return evt.domina$events$Event$target$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return evt.domina$events$Event$target$arity$1(evt);
  } else {
    var x__4277__auto__ = evt == null ? null : evt;
    return function() {
      var or__3640__auto__ = domina.events.target[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = domina.events.target["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Event.target", evt);
        }
      }
    }().call(null, evt);
  }
};
domina.events.current_target = function current_target(evt) {
  if (function() {
    var and__3628__auto__ = evt;
    if (and__3628__auto__) {
      return evt.domina$events$Event$current_target$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return evt.domina$events$Event$current_target$arity$1(evt);
  } else {
    var x__4277__auto__ = evt == null ? null : evt;
    return function() {
      var or__3640__auto__ = domina.events.current_target[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = domina.events.current_target["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Event.current-target", evt);
        }
      }
    }().call(null, evt);
  }
};
domina.events.event_type = function event_type(evt) {
  if (function() {
    var and__3628__auto__ = evt;
    if (and__3628__auto__) {
      return evt.domina$events$Event$event_type$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return evt.domina$events$Event$event_type$arity$1(evt);
  } else {
    var x__4277__auto__ = evt == null ? null : evt;
    return function() {
      var or__3640__auto__ = domina.events.event_type[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = domina.events.event_type["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Event.event-type", evt);
        }
      }
    }().call(null, evt);
  }
};
domina.events.raw_event = function raw_event(evt) {
  if (function() {
    var and__3628__auto__ = evt;
    if (and__3628__auto__) {
      return evt.domina$events$Event$raw_event$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return evt.domina$events$Event$raw_event$arity$1(evt);
  } else {
    var x__4277__auto__ = evt == null ? null : evt;
    return function() {
      var or__3640__auto__ = domina.events.raw_event[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = domina.events.raw_event["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Event.raw-event", evt);
        }
      }
    }().call(null, evt);
  }
};
domina.events.root_element = window.document.documentElement;
domina.events.create_listener_function = function create_listener_function(f) {
  return function(evt) {
    f.call(null, function() {
      if (typeof domina.events.t29381 !== "undefined") {
      } else {
        domina.events.t29381 = function(evt, f, create_listener_function, meta29382) {
          this.evt = evt;
          this.f = f;
          this.create_listener_function = create_listener_function;
          this.meta29382 = meta29382;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393472;
        };
        domina.events.t29381.cljs$lang$type = true;
        domina.events.t29381.cljs$lang$ctorStr = "domina.events/t29381";
        domina.events.t29381.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
          return cljs.core._write.call(null, writer__4218__auto__, "domina.events/t29381");
        };
        domina.events.t29381.prototype.cljs$core$ILookup$_lookup$arity$2 = function(o, k) {
          var self__ = this;
          var o__$1 = this;
          var temp__4124__auto__ = self__.evt[k];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var val = temp__4124__auto__;
            return val;
          } else {
            return self__.evt[cljs.core.name.call(null, k)];
          }
        };
        domina.events.t29381.prototype.cljs$core$ILookup$_lookup$arity$3 = function(o, k, not_found) {
          var self__ = this;
          var o__$1 = this;
          var or__3640__auto__ = cljs.core._lookup.call(null, o__$1, k);
          if (cljs.core.truth_(or__3640__auto__)) {
            return or__3640__auto__;
          } else {
            return not_found;
          }
        };
        domina.events.t29381.prototype.domina$events$Event$ = true;
        domina.events.t29381.prototype.domina$events$Event$prevent_default$arity$1 = function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.evt.preventDefault();
        };
        domina.events.t29381.prototype.domina$events$Event$stop_propagation$arity$1 = function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.evt.stopPropagation();
        };
        domina.events.t29381.prototype.domina$events$Event$target$arity$1 = function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.evt.target;
        };
        domina.events.t29381.prototype.domina$events$Event$current_target$arity$1 = function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.evt.currentTarget;
        };
        domina.events.t29381.prototype.domina$events$Event$event_type$arity$1 = function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.evt.type;
        };
        domina.events.t29381.prototype.domina$events$Event$raw_event$arity$1 = function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.evt;
        };
        domina.events.t29381.prototype.cljs$core$IMeta$_meta$arity$1 = function(_29383) {
          var self__ = this;
          var _29383__$1 = this;
          return self__.meta29382;
        };
        domina.events.t29381.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_29383, meta29382__$1) {
          var self__ = this;
          var _29383__$1 = this;
          return new domina.events.t29381(self__.evt, self__.f, self__.create_listener_function, meta29382__$1);
        };
        domina.events.__GT_t29381 = function __GT_t29381(evt__$1, f__$1, create_listener_function__$1, meta29382) {
          return new domina.events.t29381(evt__$1, f__$1, create_listener_function__$1, meta29382);
        };
      }
      return new domina.events.t29381(evt, f, create_listener_function, null);
    }());
    return true;
  };
};
domina.events.listen_internal_BANG_ = function listen_internal_BANG_(content, type, listener, capture, once) {
  var f = domina.events.create_listener_function.call(null, listener);
  var t = cljs.core.name.call(null, type);
  return cljs.core.doall.call(null, function() {
    var iter__4379__auto__ = function(f, t) {
      return function iter__29388(s__29389) {
        return new cljs.core.LazySeq(null, function(f, t) {
          return function() {
            var s__29389__$1 = s__29389;
            while (true) {
              var temp__4126__auto__ = cljs.core.seq.call(null, s__29389__$1);
              if (temp__4126__auto__) {
                var s__29389__$2 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__29389__$2)) {
                  var c__4377__auto__ = cljs.core.chunk_first.call(null, s__29389__$2);
                  var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                  var b__29391 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                  if (function() {
                    var i__29390 = 0;
                    while (true) {
                      if (i__29390 < size__4378__auto__) {
                        var node = cljs.core._nth.call(null, c__4377__auto__, i__29390);
                        cljs.core.chunk_append.call(null, b__29391, cljs.core.truth_(once) ? goog.events.listenOnce(node, t, f, capture) : goog.events.listen(node, t, f, capture));
                        var G__29392 = i__29390 + 1;
                        i__29390 = G__29392;
                        continue;
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__29391), iter__29388.call(null, cljs.core.chunk_rest.call(null, s__29389__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__29391), null);
                  }
                } else {
                  var node = cljs.core.first.call(null, s__29389__$2);
                  return cljs.core.cons.call(null, cljs.core.truth_(once) ? goog.events.listenOnce(node, t, f, capture) : goog.events.listen(node, t, f, capture), iter__29388.call(null, cljs.core.rest.call(null, s__29389__$2)));
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(f, t), null, null);
      };
    }(f, t);
    return iter__4379__auto__.call(null, domina.nodes.call(null, content));
  }());
};
domina.events.listen_BANG_ = function() {
  var listen_BANG_ = null;
  var listen_BANG___2 = function(type, listener) {
    return listen_BANG_.call(null, domina.events.root_element, type, listener);
  };
  var listen_BANG___3 = function(content, type, listener) {
    return domina.events.listen_internal_BANG_.call(null, content, type, listener, false, false);
  };
  listen_BANG_ = function(content, type, listener) {
    switch(arguments.length) {
      case 2:
        return listen_BANG___2.call(this, content, type);
      case 3:
        return listen_BANG___3.call(this, content, type, listener);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  listen_BANG_.cljs$core$IFn$_invoke$arity$2 = listen_BANG___2;
  listen_BANG_.cljs$core$IFn$_invoke$arity$3 = listen_BANG___3;
  return listen_BANG_;
}();
domina.events.capture_BANG_ = function() {
  var capture_BANG_ = null;
  var capture_BANG___2 = function(type, listener) {
    return capture_BANG_.call(null, domina.events.root_element, type, listener);
  };
  var capture_BANG___3 = function(content, type, listener) {
    return domina.events.listen_internal_BANG_.call(null, content, type, listener, true, false);
  };
  capture_BANG_ = function(content, type, listener) {
    switch(arguments.length) {
      case 2:
        return capture_BANG___2.call(this, content, type);
      case 3:
        return capture_BANG___3.call(this, content, type, listener);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  capture_BANG_.cljs$core$IFn$_invoke$arity$2 = capture_BANG___2;
  capture_BANG_.cljs$core$IFn$_invoke$arity$3 = capture_BANG___3;
  return capture_BANG_;
}();
domina.events.listen_once_BANG_ = function() {
  var listen_once_BANG_ = null;
  var listen_once_BANG___2 = function(type, listener) {
    return listen_once_BANG_.call(null, domina.events.root_element, type, listener);
  };
  var listen_once_BANG___3 = function(content, type, listener) {
    return domina.events.listen_internal_BANG_.call(null, content, type, listener, false, true);
  };
  listen_once_BANG_ = function(content, type, listener) {
    switch(arguments.length) {
      case 2:
        return listen_once_BANG___2.call(this, content, type);
      case 3:
        return listen_once_BANG___3.call(this, content, type, listener);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  listen_once_BANG_.cljs$core$IFn$_invoke$arity$2 = listen_once_BANG___2;
  listen_once_BANG_.cljs$core$IFn$_invoke$arity$3 = listen_once_BANG___3;
  return listen_once_BANG_;
}();
domina.events.capture_once_BANG_ = function() {
  var capture_once_BANG_ = null;
  var capture_once_BANG___2 = function(type, listener) {
    return capture_once_BANG_.call(null, domina.events.root_element, type, listener);
  };
  var capture_once_BANG___3 = function(content, type, listener) {
    return domina.events.listen_internal_BANG_.call(null, content, type, listener, true, true);
  };
  capture_once_BANG_ = function(content, type, listener) {
    switch(arguments.length) {
      case 2:
        return capture_once_BANG___2.call(this, content, type);
      case 3:
        return capture_once_BANG___3.call(this, content, type, listener);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  capture_once_BANG_.cljs$core$IFn$_invoke$arity$2 = capture_once_BANG___2;
  capture_once_BANG_.cljs$core$IFn$_invoke$arity$3 = capture_once_BANG___3;
  return capture_once_BANG_;
}();
domina.events.unlisten_BANG_ = function() {
  var unlisten_BANG_ = null;
  var unlisten_BANG___0 = function() {
    return unlisten_BANG_.call(null, domina.events.root_element);
  };
  var unlisten_BANG___1 = function(content) {
    var seq__29401 = cljs.core.seq.call(null, domina.nodes.call(null, content));
    var chunk__29402 = null;
    var count__29403 = 0;
    var i__29404 = 0;
    while (true) {
      if (i__29404 < count__29403) {
        var node = cljs.core._nth.call(null, chunk__29402, i__29404);
        goog.events.removeAll(node);
        var G__29409 = seq__29401;
        var G__29410 = chunk__29402;
        var G__29411 = count__29403;
        var G__29412 = i__29404 + 1;
        seq__29401 = G__29409;
        chunk__29402 = G__29410;
        count__29403 = G__29411;
        i__29404 = G__29412;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__29401);
        if (temp__4126__auto__) {
          var seq__29401__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__29401__$1)) {
            var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__29401__$1);
            var G__29413 = cljs.core.chunk_rest.call(null, seq__29401__$1);
            var G__29414 = c__4410__auto__;
            var G__29415 = cljs.core.count.call(null, c__4410__auto__);
            var G__29416 = 0;
            seq__29401 = G__29413;
            chunk__29402 = G__29414;
            count__29403 = G__29415;
            i__29404 = G__29416;
            continue;
          } else {
            var node = cljs.core.first.call(null, seq__29401__$1);
            goog.events.removeAll(node);
            var G__29417 = cljs.core.next.call(null, seq__29401__$1);
            var G__29418 = null;
            var G__29419 = 0;
            var G__29420 = 0;
            seq__29401 = G__29417;
            chunk__29402 = G__29418;
            count__29403 = G__29419;
            i__29404 = G__29420;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var unlisten_BANG___2 = function(content, type) {
    var type__$1 = cljs.core.name.call(null, type);
    var seq__29405 = cljs.core.seq.call(null, domina.nodes.call(null, content));
    var chunk__29406 = null;
    var count__29407 = 0;
    var i__29408 = 0;
    while (true) {
      if (i__29408 < count__29407) {
        var node = cljs.core._nth.call(null, chunk__29406, i__29408);
        goog.events.removeAll(node, type__$1);
        var G__29421 = seq__29405;
        var G__29422 = chunk__29406;
        var G__29423 = count__29407;
        var G__29424 = i__29408 + 1;
        seq__29405 = G__29421;
        chunk__29406 = G__29422;
        count__29407 = G__29423;
        i__29408 = G__29424;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__29405);
        if (temp__4126__auto__) {
          var seq__29405__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__29405__$1)) {
            var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__29405__$1);
            var G__29425 = cljs.core.chunk_rest.call(null, seq__29405__$1);
            var G__29426 = c__4410__auto__;
            var G__29427 = cljs.core.count.call(null, c__4410__auto__);
            var G__29428 = 0;
            seq__29405 = G__29425;
            chunk__29406 = G__29426;
            count__29407 = G__29427;
            i__29408 = G__29428;
            continue;
          } else {
            var node = cljs.core.first.call(null, seq__29405__$1);
            goog.events.removeAll(node, type__$1);
            var G__29429 = cljs.core.next.call(null, seq__29405__$1);
            var G__29430 = null;
            var G__29431 = 0;
            var G__29432 = 0;
            seq__29405 = G__29429;
            chunk__29406 = G__29430;
            count__29407 = G__29431;
            i__29408 = G__29432;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  unlisten_BANG_ = function(content, type) {
    switch(arguments.length) {
      case 0:
        return unlisten_BANG___0.call(this);
      case 1:
        return unlisten_BANG___1.call(this, content);
      case 2:
        return unlisten_BANG___2.call(this, content, type);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unlisten_BANG_.cljs$core$IFn$_invoke$arity$0 = unlisten_BANG___0;
  unlisten_BANG_.cljs$core$IFn$_invoke$arity$1 = unlisten_BANG___1;
  unlisten_BANG_.cljs$core$IFn$_invoke$arity$2 = unlisten_BANG___2;
  return unlisten_BANG_;
}();
domina.events.ancestor_nodes = function() {
  var ancestor_nodes = null;
  var ancestor_nodes__1 = function(n) {
    return ancestor_nodes.call(null, n, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [n], null));
  };
  var ancestor_nodes__2 = function(n, so_far) {
    while (true) {
      var temp__4124__auto__ = n.parentNode;
      if (cljs.core.truth_(temp__4124__auto__)) {
        var parent = temp__4124__auto__;
        var G__29433 = parent;
        var G__29434 = cljs.core.cons.call(null, parent, so_far);
        n = G__29433;
        so_far = G__29434;
        continue;
      } else {
        return so_far;
      }
      break;
    }
  };
  ancestor_nodes = function(n, so_far) {
    switch(arguments.length) {
      case 1:
        return ancestor_nodes__1.call(this, n);
      case 2:
        return ancestor_nodes__2.call(this, n, so_far);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestor_nodes.cljs$core$IFn$_invoke$arity$1 = ancestor_nodes__1;
  ancestor_nodes.cljs$core$IFn$_invoke$arity$2 = ancestor_nodes__2;
  return ancestor_nodes;
}();
domina.events.dispatch_browser_BANG_ = function dispatch_browser_BANG_(source, evt) {
  evt.target = domina.single_node.call(null, source);
  var ancestors = domina.events.ancestor_nodes.call(null, domina.single_node.call(null, source));
  var seq__29443_29451 = cljs.core.seq.call(null, ancestors);
  var chunk__29444_29452 = null;
  var count__29445_29453 = 0;
  var i__29446_29454 = 0;
  while (true) {
    if (i__29446_29454 < count__29445_29453) {
      var n_29455 = cljs.core._nth.call(null, chunk__29444_29452, i__29446_29454);
      if (cljs.core.truth_(evt.propagationStopped_)) {
      } else {
        evt.currentTarget = n_29455;
        goog.events.fireListeners(n_29455, evt.type, true, evt);
      }
      var G__29456 = seq__29443_29451;
      var G__29457 = chunk__29444_29452;
      var G__29458 = count__29445_29453;
      var G__29459 = i__29446_29454 + 1;
      seq__29443_29451 = G__29456;
      chunk__29444_29452 = G__29457;
      count__29445_29453 = G__29458;
      i__29446_29454 = G__29459;
      continue;
    } else {
      var temp__4126__auto___29460 = cljs.core.seq.call(null, seq__29443_29451);
      if (temp__4126__auto___29460) {
        var seq__29443_29461__$1 = temp__4126__auto___29460;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__29443_29461__$1)) {
          var c__4410__auto___29462 = cljs.core.chunk_first.call(null, seq__29443_29461__$1);
          var G__29463 = cljs.core.chunk_rest.call(null, seq__29443_29461__$1);
          var G__29464 = c__4410__auto___29462;
          var G__29465 = cljs.core.count.call(null, c__4410__auto___29462);
          var G__29466 = 0;
          seq__29443_29451 = G__29463;
          chunk__29444_29452 = G__29464;
          count__29445_29453 = G__29465;
          i__29446_29454 = G__29466;
          continue;
        } else {
          var n_29467 = cljs.core.first.call(null, seq__29443_29461__$1);
          if (cljs.core.truth_(evt.propagationStopped_)) {
          } else {
            evt.currentTarget = n_29467;
            goog.events.fireListeners(n_29467, evt.type, true, evt);
          }
          var G__29468 = cljs.core.next.call(null, seq__29443_29461__$1);
          var G__29469 = null;
          var G__29470 = 0;
          var G__29471 = 0;
          seq__29443_29451 = G__29468;
          chunk__29444_29452 = G__29469;
          count__29445_29453 = G__29470;
          i__29446_29454 = G__29471;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var seq__29447_29472 = cljs.core.seq.call(null, cljs.core.reverse.call(null, ancestors));
  var chunk__29448_29473 = null;
  var count__29449_29474 = 0;
  var i__29450_29475 = 0;
  while (true) {
    if (i__29450_29475 < count__29449_29474) {
      var n_29476 = cljs.core._nth.call(null, chunk__29448_29473, i__29450_29475);
      if (cljs.core.truth_(evt.propagationStopped_)) {
      } else {
        evt.currentTarget = n_29476;
        goog.events.fireListeners(n_29476, evt.type, false, evt);
      }
      var G__29477 = seq__29447_29472;
      var G__29478 = chunk__29448_29473;
      var G__29479 = count__29449_29474;
      var G__29480 = i__29450_29475 + 1;
      seq__29447_29472 = G__29477;
      chunk__29448_29473 = G__29478;
      count__29449_29474 = G__29479;
      i__29450_29475 = G__29480;
      continue;
    } else {
      var temp__4126__auto___29481 = cljs.core.seq.call(null, seq__29447_29472);
      if (temp__4126__auto___29481) {
        var seq__29447_29482__$1 = temp__4126__auto___29481;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__29447_29482__$1)) {
          var c__4410__auto___29483 = cljs.core.chunk_first.call(null, seq__29447_29482__$1);
          var G__29484 = cljs.core.chunk_rest.call(null, seq__29447_29482__$1);
          var G__29485 = c__4410__auto___29483;
          var G__29486 = cljs.core.count.call(null, c__4410__auto___29483);
          var G__29487 = 0;
          seq__29447_29472 = G__29484;
          chunk__29448_29473 = G__29485;
          count__29449_29474 = G__29486;
          i__29450_29475 = G__29487;
          continue;
        } else {
          var n_29488 = cljs.core.first.call(null, seq__29447_29482__$1);
          if (cljs.core.truth_(evt.propagationStopped_)) {
          } else {
            evt.currentTarget = n_29488;
            goog.events.fireListeners(n_29488, evt.type, false, evt);
          }
          var G__29489 = cljs.core.next.call(null, seq__29447_29482__$1);
          var G__29490 = null;
          var G__29491 = 0;
          var G__29492 = 0;
          seq__29447_29472 = G__29489;
          chunk__29448_29473 = G__29490;
          count__29449_29474 = G__29491;
          i__29450_29475 = G__29492;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return evt.returnValue_;
};
domina.events.dispatch_event_target_BANG_ = function dispatch_event_target_BANG_(source, evt) {
  return goog.events.dispatchEvent(source, evt);
};
domina.events.is_event_target_QMARK_ = function is_event_target_QMARK_(o) {
  var and__3628__auto__ = o.getParentEventTarget;
  if (cljs.core.truth_(and__3628__auto__)) {
    return o.dispatchEvent;
  } else {
    return and__3628__auto__;
  }
};
domina.events.dispatch_BANG_ = function() {
  var dispatch_BANG_ = null;
  var dispatch_BANG___2 = function(type, evt_map) {
    return dispatch_BANG_.call(null, domina.events.root_element, type, evt_map);
  };
  var dispatch_BANG___3 = function(source, type, evt_map) {
    var evt = new goog.events.Event(cljs.core.name.call(null, type));
    var seq__29499_29505 = cljs.core.seq.call(null, evt_map);
    var chunk__29500_29506 = null;
    var count__29501_29507 = 0;
    var i__29502_29508 = 0;
    while (true) {
      if (i__29502_29508 < count__29501_29507) {
        var vec__29503_29509 = cljs.core._nth.call(null, chunk__29500_29506, i__29502_29508);
        var k_29510 = cljs.core.nth.call(null, vec__29503_29509, 0, null);
        var v_29511 = cljs.core.nth.call(null, vec__29503_29509, 1, null);
        evt[k_29510] = v_29511;
        var G__29512 = seq__29499_29505;
        var G__29513 = chunk__29500_29506;
        var G__29514 = count__29501_29507;
        var G__29515 = i__29502_29508 + 1;
        seq__29499_29505 = G__29512;
        chunk__29500_29506 = G__29513;
        count__29501_29507 = G__29514;
        i__29502_29508 = G__29515;
        continue;
      } else {
        var temp__4126__auto___29516 = cljs.core.seq.call(null, seq__29499_29505);
        if (temp__4126__auto___29516) {
          var seq__29499_29517__$1 = temp__4126__auto___29516;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__29499_29517__$1)) {
            var c__4410__auto___29518 = cljs.core.chunk_first.call(null, seq__29499_29517__$1);
            var G__29519 = cljs.core.chunk_rest.call(null, seq__29499_29517__$1);
            var G__29520 = c__4410__auto___29518;
            var G__29521 = cljs.core.count.call(null, c__4410__auto___29518);
            var G__29522 = 0;
            seq__29499_29505 = G__29519;
            chunk__29500_29506 = G__29520;
            count__29501_29507 = G__29521;
            i__29502_29508 = G__29522;
            continue;
          } else {
            var vec__29504_29523 = cljs.core.first.call(null, seq__29499_29517__$1);
            var k_29524 = cljs.core.nth.call(null, vec__29504_29523, 0, null);
            var v_29525 = cljs.core.nth.call(null, vec__29504_29523, 1, null);
            evt[k_29524] = v_29525;
            var G__29526 = cljs.core.next.call(null, seq__29499_29517__$1);
            var G__29527 = null;
            var G__29528 = 0;
            var G__29529 = 0;
            seq__29499_29505 = G__29526;
            chunk__29500_29506 = G__29527;
            count__29501_29507 = G__29528;
            i__29502_29508 = G__29529;
            continue;
          }
        } else {
        }
      }
      break;
    }
    if (cljs.core.truth_(domina.events.is_event_target_QMARK_.call(null, source))) {
      return domina.events.dispatch_event_target_BANG_.call(null, source, evt);
    } else {
      return domina.events.dispatch_browser_BANG_.call(null, source, evt);
    }
  };
  dispatch_BANG_ = function(source, type, evt_map) {
    switch(arguments.length) {
      case 2:
        return dispatch_BANG___2.call(this, source, type);
      case 3:
        return dispatch_BANG___3.call(this, source, type, evt_map);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dispatch_BANG_.cljs$core$IFn$_invoke$arity$2 = dispatch_BANG___2;
  dispatch_BANG_.cljs$core$IFn$_invoke$arity$3 = dispatch_BANG___3;
  return dispatch_BANG_;
}();
domina.events.unlisten_by_key_BANG_ = function unlisten_by_key_BANG_(key) {
  return goog.events.unlistenByKey(key);
};
domina.events.get_listeners = function get_listeners(content, type) {
  var type__$1 = cljs.core.name.call(null, type);
  return cljs.core.mapcat.call(null, function(type__$1) {
    return function(p1__29530_SHARP_) {
      return goog.events.getListeners(p1__29530_SHARP_, type__$1, false);
    };
  }(type__$1), domina.nodes.call(null, content));
};
goog.provide("cljs.looperscript.looperscript");
goog.require("cljs.core");
goog.require("cljs.reader");
goog.require("cljs.looperscript.logging");
goog.require("cljs.looperscript.audio");
goog.require("cljs.looperscript.iterator");
goog.require("cljs.looperscript.address_bar");
goog.require("domina");
goog.require("cljs.looperscript.interpret");
goog.require("cljs.looperscript.iterator");
goog.require("cljs.looperscript.logging");
goog.require("cljs.looperscript.address_bar");
goog.require("domina.events");
goog.require("domina");
goog.require("domina.events");
goog.require("instaparse.core");
goog.require("instaparse.core");
goog.require("cljs.looperscript.audio");
goog.require("cljs.looperscript.interpret");
goog.require("cljs.reader");
var L = cljs.looperscript.looperscript;
cljs.looperscript.looperscript.ctx = cljs.looperscript.audio.ctx;
cljs.looperscript.looperscript.playing = cljs.core.atom.call(null, false);
cljs.looperscript.looperscript.playing_interval = cljs.core.atom.call(null, null);
cljs.looperscript.looperscript.current_start_time = cljs.core.atom.call(null, null);
cljs.looperscript.looperscript.current_next_note_fns = cljs.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
cljs.looperscript.looperscript.queue_time_interval = 1;
cljs.looperscript.looperscript.queue_time_extra = .1;
cljs.looperscript.looperscript.last_queue_time = cljs.core.atom.call(null, null);
cljs.looperscript.looperscript.params = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cljs.looperscript.looperscript.sounding_notes = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cljs.looperscript.looperscript.aspects = new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "time", "time", 1385887882), new cljs.core.Keyword(null, "sound", "sound", -2127407070), new cljs.core.Keyword(null, "volume", "volume", 1900330799), new cljs.core.Keyword(null, "filter", "filter", -948537934), new cljs.core.Keyword(null, "pan", "pan", -307712792), new cljs.core.Keyword(null, "rate", "rate", -1428659698), new cljs.core.Keyword(null, 
"synth", "synth", -862700847), new cljs.core.Keyword(null, "overtones", "overtones", -2065460921), new cljs.core.Keyword(null, "time+", "time+", 2008858809), new cljs.core.Keyword(null, "mute", "mute", 1151223646), new cljs.core.Keyword(null, "skip", "skip", 602715391)], null);
cljs.looperscript.looperscript.aspect_defaults = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "sound", "sound", -2127407070), new cljs.core.Keyword(null, "offset", "offset", 296498311), new cljs.core.Keyword(null, "overtones", "overtones", -2065460921), new cljs.core.Keyword(null, "pan", "pan", -307712792), new cljs.core.Keyword(null, "time", "time", 1385887882), new cljs.core.Keyword(null, "rate", "rate", -1428659698), new cljs.core.Keyword(null, "volume", "volume", 1900330799), 
new cljs.core.Keyword(null, "synth", "synth", -862700847), new cljs.core.Keyword(null, "filter", "filter", -948537934), new cljs.core.Keyword(null, "time+", "time+", 2008858809), new cljs.core.Keyword(null, "mute", "mute", 1151223646), new cljs.core.Keyword(null, "skip", "skip", 602715391)], [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "drum-code", 
"drum-code", 2081814302), "r"], null)], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [0], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [1], null)], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [0], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[1], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [1], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [1], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["sawtooth"], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [2500], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [0], null), new cljs.core.PersistentVector(null, 
1, 5, cljs.core.PersistentVector.EMPTY_NODE, [1], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [1], null)]);
cljs.looperscript.looperscript.now = function now() {
  return cljs.looperscript.audio.ctx["currentTime"];
};
cljs.looperscript.looperscript.log_time = function() {
  var log_time__delegate = function(f, args) {
    var start_time = cljs.looperscript.looperscript.now.call(null);
    var res = f.call(null);
    var run_time = cljs.looperscript.looperscript.now.call(null) - start_time;
    cljs.looperscript.logging.log.call(null, run_time, args);
    return res;
  };
  var log_time = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return log_time__delegate.call(this, f, args);
  };
  log_time.cljs$lang$maxFixedArity = 1;
  log_time.cljs$lang$applyTo = function(arglist__26762) {
    var f = cljs.core.first(arglist__26762);
    var args = cljs.core.rest(arglist__26762);
    return log_time__delegate(f, args);
  };
  log_time.cljs$core$IFn$_invoke$arity$variadic = log_time__delegate;
  return log_time;
}();
cljs.looperscript.looperscript.note__GT_freq = function note__GT_freq(n) {
  return 261.625565 * Math.pow.call(null, 2, n / 12);
};
cljs.looperscript.looperscript.ratio__GT_freq = function ratio__GT_freq(r) {
  return 261.625565 * r;
};
cljs.looperscript.looperscript.dethunk = function dethunk(x) {
  if (cljs.core.fn_QMARK_.call(null, x)) {
    return x.call(null);
  } else {
    return x;
  }
};
cljs.looperscript.looperscript.get_looper_text = function get_looper_text() {
  return cljs.looperscript.interpret.remove_comments.call(null, editor.getValue());
};
cljs.looperscript.looperscript.get_parts = function get_parts() {
  var text = cljs.looperscript.looperscript.get_looper_text.call(null);
  var start_time = cljs.looperscript.looperscript.now.call(null);
  var parse_tree = cljs.looperscript.interpret.looper_parse.call(null, text);
  if (instaparse.core.failure_QMARK_.call(null, parse_tree)) {
    return parse_tree;
  } else {
    var _ = cljs.looperscript.logging.log.call(null, new cljs.core.Keyword(null, "tree", "tree", -196312028), parse_tree, "\n");
    var parse_time = cljs.looperscript.looperscript.now.call(null) - start_time;
    var transformed_tree = cljs.looperscript.interpret.looper_transform.call(null, parse_tree);
    var ___$1 = cljs.looperscript.logging.log.call(null, new cljs.core.Keyword(null, "transformed", "transformed", 1969289512), transformed_tree, "\n");
    var transform_time = cljs.looperscript.looperscript.now.call(null) - start_time;
    var new_params = (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(transformed_tree);
    var parts = (new cljs.core.Keyword(null, "parts", "parts", 849007691)).cljs$core$IFn$_invoke$arity$1(transformed_tree);
    cljs.looperscript.logging.log.call(null, "Parse time: (", parse_time, ") ", transform_time);
    cljs.core.reset_BANG_.call(null, cljs.looperscript.looperscript.params, new_params);
    return parts;
  }
};
cljs.looperscript.looperscript.add_note_to_sounding_notes = function() {
  var sounding_counter = cljs.core.atom.call(null, 0);
  return function(sounding_counter) {
    return function(n, node) {
      var id = cljs.core.swap_BANG_.call(null, sounding_counter, cljs.core.inc);
      cljs.core.swap_BANG_.call(null, cljs.looperscript.looperscript.sounding_notes, cljs.core.assoc, id, node);
      return node["onended"] = function(id, sounding_counter) {
        return function() {
          return cljs.core.swap_BANG_.call(null, cljs.looperscript.looperscript.sounding_notes, cljs.core.dissoc, id);
        };
      }(id, sounding_counter);
    };
  }(sounding_counter);
}();
cljs.looperscript.looperscript.make_iterators = function make_iterators(part) {
  var part_keys = cljs.core.remove.call(null, function(p1__26763_SHARP_) {
    return cljs.core._EQ_.call(null, p1__26763_SHARP_, new cljs.core.Keyword(null, "name", "name", 1843675177));
  }, cljs.core.keys.call(null, part));
  var specified_aspects = cljs.core.reduce.call(null, cljs.core.into, cljs.core.PersistentHashSet.EMPTY, part_keys);
  var non_specified_aspects = cljs.core.remove.call(null, function(part_keys, specified_aspects) {
    return function(p1__26764_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, specified_aspects, p1__26764_SHARP_);
    };
  }(part_keys, specified_aspects), cljs.looperscript.looperscript.aspects);
  return cljs.core.into.call(null, cljs.core.zipmap.call(null, part_keys, cljs.core.map.call(null, function(part_keys, specified_aspects, non_specified_aspects) {
    return function(p1__26765_SHARP_) {
      return cljs.looperscript.iterator.iterator.call(null, cljs.core.get.call(null, part, p1__26765_SHARP_));
    };
  }(part_keys, specified_aspects, non_specified_aspects), part_keys)), cljs.core.zipmap.call(null, cljs.core.map.call(null, cljs.core.vector, non_specified_aspects), cljs.core.map.call(null, function(part_keys, specified_aspects, non_specified_aspects) {
    return function(p1__26766_SHARP_) {
      return cljs.looperscript.iterator.iterator.call(null, cljs.core.get.call(null, cljs.looperscript.looperscript.aspect_defaults, p1__26766_SHARP_));
    };
  }(part_keys, specified_aspects, non_specified_aspects), non_specified_aspects)));
};
cljs.looperscript.looperscript.next_note_fn = function next_note_fn(part, start_time) {
  var iterators = cljs.looperscript.looperscript.make_iterators.call(null, part);
  var time_pos = cljs.core.atom.call(null, start_time + function() {
    var temp__4124__auto__ = (new cljs.core.Keyword(null, "bpm", "bpm", -1042376389)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.looperscript.looperscript.params));
    if (cljs.core.truth_(temp__4124__auto__)) {
      var bpm = temp__4124__auto__;
      return bpm;
    } else {
      return 1;
    }
  }() * cljs.core.first.call(null, cljs.core.get.call(null, part, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "offset", "offset", 296498311)], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [0], null))));
  return function(iterators, time_pos) {
    return function() {
      var G__26783 = null;
      var G__26783__0 = function() {
        while (true) {
          var res_v = function() {
            var iter__4379__auto__ = function(iterators, time_pos) {
              return function iter__26775(s__26776) {
                return new cljs.core.LazySeq(null, function(iterators, time_pos) {
                  return function() {
                    var s__26776__$1 = s__26776;
                    while (true) {
                      var temp__4126__auto__ = cljs.core.seq.call(null, s__26776__$1);
                      if (temp__4126__auto__) {
                        var xs__4624__auto__ = temp__4126__auto__;
                        var vec__26782 = cljs.core.first.call(null, xs__4624__auto__);
                        var k = cljs.core.nth.call(null, vec__26782, 0, null);
                        var iter = cljs.core.nth.call(null, vec__26782, 1, null);
                        var iterys__4375__auto__ = function(s__26776__$1, vec__26782, k, iter, xs__4624__auto__, temp__4126__auto__, iterators, time_pos) {
                          return function iter__26777(s__26778) {
                            return new cljs.core.LazySeq(null, function(s__26776__$1, vec__26782, k, iter, xs__4624__auto__, temp__4126__auto__, iterators, time_pos) {
                              return function() {
                                var s__26778__$1 = s__26778;
                                while (true) {
                                  var temp__4126__auto____$1 = cljs.core.seq.call(null, s__26778__$1);
                                  if (temp__4126__auto____$1) {
                                    var s__26778__$2 = temp__4126__auto____$1;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__26778__$2)) {
                                      var c__4377__auto__ = cljs.core.chunk_first.call(null, s__26778__$2);
                                      var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                                      var b__26780 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                                      if (function() {
                                        var i__26779 = 0;
                                        while (true) {
                                          if (i__26779 < size__4378__auto__) {
                                            var aspect = cljs.core._nth.call(null, c__4377__auto__, i__26779);
                                            cljs.core.chunk_append.call(null, b__26780, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [aspect, iter.call(null)], null));
                                            var G__26784 = i__26779 + 1;
                                            i__26779 = G__26784;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__26780), iter__26777.call(null, cljs.core.chunk_rest.call(null, s__26778__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__26780), null);
                                      }
                                    } else {
                                      var aspect = cljs.core.first.call(null, s__26778__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [aspect, iter.call(null)], null), iter__26777.call(null, cljs.core.rest.call(null, s__26778__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(s__26776__$1, vec__26782, k, iter, xs__4624__auto__, temp__4126__auto__, iterators, time_pos), null, null);
                          };
                        }(s__26776__$1, vec__26782, k, iter, xs__4624__auto__, temp__4126__auto__, iterators, time_pos);
                        var fs__4376__auto__ = cljs.core.seq.call(null, iterys__4375__auto__.call(null, k));
                        if (fs__4376__auto__) {
                          return cljs.core.concat.call(null, fs__4376__auto__, iter__26775.call(null, cljs.core.rest.call(null, s__26776__$1)));
                        } else {
                          var G__26785 = cljs.core.rest.call(null, s__26776__$1);
                          s__26776__$1 = G__26785;
                          continue;
                        }
                      } else {
                        return null;
                      }
                      break;
                    }
                  };
                }(iterators, time_pos), null, null);
              };
            }(iterators, time_pos);
            return iter__4379__auto__.call(null, iterators);
          }();
          var res = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, res_v);
          var res__$1 = cljs.core.update_in.call(null, cljs.core.update_in.call(null, cljs.core.assoc.call(null, cljs.core.assoc.call(null, res, new cljs.core.Keyword(null, "start-time", "start-time", 814801386), cljs.core.deref.call(null, time_pos)), new cljs.core.Keyword(null, "overtones", "overtones", -2065460921), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [1], null)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
          "time", "time", 1385887882)], null), cljs.core._STAR_, function() {
            var temp__4124__auto__ = (new cljs.core.Keyword(null, "bpm", "bpm", -1042376389)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.looperscript.looperscript.params));
            if (cljs.core.truth_(temp__4124__auto__)) {
              var bpm = temp__4124__auto__;
              return bpm;
            } else {
              return 1;
            }
          }()), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "time+", "time+", 2008858809)], null), cljs.core._STAR_, function() {
            var temp__4124__auto__ = (new cljs.core.Keyword(null, "bpm", "bpm", -1042376389)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.looperscript.looperscript.params));
            if (cljs.core.truth_(temp__4124__auto__)) {
              var bpm = temp__4124__auto__;
              return bpm;
            } else {
              return 1;
            }
          }());
          if (0 >= res__$1.call(null, new cljs.core.Keyword(null, "skip", "skip", 602715391))) {
            continue;
          } else {
            cljs.core.swap_BANG_.call(null, time_pos, cljs.core._PLUS_, res__$1.call(null, new cljs.core.Keyword(null, "time", "time", 1385887882)));
            return res__$1;
          }
          break;
        }
      };
      var G__26783__1 = function(command) {
        if (cljs.core._EQ_.call(null, command, new cljs.core.Keyword(null, "time-pos", "time-pos", -106363383))) {
          return cljs.core.deref.call(null, time_pos);
        } else {
          return null;
        }
      };
      G__26783 = function(command) {
        switch(arguments.length) {
          case 0:
            return G__26783__0.call(this);
          case 1:
            return G__26783__1.call(this, command);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__26783.cljs$core$IFn$_invoke$arity$0 = G__26783__0;
      G__26783.cljs$core$IFn$_invoke$arity$1 = G__26783__1;
      return G__26783;
    }();
  }(iterators, time_pos);
};
cljs.looperscript.looperscript.schedule_note = function schedule_note(n) {
  var sound = (new cljs.core.Keyword(null, "sound", "sound", -2127407070)).cljs$core$IFn$_invoke$arity$1(n);
  var rate = (new cljs.core.Keyword(null, "rate", "rate", -1428659698)).cljs$core$IFn$_invoke$arity$1(n);
  var start_time = (new cljs.core.Keyword(null, "start-time", "start-time", 814801386)).cljs$core$IFn$_invoke$arity$1(n) + (new cljs.core.Keyword(null, "time+", "time+", 2008858809)).cljs$core$IFn$_invoke$arity$1(n);
  var start_time__$1 = cljs.core.vector_QMARK_.call(null, sound) && cljs.core._EQ_.call(null, cljs.core.first.call(null, sound), new cljs.core.Keyword(null, "drum-code", "drum-code", 2081814302)) ? function() {
    var temp__4124__auto__ = cljs.core.get.call(null, cljs.looperscript.audio.sample_lags, cljs.core.get.call(null, cljs.looperscript.audio.drum_codes, cljs.core.second.call(null, sound)));
    if (cljs.core.truth_(temp__4124__auto__)) {
      var l = temp__4124__auto__;
      return start_time - l / rate;
    } else {
      return start_time;
    }
  }() : start_time;
  if (start_time__$1 >= cljs.looperscript.looperscript.now.call(null)) {
    var sound__$1 = typeof sound === "number" ? cljs.looperscript.looperscript.note__GT_freq.call(null, sound) : cljs.core.vector_QMARK_.call(null, sound) && cljs.core._EQ_.call(null, cljs.core.first.call(null, sound), new cljs.core.Keyword(null, "ratio", "ratio", -926560044)) ? cljs.looperscript.looperscript.ratio__GT_freq.call(null, cljs.core.second.call(null, sound)) : cljs.core.vector_QMARK_.call(null, sound) && cljs.core._EQ_.call(null, cljs.core.first.call(null, sound), new cljs.core.Keyword(null, 
    "hz", "hz", -1450739349)) ? cljs.core.second.call(null, sound) : cljs.core.vector_QMARK_.call(null, sound) && cljs.core._EQ_.call(null, cljs.core.first.call(null, sound), new cljs.core.Keyword(null, "drum-code", "drum-code", 2081814302)) ? cljs.looperscript.audio.drum_codes.call(null, cljs.core.second.call(null, sound)) : sound;
    var dur = (new cljs.core.Keyword(null, "time", "time", 1385887882)).cljs$core$IFn$_invoke$arity$1(n) - (new cljs.core.Keyword(null, "time+", "time+", 2008858809)).cljs$core$IFn$_invoke$arity$1(n);
    var vol = (new cljs.core.Keyword(null, "volume", "volume", 1900330799)).cljs$core$IFn$_invoke$arity$1(n);
    var filter = (new cljs.core.Keyword(null, "filter", "filter", -948537934)).cljs$core$IFn$_invoke$arity$1(n);
    var pan = (new cljs.core.Keyword(null, "pan", "pan", -307712792)).cljs$core$IFn$_invoke$arity$1(n);
    var synth = (new cljs.core.Keyword(null, "synth", "synth", -862700847)).cljs$core$IFn$_invoke$arity$1(n);
    var overtones = (new cljs.core.Keyword(null, "overtones", "overtones", -2065460921)).cljs$core$IFn$_invoke$arity$1(n);
    var node = typeof sound__$1 === "number" ? cljs.core.truth_(filter) ? cljs.looperscript.audio.play_filtered_tone.call(null, sound__$1, start_time__$1, dur, vol, pan, filter, synth, overtones) : cljs.looperscript.audio.play_tone.call(null, sound__$1, start_time__$1, dur, vol, pan, synth, overtones) : cljs.looperscript.audio.play_sound.call(null, sound__$1, start_time__$1, vol, rate);
    var seq__26790 = cljs.core.seq.call(null, cljs.core.coll_QMARK_.call(null, node) ? node : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [node], null));
    var chunk__26791 = null;
    var count__26792 = 0;
    var i__26793 = 0;
    while (true) {
      if (i__26793 < count__26792) {
        var i = cljs.core._nth.call(null, chunk__26791, i__26793);
        cljs.looperscript.looperscript.add_note_to_sounding_notes.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [n, cljs.core.rand.call(null)], null), i);
        var G__26794 = seq__26790;
        var G__26795 = chunk__26791;
        var G__26796 = count__26792;
        var G__26797 = i__26793 + 1;
        seq__26790 = G__26794;
        chunk__26791 = G__26795;
        count__26792 = G__26796;
        i__26793 = G__26797;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__26790);
        if (temp__4126__auto__) {
          var seq__26790__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__26790__$1)) {
            var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__26790__$1);
            var G__26798 = cljs.core.chunk_rest.call(null, seq__26790__$1);
            var G__26799 = c__4410__auto__;
            var G__26800 = cljs.core.count.call(null, c__4410__auto__);
            var G__26801 = 0;
            seq__26790 = G__26798;
            chunk__26791 = G__26799;
            count__26792 = G__26800;
            i__26793 = G__26801;
            continue;
          } else {
            var i = cljs.core.first.call(null, seq__26790__$1);
            cljs.looperscript.looperscript.add_note_to_sounding_notes.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [n, cljs.core.rand.call(null)], null), i);
            var G__26802 = cljs.core.next.call(null, seq__26790__$1);
            var G__26803 = null;
            var G__26804 = 0;
            var G__26805 = 0;
            seq__26790 = G__26802;
            chunk__26791 = G__26803;
            count__26792 = G__26804;
            i__26793 = G__26805;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.looperscript.looperscript.queue_notes = function queue_notes() {
  cljs.core.reset_BANG_.call(null, cljs.looperscript.looperscript.last_queue_time, cljs.looperscript.looperscript.now.call(null));
  var end_time = cljs.looperscript.looperscript.now.call(null) + cljs.looperscript.looperscript.queue_time_extra + cljs.looperscript.looperscript.queue_time_interval;
  var seq__26810 = cljs.core.seq.call(null, cljs.core.deref.call(null, cljs.looperscript.looperscript.current_next_note_fns));
  var chunk__26811 = null;
  var count__26812 = 0;
  var i__26813 = 0;
  while (true) {
    if (i__26813 < count__26812) {
      var n_n_fn = cljs.core._nth.call(null, chunk__26811, i__26813);
      if (n_n_fn.call(null, new cljs.core.Keyword(null, "time-pos", "time-pos", -106363383)) < end_time) {
        while (true) {
          var next_note_26814 = n_n_fn.call(null);
          if (0 < (new cljs.core.Keyword(null, "mute", "mute", 1151223646)).cljs$core$IFn$_invoke$arity$1(next_note_26814)) {
            cljs.looperscript.looperscript.schedule_note.call(null, next_note_26814);
          } else {
          }
          if ((new cljs.core.Keyword(null, "start-time", "start-time", 814801386)).cljs$core$IFn$_invoke$arity$1(next_note_26814) < end_time) {
            continue;
          } else {
          }
          break;
        }
      } else {
      }
      var G__26815 = seq__26810;
      var G__26816 = chunk__26811;
      var G__26817 = count__26812;
      var G__26818 = i__26813 + 1;
      seq__26810 = G__26815;
      chunk__26811 = G__26816;
      count__26812 = G__26817;
      i__26813 = G__26818;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__26810);
      if (temp__4126__auto__) {
        var seq__26810__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__26810__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__26810__$1);
          var G__26819 = cljs.core.chunk_rest.call(null, seq__26810__$1);
          var G__26820 = c__4410__auto__;
          var G__26821 = cljs.core.count.call(null, c__4410__auto__);
          var G__26822 = 0;
          seq__26810 = G__26819;
          chunk__26811 = G__26820;
          count__26812 = G__26821;
          i__26813 = G__26822;
          continue;
        } else {
          var n_n_fn = cljs.core.first.call(null, seq__26810__$1);
          if (n_n_fn.call(null, new cljs.core.Keyword(null, "time-pos", "time-pos", -106363383)) < end_time) {
            while (true) {
              var next_note_26823 = n_n_fn.call(null);
              if (0 < (new cljs.core.Keyword(null, "mute", "mute", 1151223646)).cljs$core$IFn$_invoke$arity$1(next_note_26823)) {
                cljs.looperscript.looperscript.schedule_note.call(null, next_note_26823);
              } else {
              }
              if ((new cljs.core.Keyword(null, "start-time", "start-time", 814801386)).cljs$core$IFn$_invoke$arity$1(next_note_26823) < end_time) {
                continue;
              } else {
              }
              break;
            }
          } else {
          }
          var G__26824 = cljs.core.next.call(null, seq__26810__$1);
          var G__26825 = null;
          var G__26826 = 0;
          var G__26827 = 0;
          seq__26810 = G__26824;
          chunk__26811 = G__26825;
          count__26812 = G__26826;
          i__26813 = G__26827;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.looperscript.looperscript.reset_clock_BANG_ = function() {
  var reset_clock_BANG_ = null;
  var reset_clock_BANG___0 = function() {
    return reset_clock_BANG_.call(null, null);
  };
  var reset_clock_BANG___1 = function(time) {
    return cljs.core.reset_BANG_.call(null, cljs.looperscript.looperscript.current_start_time, time);
  };
  reset_clock_BANG_ = function(time) {
    switch(arguments.length) {
      case 0:
        return reset_clock_BANG___0.call(this);
      case 1:
        return reset_clock_BANG___1.call(this, time);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reset_clock_BANG_.cljs$core$IFn$_invoke$arity$0 = reset_clock_BANG___0;
  reset_clock_BANG_.cljs$core$IFn$_invoke$arity$1 = reset_clock_BANG___1;
  return reset_clock_BANG_;
}();
cljs.looperscript.looperscript.reset_button = function reset_button() {
  cljs.looperscript.looperscript.stop.call(null);
  return cljs.looperscript.looperscript.reset_clock_BANG_.call(null);
};
cljs.looperscript.looperscript.update = function() {
  var update = null;
  var update__0 = function() {
    return update.call(null, cljs.looperscript.looperscript.get_parts.call(null));
  };
  var update__1 = function(parts) {
    if (instaparse.core.failure_QMARK_.call(null, parts)) {
      return cljs.looperscript.logging.log.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.vec.call(null, parts)));
    } else {
      var new_nnfns = cljs.core.vec.call(null, function() {
        var iter__4379__auto__ = function iter__26836(s__26837) {
          return new cljs.core.LazySeq(null, function() {
            var s__26837__$1 = s__26837;
            while (true) {
              var temp__4126__auto__ = cljs.core.seq.call(null, s__26837__$1);
              if (temp__4126__auto__) {
                var s__26837__$2 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__26837__$2)) {
                  var c__4377__auto__ = cljs.core.chunk_first.call(null, s__26837__$2);
                  var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                  var b__26839 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                  if (function() {
                    var i__26838 = 0;
                    while (true) {
                      if (i__26838 < size__4378__auto__) {
                        var p = cljs.core._nth.call(null, c__4377__auto__, i__26838);
                        cljs.core.chunk_append.call(null, b__26839, cljs.looperscript.looperscript.next_note_fn.call(null, p, cljs.core.deref.call(null, cljs.looperscript.looperscript.current_start_time)));
                        var G__26844 = i__26838 + 1;
                        i__26838 = G__26844;
                        continue;
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__26839), iter__26836.call(null, cljs.core.chunk_rest.call(null, s__26837__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__26839), null);
                  }
                } else {
                  var p = cljs.core.first.call(null, s__26837__$2);
                  return cljs.core.cons.call(null, cljs.looperscript.looperscript.next_note_fn.call(null, p, cljs.core.deref.call(null, cljs.looperscript.looperscript.current_start_time)), iter__26836.call(null, cljs.core.rest.call(null, s__26837__$2)));
                }
              } else {
                return null;
              }
              break;
            }
          }, null, null);
        };
        return iter__4379__auto__.call(null, cljs.core.vals.call(null, parts));
      }());
      var seq__26840_26845 = cljs.core.seq.call(null, new_nnfns);
      var chunk__26841_26846 = null;
      var count__26842_26847 = 0;
      var i__26843_26848 = 0;
      while (true) {
        if (i__26843_26848 < count__26842_26847) {
          var nnfn_26849 = cljs.core._nth.call(null, chunk__26841_26846, i__26843_26848);
          while (true) {
            if (cljs.core.truth_(function() {
              var and__3628__auto__ = cljs.core.deref.call(null, cljs.looperscript.looperscript.last_queue_time);
              if (cljs.core.truth_(and__3628__auto__)) {
                var and__3628__auto____$1 = cljs.core.deref.call(null, cljs.looperscript.looperscript.playing);
                if (cljs.core.truth_(and__3628__auto____$1)) {
                  var and__3628__auto____$2 = true;
                  if (and__3628__auto____$2) {
                    return cljs.looperscript.looperscript.now.call(null) - cljs.core.deref.call(null, cljs.looperscript.looperscript.last_queue_time);
                  } else {
                    return and__3628__auto____$2;
                  }
                } else {
                  return and__3628__auto____$1;
                }
              } else {
                return and__3628__auto__;
              }
            }())) {
              cljs.looperscript.looperscript.queue_notes.call(null);
            } else {
            }
            if (cljs.looperscript.looperscript.now.call(null) > nnfn_26849.call(null, new cljs.core.Keyword(null, "time-pos", "time-pos", -106363383))) {
              nnfn_26849.call(null);
              continue;
            } else {
            }
            break;
          }
          var G__26850 = seq__26840_26845;
          var G__26851 = chunk__26841_26846;
          var G__26852 = count__26842_26847;
          var G__26853 = i__26843_26848 + 1;
          seq__26840_26845 = G__26850;
          chunk__26841_26846 = G__26851;
          count__26842_26847 = G__26852;
          i__26843_26848 = G__26853;
          continue;
        } else {
          var temp__4126__auto___26854 = cljs.core.seq.call(null, seq__26840_26845);
          if (temp__4126__auto___26854) {
            var seq__26840_26855__$1 = temp__4126__auto___26854;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__26840_26855__$1)) {
              var c__4410__auto___26856 = cljs.core.chunk_first.call(null, seq__26840_26855__$1);
              var G__26857 = cljs.core.chunk_rest.call(null, seq__26840_26855__$1);
              var G__26858 = c__4410__auto___26856;
              var G__26859 = cljs.core.count.call(null, c__4410__auto___26856);
              var G__26860 = 0;
              seq__26840_26845 = G__26857;
              chunk__26841_26846 = G__26858;
              count__26842_26847 = G__26859;
              i__26843_26848 = G__26860;
              continue;
            } else {
              var nnfn_26861 = cljs.core.first.call(null, seq__26840_26855__$1);
              while (true) {
                if (cljs.core.truth_(function() {
                  var and__3628__auto__ = cljs.core.deref.call(null, cljs.looperscript.looperscript.last_queue_time);
                  if (cljs.core.truth_(and__3628__auto__)) {
                    var and__3628__auto____$1 = cljs.core.deref.call(null, cljs.looperscript.looperscript.playing);
                    if (cljs.core.truth_(and__3628__auto____$1)) {
                      var and__3628__auto____$2 = true;
                      if (and__3628__auto____$2) {
                        return cljs.looperscript.looperscript.now.call(null) - cljs.core.deref.call(null, cljs.looperscript.looperscript.last_queue_time);
                      } else {
                        return and__3628__auto____$2;
                      }
                    } else {
                      return and__3628__auto____$1;
                    }
                  } else {
                    return and__3628__auto__;
                  }
                }())) {
                  cljs.looperscript.looperscript.queue_notes.call(null);
                } else {
                }
                if (cljs.looperscript.looperscript.now.call(null) > nnfn_26861.call(null, new cljs.core.Keyword(null, "time-pos", "time-pos", -106363383))) {
                  nnfn_26861.call(null);
                  continue;
                } else {
                }
                break;
              }
              var G__26862 = cljs.core.next.call(null, seq__26840_26855__$1);
              var G__26863 = null;
              var G__26864 = 0;
              var G__26865 = 0;
              seq__26840_26845 = G__26862;
              chunk__26841_26846 = G__26863;
              count__26842_26847 = G__26864;
              i__26843_26848 = G__26865;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return cljs.core.reset_BANG_.call(null, cljs.looperscript.looperscript.current_next_note_fns, new_nnfns);
    }
  };
  update = function(parts) {
    switch(arguments.length) {
      case 0:
        return update__0.call(this);
      case 1:
        return update__1.call(this, parts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update.cljs$core$IFn$_invoke$arity$0 = update__0;
  update.cljs$core$IFn$_invoke$arity$1 = update__1;
  return update;
}();
cljs.looperscript.looperscript.kill_playing_interval = function kill_playing_interval() {
  if (cljs.core.truth_(cljs.core.deref.call(null, cljs.looperscript.looperscript.playing_interval))) {
    clearInterval(cljs.core.deref.call(null, cljs.looperscript.looperscript.playing_interval));
    return cljs.core.reset_BANG_.call(null, cljs.looperscript.looperscript.playing_interval, null);
  } else {
    return null;
  }
};
cljs.looperscript.looperscript.play = function play() {
  var parts = cljs.looperscript.looperscript.get_parts.call(null);
  if (cljs.core.deref.call(null, cljs.looperscript.looperscript.current_start_time) == null) {
    cljs.looperscript.looperscript.reset_clock_BANG_.call(null, cljs.looperscript.looperscript.now.call(null) + .25);
  } else {
  }
  cljs.looperscript.looperscript.update.call(null, parts);
  cljs.looperscript.looperscript.queue_notes.call(null);
  cljs.looperscript.looperscript.kill_playing_interval.call(null);
  cljs.core.reset_BANG_.call(null, cljs.looperscript.looperscript.playing_interval, setInterval(cljs.looperscript.looperscript.queue_notes, cljs.looperscript.looperscript.queue_time_interval * 1E3));
  return cljs.core.reset_BANG_.call(null, cljs.looperscript.looperscript.playing, true);
};
cljs.looperscript.looperscript.kill_sounds = function kill_sounds() {
  var seq__26870_26874 = cljs.core.seq.call(null, cljs.core.vals.call(null, cljs.core.deref.call(null, cljs.looperscript.looperscript.sounding_notes)));
  var chunk__26871_26875 = null;
  var count__26872_26876 = 0;
  var i__26873_26877 = 0;
  while (true) {
    if (i__26873_26877 < count__26872_26876) {
      var n_26878 = cljs.core._nth.call(null, chunk__26871_26875, i__26873_26877);
      n_26878.stop();
      var G__26879 = seq__26870_26874;
      var G__26880 = chunk__26871_26875;
      var G__26881 = count__26872_26876;
      var G__26882 = i__26873_26877 + 1;
      seq__26870_26874 = G__26879;
      chunk__26871_26875 = G__26880;
      count__26872_26876 = G__26881;
      i__26873_26877 = G__26882;
      continue;
    } else {
      var temp__4126__auto___26883 = cljs.core.seq.call(null, seq__26870_26874);
      if (temp__4126__auto___26883) {
        var seq__26870_26884__$1 = temp__4126__auto___26883;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__26870_26884__$1)) {
          var c__4410__auto___26885 = cljs.core.chunk_first.call(null, seq__26870_26884__$1);
          var G__26886 = cljs.core.chunk_rest.call(null, seq__26870_26884__$1);
          var G__26887 = c__4410__auto___26885;
          var G__26888 = cljs.core.count.call(null, c__4410__auto___26885);
          var G__26889 = 0;
          seq__26870_26874 = G__26886;
          chunk__26871_26875 = G__26887;
          count__26872_26876 = G__26888;
          i__26873_26877 = G__26889;
          continue;
        } else {
          var n_26890 = cljs.core.first.call(null, seq__26870_26884__$1);
          n_26890.stop();
          var G__26891 = cljs.core.next.call(null, seq__26870_26884__$1);
          var G__26892 = null;
          var G__26893 = 0;
          var G__26894 = 0;
          seq__26870_26874 = G__26891;
          chunk__26871_26875 = G__26892;
          count__26872_26876 = G__26893;
          i__26873_26877 = G__26894;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return cljs.core.reset_BANG_.call(null, cljs.looperscript.looperscript.sounding_notes, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.looperscript.looperscript.stop = function stop() {
  cljs.core.reset_BANG_.call(null, cljs.looperscript.looperscript.playing, false);
  cljs.looperscript.looperscript.kill_playing_interval.call(null);
  return cljs.looperscript.looperscript.kill_sounds.call(null);
};
domina.events.listen_BANG_.call(null, domina.by_id.call(null, "play"), new cljs.core.Keyword(null, "click", "click", 1912301393), function(e) {
  return cljs.looperscript.looperscript.play.call(null);
});
domina.events.listen_BANG_.call(null, domina.by_id.call(null, "pause"), new cljs.core.Keyword(null, "click", "click", 1912301393), function(e) {
  return cljs.looperscript.looperscript.stop.call(null);
});
domina.events.listen_BANG_.call(null, domina.by_id.call(null, "update"), new cljs.core.Keyword(null, "click", "click", 1912301393), function(e) {
  return cljs.looperscript.looperscript.update.call(null);
});
domina.events.listen_BANG_.call(null, domina.by_id.call(null, "link"), new cljs.core.Keyword(null, "click", "click", 1912301393), function(e) {
  return cljs.looperscript.address_bar.text__GT_link.call(null);
});
domina.events.listen_BANG_.call(null, domina.by_id.call(null, "stop"), new cljs.core.Keyword(null, "click", "click", 1912301393), function(e) {
  return cljs.looperscript.looperscript.reset_button.call(null);
});
cljs.looperscript.looperscript.bind_key = function bind_key(name, windows_key, mac_key, f) {
  return editor["commands"].addCommand(function() {
    var obj26900 = {"name":name, "bindKey":function() {
      var obj26902 = {"win":windows_key, "mac":mac_key};
      return obj26902;
    }(), "exec":f};
    return obj26900;
  }());
};
cljs.looperscript.looperscript.bind_key.call(null, "update", "Ctrl-u", "Command-U", cljs.looperscript.looperscript.update);
cljs.looperscript.looperscript.bind_key.call(null, "stop", "Ctrl-Shift-S", "Command-Shift-S", cljs.looperscript.looperscript.reset_button);
cljs.looperscript.looperscript.bind_key.call(null, "play", "Ctrol-Shift-P", "Command-Shift-P", cljs.looperscript.looperscript.play);
cljs.looperscript.audio.load_some_drums.call(null);
