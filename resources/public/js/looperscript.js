if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}

var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2371";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__30105__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__30105 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__30105__delegate.call(this, args);
    };
    G__30105.cljs$lang$maxFixedArity = 0;
    G__30105.cljs$lang$applyTo = function(arglist__30106) {
      var args = cljs.core.seq(arglist__30106);
      return G__30105__delegate(args);
    };
    G__30105.cljs$core$IFn$_invoke$arity$variadic = G__30105__delegate;
    return G__30105;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function some_QMARK_(x) {
  return!(x == null);
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3628__auto__ = ty;
    if (cljs.core.truth_(and__3628__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3628__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4124__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var s = temp__4124__auto__;
    return s;
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ty);
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4510__auto___30107 = len;
  var i_30108 = 0;
  while (true) {
    if (i_30108 < n__4510__auto___30107) {
      new_arr[i_30108] = arr[i_30108];
      var G__30109 = i_30108 + 1;
      i_30108 = G__30109;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__30110__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__30110 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30110__delegate.call(this, array, i, idxs);
    };
    G__30110.cljs$lang$maxFixedArity = 2;
    G__30110.cljs$lang$applyTo = function(arglist__30111) {
      var array = cljs.core.first(arglist__30111);
      arglist__30111 = cljs.core.next(arglist__30111);
      var i = cljs.core.first(arglist__30111);
      var idxs = cljs.core.rest(arglist__30111);
      return G__30110__delegate(array, i, idxs);
    };
    G__30110.cljs$core$IFn$_invoke$arity$variadic = G__30110__delegate;
    return G__30110;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__30112__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__30112 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__30112__delegate.call(this, array, idx, idx2, idxv);
    };
    G__30112.cljs$lang$maxFixedArity = 3;
    G__30112.cljs$lang$applyTo = function(arglist__30113) {
      var array = cljs.core.first(arglist__30113);
      arglist__30113 = cljs.core.next(arglist__30113);
      var idx = cljs.core.first(arglist__30113);
      arglist__30113 = cljs.core.next(arglist__30113);
      var idx2 = cljs.core.first(arglist__30113);
      var idxv = cljs.core.rest(arglist__30113);
      return G__30112__delegate(array, idx, idx2, idxv);
    };
    G__30112.cljs$core$IFn$_invoke$arity$variadic = G__30112__delegate;
    return G__30112;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj30115 = {};
  return obj30115;
}();
cljs.core.IFn = function() {
  var obj30117 = {};
  return obj30117;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    }
  };
  var _invoke__22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$22;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return _invoke__22.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  _invoke.cljs$core$IFn$_invoke$arity$22 = _invoke__22;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj30119 = {};
  return obj30119;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3628__auto__ = value;
    if (and__3628__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4277__auto__ = value == null ? null : value;
    return function() {
      var or__3640__auto__ = cljs.core._clone[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._clone["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj30121 = {};
  return obj30121;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._count[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._count["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj30123 = {};
  return obj30123;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._empty[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._empty["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj30125 = {};
  return obj30125;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._conj[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._conj["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj30127 = {};
  return obj30127;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3628__auto__ = coll;
      if (and__3628__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4277__auto__ = coll == null ? null : coll;
      return function() {
        var or__3640__auto__ = cljs.core._nth[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._nth["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3628__auto__ = coll;
      if (and__3628__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4277__auto__ = coll == null ? null : coll;
      return function() {
        var or__3640__auto__ = cljs.core._nth[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._nth["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj30129 = {};
  return obj30129;
}();
cljs.core.ISeq = function() {
  var obj30131 = {};
  return obj30131;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._first[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._first["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._rest[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._rest["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj30133 = {};
  return obj30133;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._next[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._next["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj30135 = {};
  return obj30135;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3628__auto__ = o;
      if (and__3628__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4277__auto__ = o == null ? null : o;
      return function() {
        var or__3640__auto__ = cljs.core._lookup[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._lookup["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3628__auto__ = o;
      if (and__3628__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4277__auto__ = o == null ? null : o;
      return function() {
        var or__3640__auto__ = cljs.core._lookup[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._lookup["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj30137 = {};
  return obj30137;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._assoc[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._assoc["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj30139 = {};
  return obj30139;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._dissoc[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._dissoc["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj30141 = {};
  return obj30141;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._key[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._key["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._val[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._val["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj30143 = {};
  return obj30143;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._disjoin[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._disjoin["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj30145 = {};
  return obj30145;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._peek[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._peek["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._pop[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._pop["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj30147 = {};
  return obj30147;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._assoc_n[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj30149 = {};
  return obj30149;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3628__auto__ = o;
    if (and__3628__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4277__auto__ = o == null ? null : o;
    return function() {
      var or__3640__auto__ = cljs.core._deref[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._deref["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj30151 = {};
  return obj30151;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3628__auto__ = o;
    if (and__3628__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4277__auto__ = o == null ? null : o;
    return function() {
      var or__3640__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj30153 = {};
  return obj30153;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3628__auto__ = o;
    if (and__3628__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4277__auto__ = o == null ? null : o;
    return function() {
      var or__3640__auto__ = cljs.core._meta[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._meta["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj30155 = {};
  return obj30155;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3628__auto__ = o;
    if (and__3628__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4277__auto__ = o == null ? null : o;
    return function() {
      var or__3640__auto__ = cljs.core._with_meta[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._with_meta["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj30157 = {};
  return obj30157;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3628__auto__ = coll;
      if (and__3628__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4277__auto__ = coll == null ? null : coll;
      return function() {
        var or__3640__auto__ = cljs.core._reduce[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._reduce["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3628__auto__ = coll;
      if (and__3628__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4277__auto__ = coll == null ? null : coll;
      return function() {
        var or__3640__auto__ = cljs.core._reduce[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._reduce["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj30159 = {};
  return obj30159;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._kv_reduce[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj30161 = {};
  return obj30161;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3628__auto__ = o;
    if (and__3628__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4277__auto__ = o == null ? null : o;
    return function() {
      var or__3640__auto__ = cljs.core._equiv[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._equiv["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj30163 = {};
  return obj30163;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3628__auto__ = o;
    if (and__3628__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4277__auto__ = o == null ? null : o;
    return function() {
      var or__3640__auto__ = cljs.core._hash[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._hash["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj30165 = {};
  return obj30165;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3628__auto__ = o;
    if (and__3628__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4277__auto__ = o == null ? null : o;
    return function() {
      var or__3640__auto__ = cljs.core._seq[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._seq["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj30167 = {};
  return obj30167;
}();
cljs.core.IList = function() {
  var obj30169 = {};
  return obj30169;
}();
cljs.core.IRecord = function() {
  var obj30171 = {};
  return obj30171;
}();
cljs.core.IReversible = function() {
  var obj30173 = {};
  return obj30173;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._rseq[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._rseq["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj30175 = {};
  return obj30175;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._sorted_seq[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._entry_key[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._entry_key["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._comparator[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._comparator["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj30177 = {};
  return obj30177;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3628__auto__ = writer;
    if (and__3628__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4277__auto__ = writer == null ? null : writer;
    return function() {
      var or__3640__auto__ = cljs.core._write[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._write["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3628__auto__ = writer;
    if (and__3628__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4277__auto__ = writer == null ? null : writer;
    return function() {
      var or__3640__auto__ = cljs.core._flush[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._flush["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj30179 = {};
  return obj30179;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3628__auto__ = o;
    if (and__3628__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4277__auto__ = o == null ? null : o;
    return function() {
      var or__3640__auto__ = cljs.core._pr_writer[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj30181 = {};
  return obj30181;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3628__auto__ = d;
    if (and__3628__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4277__auto__ = d == null ? null : d;
    return function() {
      var or__3640__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj30183 = {};
  return obj30183;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3628__auto__ = this$;
    if (and__3628__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4277__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3640__auto__ = cljs.core._notify_watches[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3628__auto__ = this$;
    if (and__3628__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4277__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3640__auto__ = cljs.core._add_watch[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._add_watch["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3628__auto__ = this$;
    if (and__3628__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4277__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3640__auto__ = cljs.core._remove_watch[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj30185 = {};
  return obj30185;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._as_transient[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._as_transient["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj30187 = {};
  return obj30187;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3628__auto__ = tcoll;
    if (and__3628__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4277__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3640__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3628__auto__ = tcoll;
    if (and__3628__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4277__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3640__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj30189 = {};
  return obj30189;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3628__auto__ = tcoll;
    if (and__3628__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4277__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3640__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj30191 = {};
  return obj30191;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3628__auto__ = tcoll;
    if (and__3628__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4277__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3640__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj30193 = {};
  return obj30193;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3628__auto__ = tcoll;
    if (and__3628__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4277__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3640__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3628__auto__ = tcoll;
    if (and__3628__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4277__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3640__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj30195 = {};
  return obj30195;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3628__auto__ = tcoll;
    if (and__3628__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4277__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3640__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj30197 = {};
  return obj30197;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3628__auto__ = x;
    if (and__3628__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4277__auto__ = x == null ? null : x;
    return function() {
      var or__3640__auto__ = cljs.core._compare[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._compare["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj30199 = {};
  return obj30199;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._drop_first[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._drop_first["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj30201 = {};
  return obj30201;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._chunked_first[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._chunked_rest[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj30203 = {};
  return obj30203;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._chunked_next[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj30205 = {};
  return obj30205;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3628__auto__ = x;
    if (and__3628__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4277__auto__ = x == null ? null : x;
    return function() {
      var or__3640__auto__ = cljs.core._name[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._name["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3628__auto__ = x;
    if (and__3628__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4277__auto__ = x == null ? null : x;
    return function() {
      var or__3640__auto__ = cljs.core._namespace[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._namespace["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.IAtom = function() {
  var obj30207 = {};
  return obj30207;
}();
cljs.core.IReset = function() {
  var obj30209 = {};
  return obj30209;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__3628__auto__ = o;
    if (and__3628__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4277__auto__ = o == null ? null : o;
    return function() {
      var or__3640__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj30211 = {};
  return obj30211;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__3628__auto__ = o;
      if (and__3628__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__4277__auto__ = o == null ? null : o;
      return function() {
        var or__3640__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__3628__auto__ = o;
      if (and__3628__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__4277__auto__ = o == null ? null : o;
      return function() {
        var or__3640__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__3628__auto__ = o;
      if (and__3628__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__4277__auto__ = o == null ? null : o;
      return function() {
        var or__3640__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__3628__auto__ = o;
      if (and__3628__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__4277__auto__ = o == null ? null : o;
      return function() {
        var or__3640__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.IIterable = function() {
  var obj30213 = {};
  return obj30213;
}();
cljs.core._iterator = function _iterator(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IIterable$_iterator$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._iterator[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._iterator["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IIterable.-iterator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
};
cljs.core.int_rotate_left = function int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(Math.imul.call(null, 4294967295, 5) === 0)) {
  cljs.core.imul = function imul(a, b) {
    return Math.imul.call(null, a, b);
  };
} else {
  cljs.core.imul = function imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353;
cljs.core.m3_C2 = 461845907;
cljs.core.m3_mix_K1 = function m3_mix_K1(k1) {
  return cljs.core.imul.call(null, cljs.core.int_rotate_left.call(null, cljs.core.imul.call(null, k1, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function m3_mix_H1(h1, k1) {
  return cljs.core.imul.call(null, cljs.core.int_rotate_left.call(null, h1 ^ k1, 13), 5) + 3864292196;
};
cljs.core.m3_fmix = function m3_fmix(h1, len) {
  var h1__$1 = h1;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul.call(null, h1__$3, 2246822507);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul.call(null, h1__$5, 3266489909);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1.call(null, in$);
    var h1 = cljs.core.m3_mix_H1.call(null, cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix.call(null, h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__30214 = i + 2;
        var G__30215 = cljs.core.m3_mix_H1.call(null, h1, cljs.core.m3_mix_K1.call(null, in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__30214;
        h1 = G__30215;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1.call(null, in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix.call(null, h1__$1, cljs.core.imul.call(null, 2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj30217 = {};
  return obj30217;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__30218 = i + 1;
          var G__30219 = cljs.core.imul.call(null, 31, hash) + s.charCodeAt(i);
          i = G__30218;
          hash = G__30219;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_.call(null, k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj30223 = {};
      return obj30223;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__30225 = o;
    if (G__30225) {
      var bit__4297__auto__ = G__30225.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4297__auto__ || G__30225.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor.call(null, o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int.call(null, cljs.core.hash_string.call(null, o));
          } else {
            if (o == null) {
              return 0;
            } else {
              return cljs.core._hash.call(null, o);
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.m3_hash_unencoded_chars.call(null, sym.name), cljs.core.hash_string.call(null, sym.ns));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3628__auto__ = cljs.core.not.call(null, a.ns);
      if (and__3628__auto__) {
        return b.ns;
      } else {
        return and__3628__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        return cljs.core.compare.call(null, a.name, b.name);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__4051__auto__ = self__._hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__30227 = null;
  var G__30227__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__30227__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__30227 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__30227__2.call(this, self__, coll);
      case 3:
        return G__30227__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__30227.cljs$core$IFn$_invoke$arity$2 = G__30227__2;
  G__30227.cljs$core$IFn$_invoke$arity$3 = G__30227__3;
  return G__30227;
}();
cljs.core.Symbol.prototype.apply = function(self__, args30226) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args30226)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.iterable_QMARK_ = function iterable_QMARK_(x) {
  var G__30229 = x;
  if (G__30229) {
    var bit__4304__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3640__auto__ = bit__4304__auto__;
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return G__30229.cljs$core$IIterable$;
      }
    }())) {
      return true;
    } else {
      if (!G__30229.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIterable, G__30229);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIterable, G__30229);
  }
};
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__30231 = value;
  if (G__30231) {
    var bit__4304__auto__ = G__30231.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4304__auto__ || G__30231.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__30231.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__30231);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__30231);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__30233 = coll;
      if (G__30233) {
        var bit__4297__auto__ = G__30233.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4297__auto__ || G__30233.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll) + " is not ISeqable");
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__30235 = coll;
      if (G__30235) {
        var bit__4297__auto__ = G__30235.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4297__auto__ || G__30235.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__30237 = coll;
      if (G__30237) {
        var bit__4297__auto__ = G__30237.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4297__auto__ || G__30237.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__30239 = coll;
      if (G__30239) {
        var bit__4297__auto__ = G__30239.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4297__auto__ || G__30239.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__30240__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__30241 = y;
            var G__30242 = cljs.core.first.call(null, more);
            var G__30243 = cljs.core.next.call(null, more);
            x = G__30241;
            y = G__30242;
            more = G__30243;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__30240 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30240__delegate.call(this, x, y, more);
    };
    G__30240.cljs$lang$maxFixedArity = 2;
    G__30240.cljs$lang$applyTo = function(arglist__30244) {
      var x = cljs.core.first(arglist__30244);
      arglist__30244 = cljs.core.next(arglist__30244);
      var y = cljs.core.first(arglist__30244);
      var more = cljs.core.rest(arglist__30244);
      return G__30240__delegate(x, y, more);
    };
    G__30240.cljs$core$IFn$_invoke$arity$variadic = G__30240__delegate;
    return G__30240;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.mix_collection_hash = function mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1.call(null, hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1.call(null, h1, k1);
  return cljs.core.m3_fmix.call(null, h1__$1, count);
};
cljs.core.hash_ordered_coll = function hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__30245 = n + 1;
      var G__30246 = cljs.core.imul.call(null, 31, hash_code) + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__30247 = cljs.core.next.call(null, coll__$1);
      n = G__30245;
      hash_code = G__30246;
      coll__$1 = G__30247;
      continue;
    } else {
      return cljs.core.mix_collection_hash.call(null, hash_code, n);
    }
    break;
  }
};
cljs.core.hash_unordered_coll = function hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__30248 = n + 1;
      var G__30249 = hash_code + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__30250 = cljs.core.next.call(null, coll__$1);
      n = G__30248;
      hash_code = G__30249;
      coll__$1 = G__30250;
      continue;
    } else {
      return cljs.core.mix_collection_hash.call(null, hash_code, n);
    }
    break;
  }
};
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__30251 = nval;
            var G__30252 = n + 1;
            val = G__30251;
            n = G__30252;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__30253 = nval;
          var G__30254 = n + 1;
          val__$1 = G__30253;
          n = G__30254;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__30255 = nval;
          var G__30256 = n + 1;
          val__$1 = G__30255;
          n = G__30256;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__30257 = nval;
            var G__30258 = n + 1;
            val = G__30257;
            n = G__30258;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__30259 = nval;
          var G__30260 = n + 1;
          val__$1 = G__30259;
          n = G__30260;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__30261 = nval;
          var G__30262 = n + 1;
          val__$1 = G__30261;
          n = G__30262;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__30264 = x;
  if (G__30264) {
    var bit__4304__auto__ = G__30264.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4304__auto__ || G__30264.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__30264.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__30264);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__30264);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__30266 = x;
  if (G__30266) {
    var bit__4304__auto__ = G__30266.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4304__auto__ || G__30266.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__30266.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__30266);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__30266);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.__GT_IndexedSeqIterator = function __GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__30267 = sn;
      s = G__30267;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__0 = function() {
    return cljs.core.PersistentVector.EMPTY;
  };
  var conj__1 = function(coll) {
    return coll;
  };
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__30268__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__30269 = conj.call(null, coll, x);
          var G__30270 = cljs.core.first.call(null, xs);
          var G__30271 = cljs.core.next.call(null, xs);
          coll = G__30269;
          x = G__30270;
          xs = G__30271;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__30268 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30268__delegate.call(this, coll, x, xs);
    };
    G__30268.cljs$lang$maxFixedArity = 2;
    G__30268.cljs$lang$applyTo = function(arglist__30272) {
      var coll = cljs.core.first(arglist__30272);
      arglist__30272 = cljs.core.next(arglist__30272);
      var x = cljs.core.first(arglist__30272);
      var xs = cljs.core.rest(arglist__30272);
      return G__30268__delegate(coll, x, xs);
    };
    G__30268.cljs$core$IFn$_invoke$arity$variadic = G__30268__delegate;
    return G__30268;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 0:
        return conj__0.call(this);
      case 1:
        return conj__1.call(this, coll);
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$0 = conj__0;
  conj.cljs$core$IFn$_invoke$arity$1 = conj__1;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__30273 = cljs.core.next.call(null, s);
      var G__30274 = acc + 1;
      s = G__30273;
      acc = G__30274;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__30276 = coll;
      if (G__30276) {
        var bit__4297__auto__ = G__30276.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4297__auto__ || G__30276.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            return cljs.core.accumulating_seq_count.call(null, coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__30277 = cljs.core.next.call(null, coll);
              var G__30278 = n - 1;
              coll = G__30277;
              n = G__30278;
              continue;
            } else {
              throw new Error("Index out of bounds");
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__30279 = cljs.core.next.call(null, coll);
              var G__30280 = n - 1;
              var G__30281 = not_found;
              coll = G__30279;
              n = G__30280;
              not_found = G__30281;
              continue;
            } else {
              return not_found;
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number");
    } else {
      if (coll == null) {
        return coll;
      } else {
        if (function() {
          var G__30286 = coll;
          if (G__30286) {
            var bit__4297__auto__ = G__30286.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4297__auto__ || G__30286.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return null;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__30287 = coll;
                  if (G__30287) {
                    var bit__4304__auto__ = G__30287.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4304__auto__ || G__30287.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__30287.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__30287);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__30287);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                }
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number.");
    } else {
      if (coll == null) {
        return not_found;
      } else {
        if (function() {
          var G__30288 = coll;
          if (G__30288) {
            var bit__4297__auto__ = G__30288.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4297__auto__ || G__30288.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n, not_found);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return not_found;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__30289 = coll;
                  if (G__30289) {
                    var bit__4304__auto__ = G__30289.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4304__auto__ || G__30289.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__30289.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__30289);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__30289);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                }
              }
            }
          }
        }
      }
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__30292 = o;
        if (G__30292) {
          var bit__4297__auto__ = G__30292.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4297__auto__ || G__30292.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__30293 = o;
        if (G__30293) {
          var bit__4297__auto__ = G__30293.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4297__auto__ || G__30293.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              return not_found;
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays([k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__30294__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__30295 = ret;
          var G__30296 = cljs.core.first.call(null, kvs);
          var G__30297 = cljs.core.second.call(null, kvs);
          var G__30298 = cljs.core.nnext.call(null, kvs);
          coll = G__30295;
          k = G__30296;
          v = G__30297;
          kvs = G__30298;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__30294 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__30294__delegate.call(this, coll, k, v, kvs);
    };
    G__30294.cljs$lang$maxFixedArity = 3;
    G__30294.cljs$lang$applyTo = function(arglist__30299) {
      var coll = cljs.core.first(arglist__30299);
      arglist__30299 = cljs.core.next(arglist__30299);
      var k = cljs.core.first(arglist__30299);
      arglist__30299 = cljs.core.next(arglist__30299);
      var v = cljs.core.first(arglist__30299);
      var kvs = cljs.core.rest(arglist__30299);
      return G__30294__delegate(coll, k, v, kvs);
    };
    G__30294.cljs$core$IFn$_invoke$arity$variadic = G__30294__delegate;
    return G__30294;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__30300__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__30301 = ret;
            var G__30302 = cljs.core.first.call(null, ks);
            var G__30303 = cljs.core.next.call(null, ks);
            coll = G__30301;
            k = G__30302;
            ks = G__30303;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__30300 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30300__delegate.call(this, coll, k, ks);
    };
    G__30300.cljs$lang$maxFixedArity = 2;
    G__30300.cljs$lang$applyTo = function(arglist__30304) {
      var coll = cljs.core.first(arglist__30304);
      arglist__30304 = cljs.core.next(arglist__30304);
      var k = cljs.core.first(arglist__30304);
      var ks = cljs.core.rest(arglist__30304);
      return G__30300__delegate(coll, k, ks);
    };
    G__30300.cljs$core$IFn$_invoke$arity$variadic = G__30300__delegate;
    return G__30300;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3640__auto__ = goog.isFunction(f);
  if (or__3640__auto__) {
    return or__3640__auto__;
  } else {
    var G__30308 = f;
    if (G__30308) {
      var bit__4304__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3640__auto____$1 = bit__4304__auto__;
        if (cljs.core.truth_(or__3640__auto____$1)) {
          return or__3640__auto____$1;
        } else {
          return G__30308.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__30308.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__30308);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__30308);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/MetaFn");
};
cljs.core.MetaFn.prototype.call = function() {
  var G__30310 = null;
  var G__30310__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null);
  };
  var G__30310__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a);
  };
  var G__30310__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b);
  };
  var G__30310__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c);
  };
  var G__30310__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d);
  };
  var G__30310__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e);
  };
  var G__30310__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f);
  };
  var G__30310__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g);
  };
  var G__30310__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__30310__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__30310__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__30310__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__30310__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__30310__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__30310__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__30310__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__30310__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__30310__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__30310__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__30310__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__30310__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__30310__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__30310 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__30310__1.call(this, self__);
      case 2:
        return G__30310__2.call(this, self__, a);
      case 3:
        return G__30310__3.call(this, self__, a, b);
      case 4:
        return G__30310__4.call(this, self__, a, b, c);
      case 5:
        return G__30310__5.call(this, self__, a, b, c, d);
      case 6:
        return G__30310__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__30310__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__30310__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__30310__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__30310__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__30310__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__30310__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__30310__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__30310__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__30310__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__30310__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__30310__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__30310__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__30310__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__30310__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__30310__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__30310__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__30310.cljs$core$IFn$_invoke$arity$1 = G__30310__1;
  G__30310.cljs$core$IFn$_invoke$arity$2 = G__30310__2;
  G__30310.cljs$core$IFn$_invoke$arity$3 = G__30310__3;
  G__30310.cljs$core$IFn$_invoke$arity$4 = G__30310__4;
  G__30310.cljs$core$IFn$_invoke$arity$5 = G__30310__5;
  G__30310.cljs$core$IFn$_invoke$arity$6 = G__30310__6;
  G__30310.cljs$core$IFn$_invoke$arity$7 = G__30310__7;
  G__30310.cljs$core$IFn$_invoke$arity$8 = G__30310__8;
  G__30310.cljs$core$IFn$_invoke$arity$9 = G__30310__9;
  G__30310.cljs$core$IFn$_invoke$arity$10 = G__30310__10;
  G__30310.cljs$core$IFn$_invoke$arity$11 = G__30310__11;
  G__30310.cljs$core$IFn$_invoke$arity$12 = G__30310__12;
  G__30310.cljs$core$IFn$_invoke$arity$13 = G__30310__13;
  G__30310.cljs$core$IFn$_invoke$arity$14 = G__30310__14;
  G__30310.cljs$core$IFn$_invoke$arity$15 = G__30310__15;
  G__30310.cljs$core$IFn$_invoke$arity$16 = G__30310__16;
  G__30310.cljs$core$IFn$_invoke$arity$17 = G__30310__17;
  G__30310.cljs$core$IFn$_invoke$arity$18 = G__30310__18;
  G__30310.cljs$core$IFn$_invoke$arity$19 = G__30310__19;
  G__30310.cljs$core$IFn$_invoke$arity$20 = G__30310__20;
  G__30310.cljs$core$IFn$_invoke$arity$21 = G__30310__21;
  G__30310.cljs$core$IFn$_invoke$arity$22 = G__30310__22;
  return G__30310;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args30309) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args30309)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.__GT_MetaFn = function __GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__30314 = o;
    if (G__30314) {
      var bit__4304__auto__ = G__30314.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4304__auto__ || G__30314.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__30314.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__30314);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__30314);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3628__auto__ = !(o == null);
    if (and__3628__auto__) {
      var G__30318 = o;
      if (G__30318) {
        var bit__4304__auto__ = G__30318.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4304__auto__ || G__30318.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__30318.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__30318);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__30318);
      }
    } else {
      return and__3628__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__30319__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__30320 = ret;
            var G__30321 = cljs.core.first.call(null, ks);
            var G__30322 = cljs.core.next.call(null, ks);
            coll = G__30320;
            k = G__30321;
            ks = G__30322;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__30319 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30319__delegate.call(this, coll, k, ks);
    };
    G__30319.cljs$lang$maxFixedArity = 2;
    G__30319.cljs$lang$applyTo = function(arglist__30323) {
      var coll = cljs.core.first(arglist__30323);
      arglist__30323 = cljs.core.next(arglist__30323);
      var k = cljs.core.first(arglist__30323);
      var ks = cljs.core.rest(arglist__30323);
      return G__30319__delegate(coll, k, ks);
    };
    G__30319.cljs$core$IFn$_invoke$arity$variadic = G__30319__delegate;
    return G__30319;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__30325 = x;
    if (G__30325) {
      var bit__4304__auto__ = G__30325.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4304__auto__ || G__30325.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__30325.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__30325);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__30325);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__30327 = x;
    if (G__30327) {
      var bit__4304__auto__ = G__30327.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4304__auto__ || G__30327.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__30327.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__30327);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__30327);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__30329 = x;
  if (G__30329) {
    var bit__4304__auto__ = G__30329.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4304__auto__ || G__30329.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__30329.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__30329);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__30329);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__30331 = x;
  if (G__30331) {
    var bit__4304__auto__ = G__30331.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4304__auto__ || G__30331.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__30331.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__30331);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__30331);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__30333 = x;
  if (G__30333) {
    var bit__4304__auto__ = G__30333.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4304__auto__ || G__30333.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__30333.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__30333);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__30333);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__30335 = x;
  if (G__30335) {
    var bit__4304__auto__ = G__30335.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4304__auto__ || G__30335.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__30335.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__30335);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__30335);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__30337 = x;
    if (G__30337) {
      var bit__4304__auto__ = G__30337.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4304__auto__ || G__30337.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__30337.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__30337);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__30337);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__30339 = x;
  if (G__30339) {
    var bit__4304__auto__ = G__30339.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4304__auto__ || G__30339.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__30339.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__30339);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__30339);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__30341 = x;
  if (G__30341) {
    var bit__4297__auto__ = G__30341.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4297__auto__ || G__30341.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj30345 = {};
    return obj30345;
  };
  var js_obj__1 = function() {
    var G__30346__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__30346 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__30346__delegate.call(this, keyvals);
    };
    G__30346.cljs$lang$maxFixedArity = 0;
    G__30346.cljs$lang$applyTo = function(arglist__30347) {
      var keyvals = cljs.core.seq(arglist__30347);
      return G__30346__delegate(keyvals);
    };
    G__30346.cljs$core$IFn$_invoke$arity$variadic = G__30346__delegate;
    return G__30346;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(keys));
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__30348 = i__$1 + 1;
      var G__30349 = j__$1 + 1;
      var G__30350 = len__$1 - 1;
      i__$1 = G__30348;
      j__$1 = G__30349;
      len__$1 = G__30350;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__30351 = i__$1 - 1;
      var G__30352 = j__$1 - 1;
      var G__30353 = len__$1 - 1;
      i__$1 = G__30351;
      j__$1 = G__30352;
      len__$1 = G__30353;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj30355 = {};
  return obj30355;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__30357 = s;
    if (G__30357) {
      var bit__4304__auto__ = G__30357.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4304__auto__ || G__30357.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__30357.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__30357);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__30357);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__30359 = s;
  if (G__30359) {
    var bit__4304__auto__ = G__30359.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4304__auto__ || G__30359.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__30359.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__30359);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__30359);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3640__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__3640__auto__) {
    return or__3640__auto__;
  } else {
    var G__30363 = f;
    if (G__30363) {
      var bit__4304__auto__ = G__30363.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4304__auto__ || G__30363.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__30363.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__30363);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__30363);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && !isNaN(n) && !(n === Infinity) && parseFloat(n) === parseInt(n, 10);
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__30364__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__30365 = cljs.core.conj.call(null, s, x__$1);
              var G__30366 = etc;
              s = G__30365;
              xs = G__30366;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__30364 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30364__delegate.call(this, x, y, more);
    };
    G__30364.cljs$lang$maxFixedArity = 2;
    G__30364.cljs$lang$applyTo = function(arglist__30367) {
      var x = cljs.core.first(arglist__30367);
      arglist__30367 = cljs.core.next(arglist__30367);
      var y = cljs.core.first(arglist__30367);
      var more = cljs.core.rest(arglist__30367);
      return G__30364__delegate(x, y, more);
    };
    G__30364.cljs$core$IFn$_invoke$arity$variadic = G__30364__delegate;
    return G__30364;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__3640__auto__ = cljs.core.seq.call(null, coll);
    if (or__3640__auto__) {
      return or__3640__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__30369 = x;
            if (G__30369) {
              var bit__4297__auto__ = G__30369.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4297__auto__ || G__30369.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          throw new Error("compare on non-nil objects of different types");
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        return compare_indexed.call(null, xs, ys, xl, 0);
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__30370 = xs;
        var G__30371 = ys;
        var G__30372 = len;
        var G__30373 = n + 1;
        xs = G__30370;
        ys = G__30371;
        len = G__30372;
        n = G__30373;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4124__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__30374 = nval;
          var G__30375 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__30374;
          coll__$1 = G__30375;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__30378 = coll;
      if (G__30378) {
        var bit__4297__auto__ = G__30378.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4297__auto__ || G__30378.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            return cljs.core.seq_reduce.call(null, f, coll);
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__30379 = coll;
      if (G__30379) {
        var bit__4297__auto__ = G__30379.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4297__auto__ || G__30379.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            return cljs.core.seq_reduce.call(null, f, val, coll);
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.completing = function() {
  var completing = null;
  var completing__1 = function(f) {
    return completing.call(null, f, cljs.core.identity);
  };
  var completing__2 = function(f, cf) {
    return function() {
      var G__30380 = null;
      var G__30380__0 = function() {
        return f.call(null);
      };
      var G__30380__1 = function(x) {
        return cf.call(null, x);
      };
      var G__30380__2 = function(x, y) {
        return f.call(null, x, y);
      };
      G__30380 = function(x, y) {
        switch(arguments.length) {
          case 0:
            return G__30380__0.call(this);
          case 1:
            return G__30380__1.call(this, x);
          case 2:
            return G__30380__2.call(this, x, y);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__30380.cljs$core$IFn$_invoke$arity$0 = G__30380__0;
      G__30380.cljs$core$IFn$_invoke$arity$1 = G__30380__1;
      G__30380.cljs$core$IFn$_invoke$arity$2 = G__30380__2;
      return G__30380;
    }();
  };
  completing = function(f, cf) {
    switch(arguments.length) {
      case 1:
        return completing__1.call(this, f);
      case 2:
        return completing__2.call(this, f, cf);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  completing.cljs$core$IFn$_invoke$arity$1 = completing__1;
  completing.cljs$core$IFn$_invoke$arity$2 = completing__2;
  return completing;
}();
cljs.core.transduce = function() {
  var transduce = null;
  var transduce__3 = function(xform, f, coll) {
    return transduce.call(null, xform, f, f.call(null), coll);
  };
  var transduce__4 = function(xform, f, init, coll) {
    var f__$1 = xform.call(null, f);
    var ret = cljs.core.reduce.call(null, f__$1, init, coll);
    return f__$1.call(null, ret);
  };
  transduce = function(xform, f, init, coll) {
    switch(arguments.length) {
      case 3:
        return transduce__3.call(this, xform, f, init);
      case 4:
        return transduce__4.call(this, xform, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transduce.cljs$core$IFn$_invoke$arity$3 = transduce__3;
  transduce.cljs$core$IFn$_invoke$arity$4 = transduce__4;
  return transduce;
}();
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__30381__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__30381 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30381__delegate.call(this, x, y, more);
    };
    G__30381.cljs$lang$maxFixedArity = 2;
    G__30381.cljs$lang$applyTo = function(arglist__30382) {
      var x = cljs.core.first(arglist__30382);
      arglist__30382 = cljs.core.next(arglist__30382);
      var y = cljs.core.first(arglist__30382);
      var more = cljs.core.rest(arglist__30382);
      return G__30381__delegate(x, y, more);
    };
    G__30381.cljs$core$IFn$_invoke$arity$variadic = G__30381__delegate;
    return G__30381;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__30383__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__30383 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30383__delegate.call(this, x, y, more);
    };
    G__30383.cljs$lang$maxFixedArity = 2;
    G__30383.cljs$lang$applyTo = function(arglist__30384) {
      var x = cljs.core.first(arglist__30384);
      arglist__30384 = cljs.core.next(arglist__30384);
      var y = cljs.core.first(arglist__30384);
      var more = cljs.core.rest(arglist__30384);
      return G__30383__delegate(x, y, more);
    };
    G__30383.cljs$core$IFn$_invoke$arity$variadic = G__30383__delegate;
    return G__30383;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__30385__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__30385 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30385__delegate.call(this, x, y, more);
    };
    G__30385.cljs$lang$maxFixedArity = 2;
    G__30385.cljs$lang$applyTo = function(arglist__30386) {
      var x = cljs.core.first(arglist__30386);
      arglist__30386 = cljs.core.next(arglist__30386);
      var y = cljs.core.first(arglist__30386);
      var more = cljs.core.rest(arglist__30386);
      return G__30385__delegate(x, y, more);
    };
    G__30385.cljs$core$IFn$_invoke$arity$variadic = G__30385__delegate;
    return G__30385;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__30387__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__30387 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30387__delegate.call(this, x, y, more);
    };
    G__30387.cljs$lang$maxFixedArity = 2;
    G__30387.cljs$lang$applyTo = function(arglist__30388) {
      var x = cljs.core.first(arglist__30388);
      arglist__30388 = cljs.core.next(arglist__30388);
      var y = cljs.core.first(arglist__30388);
      var more = cljs.core.rest(arglist__30388);
      return G__30387__delegate(x, y, more);
    };
    G__30387.cljs$core$IFn$_invoke$arity$variadic = G__30387__delegate;
    return G__30387;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__30389__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__30390 = y;
            var G__30391 = cljs.core.first.call(null, more);
            var G__30392 = cljs.core.next.call(null, more);
            x = G__30390;
            y = G__30391;
            more = G__30392;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__30389 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30389__delegate.call(this, x, y, more);
    };
    G__30389.cljs$lang$maxFixedArity = 2;
    G__30389.cljs$lang$applyTo = function(arglist__30393) {
      var x = cljs.core.first(arglist__30393);
      arglist__30393 = cljs.core.next(arglist__30393);
      var y = cljs.core.first(arglist__30393);
      var more = cljs.core.rest(arglist__30393);
      return G__30389__delegate(x, y, more);
    };
    G__30389.cljs$core$IFn$_invoke$arity$variadic = G__30389__delegate;
    return G__30389;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__30394__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__30395 = y;
            var G__30396 = cljs.core.first.call(null, more);
            var G__30397 = cljs.core.next.call(null, more);
            x = G__30395;
            y = G__30396;
            more = G__30397;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__30394 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30394__delegate.call(this, x, y, more);
    };
    G__30394.cljs$lang$maxFixedArity = 2;
    G__30394.cljs$lang$applyTo = function(arglist__30398) {
      var x = cljs.core.first(arglist__30398);
      arglist__30398 = cljs.core.next(arglist__30398);
      var y = cljs.core.first(arglist__30398);
      var more = cljs.core.rest(arglist__30398);
      return G__30394__delegate(x, y, more);
    };
    G__30394.cljs$core$IFn$_invoke$arity$variadic = G__30394__delegate;
    return G__30394;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__30399__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__30400 = y;
            var G__30401 = cljs.core.first.call(null, more);
            var G__30402 = cljs.core.next.call(null, more);
            x = G__30400;
            y = G__30401;
            more = G__30402;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__30399 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30399__delegate.call(this, x, y, more);
    };
    G__30399.cljs$lang$maxFixedArity = 2;
    G__30399.cljs$lang$applyTo = function(arglist__30403) {
      var x = cljs.core.first(arglist__30403);
      arglist__30403 = cljs.core.next(arglist__30403);
      var y = cljs.core.first(arglist__30403);
      var more = cljs.core.rest(arglist__30403);
      return G__30399__delegate(x, y, more);
    };
    G__30399.cljs$core$IFn$_invoke$arity$variadic = G__30399__delegate;
    return G__30399;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__30404__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__30405 = y;
            var G__30406 = cljs.core.first.call(null, more);
            var G__30407 = cljs.core.next.call(null, more);
            x = G__30405;
            y = G__30406;
            more = G__30407;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__30404 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30404__delegate.call(this, x, y, more);
    };
    G__30404.cljs$lang$maxFixedArity = 2;
    G__30404.cljs$lang$applyTo = function(arglist__30408) {
      var x = cljs.core.first(arglist__30408);
      arglist__30408 = cljs.core.next(arglist__30408);
      var y = cljs.core.first(arglist__30408);
      var more = cljs.core.rest(arglist__30408);
      return G__30404__delegate(x, y, more);
    };
    G__30404.cljs$core$IFn$_invoke$arity$variadic = G__30404__delegate;
    return G__30404;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__3947__auto__ = x;
    var y__3948__auto__ = y;
    return x__3947__auto__ > y__3948__auto__ ? x__3947__auto__ : y__3948__auto__;
  };
  var max__3 = function() {
    var G__30409__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3947__auto__ = x;
        var y__3948__auto__ = y;
        return x__3947__auto__ > y__3948__auto__ ? x__3947__auto__ : y__3948__auto__;
      }(), more);
    };
    var G__30409 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30409__delegate.call(this, x, y, more);
    };
    G__30409.cljs$lang$maxFixedArity = 2;
    G__30409.cljs$lang$applyTo = function(arglist__30410) {
      var x = cljs.core.first(arglist__30410);
      arglist__30410 = cljs.core.next(arglist__30410);
      var y = cljs.core.first(arglist__30410);
      var more = cljs.core.rest(arglist__30410);
      return G__30409__delegate(x, y, more);
    };
    G__30409.cljs$core$IFn$_invoke$arity$variadic = G__30409__delegate;
    return G__30409;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__3954__auto__ = x;
    var y__3955__auto__ = y;
    return x__3954__auto__ < y__3955__auto__ ? x__3954__auto__ : y__3955__auto__;
  };
  var min__3 = function() {
    var G__30411__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3954__auto__ = x;
        var y__3955__auto__ = y;
        return x__3954__auto__ < y__3955__auto__ ? x__3954__auto__ : y__3955__auto__;
      }(), more);
    };
    var G__30411 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30411__delegate.call(this, x, y, more);
    };
    G__30411.cljs$lang$maxFixedArity = 2;
    G__30411.cljs$lang$applyTo = function(arglist__30412) {
      var x = cljs.core.first(arglist__30412);
      arglist__30412 = cljs.core.next(arglist__30412);
      var y = cljs.core.first(arglist__30412);
      var more = cljs.core.rest(arglist__30412);
      return G__30411__delegate(x, y, more);
    };
    G__30411.cljs$core$IFn$_invoke$arity$variadic = G__30411__delegate;
    return G__30411;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__30413__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__30413 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30413__delegate.call(this, x, y, more);
    };
    G__30413.cljs$lang$maxFixedArity = 2;
    G__30413.cljs$lang$applyTo = function(arglist__30414) {
      var x = cljs.core.first(arglist__30414);
      arglist__30414 = cljs.core.next(arglist__30414);
      var y = cljs.core.first(arglist__30414);
      var more = cljs.core.rest(arglist__30414);
      return G__30413__delegate(x, y, more);
    };
    G__30413.cljs$core$IFn$_invoke$arity$variadic = G__30413__delegate;
    return G__30413;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__30415__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__30415 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30415__delegate.call(this, x, y, more);
    };
    G__30415.cljs$lang$maxFixedArity = 2;
    G__30415.cljs$lang$applyTo = function(arglist__30416) {
      var x = cljs.core.first(arglist__30416);
      arglist__30416 = cljs.core.next(arglist__30416);
      var y = cljs.core.first(arglist__30416);
      var more = cljs.core.rest(arglist__30416);
      return G__30415__delegate(x, y, more);
    };
    G__30415.cljs$core$IFn$_invoke$arity$variadic = G__30415__delegate;
    return G__30415;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__30417__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__30417 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30417__delegate.call(this, x, y, more);
    };
    G__30417.cljs$lang$maxFixedArity = 2;
    G__30417.cljs$lang$applyTo = function(arglist__30418) {
      var x = cljs.core.first(arglist__30418);
      arglist__30418 = cljs.core.next(arglist__30418);
      var y = cljs.core.first(arglist__30418);
      var more = cljs.core.rest(arglist__30418);
      return G__30417__delegate(x, y, more);
    };
    G__30417.cljs$core$IFn$_invoke$arity$variadic = G__30417__delegate;
    return G__30417;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__30419__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__30419 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30419__delegate.call(this, x, y, more);
    };
    G__30419.cljs$lang$maxFixedArity = 2;
    G__30419.cljs$lang$applyTo = function(arglist__30420) {
      var x = cljs.core.first(arglist__30420);
      arglist__30420 = cljs.core.next(arglist__30420);
      var y = cljs.core.first(arglist__30420);
      var more = cljs.core.rest(arglist__30420);
      return G__30419__delegate(x, y, more);
    };
    G__30419.cljs$core$IFn$_invoke$arity$variadic = G__30419__delegate;
    return G__30419;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__30421__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__30421 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30421__delegate.call(this, x, y, more);
    };
    G__30421.cljs$lang$maxFixedArity = 2;
    G__30421.cljs$lang$applyTo = function(arglist__30422) {
      var x = cljs.core.first(arglist__30422);
      arglist__30422 = cljs.core.next(arglist__30422);
      var y = cljs.core.first(arglist__30422);
      var more = cljs.core.rest(arglist__30422);
      return G__30421__delegate(x, y, more);
    };
    G__30421.cljs$core$IFn$_invoke$arity$variadic = G__30421__delegate;
    return G__30421;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_subtract = function() {
  var unchecked_subtract = null;
  var unchecked_subtract__1 = function(x) {
    return-x;
  };
  var unchecked_subtract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract__3 = function() {
    var G__30423__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_subtract, x - y, more);
    };
    var G__30423 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30423__delegate.call(this, x, y, more);
    };
    G__30423.cljs$lang$maxFixedArity = 2;
    G__30423.cljs$lang$applyTo = function(arglist__30424) {
      var x = cljs.core.first(arglist__30424);
      arglist__30424 = cljs.core.next(arglist__30424);
      var y = cljs.core.first(arglist__30424);
      var more = cljs.core.rest(arglist__30424);
      return G__30423__delegate(x, y, more);
    };
    G__30423.cljs$core$IFn$_invoke$arity$variadic = G__30423__delegate;
    return G__30423;
  }();
  unchecked_subtract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract__1.call(this, x);
      case 2:
        return unchecked_subtract__2.call(this, x, y);
      default:
        return unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract.cljs$lang$maxFixedArity = 2;
  unchecked_subtract.cljs$lang$applyTo = unchecked_subtract__3.cljs$lang$applyTo;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract__1;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract__2;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract;
}();
cljs.core.unchecked_subtract_int = function() {
  var unchecked_subtract_int = null;
  var unchecked_subtract_int__1 = function(x) {
    return-x;
  };
  var unchecked_subtract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract_int__3 = function() {
    var G__30425__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_subtract_int, x - y, more);
    };
    var G__30425 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30425__delegate.call(this, x, y, more);
    };
    G__30425.cljs$lang$maxFixedArity = 2;
    G__30425.cljs$lang$applyTo = function(arglist__30426) {
      var x = cljs.core.first(arglist__30426);
      arglist__30426 = cljs.core.next(arglist__30426);
      var y = cljs.core.first(arglist__30426);
      var more = cljs.core.rest(arglist__30426);
      return G__30425__delegate(x, y, more);
    };
    G__30425.cljs$core$IFn$_invoke$arity$variadic = G__30425__delegate;
    return G__30425;
  }();
  unchecked_subtract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract_int__1.call(this, x);
      case 2:
        return unchecked_subtract_int__2.call(this, x, y);
      default:
        return unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
  unchecked_subtract_int.cljs$lang$applyTo = unchecked_subtract_int__3.cljs$lang$applyTo;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract_int__1;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract_int__2;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__30427__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__30428 = y;
            var G__30429 = cljs.core.first.call(null, more);
            var G__30430 = cljs.core.next.call(null, more);
            x = G__30428;
            y = G__30429;
            more = G__30430;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__30427 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30427__delegate.call(this, x, y, more);
    };
    G__30427.cljs$lang$maxFixedArity = 2;
    G__30427.cljs$lang$applyTo = function(arglist__30431) {
      var x = cljs.core.first(arglist__30431);
      arglist__30431 = cljs.core.next(arglist__30431);
      var y = cljs.core.first(arglist__30431);
      var more = cljs.core.rest(arglist__30431);
      return G__30427__delegate(x, y, more);
    };
    G__30427.cljs$core$IFn$_invoke$arity$variadic = G__30427__delegate;
    return G__30427;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__30432 = n__$1 - 1;
      var G__30433 = cljs.core.next.call(null, xs);
      n__$1 = G__30432;
      xs = G__30433;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return "" + x;
    }
  };
  var str__2 = function() {
    var G__30434__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__30435 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__30436 = cljs.core.next.call(null, more);
          sb = G__30435;
          more = G__30436;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__30434 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__30434__delegate.call(this, x, ys);
    };
    G__30434.cljs$lang$maxFixedArity = 1;
    G__30434.cljs$lang$applyTo = function(arglist__30437) {
      var x = cljs.core.first(arglist__30437);
      var ys = cljs.core.rest(arglist__30437);
      return G__30434__delegate(x, ys);
    };
    G__30434.cljs$core$IFn$_invoke$arity$variadic = G__30434__delegate;
    return G__30434;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? cljs.core.counted_QMARK_.call(null, x) && cljs.core.counted_QMARK_.call(null, y) && !(cljs.core.count.call(null, x) === cljs.core.count.call(null, y)) ? false : function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__30438 = cljs.core.next.call(null, xs);
            var G__30439 = cljs.core.next.call(null, ys);
            xs = G__30438;
            ys = G__30439;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__30440 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__30441 = cljs.core.next.call(null, s);
        res = G__30440;
        s = G__30441;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__30442 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__30443 = cljs.core.next.call(null, s);
      h = G__30442;
      s = G__30443;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__30444 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__30445 = cljs.core.next.call(null, s__$1);
      h = G__30444;
      s__$1 = G__30445;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__30452_30458 = cljs.core.seq.call(null, fn_map);
  var chunk__30453_30459 = null;
  var count__30454_30460 = 0;
  var i__30455_30461 = 0;
  while (true) {
    if (i__30455_30461 < count__30454_30460) {
      var vec__30456_30462 = cljs.core._nth.call(null, chunk__30453_30459, i__30455_30461);
      var key_name_30463 = cljs.core.nth.call(null, vec__30456_30462, 0, null);
      var f_30464 = cljs.core.nth.call(null, vec__30456_30462, 1, null);
      var str_name_30465 = cljs.core.name.call(null, key_name_30463);
      obj[str_name_30465] = f_30464;
      var G__30466 = seq__30452_30458;
      var G__30467 = chunk__30453_30459;
      var G__30468 = count__30454_30460;
      var G__30469 = i__30455_30461 + 1;
      seq__30452_30458 = G__30466;
      chunk__30453_30459 = G__30467;
      count__30454_30460 = G__30468;
      i__30455_30461 = G__30469;
      continue;
    } else {
      var temp__4126__auto___30470 = cljs.core.seq.call(null, seq__30452_30458);
      if (temp__4126__auto___30470) {
        var seq__30452_30471__$1 = temp__4126__auto___30470;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__30452_30471__$1)) {
          var c__4410__auto___30472 = cljs.core.chunk_first.call(null, seq__30452_30471__$1);
          var G__30473 = cljs.core.chunk_rest.call(null, seq__30452_30471__$1);
          var G__30474 = c__4410__auto___30472;
          var G__30475 = cljs.core.count.call(null, c__4410__auto___30472);
          var G__30476 = 0;
          seq__30452_30458 = G__30473;
          chunk__30453_30459 = G__30474;
          count__30454_30460 = G__30475;
          i__30455_30461 = G__30476;
          continue;
        } else {
          var vec__30457_30477 = cljs.core.first.call(null, seq__30452_30471__$1);
          var key_name_30478 = cljs.core.nth.call(null, vec__30457_30477, 0, null);
          var f_30479 = cljs.core.nth.call(null, vec__30457_30477, 1, null);
          var str_name_30480 = cljs.core.name.call(null, key_name_30478);
          obj[str_name_30480] = f_30479;
          var G__30481 = cljs.core.next.call(null, seq__30452_30471__$1);
          var G__30482 = null;
          var G__30483 = 0;
          var G__30484 = 0;
          seq__30452_30458 = G__30481;
          chunk__30453_30459 = G__30482;
          count__30454_30460 = G__30483;
          i__30455_30461 = G__30484;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/List");
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__30486 = coll;
  if (G__30486) {
    var bit__4304__auto__ = G__30486.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4304__auto__ || G__30486.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__30486.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__30486);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__30486);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__30487 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__30487;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__30488 = i - 1;
        var G__30489 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__30488;
        r = G__30489;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__30490) {
    var xs = cljs.core.seq(arglist__30490);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3640__auto__ = coll == null;
    if (or__3640__auto__) {
      return or__3640__auto__;
    } else {
      var G__30494 = coll;
      if (G__30494) {
        var bit__4297__auto__ = G__30494.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4297__auto__ || G__30494.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__30496 = x;
  if (G__30496) {
    var bit__4304__auto__ = G__30496.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4304__auto__ || G__30496.cljs$core$IList$) {
      return true;
    } else {
      if (!G__30496.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__30496);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__30496);
  }
};
cljs.core.hash_keyword = function hash_keyword(k) {
  return cljs.core.hash_symbol.call(null, k) + 2654435769 | 0;
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4051__auto__ = self__._hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_keyword.call(null, this$__$1);
    self__._hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__30498 = null;
  var G__30498__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__30498__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__30498 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__30498__2.call(this, self__, coll);
      case 3:
        return G__30498__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__30498.cljs$core$IFn$_invoke$arity$2 = G__30498__2;
  G__30498.cljs$core$IFn$_invoke$arity$3 = G__30498__3;
  return G__30498;
}();
cljs.core.Keyword.prototype.apply = function(self__, args30497) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args30497)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn);
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__30500 = x;
    if (G__30500) {
      var bit__4297__auto__ = G__30500.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4297__auto__ || G__30500.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error("Doesn't support namespace: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(ns) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" : null) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__30501 = ls.sval();
        ls = G__30501;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__30503 = s;
    if (G__30503) {
      var bit__4297__auto__ = G__30503.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4297__auto__ || G__30503.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__30504 = cljs.core.next.call(null, s__$1);
      s__$1 = G__30504;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_30505 = 0;
  var xs_30506 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_30506) {
      ret[i_30505] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_30506));
      var G__30507 = i_30505 + 1;
      var G__30508 = cljs.core.next.call(null, xs_30506);
      i_30505 = G__30507;
      xs_30506 = G__30508;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__30509 = i + 1;
          var G__30510 = cljs.core.next.call(null, s__$1);
          i = G__30509;
          s__$1 = G__30510;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4510__auto___30511 = size;
      var i_30512 = 0;
      while (true) {
        if (i_30512 < n__4510__auto___30511) {
          a[i_30512] = init_val_or_seq;
          var G__30513 = i_30512 + 1;
          i_30512 = G__30513;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__30514 = i + 1;
          var G__30515 = cljs.core.next.call(null, s__$1);
          i = G__30514;
          s__$1 = G__30515;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4510__auto___30516 = size;
      var i_30517 = 0;
      while (true) {
        if (i_30517 < n__4510__auto___30516) {
          a[i_30517] = init_val_or_seq;
          var G__30518 = i_30517 + 1;
          i_30517 = G__30518;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__30519 = i + 1;
          var G__30520 = cljs.core.next.call(null, s__$1);
          i = G__30519;
          s__$1 = G__30520;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4510__auto___30521 = size;
      var i_30522 = 0;
      while (true) {
        if (i_30522 < n__4510__auto___30521) {
          a[i_30522] = init_val_or_seq;
          var G__30523 = i_30522 + 1;
          i_30522 = G__30523;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__30524 = i + 1;
          var G__30525 = cljs.core.next.call(null, s__$1);
          i = G__30524;
          s__$1 = G__30525;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4510__auto___30526 = size;
      var i_30527 = 0;
      while (true) {
        if (i_30527 < n__4510__auto___30526) {
          a[i_30527] = init_val_or_seq;
          var G__30528 = i_30527 + 1;
          i_30527 = G__30528;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__30529 = cljs.core.next.call(null, s__$1);
        var G__30530 = i - 1;
        var G__30531 = sum + 1;
        s__$1 = G__30529;
        i = G__30530;
        sum = G__30531;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__30532__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__30532 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30532__delegate.call(this, x, y, zs);
    };
    G__30532.cljs$lang$maxFixedArity = 2;
    G__30532.cljs$lang$applyTo = function(arglist__30533) {
      var x = cljs.core.first(arglist__30533);
      arglist__30533 = cljs.core.next(arglist__30533);
      var y = cljs.core.first(arglist__30533);
      var zs = cljs.core.rest(arglist__30533);
      return G__30532__delegate(x, y, zs);
    };
    G__30532.cljs$core$IFn$_invoke$arity$variadic = G__30532__delegate;
    return G__30532;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__30534__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__30534 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__30534__delegate.call(this, a, b, c, d, more);
    };
    G__30534.cljs$lang$maxFixedArity = 4;
    G__30534.cljs$lang$applyTo = function(arglist__30535) {
      var a = cljs.core.first(arglist__30535);
      arglist__30535 = cljs.core.next(arglist__30535);
      var b = cljs.core.first(arglist__30535);
      arglist__30535 = cljs.core.next(arglist__30535);
      var c = cljs.core.first(arglist__30535);
      arglist__30535 = cljs.core.next(arglist__30535);
      var d = cljs.core.first(arglist__30535);
      var more = cljs.core.rest(arglist__30535);
      return G__30534__delegate(a, b, c, d, more);
    };
    G__30534.cljs$core$IFn$_invoke$arity$variadic = G__30534__delegate;
    return G__30534;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___0 = function() {
    return cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  };
  var conj_BANG___1 = function(coll) {
    return coll;
  };
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_.call(null, tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__30536__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__30537 = ntcoll;
          var G__30538 = cljs.core.first.call(null, vals);
          var G__30539 = cljs.core.next.call(null, vals);
          tcoll = G__30537;
          val = G__30538;
          vals = G__30539;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__30536 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30536__delegate.call(this, tcoll, val, vals);
    };
    G__30536.cljs$lang$maxFixedArity = 2;
    G__30536.cljs$lang$applyTo = function(arglist__30540) {
      var tcoll = cljs.core.first(arglist__30540);
      arglist__30540 = cljs.core.next(arglist__30540);
      var val = cljs.core.first(arglist__30540);
      var vals = cljs.core.rest(arglist__30540);
      return G__30536__delegate(tcoll, val, vals);
    };
    G__30536.cljs$core$IFn$_invoke$arity$variadic = G__30536__delegate;
    return G__30536;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 0:
        return conj_BANG___0.call(this);
      case 1:
        return conj_BANG___1.call(this, tcoll);
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$0 = conj_BANG___0;
  conj_BANG_.cljs$core$IFn$_invoke$arity$1 = conj_BANG___1;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__30541__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_.call(null, tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__30542 = ntcoll;
          var G__30543 = cljs.core.first.call(null, kvs);
          var G__30544 = cljs.core.second.call(null, kvs);
          var G__30545 = cljs.core.nnext.call(null, kvs);
          tcoll = G__30542;
          key = G__30543;
          val = G__30544;
          kvs = G__30545;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__30541 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__30541__delegate.call(this, tcoll, key, val, kvs);
    };
    G__30541.cljs$lang$maxFixedArity = 3;
    G__30541.cljs$lang$applyTo = function(arglist__30546) {
      var tcoll = cljs.core.first(arglist__30546);
      arglist__30546 = cljs.core.next(arglist__30546);
      var key = cljs.core.first(arglist__30546);
      arglist__30546 = cljs.core.next(arglist__30546);
      var val = cljs.core.first(arglist__30546);
      var kvs = cljs.core.rest(arglist__30546);
      return G__30541__delegate(tcoll, key, val, kvs);
    };
    G__30541.cljs$core$IFn$_invoke$arity$variadic = G__30541__delegate;
    return G__30541;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_.call(null, tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__30547__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_.call(null, tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__30548 = ntcoll;
          var G__30549 = cljs.core.first.call(null, ks);
          var G__30550 = cljs.core.next.call(null, ks);
          tcoll = G__30548;
          key = G__30549;
          ks = G__30550;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__30547 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30547__delegate.call(this, tcoll, key, ks);
    };
    G__30547.cljs$lang$maxFixedArity = 2;
    G__30547.cljs$lang$applyTo = function(arglist__30551) {
      var tcoll = cljs.core.first(arglist__30551);
      arglist__30551 = cljs.core.next(arglist__30551);
      var key = cljs.core.first(arglist__30551);
      var ks = cljs.core.rest(arglist__30551);
      return G__30547__delegate(tcoll, key, ks);
    };
    G__30547.cljs$core$IFn$_invoke$arity$variadic = G__30547__delegate;
    return G__30547;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_.call(null, tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__30552__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__30553 = ntcoll;
          var G__30554 = cljs.core.first.call(null, vals);
          var G__30555 = cljs.core.next.call(null, vals);
          tcoll = G__30553;
          val = G__30554;
          vals = G__30555;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__30552 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30552__delegate.call(this, tcoll, val, vals);
    };
    G__30552.cljs$lang$maxFixedArity = 2;
    G__30552.cljs$lang$applyTo = function(arglist__30556) {
      var tcoll = cljs.core.first(arglist__30556);
      arglist__30556 = cljs.core.next(arglist__30556);
      var val = cljs.core.first(arglist__30556);
      var vals = cljs.core.rest(arglist__30556);
      return G__30552__delegate(tcoll, val, vals);
    };
    G__30552.cljs$core$IFn$_invoke$arity$variadic = G__30552__delegate;
    return G__30552;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a4554 = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a4554);
      } else {
        return f.call(null, a4554);
      }
    } else {
      var b4555 = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a4554, b4555);
        } else {
          return f.call(null, a4554, b4555);
        }
      } else {
        var c4556 = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a4554, b4555, c4556);
          } else {
            return f.call(null, a4554, b4555, c4556);
          }
        } else {
          var d4557 = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a4554, b4555, c4556, d4557);
            } else {
              return f.call(null, a4554, b4555, c4556, d4557);
            }
          } else {
            var e4558 = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a4554, b4555, c4556, d4557, e4558);
              } else {
                return f.call(null, a4554, b4555, c4556, d4557, e4558);
              }
            } else {
              var f4559 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a4554, b4555, c4556, d4557, e4558, f4559);
                } else {
                  return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559);
                }
              } else {
                var g4560 = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a4554, b4555, c4556, d4557, e4558, f4559, g4560);
                  } else {
                    return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560);
                  }
                } else {
                  var h4561 = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561);
                    } else {
                      return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561);
                    }
                  } else {
                    var i4562 = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562);
                      } else {
                        return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562);
                      }
                    } else {
                      var j4563 = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563);
                        } else {
                          return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563);
                        }
                      } else {
                        var k4564 = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564);
                          } else {
                            return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564);
                          }
                        } else {
                          var l4565 = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565);
                            } else {
                              return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565);
                            }
                          } else {
                            var m4566 = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566);
                              } else {
                                return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566);
                              }
                            } else {
                              var n4567 = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567);
                                } else {
                                  return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567);
                                }
                              } else {
                                var o4568 = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568);
                                  } else {
                                    return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568);
                                  }
                                } else {
                                  var p4569 = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568, p4569);
                                    } else {
                                      return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568, p4569);
                                    }
                                  } else {
                                    var q4570 = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568, p4569, q4570);
                                      } else {
                                        return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568, p4569, q4570);
                                      }
                                    } else {
                                      var r4571 = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568, p4569, q4570, r4571);
                                        } else {
                                          return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568, p4569, q4570, r4571);
                                        }
                                      } else {
                                        var s4572 = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568, p4569, q4570, r4571, s4572);
                                          } else {
                                            return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568, p4569, q4570, r4571, s4572);
                                          }
                                        } else {
                                          var t4573 = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568, p4569, q4570, r4571, s4572, t4573);
                                            } else {
                                              return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568, p4569, q4570, r4571, s4572, t4573);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__30557__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__30557 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__30557__delegate.call(this, f, a, b, c, d, args);
    };
    G__30557.cljs$lang$maxFixedArity = 5;
    G__30557.cljs$lang$applyTo = function(arglist__30558) {
      var f = cljs.core.first(arglist__30558);
      arglist__30558 = cljs.core.next(arglist__30558);
      var a = cljs.core.first(arglist__30558);
      arglist__30558 = cljs.core.next(arglist__30558);
      var b = cljs.core.first(arglist__30558);
      arglist__30558 = cljs.core.next(arglist__30558);
      var c = cljs.core.first(arglist__30558);
      arglist__30558 = cljs.core.next(arglist__30558);
      var d = cljs.core.first(arglist__30558);
      var args = cljs.core.rest(arglist__30558);
      return G__30557__delegate(f, a, b, c, d, args);
    };
    G__30557.cljs$core$IFn$_invoke$arity$variadic = G__30557__delegate;
    return G__30557;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__30559__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__30559 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__30559__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__30559.cljs$lang$maxFixedArity = 6;
    G__30559.cljs$lang$applyTo = function(arglist__30560) {
      var obj = cljs.core.first(arglist__30560);
      arglist__30560 = cljs.core.next(arglist__30560);
      var f = cljs.core.first(arglist__30560);
      arglist__30560 = cljs.core.next(arglist__30560);
      var a = cljs.core.first(arglist__30560);
      arglist__30560 = cljs.core.next(arglist__30560);
      var b = cljs.core.first(arglist__30560);
      arglist__30560 = cljs.core.next(arglist__30560);
      var c = cljs.core.first(arglist__30560);
      arglist__30560 = cljs.core.next(arglist__30560);
      var d = cljs.core.first(arglist__30560);
      var args = cljs.core.rest(arglist__30560);
      return G__30559__delegate(obj, f, a, b, c, d, args);
    };
    G__30559.cljs$core$IFn$_invoke$arity$variadic = G__30559__delegate;
    return G__30559;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__30561__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__30561 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30561__delegate.call(this, x, y, more);
    };
    G__30561.cljs$lang$maxFixedArity = 2;
    G__30561.cljs$lang$applyTo = function(arglist__30562) {
      var x = cljs.core.first(arglist__30562);
      arglist__30562 = cljs.core.next(arglist__30562);
      var y = cljs.core.first(arglist__30562);
      var more = cljs.core.rest(arglist__30562);
      return G__30561__delegate(x, y, more);
    };
    G__30561.cljs$core$IFn$_invoke$arity$variadic = G__30561__delegate;
    return G__30561;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function nil_iter() {
  if (typeof cljs.core.t30566 !== "undefined") {
  } else {
    cljs.core.t30566 = function(nil_iter, meta30567) {
      this.nil_iter = nil_iter;
      this.meta30567 = meta30567;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.t30566.cljs$lang$type = true;
    cljs.core.t30566.cljs$lang$ctorStr = "cljs.core/t30566";
    cljs.core.t30566.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
      return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/t30566");
    };
    cljs.core.t30566.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t30566.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t30566.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t30566.prototype.cljs$core$IMeta$_meta$arity$1 = function(_30568) {
      var self__ = this;
      var _30568__$1 = this;
      return self__.meta30567;
    };
    cljs.core.t30566.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_30568, meta30567__$1) {
      var self__ = this;
      var _30568__$1 = this;
      return new cljs.core.t30566(self__.nil_iter, meta30567__$1);
    };
    cljs.core.__GT_t30566 = function __GT_t30566(nil_iter__$1, meta30567) {
      return new cljs.core.t30566(nil_iter__$1, meta30567);
    };
  }
  return new cljs.core.t30566(nil_iter, null);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/StringIter");
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.__GT_StringIter = function __GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ArrayIter");
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.__GT_ArrayIter = function __GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/SeqIter");
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq.call(null, self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next.call(null, self__._seq);
    } else {
    }
  }
  return!(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not.call(null, this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first.call(null, self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.__GT_SeqIter = function __GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter.call(null);
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_iter.call(null, coll);
      } else {
        if (cljs.core.iterable_QMARK_.call(null, coll)) {
          return cljs.core._iterator.call(null, coll);
        } else {
          if (cljs.core.seqable_QMARK_.call(null, coll)) {
            return cljs.core.seq_iter.call(null, coll);
          } else {
            throw new Error("Cannot create iterator from " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/Stepper");
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3628__auto__ = !(lt.stepper == null);
      if (and__3628__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__3628__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_.call(null, self__.xform.call(null, lt, self__.iter.next()))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.call(null, lt);
  }
};
cljs.core.__GT_Stepper = function __GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function stepper(xform, iter) {
  var stepfn = function() {
    var stepfn = null;
    var stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_.call(null, result) ? cljs.core.deref.call(null, result) : result;
      lt.stepper = null;
      return result;
    };
    var stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer.call(null, lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return stepfn__1.call(this, result);
        case 2:
          return stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
    stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
    return stepfn;
  }();
  return new cljs.core.Stepper(xform.call(null, stepfn), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/MultiStepper");
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq.call(null, self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first.call(null, iters__$1);
      if (cljs.core.not.call(null, iter.hasNext())) {
        return false;
      } else {
        var G__30569 = cljs.core.next.call(null, iters__$1);
        iters__$1 = G__30569;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__4510__auto___30570 = self__.iters.length;
  var i_30571 = 0;
  while (true) {
    if (i_30571 < n__4510__auto___30570) {
      self__.nexts[i_30571] = self__.iters[i_30571].next();
      var G__30572 = i_30571 + 1;
      i_30571 = G__30572;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.call(null, self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3628__auto__ = !(lt.stepper == null);
      if (and__3628__auto__) {
        return this$.hasNext();
      } else {
        return and__3628__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_.call(null, cljs.core.apply.call(null, self__.xform, cljs.core.cons.call(null, lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.call(null, lt);
  }
};
cljs.core.__GT_MultiStepper = function __GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function() {
  var multi_stepper = null;
  var multi_stepper__2 = function(xform, iters) {
    return multi_stepper.call(null, xform, iters, new Array(iters.length));
  };
  var multi_stepper__3 = function(xform, iters, nexts) {
    var stepfn = function() {
      var stepfn = null;
      var stepfn__1 = function(result) {
        var lt = cljs.core.reduced_QMARK_.call(null, result) ? cljs.core.deref.call(null, result) : result;
        lt.stepper = null;
        return lt;
      };
      var stepfn__2 = function(result, input) {
        var lt = result;
        lt.first = input;
        lt.rest = cljs.core.lazy_transformer.call(null, lt.stepper);
        lt.stepper = null;
        return lt.rest;
      };
      stepfn = function(result, input) {
        switch(arguments.length) {
          case 1:
            return stepfn__1.call(this, result);
          case 2:
            return stepfn__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
      stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
      return stepfn;
    }();
    return new cljs.core.MultiStepper(xform.call(null, stepfn), iters, nexts);
  };
  multi_stepper = function(xform, iters, nexts) {
    switch(arguments.length) {
      case 2:
        return multi_stepper__2.call(this, xform, iters);
      case 3:
        return multi_stepper__3.call(this, xform, iters, nexts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  multi_stepper.cljs$core$IFn$_invoke$arity$2 = multi_stepper__2;
  multi_stepper.cljs$core$IFn$_invoke$arity$3 = multi_stepper__3;
  return multi_stepper;
}();
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/LazyTransformer");
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq.call(null, self__.rest);
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq.call(null, this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential.call(null, this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_.call(null, other) && cljs.core.seq.call(null, other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, cljs.core._seq.call(null, this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.__GT_LazyTransformer = function __GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper.call(null, xform, cljs.core.iter.call(null, coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__30573_30577 = cljs.core.seq.call(null, colls);
  var chunk__30574_30578 = null;
  var count__30575_30579 = 0;
  var i__30576_30580 = 0;
  while (true) {
    if (i__30576_30580 < count__30575_30579) {
      var coll_30581 = cljs.core._nth.call(null, chunk__30574_30578, i__30576_30580);
      iters.push(cljs.core.iter.call(null, coll_30581));
      var G__30582 = seq__30573_30577;
      var G__30583 = chunk__30574_30578;
      var G__30584 = count__30575_30579;
      var G__30585 = i__30576_30580 + 1;
      seq__30573_30577 = G__30582;
      chunk__30574_30578 = G__30583;
      count__30575_30579 = G__30584;
      i__30576_30580 = G__30585;
      continue;
    } else {
      var temp__4126__auto___30586 = cljs.core.seq.call(null, seq__30573_30577);
      if (temp__4126__auto___30586) {
        var seq__30573_30587__$1 = temp__4126__auto___30586;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__30573_30587__$1)) {
          var c__4410__auto___30588 = cljs.core.chunk_first.call(null, seq__30573_30587__$1);
          var G__30589 = cljs.core.chunk_rest.call(null, seq__30573_30587__$1);
          var G__30590 = c__4410__auto___30588;
          var G__30591 = cljs.core.count.call(null, c__4410__auto___30588);
          var G__30592 = 0;
          seq__30573_30577 = G__30589;
          chunk__30574_30578 = G__30590;
          count__30575_30579 = G__30591;
          i__30576_30580 = G__30592;
          continue;
        } else {
          var coll_30593 = cljs.core.first.call(null, seq__30573_30587__$1);
          iters.push(cljs.core.iter.call(null, coll_30593));
          var G__30594 = cljs.core.next.call(null, seq__30573_30587__$1);
          var G__30595 = null;
          var G__30596 = 0;
          var G__30597 = 0;
          seq__30573_30577 = G__30594;
          chunk__30574_30578 = G__30595;
          count__30575_30579 = G__30596;
          i__30576_30580 = G__30597;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.call(null, xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function() {
  var sequence = null;
  var sequence__1 = function(coll) {
    if (cljs.core.seq_QMARK_.call(null, coll)) {
      return coll;
    } else {
      var or__3640__auto__ = cljs.core.seq.call(null, coll);
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  };
  var sequence__2 = function(xform, coll) {
    return cljs.core.LazyTransformer.create(xform, coll);
  };
  var sequence__3 = function() {
    var G__30598__delegate = function(xform, coll, colls) {
      return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array.call(null, cljs.core.cons.call(null, coll, colls)));
    };
    var G__30598 = function(xform, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30598__delegate.call(this, xform, coll, colls);
    };
    G__30598.cljs$lang$maxFixedArity = 2;
    G__30598.cljs$lang$applyTo = function(arglist__30599) {
      var xform = cljs.core.first(arglist__30599);
      arglist__30599 = cljs.core.next(arglist__30599);
      var coll = cljs.core.first(arglist__30599);
      var colls = cljs.core.rest(arglist__30599);
      return G__30598__delegate(xform, coll, colls);
    };
    G__30598.cljs$core$IFn$_invoke$arity$variadic = G__30598__delegate;
    return G__30598;
  }();
  sequence = function(xform, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return sequence__1.call(this, xform);
      case 2:
        return sequence__2.call(this, xform, coll);
      default:
        return sequence__3.cljs$core$IFn$_invoke$arity$variadic(xform, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sequence.cljs$lang$maxFixedArity = 2;
  sequence.cljs$lang$applyTo = sequence__3.cljs$lang$applyTo;
  sequence.cljs$core$IFn$_invoke$arity$1 = sequence__1;
  sequence.cljs$core$IFn$_invoke$arity$2 = sequence__2;
  sequence.cljs$core$IFn$_invoke$arity$variadic = sequence__3.cljs$core$IFn$_invoke$arity$variadic;
  return sequence;
}();
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__30600 = pred;
        var G__30601 = cljs.core.next.call(null, coll);
        pred = G__30600;
        coll = G__30601;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__3640__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        var G__30602 = pred;
        var G__30603 = cljs.core.next.call(null, coll);
        pred = G__30602;
        coll = G__30603;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error("Argument must be an integer: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__30604 = null;
    var G__30604__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__30604__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__30604__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__30604__3 = function() {
      var G__30605__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__30605 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__30605__delegate.call(this, x, y, zs);
      };
      G__30605.cljs$lang$maxFixedArity = 2;
      G__30605.cljs$lang$applyTo = function(arglist__30606) {
        var x = cljs.core.first(arglist__30606);
        arglist__30606 = cljs.core.next(arglist__30606);
        var y = cljs.core.first(arglist__30606);
        var zs = cljs.core.rest(arglist__30606);
        return G__30605__delegate(x, y, zs);
      };
      G__30605.cljs$core$IFn$_invoke$arity$variadic = G__30605__delegate;
      return G__30605;
    }();
    G__30604 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__30604__0.call(this);
        case 1:
          return G__30604__1.call(this, x);
        case 2:
          return G__30604__2.call(this, x, y);
        default:
          return G__30604__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__30604.cljs$lang$maxFixedArity = 2;
    G__30604.cljs$lang$applyTo = G__30604__3.cljs$lang$applyTo;
    G__30604.cljs$core$IFn$_invoke$arity$0 = G__30604__0;
    G__30604.cljs$core$IFn$_invoke$arity$1 = G__30604__1;
    G__30604.cljs$core$IFn$_invoke$arity$2 = G__30604__2;
    G__30604.cljs$core$IFn$_invoke$arity$variadic = G__30604__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__30604;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__30607__delegate = function(args) {
      return x;
    };
    var G__30607 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__30607__delegate.call(this, args);
    };
    G__30607.cljs$lang$maxFixedArity = 0;
    G__30607.cljs$lang$applyTo = function(arglist__30608) {
      var args = cljs.core.seq(arglist__30608);
      return G__30607__delegate(args);
    };
    G__30607.cljs$core$IFn$_invoke$arity$variadic = G__30607__delegate;
    return G__30607;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__30609 = null;
      var G__30609__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__30609__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__30609__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__30609__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__30609__4 = function() {
        var G__30610__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__30610 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__30610__delegate.call(this, x, y, z, args);
        };
        G__30610.cljs$lang$maxFixedArity = 3;
        G__30610.cljs$lang$applyTo = function(arglist__30611) {
          var x = cljs.core.first(arglist__30611);
          arglist__30611 = cljs.core.next(arglist__30611);
          var y = cljs.core.first(arglist__30611);
          arglist__30611 = cljs.core.next(arglist__30611);
          var z = cljs.core.first(arglist__30611);
          var args = cljs.core.rest(arglist__30611);
          return G__30610__delegate(x, y, z, args);
        };
        G__30610.cljs$core$IFn$_invoke$arity$variadic = G__30610__delegate;
        return G__30610;
      }();
      G__30609 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__30609__0.call(this);
          case 1:
            return G__30609__1.call(this, x);
          case 2:
            return G__30609__2.call(this, x, y);
          case 3:
            return G__30609__3.call(this, x, y, z);
          default:
            return G__30609__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__30609.cljs$lang$maxFixedArity = 3;
      G__30609.cljs$lang$applyTo = G__30609__4.cljs$lang$applyTo;
      G__30609.cljs$core$IFn$_invoke$arity$0 = G__30609__0;
      G__30609.cljs$core$IFn$_invoke$arity$1 = G__30609__1;
      G__30609.cljs$core$IFn$_invoke$arity$2 = G__30609__2;
      G__30609.cljs$core$IFn$_invoke$arity$3 = G__30609__3;
      G__30609.cljs$core$IFn$_invoke$arity$variadic = G__30609__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__30609;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__30612 = null;
      var G__30612__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__30612__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__30612__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__30612__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__30612__4 = function() {
        var G__30613__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__30613 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__30613__delegate.call(this, x, y, z, args);
        };
        G__30613.cljs$lang$maxFixedArity = 3;
        G__30613.cljs$lang$applyTo = function(arglist__30614) {
          var x = cljs.core.first(arglist__30614);
          arglist__30614 = cljs.core.next(arglist__30614);
          var y = cljs.core.first(arglist__30614);
          arglist__30614 = cljs.core.next(arglist__30614);
          var z = cljs.core.first(arglist__30614);
          var args = cljs.core.rest(arglist__30614);
          return G__30613__delegate(x, y, z, args);
        };
        G__30613.cljs$core$IFn$_invoke$arity$variadic = G__30613__delegate;
        return G__30613;
      }();
      G__30612 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__30612__0.call(this);
          case 1:
            return G__30612__1.call(this, x);
          case 2:
            return G__30612__2.call(this, x, y);
          case 3:
            return G__30612__3.call(this, x, y, z);
          default:
            return G__30612__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__30612.cljs$lang$maxFixedArity = 3;
      G__30612.cljs$lang$applyTo = G__30612__4.cljs$lang$applyTo;
      G__30612.cljs$core$IFn$_invoke$arity$0 = G__30612__0;
      G__30612.cljs$core$IFn$_invoke$arity$1 = G__30612__1;
      G__30612.cljs$core$IFn$_invoke$arity$2 = G__30612__2;
      G__30612.cljs$core$IFn$_invoke$arity$3 = G__30612__3;
      G__30612.cljs$core$IFn$_invoke$arity$variadic = G__30612__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__30612;
    }();
  };
  var comp__4 = function() {
    var G__30615__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function(fs__$1) {
        return function() {
          var G__30616__delegate = function(args) {
            var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
            var fs__$2 = cljs.core.next.call(null, fs__$1);
            while (true) {
              if (fs__$2) {
                var G__30617 = cljs.core.first.call(null, fs__$2).call(null, ret);
                var G__30618 = cljs.core.next.call(null, fs__$2);
                ret = G__30617;
                fs__$2 = G__30618;
                continue;
              } else {
                return ret;
              }
              break;
            }
          };
          var G__30616 = function(var_args) {
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__30616__delegate.call(this, args);
          };
          G__30616.cljs$lang$maxFixedArity = 0;
          G__30616.cljs$lang$applyTo = function(arglist__30619) {
            var args = cljs.core.seq(arglist__30619);
            return G__30616__delegate(args);
          };
          G__30616.cljs$core$IFn$_invoke$arity$variadic = G__30616__delegate;
          return G__30616;
        }();
      }(fs__$1);
    };
    var G__30615 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__30615__delegate.call(this, f1, f2, f3, fs);
    };
    G__30615.cljs$lang$maxFixedArity = 3;
    G__30615.cljs$lang$applyTo = function(arglist__30620) {
      var f1 = cljs.core.first(arglist__30620);
      arglist__30620 = cljs.core.next(arglist__30620);
      var f2 = cljs.core.first(arglist__30620);
      arglist__30620 = cljs.core.next(arglist__30620);
      var f3 = cljs.core.first(arglist__30620);
      var fs = cljs.core.rest(arglist__30620);
      return G__30615__delegate(f1, f2, f3, fs);
    };
    G__30615.cljs$core$IFn$_invoke$arity$variadic = G__30615__delegate;
    return G__30615;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__30621__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__30621 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__30621__delegate.call(this, args);
      };
      G__30621.cljs$lang$maxFixedArity = 0;
      G__30621.cljs$lang$applyTo = function(arglist__30622) {
        var args = cljs.core.seq(arglist__30622);
        return G__30621__delegate(args);
      };
      G__30621.cljs$core$IFn$_invoke$arity$variadic = G__30621__delegate;
      return G__30621;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__30623__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__30623 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__30623__delegate.call(this, args);
      };
      G__30623.cljs$lang$maxFixedArity = 0;
      G__30623.cljs$lang$applyTo = function(arglist__30624) {
        var args = cljs.core.seq(arglist__30624);
        return G__30623__delegate(args);
      };
      G__30623.cljs$core$IFn$_invoke$arity$variadic = G__30623__delegate;
      return G__30623;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__30625__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__30625 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__30625__delegate.call(this, args);
      };
      G__30625.cljs$lang$maxFixedArity = 0;
      G__30625.cljs$lang$applyTo = function(arglist__30626) {
        var args = cljs.core.seq(arglist__30626);
        return G__30625__delegate(args);
      };
      G__30625.cljs$core$IFn$_invoke$arity$variadic = G__30625__delegate;
      return G__30625;
    }();
  };
  var partial__5 = function() {
    var G__30627__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__30628__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__30628 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__30628__delegate.call(this, args);
        };
        G__30628.cljs$lang$maxFixedArity = 0;
        G__30628.cljs$lang$applyTo = function(arglist__30629) {
          var args = cljs.core.seq(arglist__30629);
          return G__30628__delegate(args);
        };
        G__30628.cljs$core$IFn$_invoke$arity$variadic = G__30628__delegate;
        return G__30628;
      }();
    };
    var G__30627 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__30627__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__30627.cljs$lang$maxFixedArity = 4;
    G__30627.cljs$lang$applyTo = function(arglist__30630) {
      var f = cljs.core.first(arglist__30630);
      arglist__30630 = cljs.core.next(arglist__30630);
      var arg1 = cljs.core.first(arglist__30630);
      arglist__30630 = cljs.core.next(arglist__30630);
      var arg2 = cljs.core.first(arglist__30630);
      arglist__30630 = cljs.core.next(arglist__30630);
      var arg3 = cljs.core.first(arglist__30630);
      var more = cljs.core.rest(arglist__30630);
      return G__30627__delegate(f, arg1, arg2, arg3, more);
    };
    G__30627.cljs$core$IFn$_invoke$arity$variadic = G__30627__delegate;
    return G__30627;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__30631 = null;
      var G__30631__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__30631__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__30631__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__30631__4 = function() {
        var G__30632__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__30632 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__30632__delegate.call(this, a, b, c, ds);
        };
        G__30632.cljs$lang$maxFixedArity = 3;
        G__30632.cljs$lang$applyTo = function(arglist__30633) {
          var a = cljs.core.first(arglist__30633);
          arglist__30633 = cljs.core.next(arglist__30633);
          var b = cljs.core.first(arglist__30633);
          arglist__30633 = cljs.core.next(arglist__30633);
          var c = cljs.core.first(arglist__30633);
          var ds = cljs.core.rest(arglist__30633);
          return G__30632__delegate(a, b, c, ds);
        };
        G__30632.cljs$core$IFn$_invoke$arity$variadic = G__30632__delegate;
        return G__30632;
      }();
      G__30631 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__30631__1.call(this, a);
          case 2:
            return G__30631__2.call(this, a, b);
          case 3:
            return G__30631__3.call(this, a, b, c);
          default:
            return G__30631__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__30631.cljs$lang$maxFixedArity = 3;
      G__30631.cljs$lang$applyTo = G__30631__4.cljs$lang$applyTo;
      G__30631.cljs$core$IFn$_invoke$arity$1 = G__30631__1;
      G__30631.cljs$core$IFn$_invoke$arity$2 = G__30631__2;
      G__30631.cljs$core$IFn$_invoke$arity$3 = G__30631__3;
      G__30631.cljs$core$IFn$_invoke$arity$variadic = G__30631__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__30631;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__30634 = null;
      var G__30634__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__30634__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__30634__4 = function() {
        var G__30635__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__30635 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__30635__delegate.call(this, a, b, c, ds);
        };
        G__30635.cljs$lang$maxFixedArity = 3;
        G__30635.cljs$lang$applyTo = function(arglist__30636) {
          var a = cljs.core.first(arglist__30636);
          arglist__30636 = cljs.core.next(arglist__30636);
          var b = cljs.core.first(arglist__30636);
          arglist__30636 = cljs.core.next(arglist__30636);
          var c = cljs.core.first(arglist__30636);
          var ds = cljs.core.rest(arglist__30636);
          return G__30635__delegate(a, b, c, ds);
        };
        G__30635.cljs$core$IFn$_invoke$arity$variadic = G__30635__delegate;
        return G__30635;
      }();
      G__30634 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__30634__2.call(this, a, b);
          case 3:
            return G__30634__3.call(this, a, b, c);
          default:
            return G__30634__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__30634.cljs$lang$maxFixedArity = 3;
      G__30634.cljs$lang$applyTo = G__30634__4.cljs$lang$applyTo;
      G__30634.cljs$core$IFn$_invoke$arity$2 = G__30634__2;
      G__30634.cljs$core$IFn$_invoke$arity$3 = G__30634__3;
      G__30634.cljs$core$IFn$_invoke$arity$variadic = G__30634__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__30634;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__30637 = null;
      var G__30637__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__30637__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__30637__4 = function() {
        var G__30638__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__30638 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__30638__delegate.call(this, a, b, c, ds);
        };
        G__30638.cljs$lang$maxFixedArity = 3;
        G__30638.cljs$lang$applyTo = function(arglist__30639) {
          var a = cljs.core.first(arglist__30639);
          arglist__30639 = cljs.core.next(arglist__30639);
          var b = cljs.core.first(arglist__30639);
          arglist__30639 = cljs.core.next(arglist__30639);
          var c = cljs.core.first(arglist__30639);
          var ds = cljs.core.rest(arglist__30639);
          return G__30638__delegate(a, b, c, ds);
        };
        G__30638.cljs$core$IFn$_invoke$arity$variadic = G__30638__delegate;
        return G__30638;
      }();
      G__30637 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__30637__2.call(this, a, b);
          case 3:
            return G__30637__3.call(this, a, b, c);
          default:
            return G__30637__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__30637.cljs$lang$maxFixedArity = 3;
      G__30637.cljs$lang$applyTo = G__30637__4.cljs$lang$applyTo;
      G__30637.cljs$core$IFn$_invoke$arity$2 = G__30637__2;
      G__30637.cljs$core$IFn$_invoke$arity$3 = G__30637__3;
      G__30637.cljs$core$IFn$_invoke$arity$variadic = G__30637__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__30637;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4510__auto___30640 = size;
          var i_30641 = 0;
          while (true) {
            if (i_30641 < n__4510__auto___30640) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_30641, cljs.core._nth.call(null, c, i_30641)));
              var G__30642 = i_30641 + 1;
              i_30641 = G__30642;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function() {
  var keep = null;
  var keep__1 = function(f) {
    return function(rf) {
      return function() {
        var G__30643 = null;
        var G__30643__0 = function() {
          return rf.call(null);
        };
        var G__30643__1 = function(result) {
          return rf.call(null, result);
        };
        var G__30643__2 = function(result, input) {
          var v = f.call(null, input);
          if (v == null) {
            return result;
          } else {
            return rf.call(null, result, v);
          }
        };
        G__30643 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__30643__0.call(this);
            case 1:
              return G__30643__1.call(this, result);
            case 2:
              return G__30643__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__30643.cljs$core$IFn$_invoke$arity$0 = G__30643__0;
        G__30643.cljs$core$IFn$_invoke$arity$1 = G__30643__1;
        G__30643.cljs$core$IFn$_invoke$arity$2 = G__30643__2;
        return G__30643;
      }();
    };
  };
  var keep__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4510__auto___30644 = size;
          var i_30645 = 0;
          while (true) {
            if (i_30645 < n__4510__auto___30644) {
              var x_30646 = f.call(null, cljs.core._nth.call(null, c, i_30645));
              if (x_30646 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_30646);
              }
              var G__30647 = i_30645 + 1;
              i_30645 = G__30647;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, cljs.core.first.call(null, s));
          if (x == null) {
            return keep.call(null, f, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  keep = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep__1.call(this, f);
      case 2:
        return keep__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep.cljs$core$IFn$_invoke$arity$1 = keep__1;
  keep.cljs$core$IFn$_invoke$arity$2 = keep__2;
  return keep;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__30648 = cljs.core.seq.call(null, self__.watches);
  var chunk__30649 = null;
  var count__30650 = 0;
  var i__30651 = 0;
  while (true) {
    if (i__30651 < count__30650) {
      var vec__30652 = cljs.core._nth.call(null, chunk__30649, i__30651);
      var key = cljs.core.nth.call(null, vec__30652, 0, null);
      var f = cljs.core.nth.call(null, vec__30652, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__30654 = seq__30648;
      var G__30655 = chunk__30649;
      var G__30656 = count__30650;
      var G__30657 = i__30651 + 1;
      seq__30648 = G__30654;
      chunk__30649 = G__30655;
      count__30650 = G__30656;
      i__30651 = G__30657;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__30648);
      if (temp__4126__auto__) {
        var seq__30648__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__30648__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__30648__$1);
          var G__30658 = cljs.core.chunk_rest.call(null, seq__30648__$1);
          var G__30659 = c__4410__auto__;
          var G__30660 = cljs.core.count.call(null, c__4410__auto__);
          var G__30661 = 0;
          seq__30648 = G__30658;
          chunk__30649 = G__30659;
          count__30650 = G__30660;
          i__30651 = G__30661;
          continue;
        } else {
          var vec__30653 = cljs.core.first.call(null, seq__30648__$1);
          var key = cljs.core.nth.call(null, vec__30653, 0, null);
          var f = cljs.core.nth.call(null, vec__30653, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__30662 = cljs.core.next.call(null, seq__30648__$1);
          var G__30663 = null;
          var G__30664 = 0;
          var G__30665 = 0;
          seq__30648 = G__30662;
          chunk__30649 = G__30663;
          count__30650 = G__30664;
          i__30651 = G__30665;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__30669__delegate = function(x, p__30666) {
      var map__30668 = p__30666;
      var map__30668__$1 = cljs.core.seq_QMARK_.call(null, map__30668) ? cljs.core.apply.call(null, cljs.core.hash_map, map__30668) : map__30668;
      var validator = cljs.core.get.call(null, map__30668__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.call(null, map__30668__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__30669 = function(x, var_args) {
      var p__30666 = null;
      if (arguments.length > 1) {
        p__30666 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__30669__delegate.call(this, x, p__30666);
    };
    G__30669.cljs$lang$maxFixedArity = 1;
    G__30669.cljs$lang$applyTo = function(arglist__30670) {
      var x = cljs.core.first(arglist__30670);
      var p__30666 = cljs.core.rest(arglist__30670);
      return G__30669__delegate(x, p__30666);
    };
    G__30669.cljs$core$IFn$_invoke$arity$variadic = G__30669__delegate;
    return G__30669;
  }();
  atom = function(x, var_args) {
    var p__30666 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.call(null, new_value))) {
      } else {
        throw new Error("Assert failed: Validator rejected reference state\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null)))));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches.call(null, a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_.call(null, a, new_value);
  }
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__30671__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.call(null, a, f, x, y, more);
      }
    };
    var G__30671 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__30671__delegate.call(this, a, f, x, y, more);
    };
    G__30671.cljs$lang$maxFixedArity = 4;
    G__30671.cljs$lang$applyTo = function(arglist__30672) {
      var a = cljs.core.first(arglist__30672);
      arglist__30672 = cljs.core.next(arglist__30672);
      var f = cljs.core.first(arglist__30672);
      arglist__30672 = cljs.core.next(arglist__30672);
      var x = cljs.core.first(arglist__30672);
      arglist__30672 = cljs.core.next(arglist__30672);
      var y = cljs.core.first(arglist__30672);
      var more = cljs.core.rest(arglist__30672);
      return G__30671__delegate(a, f, x, y, more);
    };
    G__30671.cljs$core$IFn$_invoke$arity$variadic = G__30671__delegate;
    return G__30671;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.keep_indexed = function() {
  var keep_indexed = null;
  var keep_indexed__1 = function(f) {
    return function(rf) {
      var ia = cljs.core.atom.call(null, -1);
      return function(ia) {
        return function() {
          var G__30673 = null;
          var G__30673__0 = function() {
            return rf.call(null);
          };
          var G__30673__1 = function(result) {
            return rf.call(null, result);
          };
          var G__30673__2 = function(result, input) {
            var i = cljs.core.swap_BANG_.call(null, ia, cljs.core.inc);
            var v = f.call(null, i, input);
            if (v == null) {
              return result;
            } else {
              return rf.call(null, result, v);
            }
          };
          G__30673 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__30673__0.call(this);
              case 1:
                return G__30673__1.call(this, result);
              case 2:
                return G__30673__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__30673.cljs$core$IFn$_invoke$arity$0 = G__30673__0;
          G__30673.cljs$core$IFn$_invoke$arity$1 = G__30673__1;
          G__30673.cljs$core$IFn$_invoke$arity$2 = G__30673__2;
          return G__30673;
        }();
      }(ia);
    };
  };
  var keep_indexed__2 = function(f, coll) {
    var keepi = function keepi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
            var c = cljs.core.chunk_first.call(null, s);
            var size = cljs.core.count.call(null, c);
            var b = cljs.core.chunk_buffer.call(null, size);
            var n__4510__auto___30674 = size;
            var i_30675 = 0;
            while (true) {
              if (i_30675 < n__4510__auto___30674) {
                var x_30676 = f.call(null, idx + i_30675, cljs.core._nth.call(null, c, i_30675));
                if (x_30676 == null) {
                } else {
                  cljs.core.chunk_append.call(null, b, x_30676);
                }
                var G__30677 = i_30675 + 1;
                i_30675 = G__30677;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
          } else {
            var x = f.call(null, idx, cljs.core.first.call(null, s));
            if (x == null) {
              return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
            } else {
              return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
            }
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return keepi.call(null, 0, coll);
  };
  keep_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep_indexed__1.call(this, f);
      case 2:
        return keep_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep_indexed.cljs$core$IFn$_invoke$arity$1 = keep_indexed__1;
  keep_indexed.cljs$core$IFn$_invoke$arity$2 = keep_indexed__2;
  return keep_indexed;
}();
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3628__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3628__auto__)) {
            return p.call(null, y);
          } else {
            return and__3628__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3628__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3628__auto__)) {
            var and__3628__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__3628__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__3628__auto____$1;
            }
          } else {
            return and__3628__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__30684__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__30684 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__30684__delegate.call(this, x, y, z, args);
        };
        G__30684.cljs$lang$maxFixedArity = 3;
        G__30684.cljs$lang$applyTo = function(arglist__30685) {
          var x = cljs.core.first(arglist__30685);
          arglist__30685 = cljs.core.next(arglist__30685);
          var y = cljs.core.first(arglist__30685);
          arglist__30685 = cljs.core.next(arglist__30685);
          var z = cljs.core.first(arglist__30685);
          var args = cljs.core.rest(arglist__30685);
          return G__30684__delegate(x, y, z, args);
        };
        G__30684.cljs$core$IFn$_invoke$arity$variadic = G__30684__delegate;
        return G__30684;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3628__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3628__auto__)) {
            return p2.call(null, x);
          } else {
            return and__3628__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3628__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3628__auto__)) {
            var and__3628__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3628__auto____$1)) {
              var and__3628__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__3628__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__3628__auto____$2;
              }
            } else {
              return and__3628__auto____$1;
            }
          } else {
            return and__3628__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3628__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3628__auto__)) {
            var and__3628__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3628__auto____$1)) {
              var and__3628__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__3628__auto____$2)) {
                var and__3628__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__3628__auto____$3)) {
                  var and__3628__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3628__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__3628__auto____$4;
                  }
                } else {
                  return and__3628__auto____$3;
                }
              } else {
                return and__3628__auto____$2;
              }
            } else {
              return and__3628__auto____$1;
            }
          } else {
            return and__3628__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__30686__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__30678_SHARP_) {
            var and__3628__auto__ = p1.call(null, p1__30678_SHARP_);
            if (cljs.core.truth_(and__3628__auto__)) {
              return p2.call(null, p1__30678_SHARP_);
            } else {
              return and__3628__auto__;
            }
          }, args));
        };
        var G__30686 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__30686__delegate.call(this, x, y, z, args);
        };
        G__30686.cljs$lang$maxFixedArity = 3;
        G__30686.cljs$lang$applyTo = function(arglist__30687) {
          var x = cljs.core.first(arglist__30687);
          arglist__30687 = cljs.core.next(arglist__30687);
          var y = cljs.core.first(arglist__30687);
          arglist__30687 = cljs.core.next(arglist__30687);
          var z = cljs.core.first(arglist__30687);
          var args = cljs.core.rest(arglist__30687);
          return G__30686__delegate(x, y, z, args);
        };
        G__30686.cljs$core$IFn$_invoke$arity$variadic = G__30686__delegate;
        return G__30686;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3628__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3628__auto__)) {
            var and__3628__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3628__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__3628__auto____$1;
            }
          } else {
            return and__3628__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3628__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3628__auto__)) {
            var and__3628__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3628__auto____$1)) {
              var and__3628__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3628__auto____$2)) {
                var and__3628__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3628__auto____$3)) {
                  var and__3628__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3628__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__3628__auto____$4;
                  }
                } else {
                  return and__3628__auto____$3;
                }
              } else {
                return and__3628__auto____$2;
              }
            } else {
              return and__3628__auto____$1;
            }
          } else {
            return and__3628__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3628__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3628__auto__)) {
            var and__3628__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3628__auto____$1)) {
              var and__3628__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3628__auto____$2)) {
                var and__3628__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3628__auto____$3)) {
                  var and__3628__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3628__auto____$4)) {
                    var and__3628__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__3628__auto____$5)) {
                      var and__3628__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__3628__auto____$6)) {
                        var and__3628__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__3628__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__3628__auto____$7;
                        }
                      } else {
                        return and__3628__auto____$6;
                      }
                    } else {
                      return and__3628__auto____$5;
                    }
                  } else {
                    return and__3628__auto____$4;
                  }
                } else {
                  return and__3628__auto____$3;
                }
              } else {
                return and__3628__auto____$2;
              }
            } else {
              return and__3628__auto____$1;
            }
          } else {
            return and__3628__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__30688__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__30679_SHARP_) {
            var and__3628__auto__ = p1.call(null, p1__30679_SHARP_);
            if (cljs.core.truth_(and__3628__auto__)) {
              var and__3628__auto____$1 = p2.call(null, p1__30679_SHARP_);
              if (cljs.core.truth_(and__3628__auto____$1)) {
                return p3.call(null, p1__30679_SHARP_);
              } else {
                return and__3628__auto____$1;
              }
            } else {
              return and__3628__auto__;
            }
          }, args));
        };
        var G__30688 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__30688__delegate.call(this, x, y, z, args);
        };
        G__30688.cljs$lang$maxFixedArity = 3;
        G__30688.cljs$lang$applyTo = function(arglist__30689) {
          var x = cljs.core.first(arglist__30689);
          arglist__30689 = cljs.core.next(arglist__30689);
          var y = cljs.core.first(arglist__30689);
          arglist__30689 = cljs.core.next(arglist__30689);
          var z = cljs.core.first(arglist__30689);
          var args = cljs.core.rest(arglist__30689);
          return G__30688__delegate(x, y, z, args);
        };
        G__30688.cljs$core$IFn$_invoke$arity$variadic = G__30688__delegate;
        return G__30688;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__30690__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var epn = null;
          var epn__0 = function() {
            return true;
          };
          var epn__1 = function(x) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__30680_SHARP_) {
                return p1__30680_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var epn__2 = function(x, y) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__30681_SHARP_) {
                var and__3628__auto__ = p1__30681_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3628__auto__)) {
                  return p1__30681_SHARP_.call(null, y);
                } else {
                  return and__3628__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__3 = function(x, y, z) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__30682_SHARP_) {
                var and__3628__auto__ = p1__30682_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3628__auto__)) {
                  var and__3628__auto____$1 = p1__30682_SHARP_.call(null, y);
                  if (cljs.core.truth_(and__3628__auto____$1)) {
                    return p1__30682_SHARP_.call(null, z);
                  } else {
                    return and__3628__auto____$1;
                  }
                } else {
                  return and__3628__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__4 = function() {
            var G__30691__delegate = function(x, y, z, args) {
              return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(ps__$1) {
                return function(p1__30683_SHARP_) {
                  return cljs.core.every_QMARK_.call(null, p1__30683_SHARP_, args);
                };
              }(ps__$1), ps__$1));
            };
            var G__30691 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__30691__delegate.call(this, x, y, z, args);
            };
            G__30691.cljs$lang$maxFixedArity = 3;
            G__30691.cljs$lang$applyTo = function(arglist__30692) {
              var x = cljs.core.first(arglist__30692);
              arglist__30692 = cljs.core.next(arglist__30692);
              var y = cljs.core.first(arglist__30692);
              arglist__30692 = cljs.core.next(arglist__30692);
              var z = cljs.core.first(arglist__30692);
              var args = cljs.core.rest(arglist__30692);
              return G__30691__delegate(x, y, z, args);
            };
            G__30691.cljs$core$IFn$_invoke$arity$variadic = G__30691__delegate;
            return G__30691;
          }();
          epn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return epn__0.call(this);
              case 1:
                return epn__1.call(this, x);
              case 2:
                return epn__2.call(this, x, y);
              case 3:
                return epn__3.call(this, x, y, z);
              default:
                return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          epn.cljs$lang$maxFixedArity = 3;
          epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
          epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
          epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
          epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
          epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
          epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
          return epn;
        }();
      }(ps__$1);
    };
    var G__30690 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__30690__delegate.call(this, p1, p2, p3, ps);
    };
    G__30690.cljs$lang$maxFixedArity = 3;
    G__30690.cljs$lang$applyTo = function(arglist__30693) {
      var p1 = cljs.core.first(arglist__30693);
      arglist__30693 = cljs.core.next(arglist__30693);
      var p2 = cljs.core.first(arglist__30693);
      arglist__30693 = cljs.core.next(arglist__30693);
      var p3 = cljs.core.first(arglist__30693);
      var ps = cljs.core.rest(arglist__30693);
      return G__30690__delegate(p1, p2, p3, ps);
    };
    G__30690.cljs$core$IFn$_invoke$arity$variadic = G__30690__delegate;
    return G__30690;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__3640__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3640__auto__)) {
          return or__3640__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3640__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3640__auto__)) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__3640__auto____$1)) {
            return or__3640__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__30700__delegate = function(x, y, z, args) {
          var or__3640__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__3640__auto__)) {
            return or__3640__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__30700 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__30700__delegate.call(this, x, y, z, args);
        };
        G__30700.cljs$lang$maxFixedArity = 3;
        G__30700.cljs$lang$applyTo = function(arglist__30701) {
          var x = cljs.core.first(arglist__30701);
          arglist__30701 = cljs.core.next(arglist__30701);
          var y = cljs.core.first(arglist__30701);
          arglist__30701 = cljs.core.next(arglist__30701);
          var z = cljs.core.first(arglist__30701);
          var args = cljs.core.rest(arglist__30701);
          return G__30700__delegate(x, y, z, args);
        };
        G__30700.cljs$core$IFn$_invoke$arity$variadic = G__30700__delegate;
        return G__30700;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3640__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3640__auto__)) {
          return or__3640__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3640__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3640__auto__)) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3640__auto____$1)) {
            return or__3640__auto____$1;
          } else {
            var or__3640__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__3640__auto____$2)) {
              return or__3640__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3640__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3640__auto__)) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3640__auto____$1)) {
            return or__3640__auto____$1;
          } else {
            var or__3640__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__3640__auto____$2)) {
              return or__3640__auto____$2;
            } else {
              var or__3640__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__3640__auto____$3)) {
                return or__3640__auto____$3;
              } else {
                var or__3640__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3640__auto____$4)) {
                  return or__3640__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__30702__delegate = function(x, y, z, args) {
          var or__3640__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__3640__auto__)) {
            return or__3640__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3640__auto__) {
              return function(p1__30694_SHARP_) {
                var or__3640__auto____$1 = p1.call(null, p1__30694_SHARP_);
                if (cljs.core.truth_(or__3640__auto____$1)) {
                  return or__3640__auto____$1;
                } else {
                  return p2.call(null, p1__30694_SHARP_);
                }
              };
            }(or__3640__auto__), args);
          }
        };
        var G__30702 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__30702__delegate.call(this, x, y, z, args);
        };
        G__30702.cljs$lang$maxFixedArity = 3;
        G__30702.cljs$lang$applyTo = function(arglist__30703) {
          var x = cljs.core.first(arglist__30703);
          arglist__30703 = cljs.core.next(arglist__30703);
          var y = cljs.core.first(arglist__30703);
          arglist__30703 = cljs.core.next(arglist__30703);
          var z = cljs.core.first(arglist__30703);
          var args = cljs.core.rest(arglist__30703);
          return G__30702__delegate(x, y, z, args);
        };
        G__30702.cljs$core$IFn$_invoke$arity$variadic = G__30702__delegate;
        return G__30702;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3640__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3640__auto__)) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3640__auto____$1)) {
            return or__3640__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3640__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3640__auto__)) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3640__auto____$1)) {
            return or__3640__auto____$1;
          } else {
            var or__3640__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3640__auto____$2)) {
              return or__3640__auto____$2;
            } else {
              var or__3640__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3640__auto____$3)) {
                return or__3640__auto____$3;
              } else {
                var or__3640__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3640__auto____$4)) {
                  return or__3640__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3640__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3640__auto__)) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3640__auto____$1)) {
            return or__3640__auto____$1;
          } else {
            var or__3640__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3640__auto____$2)) {
              return or__3640__auto____$2;
            } else {
              var or__3640__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3640__auto____$3)) {
                return or__3640__auto____$3;
              } else {
                var or__3640__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3640__auto____$4)) {
                  return or__3640__auto____$4;
                } else {
                  var or__3640__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__3640__auto____$5)) {
                    return or__3640__auto____$5;
                  } else {
                    var or__3640__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__3640__auto____$6)) {
                      return or__3640__auto____$6;
                    } else {
                      var or__3640__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__3640__auto____$7)) {
                        return or__3640__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__30704__delegate = function(x, y, z, args) {
          var or__3640__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__3640__auto__)) {
            return or__3640__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3640__auto__) {
              return function(p1__30695_SHARP_) {
                var or__3640__auto____$1 = p1.call(null, p1__30695_SHARP_);
                if (cljs.core.truth_(or__3640__auto____$1)) {
                  return or__3640__auto____$1;
                } else {
                  var or__3640__auto____$2 = p2.call(null, p1__30695_SHARP_);
                  if (cljs.core.truth_(or__3640__auto____$2)) {
                    return or__3640__auto____$2;
                  } else {
                    return p3.call(null, p1__30695_SHARP_);
                  }
                }
              };
            }(or__3640__auto__), args);
          }
        };
        var G__30704 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__30704__delegate.call(this, x, y, z, args);
        };
        G__30704.cljs$lang$maxFixedArity = 3;
        G__30704.cljs$lang$applyTo = function(arglist__30705) {
          var x = cljs.core.first(arglist__30705);
          arglist__30705 = cljs.core.next(arglist__30705);
          var y = cljs.core.first(arglist__30705);
          arglist__30705 = cljs.core.next(arglist__30705);
          var z = cljs.core.first(arglist__30705);
          var args = cljs.core.rest(arglist__30705);
          return G__30704__delegate(x, y, z, args);
        };
        G__30704.cljs$core$IFn$_invoke$arity$variadic = G__30704__delegate;
        return G__30704;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__30706__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var spn = null;
          var spn__0 = function() {
            return null;
          };
          var spn__1 = function(x) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__30696_SHARP_) {
                return p1__30696_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var spn__2 = function(x, y) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__30697_SHARP_) {
                var or__3640__auto__ = p1__30697_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3640__auto__)) {
                  return or__3640__auto__;
                } else {
                  return p1__30697_SHARP_.call(null, y);
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__3 = function(x, y, z) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__30698_SHARP_) {
                var or__3640__auto__ = p1__30698_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3640__auto__)) {
                  return or__3640__auto__;
                } else {
                  var or__3640__auto____$1 = p1__30698_SHARP_.call(null, y);
                  if (cljs.core.truth_(or__3640__auto____$1)) {
                    return or__3640__auto____$1;
                  } else {
                    return p1__30698_SHARP_.call(null, z);
                  }
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__4 = function() {
            var G__30707__delegate = function(x, y, z, args) {
              var or__3640__auto__ = spn.call(null, x, y, z);
              if (cljs.core.truth_(or__3640__auto__)) {
                return or__3640__auto__;
              } else {
                return cljs.core.some.call(null, function(or__3640__auto__, ps__$1) {
                  return function(p1__30699_SHARP_) {
                    return cljs.core.some.call(null, p1__30699_SHARP_, args);
                  };
                }(or__3640__auto__, ps__$1), ps__$1);
              }
            };
            var G__30707 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__30707__delegate.call(this, x, y, z, args);
            };
            G__30707.cljs$lang$maxFixedArity = 3;
            G__30707.cljs$lang$applyTo = function(arglist__30708) {
              var x = cljs.core.first(arglist__30708);
              arglist__30708 = cljs.core.next(arglist__30708);
              var y = cljs.core.first(arglist__30708);
              arglist__30708 = cljs.core.next(arglist__30708);
              var z = cljs.core.first(arglist__30708);
              var args = cljs.core.rest(arglist__30708);
              return G__30707__delegate(x, y, z, args);
            };
            G__30707.cljs$core$IFn$_invoke$arity$variadic = G__30707__delegate;
            return G__30707;
          }();
          spn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return spn__0.call(this);
              case 1:
                return spn__1.call(this, x);
              case 2:
                return spn__2.call(this, x, y);
              case 3:
                return spn__3.call(this, x, y, z);
              default:
                return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          spn.cljs$lang$maxFixedArity = 3;
          spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
          spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
          spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
          spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
          spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
          spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
          return spn;
        }();
      }(ps__$1);
    };
    var G__30706 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__30706__delegate.call(this, p1, p2, p3, ps);
    };
    G__30706.cljs$lang$maxFixedArity = 3;
    G__30706.cljs$lang$applyTo = function(arglist__30709) {
      var p1 = cljs.core.first(arglist__30709);
      arglist__30709 = cljs.core.next(arglist__30709);
      var p2 = cljs.core.first(arglist__30709);
      arglist__30709 = cljs.core.next(arglist__30709);
      var p3 = cljs.core.first(arglist__30709);
      var ps = cljs.core.rest(arglist__30709);
      return G__30706__delegate(p1, p2, p3, ps);
    };
    G__30706.cljs$core$IFn$_invoke$arity$variadic = G__30706__delegate;
    return G__30706;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__1 = function(f) {
    return function(rf) {
      return function() {
        var G__30711 = null;
        var G__30711__0 = function() {
          return rf.call(null);
        };
        var G__30711__1 = function(result) {
          return rf.call(null, result);
        };
        var G__30711__2 = function(result, input) {
          return rf.call(null, result, f.call(null, input));
        };
        var G__30711__3 = function() {
          var G__30712__delegate = function(result, input, inputs) {
            return rf.call(null, result, cljs.core.apply.call(null, f, input, inputs));
          };
          var G__30712 = function(result, input, var_args) {
            var inputs = null;
            if (arguments.length > 2) {
              inputs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
            }
            return G__30712__delegate.call(this, result, input, inputs);
          };
          G__30712.cljs$lang$maxFixedArity = 2;
          G__30712.cljs$lang$applyTo = function(arglist__30713) {
            var result = cljs.core.first(arglist__30713);
            arglist__30713 = cljs.core.next(arglist__30713);
            var input = cljs.core.first(arglist__30713);
            var inputs = cljs.core.rest(arglist__30713);
            return G__30712__delegate(result, input, inputs);
          };
          G__30712.cljs$core$IFn$_invoke$arity$variadic = G__30712__delegate;
          return G__30712;
        }();
        G__30711 = function(result, input, var_args) {
          var inputs = var_args;
          switch(arguments.length) {
            case 0:
              return G__30711__0.call(this);
            case 1:
              return G__30711__1.call(this, result);
            case 2:
              return G__30711__2.call(this, result, input);
            default:
              return G__30711__3.cljs$core$IFn$_invoke$arity$variadic(result, input, cljs.core.array_seq(arguments, 2));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__30711.cljs$lang$maxFixedArity = 2;
        G__30711.cljs$lang$applyTo = G__30711__3.cljs$lang$applyTo;
        G__30711.cljs$core$IFn$_invoke$arity$0 = G__30711__0;
        G__30711.cljs$core$IFn$_invoke$arity$1 = G__30711__1;
        G__30711.cljs$core$IFn$_invoke$arity$2 = G__30711__2;
        G__30711.cljs$core$IFn$_invoke$arity$variadic = G__30711__3.cljs$core$IFn$_invoke$arity$variadic;
        return G__30711;
      }();
    };
  };
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4510__auto___30714 = size;
          var i_30715 = 0;
          while (true) {
            if (i_30715 < n__4510__auto___30714) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_30715)));
              var G__30716 = i_30715 + 1;
              i_30715 = G__30716;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && s2 && s3) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__30717__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(step) {
        return function(p1__30710_SHARP_) {
          return cljs.core.apply.call(null, f, p1__30710_SHARP_);
        };
      }(step), step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__30717 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__30717__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__30717.cljs$lang$maxFixedArity = 4;
    G__30717.cljs$lang$applyTo = function(arglist__30718) {
      var f = cljs.core.first(arglist__30718);
      arglist__30718 = cljs.core.next(arglist__30718);
      var c1 = cljs.core.first(arglist__30718);
      arglist__30718 = cljs.core.next(arglist__30718);
      var c2 = cljs.core.first(arglist__30718);
      arglist__30718 = cljs.core.next(arglist__30718);
      var c3 = cljs.core.first(arglist__30718);
      var colls = cljs.core.rest(arglist__30718);
      return G__30717__delegate(f, c1, c2, c3, colls);
    };
    G__30717.cljs$core$IFn$_invoke$arity$variadic = G__30717__delegate;
    return G__30717;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return map__1.call(this, f);
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$1 = map__1;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function() {
  var take = null;
  var take__1 = function(n) {
    return function(rf) {
      var na = cljs.core.atom.call(null, n);
      return function(na) {
        return function() {
          var G__30719 = null;
          var G__30719__0 = function() {
            return rf.call(null);
          };
          var G__30719__1 = function(result) {
            return rf.call(null, result);
          };
          var G__30719__2 = function(result, input) {
            var n__$1 = cljs.core.deref.call(null, na);
            var nn = cljs.core.swap_BANG_.call(null, na, cljs.core.dec);
            var result__$1 = n__$1 > 0 ? rf.call(null, result, input) : result;
            if (!(nn > 0)) {
              return cljs.core.reduced.call(null, result__$1);
            } else {
              return result__$1;
            }
          };
          G__30719 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__30719__0.call(this);
              case 1:
                return G__30719__1.call(this, result);
              case 2:
                return G__30719__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__30719.cljs$core$IFn$_invoke$arity$0 = G__30719__0;
          G__30719.cljs$core$IFn$_invoke$arity$1 = G__30719__1;
          G__30719.cljs$core$IFn$_invoke$arity$2 = G__30719__2;
          return G__30719;
        }();
      }(na);
    };
  };
  var take__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      if (n > 0) {
        var temp__4126__auto__ = cljs.core.seq.call(null, coll);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take__1.call(this, n);
      case 2:
        return take__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$1 = take__1;
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  return take;
}();
cljs.core.drop = function() {
  var drop = null;
  var drop__1 = function(n) {
    return function(rf) {
      var na = cljs.core.atom.call(null, n);
      return function(na) {
        return function() {
          var G__30720 = null;
          var G__30720__0 = function() {
            return rf.call(null);
          };
          var G__30720__1 = function(result) {
            return rf.call(null, result);
          };
          var G__30720__2 = function(result, input) {
            var n__$1 = cljs.core.deref.call(null, na);
            cljs.core.swap_BANG_.call(null, na, cljs.core.dec);
            if (n__$1 > 0) {
              return result;
            } else {
              return rf.call(null, result, input);
            }
          };
          G__30720 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__30720__0.call(this);
              case 1:
                return G__30720__1.call(this, result);
              case 2:
                return G__30720__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__30720.cljs$core$IFn$_invoke$arity$0 = G__30720__0;
          G__30720.cljs$core$IFn$_invoke$arity$1 = G__30720__1;
          G__30720.cljs$core$IFn$_invoke$arity$2 = G__30720__2;
          return G__30720;
        }();
      }(na);
    };
  };
  var drop__2 = function(n, coll) {
    var step = function(n__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq.call(null, coll__$1);
        if (n__$1 > 0 && s) {
          var G__30721 = n__$1 - 1;
          var G__30722 = cljs.core.rest.call(null, s);
          n__$1 = G__30721;
          coll__$1 = G__30722;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step.call(null, n, coll);
      };
    }(step), null, null);
  };
  drop = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return drop__1.call(this, n);
      case 2:
        return drop__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop.cljs$core$IFn$_invoke$arity$1 = drop__1;
  drop.cljs$core$IFn$_invoke$arity$2 = drop__2;
  return drop;
}();
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__30723 = cljs.core.next.call(null, s);
      var G__30724 = cljs.core.next.call(null, lead);
      s = G__30723;
      lead = G__30724;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function() {
  var drop_while = null;
  var drop_while__1 = function(pred) {
    return function(rf) {
      var da = cljs.core.atom.call(null, true);
      return function(da) {
        return function() {
          var G__30725 = null;
          var G__30725__0 = function() {
            return rf.call(null);
          };
          var G__30725__1 = function(result) {
            return rf.call(null, result);
          };
          var G__30725__2 = function(result, input) {
            var drop_QMARK_ = cljs.core.deref.call(null, da);
            if (cljs.core.truth_(function() {
              var and__3628__auto__ = drop_QMARK_;
              if (cljs.core.truth_(and__3628__auto__)) {
                return pred.call(null, input);
              } else {
                return and__3628__auto__;
              }
            }())) {
              return result;
            } else {
              cljs.core.reset_BANG_.call(null, da, null);
              return rf.call(null, result, input);
            }
          };
          G__30725 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__30725__0.call(this);
              case 1:
                return G__30725__1.call(this, result);
              case 2:
                return G__30725__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__30725.cljs$core$IFn$_invoke$arity$0 = G__30725__0;
          G__30725.cljs$core$IFn$_invoke$arity$1 = G__30725__1;
          G__30725.cljs$core$IFn$_invoke$arity$2 = G__30725__2;
          return G__30725;
        }();
      }(da);
    };
  };
  var drop_while__2 = function(pred, coll) {
    var step = function(pred__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq.call(null, coll__$1);
        if (cljs.core.truth_(function() {
          var and__3628__auto__ = s;
          if (and__3628__auto__) {
            return pred__$1.call(null, cljs.core.first.call(null, s));
          } else {
            return and__3628__auto__;
          }
        }())) {
          var G__30726 = pred__$1;
          var G__30727 = cljs.core.rest.call(null, s);
          pred__$1 = G__30726;
          coll__$1 = G__30727;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step.call(null, pred, coll);
      };
    }(step), null, null);
  };
  drop_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return drop_while__1.call(this, pred);
      case 2:
        return drop_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_while.cljs$core$IFn$_invoke$arity$1 = drop_while__1;
  drop_while.cljs$core$IFn$_invoke$arity$2 = drop_while__2;
  return drop_while;
}();
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__30728__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__30728 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__30728__delegate.call(this, c1, c2, colls);
    };
    G__30728.cljs$lang$maxFixedArity = 2;
    G__30728.cljs$lang$applyTo = function(arglist__30729) {
      var c1 = cljs.core.first(arglist__30729);
      arglist__30729 = cljs.core.next(arglist__30729);
      var c2 = cljs.core.first(arglist__30729);
      var colls = cljs.core.rest(arglist__30729);
      return G__30728__delegate(c1, c2, colls);
    };
    G__30728.cljs$core$IFn$_invoke$arity$variadic = G__30728__delegate;
    return G__30728;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var coll__$1 = temp__4124__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__1 = function(f) {
    return cljs.core.comp.call(null, cljs.core.map.call(null, f), cljs.core.cat);
  };
  var mapcat__2 = function() {
    var G__30730__delegate = function(f, colls) {
      return cljs.core.apply.call(null, cljs.core.concat, cljs.core.apply.call(null, cljs.core.map, f, colls));
    };
    var G__30730 = function(f, var_args) {
      var colls = null;
      if (arguments.length > 1) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__30730__delegate.call(this, f, colls);
    };
    G__30730.cljs$lang$maxFixedArity = 1;
    G__30730.cljs$lang$applyTo = function(arglist__30731) {
      var f = cljs.core.first(arglist__30731);
      var colls = cljs.core.rest(arglist__30731);
      return G__30730__delegate(f, colls);
    };
    G__30730.cljs$core$IFn$_invoke$arity$variadic = G__30730__delegate;
    return G__30730;
  }();
  mapcat = function(f, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return mapcat__1.call(this, f);
      default:
        return mapcat__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 1;
  mapcat.cljs$lang$applyTo = mapcat__2.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$1 = mapcat__1;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__2.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function() {
  var filter = null;
  var filter__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__30732 = null;
        var G__30732__0 = function() {
          return rf.call(null);
        };
        var G__30732__1 = function(result) {
          return rf.call(null, result);
        };
        var G__30732__2 = function(result, input) {
          if (cljs.core.truth_(pred.call(null, input))) {
            return rf.call(null, result, input);
          } else {
            return result;
          }
        };
        G__30732 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__30732__0.call(this);
            case 1:
              return G__30732__1.call(this, result);
            case 2:
              return G__30732__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__30732.cljs$core$IFn$_invoke$arity$0 = G__30732__0;
        G__30732.cljs$core$IFn$_invoke$arity$1 = G__30732__1;
        G__30732.cljs$core$IFn$_invoke$arity$2 = G__30732__2;
        return G__30732;
      }();
    };
  };
  var filter__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4510__auto___30733 = size;
          var i_30734 = 0;
          while (true) {
            if (i_30734 < n__4510__auto___30733) {
              if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_30734)))) {
                cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_30734));
              } else {
              }
              var G__30735 = i_30734 + 1;
              i_30734 = G__30735;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
        } else {
          var f = cljs.core.first.call(null, s);
          var r = cljs.core.rest.call(null, s);
          if (cljs.core.truth_(pred.call(null, f))) {
            return cljs.core.cons.call(null, f, filter.call(null, pred, r));
          } else {
            return filter.call(null, pred, r);
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  filter = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return filter__1.call(this, pred);
      case 2:
        return filter__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter.cljs$core$IFn$_invoke$arity$1 = filter__1;
  filter.cljs$core$IFn$_invoke$arity$2 = filter__2;
  return filter;
}();
cljs.core.remove = function() {
  var remove = null;
  var remove__1 = function(pred) {
    return cljs.core.filter.call(null, cljs.core.complement.call(null, pred));
  };
  var remove__2 = function(pred, coll) {
    return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
  };
  remove = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return remove__1.call(this, pred);
      case 2:
        return remove__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove.cljs$core$IFn$_invoke$arity$1 = remove__1;
  remove.cljs$core$IFn$_invoke$arity$2 = remove__2;
  return remove;
}();
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__30736_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__30736_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function() {
  var into = null;
  var into__2 = function(to, from) {
    if (!(to == null)) {
      if (function() {
        var G__30739 = to;
        if (G__30739) {
          var bit__4297__auto__ = G__30739.cljs$lang$protocol_mask$partition1$ & 4;
          if (bit__4297__auto__ || G__30739.cljs$core$IEditableCollection$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from)), cljs.core.meta.call(null, to));
      } else {
        return cljs.core.reduce.call(null, cljs.core._conj, to, from);
      }
    } else {
      return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
    }
  };
  var into__3 = function(to, xform, from) {
    if (function() {
      var G__30740 = to;
      if (G__30740) {
        var bit__4297__auto__ = G__30740.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4297__auto__ || G__30740.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.transduce.call(null, xform, cljs.core.conj_BANG_, cljs.core.transient$.call(null, to), from)), cljs.core.meta.call(null, to));
    } else {
      return cljs.core.transduce.call(null, xform, cljs.core.conj, to, from);
    }
  };
  into = function(to, xform, from) {
    switch(arguments.length) {
      case 2:
        return into__2.call(this, to, xform);
      case 3:
        return into__3.call(this, to, xform, from);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into.cljs$core$IFn$_invoke$arity$2 = into__2;
  into.cljs$core$IFn$_invoke$arity$3 = into__3;
  return into;
}();
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__30741__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__30741 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__30741__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__30741.cljs$lang$maxFixedArity = 4;
    G__30741.cljs$lang$applyTo = function(arglist__30742) {
      var f = cljs.core.first(arglist__30742);
      arglist__30742 = cljs.core.next(arglist__30742);
      var c1 = cljs.core.first(arglist__30742);
      arglist__30742 = cljs.core.next(arglist__30742);
      var c2 = cljs.core.first(arglist__30742);
      arglist__30742 = cljs.core.next(arglist__30742);
      var c3 = cljs.core.first(arglist__30742);
      var colls = cljs.core.rest(arglist__30742);
      return G__30741__delegate(f, c1, c2, c3, colls);
    };
    G__30741.cljs$core$IFn$_invoke$arity$variadic = G__30741__delegate;
    return G__30741;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__30744 = m__$1;
          if (G__30744) {
            var bit__4304__auto__ = G__30744.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4304__auto__ || G__30744.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__30744.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__30744);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__30744);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__30745 = sentinel;
            var G__30746 = m__$2;
            var G__30747 = cljs.core.next.call(null, ks__$1);
            sentinel = G__30745;
            m__$1 = G__30746;
            ks__$1 = G__30747;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__30748, v) {
  var vec__30750 = p__30748;
  var k = cljs.core.nth.call(null, vec__30750, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__30750, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__30751, f) {
    var vec__30761 = p__30751;
    var k = cljs.core.nth.call(null, vec__30761, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__30761, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__30752, f, a) {
    var vec__30762 = p__30752;
    var k = cljs.core.nth.call(null, vec__30762, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__30762, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__30753, f, a, b) {
    var vec__30763 = p__30753;
    var k = cljs.core.nth.call(null, vec__30763, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__30763, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__30754, f, a, b, c) {
    var vec__30764 = p__30754;
    var k = cljs.core.nth.call(null, vec__30764, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__30764, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__30766__delegate = function(m, p__30755, f, a, b, c, args) {
      var vec__30765 = p__30755;
      var k = cljs.core.nth.call(null, vec__30765, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__30765, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__30766 = function(m, p__30755, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__30766__delegate.call(this, m, p__30755, f, a, b, c, args);
    };
    G__30766.cljs$lang$maxFixedArity = 6;
    G__30766.cljs$lang$applyTo = function(arglist__30767) {
      var m = cljs.core.first(arglist__30767);
      arglist__30767 = cljs.core.next(arglist__30767);
      var p__30755 = cljs.core.first(arglist__30767);
      arglist__30767 = cljs.core.next(arglist__30767);
      var f = cljs.core.first(arglist__30767);
      arglist__30767 = cljs.core.next(arglist__30767);
      var a = cljs.core.first(arglist__30767);
      arglist__30767 = cljs.core.next(arglist__30767);
      var b = cljs.core.first(arglist__30767);
      arglist__30767 = cljs.core.next(arglist__30767);
      var c = cljs.core.first(arglist__30767);
      var args = cljs.core.rest(arglist__30767);
      return G__30766__delegate(m, p__30755, f, a, b, c, args);
    };
    G__30766.cljs$core$IFn$_invoke$arity$variadic = G__30766__delegate;
    return G__30766;
  }();
  update_in = function(m, p__30755, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__30755, f);
      case 4:
        return update_in__4.call(this, m, p__30755, f, a);
      case 5:
        return update_in__5.call(this, m, p__30755, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__30755, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__30755, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4220__auto__, writer__4221__auto__, opts__4222__auto__) {
  return cljs.core._write.call(null, writer__4221__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__30768 = ll - 5;
      var G__30769 = r;
      ll = G__30768;
      ret = G__30769;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error("No item " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(i) + " in vector of length " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cnt));
};
cljs.core.first_array_for_longvec = function first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__30770 = cljs.core.pv_aget.call(null, node, 0);
      var G__30771 = level - 5;
      node = G__30770;
      level = G__30771;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off.call(null, pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__30772 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
        var G__30773 = level - 5;
        node = G__30772;
        level = G__30773;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for.call(null, pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/RangedIterator");
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for.call(null, self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.__GT_RangedIterator = function __GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count.call(null, v) ? cljs.core.unchecked_array_for.call(null, v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = f.call(null, init__$2, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
              return init__$3;
            } else {
              var G__30775 = j + 1;
              var G__30776 = init__$3;
              j = G__30775;
              init__$2 = G__30776;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__30777 = i + len;
        var G__30778 = init__$2;
        i = G__30777;
        init__$1 = G__30778;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for.call(null, coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= n) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, val);
    } else {
      throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds  [0," + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt) + "]");
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator.call(null, this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for.call(null, coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count.call(null, other)) {
      var me_iter = cljs.core._iterator.call(null, coll__$1);
      var you_iter = cljs.core._iterator.call(null, other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.call(null, x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential.call(null, coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = f.call(null, init__$2, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
              return init__$3;
            } else {
              var G__30779 = j + 1;
              var G__30780 = init__$3;
              j = G__30779;
              init__$2 = G__30780;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__30781 = i + len;
        var G__30782 = init__$2;
        i = G__30781;
        init__$1 = G__30782;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      return cljs.core.chunked_seq.call(null, coll__$1, cljs.core.first_array_for_longvec.call(null, coll__$1), 0, 0);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4510__auto___30783 = len;
    var i_30784 = 0;
    while (true) {
      if (i_30784 < n__4510__auto___30783) {
        new_tail[i_30784] = self__.tail[i_30784];
        var G__30785 = i_30784 + 1;
        i_30784 = G__30785;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__30786 = null;
  var G__30786__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__30786__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__30786 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__30786__2.call(this, self__, k);
      case 3:
        return G__30786__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__30786.cljs$core$IFn$_invoke$arity$2 = G__30786__2;
  G__30786.cljs$core$IFn$_invoke$arity$3 = G__30786__3;
  return G__30786;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args30774) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args30774)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__30787 = i + 1;
        var G__30788 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__30787;
        out = G__30788;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray(args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__30789) {
    var args = cljs.core.seq(arglist__30789);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return null;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3947__auto__ = self__.end;
    var y__3948__auto__ = v_pos + 1;
    return x__3947__auto__ > y__3948__auto__ ? x__3947__auto__ : y__3948__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return subvec_seq.call(null, i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.call = function() {
  var G__30791 = null;
  var G__30791__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__30791__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__30791 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__30791__2.call(this, self__, k);
      case 3:
        return G__30791__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__30791.cljs$core$IFn$_invoke$arity$2 = G__30791__2;
  G__30791.cljs$core$IFn$_invoke$arity$3 = G__30791__3;
  return G__30791;
}();
cljs.core.Subvec.prototype.apply = function(self__, args30790) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args30790)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__30792 = meta;
      var G__30793 = v.v;
      var G__30794 = v.start + start;
      var G__30795 = v.start + end;
      var G__30796 = __hash;
      meta = G__30792;
      v = G__30793;
      start = G__30794;
      end = G__30795;
      __hash = G__30796;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj30800 = {};
    return obj30800;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off.call(null, tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__30801 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
        var G__30802 = level - 5;
        node = G__30801;
        level = G__30802;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__30804 = null;
  var G__30804__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__30804__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__30804 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__30804__2.call(this, self__, k);
      case 3:
        return G__30804__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__30804.cljs$core$IFn$_invoke$arity$2 = G__30804__2;
  G__30804.cljs$core$IFn$_invoke$arity$3 = G__30804__3;
  return G__30804;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args30803) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args30803)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset.call(null, node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds for TransientVector of length" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4124__auto__) {
    var f1 = temp__4124__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4124__auto__) {
      var f1 = temp__4124__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__3640__auto__ = self__.front;
    if (cljs.core.truth_(or__3640__auto__)) {
      return or__3640__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3640__auto__ = self__.rear;
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__30805 = i + incr;
        i = G__30805;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__30806 = i + 1;
      var G__30807 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__30806;
      out = G__30807;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj30811 = {};
    return obj30811;
  }();
  var l = ks.length;
  var i_30812 = 0;
  while (true) {
    if (i_30812 < l) {
      var k_30813 = ks[i_30812];
      new_obj[k_30813] = obj[k_30813];
      var G__30814 = i_30812 + 1;
      i_30812 = G__30814;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__30817 = cljs.core.rest.call(null, keys__$1);
        var G__30818 = init__$2;
        keys__$1 = G__30817;
        init__$1 = G__30818;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(coll__$1) {
      return function(p1__30815_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__30815_SHARP_, self__.strobj[p1__30815_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__30819 = null;
  var G__30819__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__30819__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__30819 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__30819__2.call(this, self__, k);
      case 3:
        return G__30819__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__30819.cljs$core$IFn$_invoke$arity$2 = G__30819__2;
  G__30819.cljs$core$IFn$_invoke$arity$3 = G__30819__3;
  return G__30819;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args30816) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args30816)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj30821 = {};
  return obj30821;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ES6Iterator");
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first.call(null, self__.s);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":x};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_ES6Iterator = function __GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq.call(null, coll));
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__30822 = cljs.core.first.call(null, self__.s);
    var k = cljs.core.nth.call(null, vec__30822, 0, null);
    var v = cljs.core.nth.call(null, vec__30822, 1, null);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":[k, v]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_ES6EntriesIterator = function __GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq.call(null, coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first.call(null, self__.s);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":[x, x]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_ES6SetEntriesIterator = function __GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq.call(null, coll));
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__30823 = i + 2;
        i = G__30823;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        var G__30824 = i + 2;
        i = G__30824;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        var G__30825 = i + 2;
        i = G__30825;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__30826 = i + 2;
        i = G__30826;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        var G__30827 = i + 2;
        i = G__30827;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_30828 = 0;
  while (true) {
    if (i_30828 < l) {
      narr[i_30828] = arr[i_30828];
      var G__30829 = i_30828 + 1;
      i_30828 = G__30829;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.__GT_PersistentArrayMapIterator = function __GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__30831 = cljs.core.seq.call(null, coll);
  var chunk__30832 = null;
  var count__30833 = 0;
  var i__30834 = 0;
  while (true) {
    if (i__30834 < count__30833) {
      var vec__30835 = cljs.core._nth.call(null, chunk__30832, i__30834);
      var k = cljs.core.nth.call(null, vec__30835, 0, null);
      var v = cljs.core.nth.call(null, vec__30835, 1, null);
      f.call(null, v, k);
      var G__30841 = seq__30831;
      var G__30842 = chunk__30832;
      var G__30843 = count__30833;
      var G__30844 = i__30834 + 1;
      seq__30831 = G__30841;
      chunk__30832 = G__30842;
      count__30833 = G__30843;
      i__30834 = G__30844;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__30831);
      if (temp__4126__auto__) {
        var seq__30831__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__30831__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__30831__$1);
          var G__30845 = cljs.core.chunk_rest.call(null, seq__30831__$1);
          var G__30846 = c__4410__auto__;
          var G__30847 = cljs.core.count.call(null, c__4410__auto__);
          var G__30848 = 0;
          seq__30831 = G__30845;
          chunk__30832 = G__30846;
          count__30833 = G__30847;
          i__30834 = G__30848;
          continue;
        } else {
          var vec__30836 = cljs.core.first.call(null, seq__30831__$1);
          var k = cljs.core.nth.call(null, vec__30836, 0, null);
          var v = cljs.core.nth.call(null, vec__30836, 1, null);
          f.call(null, v, k);
          var G__30849 = cljs.core.next.call(null, seq__30831__$1);
          var G__30850 = null;
          var G__30851 = 0;
          var G__30852 = 0;
          seq__30831 = G__30849;
          chunk__30832 = G__30850;
          count__30833 = G__30851;
          i__30834 = G__30852;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__30853 = i + 2;
        var G__30854 = init__$2;
        i = G__30853;
        init__$1 = G__30854;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (function() {
    var G__30837 = other;
    if (G__30837) {
      var bit__4297__auto__ = G__30837.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4297__auto__ || G__30837.cljs$core$IMap$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === cljs.core._count.call(null, other__$1)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = cljs.core._lookup.call(null, other__$1, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.call(null, self__.arr[i + 1], v)) {
              var G__30855 = i + 2;
              i = G__30855;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map.call(null, coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj30839 = {};
    return obj30839;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__30856 = s + 2;
            var G__30857 = d;
            s = G__30856;
            d = G__30857;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__30858 = s + 2;
            var G__30859 = d + 2;
            s = G__30858;
            d = G__30859;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__30840 = cljs.core.aclone.call(null, self__.arr);
        G__30840[idx + 1] = v;
        return G__30840;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__30860 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__30861 = cljs.core.next.call(null, es);
          ret = G__30860;
          es = G__30861;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__30862 = null;
  var G__30862__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__30862__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__30862 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__30862__2.call(this, self__, k);
      case 3:
        return G__30862__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__30862.cljs$core$IFn$_invoke$arity$2 = G__30862__2;
  G__30862.cljs$core$IFn$_invoke$arity$3 = G__30862__3;
  return G__30862;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args30830) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args30830)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__30863 = i + 2;
        var G__30864 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__30863;
        ret = G__30864;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__30865_30867 = self__.arr;
      G__30865_30867.pop();
      G__30865_30867.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__30866 = o;
      if (G__30866) {
        var bit__4304__auto__ = G__30866.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4304__auto__ || G__30866.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__30866.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__30866);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__30866);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__30868 = cljs.core.next.call(null, es);
          var G__30869 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__30868;
          tcoll__$2 = G__30869;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__30870 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__30871 = i + 2;
      out = G__30870;
      i = G__30871;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4220__auto__, writer__4221__auto__, opts__4222__auto__) {
  return cljs.core._write.call(null, writer__4221__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.call(null, key, other);
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__30874 = cljs.core.aclone.call(null, arr);
    G__30874[i] = a;
    return G__30874;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__30875 = cljs.core.aclone.call(null, arr);
    G__30875[i] = a;
    G__30875[j] = b;
    return G__30875;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__30876 = i + 2;
        var G__30877 = init__$2;
        i = G__30876;
        init__$1 = G__30877;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_30878 = 0;
        var j_30879 = 0;
        while (true) {
          if (i_30878 < 32) {
            if ((self__.bitmap >>> i_30878 & 1) === 0) {
              var G__30880 = i_30878 + 1;
              var G__30881 = j_30879;
              i_30878 = G__30880;
              j_30879 = G__30881;
              continue;
            } else {
              nodes[i_30878] = !(self__.arr[j_30879] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_30879]), self__.arr[j_30879], self__.arr[j_30879 + 1], added_leaf_QMARK_) : self__.arr[j_30879 + 1];
              var G__30882 = i_30878 + 1;
              var G__30883 = j_30879 + 2;
              i_30878 = G__30882;
              j_30879 = G__30883;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_30884 = 0;
      var j_30885 = 0;
      while (true) {
        if (i_30884 < 32) {
          if ((self__.bitmap >>> i_30884 & 1) === 0) {
            var G__30886 = i_30884 + 1;
            var G__30887 = j_30885;
            i_30884 = G__30886;
            j_30885 = G__30887;
            continue;
          } else {
            nodes[i_30884] = !(self__.arr[j_30885] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_30885]), self__.arr[j_30885], self__.arr[j_30885 + 1], added_leaf_QMARK_) : self__.arr[j_30885 + 1];
            var G__30888 = i_30884 + 1;
            var G__30889 = j_30885 + 2;
            i_30884 = G__30888;
            j_30885 = G__30889;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__30890 = i + 1;
        var G__30891 = j + 2;
        var G__30892 = bitmap | 1 << i;
        i = G__30890;
        j = G__30891;
        bitmap = G__30892;
        continue;
      } else {
        var G__30893 = i + 1;
        var G__30894 = j;
        var G__30895 = bitmap;
        i = G__30893;
        j = G__30894;
        bitmap = G__30895;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__30896 = i + 1;
          var G__30897 = init__$2;
          i = G__30896;
          init__$1 = G__30897;
          continue;
        }
      } else {
        var G__30898 = i + 1;
        var G__30899 = init__$1;
        i = G__30898;
        init__$1 = G__30899;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__30900 = i + 2;
        i = G__30900;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
    }
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4124__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var node = temp__4124__auto__;
              var temp__4124__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4124__auto____$1)) {
                var node_seq = temp__4124__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__30901 = j + 2;
                j = G__30901;
                continue;
              }
            } else {
              var G__30902 = j + 2;
              j = G__30902;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4124__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var nj = temp__4124__auto__;
            var temp__4124__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4124__auto____$1)) {
              var ns = temp__4124__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__30903 = j + 1;
              j = G__30903;
              continue;
            }
          } else {
            var G__30904 = j + 1;
            j = G__30904;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__30906 = cljs.core.seq.call(null, coll);
  var chunk__30907 = null;
  var count__30908 = 0;
  var i__30909 = 0;
  while (true) {
    if (i__30909 < count__30908) {
      var vec__30910 = cljs.core._nth.call(null, chunk__30907, i__30909);
      var k = cljs.core.nth.call(null, vec__30910, 0, null);
      var v = cljs.core.nth.call(null, vec__30910, 1, null);
      f.call(null, v, k);
      var G__30914 = seq__30906;
      var G__30915 = chunk__30907;
      var G__30916 = count__30908;
      var G__30917 = i__30909 + 1;
      seq__30906 = G__30914;
      chunk__30907 = G__30915;
      count__30908 = G__30916;
      i__30909 = G__30917;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__30906);
      if (temp__4126__auto__) {
        var seq__30906__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__30906__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__30906__$1);
          var G__30918 = cljs.core.chunk_rest.call(null, seq__30906__$1);
          var G__30919 = c__4410__auto__;
          var G__30920 = cljs.core.count.call(null, c__4410__auto__);
          var G__30921 = 0;
          seq__30906 = G__30918;
          chunk__30907 = G__30919;
          count__30908 = G__30920;
          i__30909 = G__30921;
          continue;
        } else {
          var vec__30911 = cljs.core.first.call(null, seq__30906__$1);
          var k = cljs.core.nth.call(null, vec__30911, 0, null);
          var v = cljs.core.nth.call(null, vec__30911, 1, null);
          f.call(null, v, k);
          var G__30922 = cljs.core.next.call(null, seq__30906__$1);
          var G__30923 = null;
          var G__30924 = 0;
          var G__30925 = 0;
          seq__30906 = G__30922;
          chunk__30907 = G__30923;
          count__30908 = G__30924;
          i__30909 = G__30925;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj30913 = {};
    return obj30913;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__30926 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__30927 = cljs.core.next.call(null, es);
          ret = G__30926;
          es = G__30927;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__30928 = null;
  var G__30928__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__30928__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__30928 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__30928__2.call(this, self__, k);
      case 3:
        return G__30928__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__30928.cljs$core$IFn$_invoke$arity$2 = G__30928__2;
  G__30928.cljs$core$IFn$_invoke$arity$3 = G__30928__3;
  return G__30928;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args30905) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args30905)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__30929 = i + 1;
      var G__30930 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__30929;
      out = G__30930;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__30931 = o;
      if (G__30931) {
        var bit__4304__auto__ = G__30931.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4304__auto__ || G__30931.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__30931.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__30931);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__30931);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__30932 = cljs.core.next.call(null, es);
          var G__30933 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__30932;
          tcoll__$1 = G__30933;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__30934 = ascending_QMARK_ ? t.left : t.right;
      var G__30935 = cljs.core.conj.call(null, stack__$1, t);
      t = G__30934;
      stack__$1 = G__30935;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__30937 = null;
  var G__30937__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__30937__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__30937 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__30937__2.call(this, self__, k);
      case 3:
        return G__30937__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__30937.cljs$core$IFn$_invoke$arity$2 = G__30937__2;
  G__30937.cljs$core$IFn$_invoke$arity$3 = G__30937__3;
  return G__30937;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args30936) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args30936)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__30939 = null;
  var G__30939__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__30939__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__30939 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__30939__2.call(this, self__, k);
      case 3:
        return G__30939__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__30939.cljs$core$IFn$_invoke$arity$2 = G__30939__2;
  G__30939.cljs$core$IFn$_invoke$arity$3 = G__30939__3;
  return G__30939;
}();
cljs.core.RedNode.prototype.apply = function(self__, args30938) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args30938)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = tree_map_remove.call(null, comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__30941 = cljs.core.seq.call(null, coll);
  var chunk__30942 = null;
  var count__30943 = 0;
  var i__30944 = 0;
  while (true) {
    if (i__30944 < count__30943) {
      var vec__30945 = cljs.core._nth.call(null, chunk__30942, i__30944);
      var k = cljs.core.nth.call(null, vec__30945, 0, null);
      var v = cljs.core.nth.call(null, vec__30945, 1, null);
      f.call(null, v, k);
      var G__30947 = seq__30941;
      var G__30948 = chunk__30942;
      var G__30949 = count__30943;
      var G__30950 = i__30944 + 1;
      seq__30941 = G__30947;
      chunk__30942 = G__30948;
      count__30943 = G__30949;
      i__30944 = G__30950;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__30941);
      if (temp__4126__auto__) {
        var seq__30941__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__30941__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__30941__$1);
          var G__30951 = cljs.core.chunk_rest.call(null, seq__30941__$1);
          var G__30952 = c__4410__auto__;
          var G__30953 = cljs.core.count.call(null, c__4410__auto__);
          var G__30954 = 0;
          seq__30941 = G__30951;
          chunk__30942 = G__30952;
          count__30943 = G__30953;
          i__30944 = G__30954;
          continue;
        } else {
          var vec__30946 = cljs.core.first.call(null, seq__30941__$1);
          var k = cljs.core.nth.call(null, vec__30946, 0, null);
          var v = cljs.core.nth.call(null, vec__30946, 1, null);
          f.call(null, v, k);
          var G__30955 = cljs.core.next.call(null, seq__30941__$1);
          var G__30956 = null;
          var G__30957 = 0;
          var G__30958 = 0;
          seq__30941 = G__30955;
          chunk__30942 = G__30956;
          count__30943 = G__30957;
          i__30944 = G__30958;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__30959 = t.left;
          t = G__30959;
          continue;
        } else {
          var G__30960 = t.right;
          t = G__30960;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__30961 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__30962 = cljs.core.next.call(null, es);
          ret = G__30961;
          es = G__30962;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__30963 = null;
  var G__30963__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__30963__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__30963 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__30963__2.call(this, self__, k);
      case 3:
        return G__30963__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__30963.cljs$core$IFn$_invoke$arity$2 = G__30963__2;
  G__30963.cljs$core$IFn$_invoke$arity$3 = G__30963__3;
  return G__30963;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args30940) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args30940)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__30964 = cljs.core.conj.call(null, stack, t);
              var G__30965 = t.left;
              stack = G__30964;
              t = G__30965;
              continue;
            } else {
              var G__30966 = stack;
              var G__30967 = t.right;
              stack = G__30966;
              t = G__30967;
              continue;
            }
          } else {
            if (c > 0) {
              var G__30968 = cljs.core.conj.call(null, stack, t);
              var G__30969 = t.right;
              stack = G__30968;
              t = G__30969;
              continue;
            } else {
              var G__30970 = stack;
              var G__30971 = t.left;
              stack = G__30970;
              t = G__30971;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__30972 = cljs.core.nnext.call(null, in$);
        var G__30973 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__30972;
        out = G__30973;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__30974) {
    var keyvals = cljs.core.seq(arglist__30974);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__30975) {
    var keyvals = cljs.core.seq(arglist__30975);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj30979 = {};
      return obj30979;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__30980 = cljs.core.nnext.call(null, kvs);
        kvs = G__30980;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject(ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__30981) {
    var keyvals = cljs.core.seq(arglist__30981);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__30982 = cljs.core.nnext.call(null, in$);
        var G__30983 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__30982;
        out = G__30983;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__30984) {
    var keyvals = cljs.core.seq(arglist__30984);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__30985 = cljs.core.nnext.call(null, in$);
        var G__30986 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__30985;
        out = G__30986;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__30987) {
    var comparator = cljs.core.first(arglist__30987);
    var keyvals = cljs.core.rest(arglist__30987);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__30988 = self__.mseq;
    if (G__30988) {
      var bit__4304__auto__ = G__30988.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4304__auto__ || G__30988.cljs$core$INext$) {
        return true;
      } else {
        if (!G__30988.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__30988);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__30988);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__30989 = self__.mseq;
    if (G__30989) {
      var bit__4304__auto__ = G__30989.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4304__auto__ || G__30989.cljs$core$INext$) {
        return true;
      } else {
        if (!G__30989.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__30989);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__30989);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__30990 = self__.mseq;
    if (G__30990) {
      var bit__4304__auto__ = G__30990.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4304__auto__ || G__30990.cljs$core$INext$) {
        return true;
      } else {
        if (!G__30990.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__30990);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__30990);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__30991 = self__.mseq;
    if (G__30991) {
      var bit__4304__auto__ = G__30991.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4304__auto__ || G__30991.cljs$core$INext$) {
        return true;
      } else {
        if (!G__30991.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__30991);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__30991);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__30992_SHARP_, p2__30993_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3640__auto__ = p1__30992_SHARP_;
          if (cljs.core.truth_(or__3640__auto__)) {
            return or__3640__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__30993_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__30994) {
    var maps = cljs.core.seq(arglist__30994);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3640__auto__ = m1;
            if (cljs.core.truth_(or__3640__auto__)) {
              return or__3640__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__30995) {
    var f = cljs.core.first(arglist__30995);
    var maps = cljs.core.rest(arglist__30995);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__30996 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__30997 = cljs.core.next.call(null, keys);
      ret = G__30996;
      keys = G__30997;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__31000 = cljs.core.seq.call(null, coll);
  var chunk__31001 = null;
  var count__31002 = 0;
  var i__31003 = 0;
  while (true) {
    if (i__31003 < count__31002) {
      var vec__31004 = cljs.core._nth.call(null, chunk__31001, i__31003);
      var k = cljs.core.nth.call(null, vec__31004, 0, null);
      var v = cljs.core.nth.call(null, vec__31004, 1, null);
      f.call(null, v, k);
      var G__31006 = seq__31000;
      var G__31007 = chunk__31001;
      var G__31008 = count__31002;
      var G__31009 = i__31003 + 1;
      seq__31000 = G__31006;
      chunk__31001 = G__31007;
      count__31002 = G__31008;
      i__31003 = G__31009;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__31000);
      if (temp__4126__auto__) {
        var seq__31000__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__31000__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__31000__$1);
          var G__31010 = cljs.core.chunk_rest.call(null, seq__31000__$1);
          var G__31011 = c__4410__auto__;
          var G__31012 = cljs.core.count.call(null, c__4410__auto__);
          var G__31013 = 0;
          seq__31000 = G__31010;
          chunk__31001 = G__31011;
          count__31002 = G__31012;
          i__31003 = G__31013;
          continue;
        } else {
          var vec__31005 = cljs.core.first.call(null, seq__31000__$1);
          var k = cljs.core.nth.call(null, vec__31005, 0, null);
          var v = cljs.core.nth.call(null, vec__31005, 1, null);
          f.call(null, v, k);
          var G__31014 = cljs.core.next.call(null, seq__31000__$1);
          var G__31015 = null;
          var G__31016 = 0;
          var G__31017 = 0;
          seq__31000 = G__31014;
          chunk__31001 = G__31015;
          count__31002 = G__31016;
          i__31003 = G__31017;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__30998_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__30998_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__31018 = null;
  var G__31018__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__31018__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__31018 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__31018__2.call(this, self__, k);
      case 3:
        return G__31018__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__31018.cljs$core$IFn$_invoke$arity$2 = G__31018__2;
  G__31018.cljs$core$IFn$_invoke$arity$3 = G__31018__3;
  return G__31018;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args30999) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args30999)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__31019 = i + 1;
        var G__31020 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__31019;
        out = G__31020;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__31021 = i + 1;
        var G__31022 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__31021;
        out = G__31022;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__31024 = null;
  var G__31024__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__31024__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__31024 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__31024__2.call(this, self__, k);
      case 3:
        return G__31024__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__31024.cljs$core$IFn$_invoke$arity$2 = G__31024__2;
  G__31024.cljs$core$IFn$_invoke$arity$3 = G__31024__3;
  return G__31024;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args31023) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args31023)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__31027 = cljs.core.seq.call(null, coll);
  var chunk__31028 = null;
  var count__31029 = 0;
  var i__31030 = 0;
  while (true) {
    if (i__31030 < count__31029) {
      var vec__31031 = cljs.core._nth.call(null, chunk__31028, i__31030);
      var k = cljs.core.nth.call(null, vec__31031, 0, null);
      var v = cljs.core.nth.call(null, vec__31031, 1, null);
      f.call(null, v, k);
      var G__31033 = seq__31027;
      var G__31034 = chunk__31028;
      var G__31035 = count__31029;
      var G__31036 = i__31030 + 1;
      seq__31027 = G__31033;
      chunk__31028 = G__31034;
      count__31029 = G__31035;
      i__31030 = G__31036;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__31027);
      if (temp__4126__auto__) {
        var seq__31027__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__31027__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__31027__$1);
          var G__31037 = cljs.core.chunk_rest.call(null, seq__31027__$1);
          var G__31038 = c__4410__auto__;
          var G__31039 = cljs.core.count.call(null, c__4410__auto__);
          var G__31040 = 0;
          seq__31027 = G__31037;
          chunk__31028 = G__31038;
          count__31029 = G__31039;
          i__31030 = G__31040;
          continue;
        } else {
          var vec__31032 = cljs.core.first.call(null, seq__31027__$1);
          var k = cljs.core.nth.call(null, vec__31032, 0, null);
          var v = cljs.core.nth.call(null, vec__31032, 1, null);
          f.call(null, v, k);
          var G__31041 = cljs.core.next.call(null, seq__31027__$1);
          var G__31042 = null;
          var G__31043 = 0;
          var G__31044 = 0;
          seq__31027 = G__31041;
          chunk__31028 = G__31042;
          count__31029 = G__31043;
          i__31030 = G__31044;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__31025_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__31025_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__31045 = null;
  var G__31045__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__31045__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__31045 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__31045__2.call(this, self__, k);
      case 3:
        return G__31045__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__31045.cljs$core$IFn$_invoke$arity$2 = G__31045__2;
  G__31045.cljs$core$IFn$_invoke$arity$3 = G__31045__3;
  return G__31045;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args31026) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args31026)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4504__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4504__auto__.length) {
        var G__31046 = i + 1;
        var G__31047 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__31046;
        res = G__31047;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__31048 = cljs.core._next.call(null, in$__$1);
          var G__31049 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
          in$__$1 = G__31048;
          out = G__31049;
          continue;
        } else {
          return cljs.core._persistent_BANG_.call(null, out);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__31050__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__31050 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__31050__delegate.call(this, keys);
    };
    G__31050.cljs$lang$maxFixedArity = 0;
    G__31050.cljs$lang$applyTo = function(arglist__31051) {
      var keys = cljs.core.seq(arglist__31051);
      return G__31050__delegate(keys);
    };
    G__31050.cljs$core$IFn$_invoke$arity$variadic = G__31050__delegate;
    return G__31050;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__31052) {
    var keys = cljs.core.seq(arglist__31052);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__31053) {
    var comparator = cljs.core.first(arglist__31053);
    var keys = cljs.core.rest(arglist__31053);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function() {
  var replace = null;
  var replace__1 = function(smap) {
    return cljs.core.map.call(null, function(p1__31054_SHARP_) {
      var temp__4124__auto__ = cljs.core.find.call(null, smap, p1__31054_SHARP_);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var e = temp__4124__auto__;
        return cljs.core.val.call(null, e);
      } else {
        return p1__31054_SHARP_;
      }
    });
  };
  var replace__2 = function(smap, coll) {
    if (cljs.core.vector_QMARK_.call(null, coll)) {
      var n = cljs.core.count.call(null, coll);
      return cljs.core.reduce.call(null, function(n) {
        return function(v, i) {
          var temp__4124__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
          if (cljs.core.truth_(temp__4124__auto__)) {
            var e = temp__4124__auto__;
            return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
          } else {
            return v;
          }
        };
      }(n), coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
    } else {
      return cljs.core.map.call(null, function(p1__31055_SHARP_) {
        var temp__4124__auto__ = cljs.core.find.call(null, smap, p1__31055_SHARP_);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          return cljs.core.second.call(null, e);
        } else {
          return p1__31055_SHARP_;
        }
      }, coll);
    }
  };
  replace = function(smap, coll) {
    switch(arguments.length) {
      case 1:
        return replace__1.call(this, smap);
      case 2:
        return replace__2.call(this, smap, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  replace.cljs$core$IFn$_invoke$arity$1 = replace__1;
  replace.cljs$core$IFn$_invoke$arity$2 = replace__2;
  return replace;
}();
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__31062, seen__$1) {
        while (true) {
          var vec__31063 = p__31062;
          var f = cljs.core.nth.call(null, vec__31063, 0, null);
          var xs__$1 = vec__31063;
          var temp__4126__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4126__auto__) {
            var s = temp__4126__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__31064 = cljs.core.rest.call(null, s);
              var G__31065 = seen__$1;
              p__31062 = G__31064;
              seen__$1 = G__31065;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__31066 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__31067 = cljs.core.next.call(null, s__$1);
      ret = G__31066;
      s__$1 = G__31067;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__31069 = x;
    if (G__31069) {
      var bit__4297__auto__ = G__31069.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4297__auto__ || G__31069.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error("Doesn't support name: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__31070 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__31071 = cljs.core.next.call(null, ks);
      var G__31072 = cljs.core.next.call(null, vs);
      map = G__31070;
      ks = G__31071;
      vs = G__31072;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__31075__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__31073_SHARP_, p2__31074_SHARP_) {
        return max_key.call(null, k, p1__31073_SHARP_, p2__31074_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__31075 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__31075__delegate.call(this, k, x, y, more);
    };
    G__31075.cljs$lang$maxFixedArity = 3;
    G__31075.cljs$lang$applyTo = function(arglist__31076) {
      var k = cljs.core.first(arglist__31076);
      arglist__31076 = cljs.core.next(arglist__31076);
      var x = cljs.core.first(arglist__31076);
      arglist__31076 = cljs.core.next(arglist__31076);
      var y = cljs.core.first(arglist__31076);
      var more = cljs.core.rest(arglist__31076);
      return G__31075__delegate(k, x, y, more);
    };
    G__31075.cljs$core$IFn$_invoke$arity$variadic = G__31075__delegate;
    return G__31075;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__31079__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__31077_SHARP_, p2__31078_SHARP_) {
        return min_key.call(null, k, p1__31077_SHARP_, p2__31078_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__31079 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__31079__delegate.call(this, k, x, y, more);
    };
    G__31079.cljs$lang$maxFixedArity = 3;
    G__31079.cljs$lang$applyTo = function(arglist__31080) {
      var k = cljs.core.first(arglist__31080);
      arglist__31080 = cljs.core.next(arglist__31080);
      var x = cljs.core.first(arglist__31080);
      arglist__31080 = cljs.core.next(arglist__31080);
      var y = cljs.core.first(arglist__31080);
      var more = cljs.core.rest(arglist__31080);
      return G__31079__delegate(k, x, y, more);
    };
    G__31079.cljs$core$IFn$_invoke$arity$variadic = G__31079__delegate;
    return G__31079;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ArrayList");
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.__GT_ArrayList = function __GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__1 = function(n) {
    return function(rf) {
      var a = cljs.core.array_list.call(null);
      return function(a) {
        return function() {
          var G__31081 = null;
          var G__31081__0 = function() {
            return rf.call(null);
          };
          var G__31081__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return rf.call(null, result, v);
            }();
            return rf.call(null, result__$1);
          };
          var G__31081__2 = function(result, input) {
            a.add(input);
            if (n === a.size()) {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return rf.call(null, result, v);
            } else {
              return result;
            }
          };
          G__31081 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__31081__0.call(this);
              case 1:
                return G__31081__1.call(this, result);
              case 2:
                return G__31081__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__31081.cljs$core$IFn$_invoke$arity$0 = G__31081__0;
          G__31081.cljs$core$IFn$_invoke$arity$1 = G__31081__1;
          G__31081.cljs$core$IFn$_invoke$arity$2 = G__31081__2;
          return G__31081;
        }();
      }(a);
    };
  };
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 1:
        return partition_all__1.call(this, n);
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$1 = partition_all__1;
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function() {
  var take_while = null;
  var take_while__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__31082 = null;
        var G__31082__0 = function() {
          return rf.call(null);
        };
        var G__31082__1 = function(result) {
          return rf.call(null, result);
        };
        var G__31082__2 = function(result, input) {
          if (cljs.core.truth_(pred.call(null, input))) {
            return rf.call(null, result, input);
          } else {
            return cljs.core.reduced.call(null, result);
          }
        };
        G__31082 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__31082__0.call(this);
            case 1:
              return G__31082__1.call(this, result);
            case 2:
              return G__31082__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__31082.cljs$core$IFn$_invoke$arity$0 = G__31082__0;
        G__31082.cljs$core$IFn$_invoke$arity$1 = G__31082__1;
        G__31082.cljs$core$IFn$_invoke$arity$2 = G__31082__2;
        return G__31082;
      }();
    };
  };
  var take_while__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return take_while__1.call(this, pred);
      case 2:
        return take_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_while.cljs$core$IFn$_invoke$arity$1 = take_while__1;
  take_while.cljs$core$IFn$_invoke$arity$2 = take_while__2;
  return take_while;
}();
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__31085 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__31085, 0, null);
        var s = vec__31085;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__31086 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__31086, 0, null);
      var s = vec__31086;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__31089 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__31089, 0, null);
        var s = vec__31089;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__31090 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__31090, 0, null);
      var s = vec__31090;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/RangeIterator");
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.__GT_RangeIterator = function __GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil.call(null, (self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, rng__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = f.call(null, ret, i);
      if (cljs.core.reduced_QMARK_.call(null, ret__$1)) {
        return cljs.core.deref.call(null, ret__$1);
      } else {
        var G__31091 = i + self__.step;
        var G__31092 = ret__$1;
        i = G__31091;
        ret = G__31092;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function() {
  var take_nth = null;
  var take_nth__1 = function(n) {
    return function(rf) {
      var ia = cljs.core.atom.call(null, -1);
      return function(ia) {
        return function() {
          var G__31093 = null;
          var G__31093__0 = function() {
            return rf.call(null);
          };
          var G__31093__1 = function(result) {
            return rf.call(null, result);
          };
          var G__31093__2 = function(result, input) {
            var i = cljs.core.swap_BANG_.call(null, ia, cljs.core.inc);
            if (cljs.core.rem.call(null, i, n) === 0) {
              return rf.call(null, result, input);
            } else {
              return result;
            }
          };
          G__31093 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__31093__0.call(this);
              case 1:
                return G__31093__1.call(this, result);
              case 2:
                return G__31093__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__31093.cljs$core$IFn$_invoke$arity$0 = G__31093__0;
          G__31093.cljs$core$IFn$_invoke$arity$1 = G__31093__1;
          G__31093.cljs$core$IFn$_invoke$arity$2 = G__31093__2;
          return G__31093;
        }();
      }(ia);
    };
  };
  var take_nth__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  take_nth = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take_nth__1.call(this, n);
      case 2:
        return take_nth__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_nth.cljs$core$IFn$_invoke$arity$1 = take_nth__1;
  take_nth.cljs$core$IFn$_invoke$arity$2 = take_nth__2;
  return take_nth;
}();
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function() {
  var partition_by = null;
  var partition_by__1 = function(f) {
    return function(rf) {
      var a = cljs.core.array_list.call(null);
      var pa = cljs.core.atom.call(null, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(a, pa) {
        return function() {
          var G__31095 = null;
          var G__31095__0 = function() {
            return rf.call(null);
          };
          var G__31095__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return rf.call(null, result, v);
            }();
            return rf.call(null, result__$1);
          };
          var G__31095__2 = function(result, input) {
            var pval = cljs.core.deref.call(null, pa);
            var val = f.call(null, input);
            cljs.core.reset_BANG_.call(null, pa, val);
            if (cljs.core.keyword_identical_QMARK_.call(null, pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.call(null, val, pval)) {
              a.add(input);
              return result;
            } else {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              var ret = rf.call(null, result, v);
              if (cljs.core.reduced_QMARK_.call(null, ret)) {
              } else {
                a.add(input);
              }
              return ret;
            }
          };
          G__31095 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__31095__0.call(this);
              case 1:
                return G__31095__1.call(this, result);
              case 2:
                return G__31095__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__31095.cljs$core$IFn$_invoke$arity$0 = G__31095__0;
          G__31095.cljs$core$IFn$_invoke$arity$1 = G__31095__1;
          G__31095.cljs$core$IFn$_invoke$arity$2 = G__31095__2;
          return G__31095;
        }();
      }(a, pa);
    };
  };
  var partition_by__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var fst = cljs.core.first.call(null, s);
        var fv = f.call(null, fst);
        var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv, s, temp__4126__auto__) {
          return function(p1__31094_SHARP_) {
            return cljs.core._EQ_.call(null, fv, f.call(null, p1__31094_SHARP_));
          };
        }(fst, fv, s, temp__4126__auto__), cljs.core.next.call(null, s)));
        return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_by = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return partition_by__1.call(this, f);
      case 2:
        return partition_by__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$1 = partition_by__1;
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  return partition_by;
}();
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var s = temp__4124__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__31106 = null;
      var G__31106__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__31106__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__31106__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__31106__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__31106__4 = function() {
        var G__31107__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__31107 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__31107__delegate.call(this, x, y, z, args);
        };
        G__31107.cljs$lang$maxFixedArity = 3;
        G__31107.cljs$lang$applyTo = function(arglist__31108) {
          var x = cljs.core.first(arglist__31108);
          arglist__31108 = cljs.core.next(arglist__31108);
          var y = cljs.core.first(arglist__31108);
          arglist__31108 = cljs.core.next(arglist__31108);
          var z = cljs.core.first(arglist__31108);
          var args = cljs.core.rest(arglist__31108);
          return G__31107__delegate(x, y, z, args);
        };
        G__31107.cljs$core$IFn$_invoke$arity$variadic = G__31107__delegate;
        return G__31107;
      }();
      G__31106 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__31106__0.call(this);
          case 1:
            return G__31106__1.call(this, x);
          case 2:
            return G__31106__2.call(this, x, y);
          case 3:
            return G__31106__3.call(this, x, y, z);
          default:
            return G__31106__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__31106.cljs$lang$maxFixedArity = 3;
      G__31106.cljs$lang$applyTo = G__31106__4.cljs$lang$applyTo;
      G__31106.cljs$core$IFn$_invoke$arity$0 = G__31106__0;
      G__31106.cljs$core$IFn$_invoke$arity$1 = G__31106__1;
      G__31106.cljs$core$IFn$_invoke$arity$2 = G__31106__2;
      G__31106.cljs$core$IFn$_invoke$arity$3 = G__31106__3;
      G__31106.cljs$core$IFn$_invoke$arity$variadic = G__31106__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__31106;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__31109 = null;
      var G__31109__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__31109__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__31109__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__31109__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__31109__4 = function() {
        var G__31110__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__31110 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__31110__delegate.call(this, x, y, z, args);
        };
        G__31110.cljs$lang$maxFixedArity = 3;
        G__31110.cljs$lang$applyTo = function(arglist__31111) {
          var x = cljs.core.first(arglist__31111);
          arglist__31111 = cljs.core.next(arglist__31111);
          var y = cljs.core.first(arglist__31111);
          arglist__31111 = cljs.core.next(arglist__31111);
          var z = cljs.core.first(arglist__31111);
          var args = cljs.core.rest(arglist__31111);
          return G__31110__delegate(x, y, z, args);
        };
        G__31110.cljs$core$IFn$_invoke$arity$variadic = G__31110__delegate;
        return G__31110;
      }();
      G__31109 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__31109__0.call(this);
          case 1:
            return G__31109__1.call(this, x);
          case 2:
            return G__31109__2.call(this, x, y);
          case 3:
            return G__31109__3.call(this, x, y, z);
          default:
            return G__31109__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__31109.cljs$lang$maxFixedArity = 3;
      G__31109.cljs$lang$applyTo = G__31109__4.cljs$lang$applyTo;
      G__31109.cljs$core$IFn$_invoke$arity$0 = G__31109__0;
      G__31109.cljs$core$IFn$_invoke$arity$1 = G__31109__1;
      G__31109.cljs$core$IFn$_invoke$arity$2 = G__31109__2;
      G__31109.cljs$core$IFn$_invoke$arity$3 = G__31109__3;
      G__31109.cljs$core$IFn$_invoke$arity$variadic = G__31109__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__31109;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__31112 = null;
      var G__31112__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__31112__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__31112__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__31112__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__31112__4 = function() {
        var G__31113__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__31113 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__31113__delegate.call(this, x, y, z, args);
        };
        G__31113.cljs$lang$maxFixedArity = 3;
        G__31113.cljs$lang$applyTo = function(arglist__31114) {
          var x = cljs.core.first(arglist__31114);
          arglist__31114 = cljs.core.next(arglist__31114);
          var y = cljs.core.first(arglist__31114);
          arglist__31114 = cljs.core.next(arglist__31114);
          var z = cljs.core.first(arglist__31114);
          var args = cljs.core.rest(arglist__31114);
          return G__31113__delegate(x, y, z, args);
        };
        G__31113.cljs$core$IFn$_invoke$arity$variadic = G__31113__delegate;
        return G__31113;
      }();
      G__31112 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__31112__0.call(this);
          case 1:
            return G__31112__1.call(this, x);
          case 2:
            return G__31112__2.call(this, x, y);
          case 3:
            return G__31112__3.call(this, x, y, z);
          default:
            return G__31112__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__31112.cljs$lang$maxFixedArity = 3;
      G__31112.cljs$lang$applyTo = G__31112__4.cljs$lang$applyTo;
      G__31112.cljs$core$IFn$_invoke$arity$0 = G__31112__0;
      G__31112.cljs$core$IFn$_invoke$arity$1 = G__31112__1;
      G__31112.cljs$core$IFn$_invoke$arity$2 = G__31112__2;
      G__31112.cljs$core$IFn$_invoke$arity$3 = G__31112__3;
      G__31112.cljs$core$IFn$_invoke$arity$variadic = G__31112__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__31112;
    }();
  };
  var juxt__4 = function() {
    var G__31115__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function(fs__$1) {
        return function() {
          var G__31116 = null;
          var G__31116__0 = function() {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__31096_SHARP_, p2__31097_SHARP_) {
                return cljs.core.conj.call(null, p1__31096_SHARP_, p2__31097_SHARP_.call(null));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__31116__1 = function(x) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__31098_SHARP_, p2__31099_SHARP_) {
                return cljs.core.conj.call(null, p1__31098_SHARP_, p2__31099_SHARP_.call(null, x));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__31116__2 = function(x, y) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__31100_SHARP_, p2__31101_SHARP_) {
                return cljs.core.conj.call(null, p1__31100_SHARP_, p2__31101_SHARP_.call(null, x, y));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__31116__3 = function(x, y, z) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__31102_SHARP_, p2__31103_SHARP_) {
                return cljs.core.conj.call(null, p1__31102_SHARP_, p2__31103_SHARP_.call(null, x, y, z));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__31116__4 = function() {
            var G__31117__delegate = function(x, y, z, args) {
              return cljs.core.reduce.call(null, function(fs__$1) {
                return function(p1__31104_SHARP_, p2__31105_SHARP_) {
                  return cljs.core.conj.call(null, p1__31104_SHARP_, cljs.core.apply.call(null, p2__31105_SHARP_, x, y, z, args));
                };
              }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
            };
            var G__31117 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__31117__delegate.call(this, x, y, z, args);
            };
            G__31117.cljs$lang$maxFixedArity = 3;
            G__31117.cljs$lang$applyTo = function(arglist__31118) {
              var x = cljs.core.first(arglist__31118);
              arglist__31118 = cljs.core.next(arglist__31118);
              var y = cljs.core.first(arglist__31118);
              arglist__31118 = cljs.core.next(arglist__31118);
              var z = cljs.core.first(arglist__31118);
              var args = cljs.core.rest(arglist__31118);
              return G__31117__delegate(x, y, z, args);
            };
            G__31117.cljs$core$IFn$_invoke$arity$variadic = G__31117__delegate;
            return G__31117;
          }();
          G__31116 = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return G__31116__0.call(this);
              case 1:
                return G__31116__1.call(this, x);
              case 2:
                return G__31116__2.call(this, x, y);
              case 3:
                return G__31116__3.call(this, x, y, z);
              default:
                return G__31116__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__31116.cljs$lang$maxFixedArity = 3;
          G__31116.cljs$lang$applyTo = G__31116__4.cljs$lang$applyTo;
          G__31116.cljs$core$IFn$_invoke$arity$0 = G__31116__0;
          G__31116.cljs$core$IFn$_invoke$arity$1 = G__31116__1;
          G__31116.cljs$core$IFn$_invoke$arity$2 = G__31116__2;
          G__31116.cljs$core$IFn$_invoke$arity$3 = G__31116__3;
          G__31116.cljs$core$IFn$_invoke$arity$variadic = G__31116__4.cljs$core$IFn$_invoke$arity$variadic;
          return G__31116;
        }();
      }(fs__$1);
    };
    var G__31115 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__31115__delegate.call(this, f, g, h, fs);
    };
    G__31115.cljs$lang$maxFixedArity = 3;
    G__31115.cljs$lang$applyTo = function(arglist__31119) {
      var f = cljs.core.first(arglist__31119);
      arglist__31119 = cljs.core.next(arglist__31119);
      var g = cljs.core.first(arglist__31119);
      arglist__31119 = cljs.core.next(arglist__31119);
      var h = cljs.core.first(arglist__31119);
      var fs = cljs.core.rest(arglist__31119);
      return G__31115__delegate(f, g, h, fs);
    };
    G__31115.cljs$core$IFn$_invoke$arity$variadic = G__31115__delegate;
    return G__31115;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__31120 = cljs.core.next.call(null, coll);
        coll = G__31120;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__31121 = n - 1;
        var G__31122 = cljs.core.next.call(null, coll);
        n = G__31121;
        coll = G__31122;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
      if (cljs.core.count.call(null, matches) === 1) {
        return cljs.core.first.call(null, matches);
      } else {
        return cljs.core.vec.call(null, matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count.call(null, matches) === 1) {
        return cljs.core.first.call(null, matches);
      } else {
        return cljs.core.vec.call(null, matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__31124 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
    var _ = cljs.core.nth.call(null, vec__31124, 0, null);
    var flags = cljs.core.nth.call(null, vec__31124, 1, null);
    var pattern = cljs.core.nth.call(null, vec__31124, 2, null);
    return new RegExp(pattern, flags);
  }
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_31126 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_31127__$1 = cljs.core.next.call(null, coll);
      var n_31128 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
      while (true) {
        if (coll_31127__$1 && (n_31128 == null || !(n_31128 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_31127__$1), writer, opts);
          var G__31129 = cljs.core.next.call(null, coll_31127__$1);
          var G__31130 = n_31128 - 1;
          coll_31127__$1 = G__31129;
          n_31128 = G__31130;
          continue;
        } else {
          if (cljs.core.seq.call(null, coll_31127__$1) && n_31128 === 0) {
            cljs.core._write.call(null, writer, sep);
            cljs.core._write.call(null, writer, "...");
          } else {
          }
        }
        break;
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_31126;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__31135 = cljs.core.seq.call(null, ss);
    var chunk__31136 = null;
    var count__31137 = 0;
    var i__31138 = 0;
    while (true) {
      if (i__31138 < count__31137) {
        var s = cljs.core._nth.call(null, chunk__31136, i__31138);
        cljs.core._write.call(null, writer, s);
        var G__31139 = seq__31135;
        var G__31140 = chunk__31136;
        var G__31141 = count__31137;
        var G__31142 = i__31138 + 1;
        seq__31135 = G__31139;
        chunk__31136 = G__31140;
        count__31137 = G__31141;
        i__31138 = G__31142;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__31135);
        if (temp__4126__auto__) {
          var seq__31135__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__31135__$1)) {
            var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__31135__$1);
            var G__31143 = cljs.core.chunk_rest.call(null, seq__31135__$1);
            var G__31144 = c__4410__auto__;
            var G__31145 = cljs.core.count.call(null, c__4410__auto__);
            var G__31146 = 0;
            seq__31135 = G__31143;
            chunk__31136 = G__31144;
            count__31137 = G__31145;
            i__31138 = G__31146;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__31135__$1);
            cljs.core._write.call(null, writer, s);
            var G__31147 = cljs.core.next.call(null, seq__31135__$1);
            var G__31148 = null;
            var G__31149 = 0;
            var G__31150 = 0;
            seq__31135 = G__31147;
            chunk__31136 = G__31148;
            count__31137 = G__31149;
            i__31138 = G__31150;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__31151) {
    var writer = cljs.core.first(arglist__31151);
    var ss = cljs.core.rest(arglist__31151);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj31153 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj31153;
}();
cljs.core.quote_string = function quote_string(s) {
  return'"' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })) + '"';
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (cljs.core.truth_(function() {
        var and__3628__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
        if (cljs.core.truth_(and__3628__auto__)) {
          var and__3628__auto____$1 = function() {
            var G__31159 = obj;
            if (G__31159) {
              var bit__4304__auto__ = G__31159.cljs$lang$protocol_mask$partition0$ & 131072;
              if (bit__4304__auto__ || G__31159.cljs$core$IMeta$) {
                return true;
              } else {
                if (!G__31159.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__31159);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__31159);
            }
          }();
          if (and__3628__auto____$1) {
            return cljs.core.meta.call(null, obj);
          } else {
            return and__3628__auto____$1;
          }
        } else {
          return and__3628__auto__;
        }
      }())) {
        cljs.core._write.call(null, writer, "^");
        pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
        cljs.core._write.call(null, writer, " ");
      } else {
      }
      if (obj == null) {
        return cljs.core._write.call(null, writer, "nil");
      } else {
        if (obj.cljs$lang$type) {
          return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
        } else {
          if (function() {
            var G__31160 = obj;
            if (G__31160) {
              var bit__4297__auto__ = G__31160.cljs$lang$protocol_mask$partition0$ & 2147483648;
              if (bit__4297__auto__ || G__31160.cljs$core$IPrintWithWriter$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._pr_writer.call(null, obj, writer, opts);
          } else {
            if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
              return cljs.core._write.call(null, writer, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj));
            } else {
              if (cljs.core.object_QMARK_.call(null, obj)) {
                cljs.core._write.call(null, writer, "#js ");
                return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
              } else {
                if (obj instanceof Array) {
                  return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                } else {
                  if (goog.isString(obj)) {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                    } else {
                      return cljs.core._write.call(null, writer, obj);
                    }
                  } else {
                    if (cljs.core.fn_QMARK_.call(null, obj)) {
                      return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                    } else {
                      if (obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n);
                          while (true) {
                            if (cljs.core.count.call(null, ns) < len) {
                              var G__31162 = "0" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns);
                              ns = G__31162;
                              continue;
                            } else {
                              return ns;
                            }
                            break;
                          }
                        };
                        return cljs.core.write_all.call(null, writer, '#inst "', "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj.getUTCFullYear()), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                      } else {
                        if (cljs.core.regexp_QMARK_.call(null, obj)) {
                          return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                        } else {
                          if (function() {
                            var G__31161 = obj;
                            if (G__31161) {
                              var bit__4304__auto__ = G__31161.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if (bit__4304__auto__ || G__31161.cljs$core$IPrintWithWriter$) {
                                return true;
                              } else {
                                if (!G__31161.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__31161);
                                } else {
                                  return false;
                                }
                              }
                            } else {
                              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__31161);
                            }
                          }()) {
                            return cljs.core._pr_writer.call(null, obj, writer, opts);
                          } else {
                            return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__31167 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__31168 = null;
  var count__31169 = 0;
  var i__31170 = 0;
  while (true) {
    if (i__31170 < count__31169) {
      var obj = cljs.core._nth.call(null, chunk__31168, i__31170);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__31171 = seq__31167;
      var G__31172 = chunk__31168;
      var G__31173 = count__31169;
      var G__31174 = i__31170 + 1;
      seq__31167 = G__31171;
      chunk__31168 = G__31172;
      count__31169 = G__31173;
      i__31170 = G__31174;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__31167);
      if (temp__4126__auto__) {
        var seq__31167__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__31167__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__31167__$1);
          var G__31175 = cljs.core.chunk_rest.call(null, seq__31167__$1);
          var G__31176 = c__4410__auto__;
          var G__31177 = cljs.core.count.call(null, c__4410__auto__);
          var G__31178 = 0;
          seq__31167 = G__31175;
          chunk__31168 = G__31176;
          count__31169 = G__31177;
          i__31170 = G__31178;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__31167__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__31179 = cljs.core.next.call(null, seq__31167__$1);
          var G__31180 = null;
          var G__31181 = 0;
          var G__31182 = 0;
          seq__31167 = G__31179;
          chunk__31168 = G__31180;
          count__31169 = G__31181;
          i__31170 = G__31182;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_sb_with_opts.call(null, objs, opts));
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__31183) {
    var objs = cljs.core.seq(arglist__31183);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__31184) {
    var objs = cljs.core.seq(arglist__31184);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__31185) {
    var objs = cljs.core.seq(arglist__31185);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__31186) {
    var objs = cljs.core.seq(arglist__31186);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__31187) {
    var objs = cljs.core.seq(arglist__31187);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__31188) {
    var objs = cljs.core.seq(arglist__31188);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__31189) {
    var objs = cljs.core.seq(arglist__31189);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__31190) {
    var objs = cljs.core.seq(arglist__31190);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, a__$1.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__31191) {
    var iref = cljs.core.first(arglist__31191);
    arglist__31191 = cljs.core.next(arglist__31191);
    var f = cljs.core.first(arglist__31191);
    var args = cljs.core.rest(arglist__31191);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix_string) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc)));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not.call(null, self__.f);
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = self__.f.call(null);
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.__GT_Delay = function __GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.preserving_reduced = function preserving_reduced(rf) {
  return function(p1__31192_SHARP_, p2__31193_SHARP_) {
    var ret = rf.call(null, p1__31192_SHARP_, p2__31193_SHARP_);
    if (cljs.core.reduced_QMARK_.call(null, ret)) {
      return cljs.core.reduced.call(null, ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cat(rf) {
  var rf1 = cljs.core.preserving_reduced.call(null, rf);
  return function(rf1) {
    return function() {
      var G__31194 = null;
      var G__31194__0 = function() {
        return rf.call(null);
      };
      var G__31194__1 = function(result) {
        return rf.call(null, result);
      };
      var G__31194__2 = function(result, input) {
        return cljs.core.reduce.call(null, rf1, result, input);
      };
      G__31194 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__31194__0.call(this);
          case 1:
            return G__31194__1.call(this, result);
          case 2:
            return G__31194__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__31194.cljs$core$IFn$_invoke$arity$0 = G__31194__0;
      G__31194.cljs$core$IFn$_invoke$arity$1 = G__31194__1;
      G__31194.cljs$core$IFn$_invoke$arity$2 = G__31194__2;
      return G__31194;
    }();
  }(rf1);
};
cljs.core.dedupe = function() {
  var dedupe = null;
  var dedupe__0 = function() {
    return function(rf) {
      var pa = cljs.core.atom.call(null, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(pa) {
        return function() {
          var G__31195 = null;
          var G__31195__0 = function() {
            return rf.call(null);
          };
          var G__31195__1 = function(result) {
            return rf.call(null, result);
          };
          var G__31195__2 = function(result, input) {
            var prior = cljs.core.deref.call(null, pa);
            cljs.core.reset_BANG_.call(null, pa, input);
            if (cljs.core._EQ_.call(null, prior, input)) {
              return result;
            } else {
              return rf.call(null, result, input);
            }
          };
          G__31195 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__31195__0.call(this);
              case 1:
                return G__31195__1.call(this, result);
              case 2:
                return G__31195__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__31195.cljs$core$IFn$_invoke$arity$0 = G__31195__0;
          G__31195.cljs$core$IFn$_invoke$arity$1 = G__31195__1;
          G__31195.cljs$core$IFn$_invoke$arity$2 = G__31195__2;
          return G__31195;
        }();
      }(pa);
    };
  };
  var dedupe__1 = function(coll) {
    return cljs.core.sequence.call(null, dedupe.call(null), coll);
  };
  dedupe = function(coll) {
    switch(arguments.length) {
      case 0:
        return dedupe__0.call(this);
      case 1:
        return dedupe__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dedupe.cljs$core$IFn$_invoke$arity$0 = dedupe__0;
  dedupe.cljs$core$IFn$_invoke$arity$1 = dedupe__1;
  return dedupe;
}();
cljs.core.random_sample = function() {
  var random_sample = null;
  var random_sample__1 = function(prob) {
    return cljs.core.filter.call(null, function(_) {
      return cljs.core.rand.call(null) < prob;
    });
  };
  var random_sample__2 = function(prob, coll) {
    return cljs.core.filter.call(null, function(_) {
      return cljs.core.rand.call(null) < prob;
    }, coll);
  };
  random_sample = function(prob, coll) {
    switch(arguments.length) {
      case 1:
        return random_sample__1.call(this, prob);
      case 2:
        return random_sample__2.call(this, prob, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_sample.cljs$core$IFn$_invoke$arity$1 = random_sample__1;
  random_sample.cljs$core$IFn$_invoke$arity$2 = random_sample__2;
  return random_sample;
}();
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/Eduction");
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.call(null, self__.xform, f, init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq.call(null, cljs.core.sequence.call(null, self__.xform, self__.coll));
};
cljs.core.__GT_Eduction = function __GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.eduction = function eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.run_BANG_ = function run_BANG_(proc, coll) {
  return cljs.core.reduce.call(null, function(p1__31197_SHARP_, p2__31196_SHARP_) {
    return proc.call(null, p2__31196_SHARP_);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
  var obj31199 = {};
  return obj31199;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3628__auto__ = x;
    if (and__3628__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4277__auto__ = x == null ? null : x;
    return function() {
      var or__3640__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3628__auto__ = x;
    if (and__3628__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4277__auto__ = x == null ? null : x;
    return function() {
      var or__3640__auto__ = cljs.core._key__GT_js[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__31201 = k;
    if (G__31201) {
      var bit__4304__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3640__auto__ = bit__4304__auto__;
        if (cljs.core.truth_(or__3640__auto__)) {
          return or__3640__auto__;
        } else {
          return G__31201.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__31201.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__31201);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__31201);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__31215 = x;
      if (G__31215) {
        var bit__4304__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3640__auto__ = bit__4304__auto__;
          if (cljs.core.truth_(or__3640__auto__)) {
            return or__3640__auto__;
          } else {
            return G__31215.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__31215.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__31215);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__31215);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x);
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj31217 = {};
              return obj31217;
            }();
            var seq__31218_31228 = cljs.core.seq.call(null, x);
            var chunk__31219_31229 = null;
            var count__31220_31230 = 0;
            var i__31221_31231 = 0;
            while (true) {
              if (i__31221_31231 < count__31220_31230) {
                var vec__31222_31232 = cljs.core._nth.call(null, chunk__31219_31229, i__31221_31231);
                var k_31233 = cljs.core.nth.call(null, vec__31222_31232, 0, null);
                var v_31234 = cljs.core.nth.call(null, vec__31222_31232, 1, null);
                m[cljs.core.key__GT_js.call(null, k_31233)] = clj__GT_js.call(null, v_31234);
                var G__31235 = seq__31218_31228;
                var G__31236 = chunk__31219_31229;
                var G__31237 = count__31220_31230;
                var G__31238 = i__31221_31231 + 1;
                seq__31218_31228 = G__31235;
                chunk__31219_31229 = G__31236;
                count__31220_31230 = G__31237;
                i__31221_31231 = G__31238;
                continue;
              } else {
                var temp__4126__auto___31239 = cljs.core.seq.call(null, seq__31218_31228);
                if (temp__4126__auto___31239) {
                  var seq__31218_31240__$1 = temp__4126__auto___31239;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__31218_31240__$1)) {
                    var c__4410__auto___31241 = cljs.core.chunk_first.call(null, seq__31218_31240__$1);
                    var G__31242 = cljs.core.chunk_rest.call(null, seq__31218_31240__$1);
                    var G__31243 = c__4410__auto___31241;
                    var G__31244 = cljs.core.count.call(null, c__4410__auto___31241);
                    var G__31245 = 0;
                    seq__31218_31228 = G__31242;
                    chunk__31219_31229 = G__31243;
                    count__31220_31230 = G__31244;
                    i__31221_31231 = G__31245;
                    continue;
                  } else {
                    var vec__31223_31246 = cljs.core.first.call(null, seq__31218_31240__$1);
                    var k_31247 = cljs.core.nth.call(null, vec__31223_31246, 0, null);
                    var v_31248 = cljs.core.nth.call(null, vec__31223_31246, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_31247)] = clj__GT_js.call(null, v_31248);
                    var G__31249 = cljs.core.next.call(null, seq__31218_31240__$1);
                    var G__31250 = null;
                    var G__31251 = 0;
                    var G__31252 = 0;
                    seq__31218_31228 = G__31249;
                    chunk__31219_31229 = G__31250;
                    count__31220_31230 = G__31251;
                    i__31221_31231 = G__31252;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__31224_31253 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__31225_31254 = null;
              var count__31226_31255 = 0;
              var i__31227_31256 = 0;
              while (true) {
                if (i__31227_31256 < count__31226_31255) {
                  var x_31257__$1 = cljs.core._nth.call(null, chunk__31225_31254, i__31227_31256);
                  arr.push(x_31257__$1);
                  var G__31258 = seq__31224_31253;
                  var G__31259 = chunk__31225_31254;
                  var G__31260 = count__31226_31255;
                  var G__31261 = i__31227_31256 + 1;
                  seq__31224_31253 = G__31258;
                  chunk__31225_31254 = G__31259;
                  count__31226_31255 = G__31260;
                  i__31227_31256 = G__31261;
                  continue;
                } else {
                  var temp__4126__auto___31262 = cljs.core.seq.call(null, seq__31224_31253);
                  if (temp__4126__auto___31262) {
                    var seq__31224_31263__$1 = temp__4126__auto___31262;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__31224_31263__$1)) {
                      var c__4410__auto___31264 = cljs.core.chunk_first.call(null, seq__31224_31263__$1);
                      var G__31265 = cljs.core.chunk_rest.call(null, seq__31224_31263__$1);
                      var G__31266 = c__4410__auto___31264;
                      var G__31267 = cljs.core.count.call(null, c__4410__auto___31264);
                      var G__31268 = 0;
                      seq__31224_31253 = G__31265;
                      chunk__31225_31254 = G__31266;
                      count__31226_31255 = G__31267;
                      i__31227_31256 = G__31268;
                      continue;
                    } else {
                      var x_31269__$1 = cljs.core.first.call(null, seq__31224_31263__$1);
                      arr.push(x_31269__$1);
                      var G__31270 = cljs.core.next.call(null, seq__31224_31263__$1);
                      var G__31271 = null;
                      var G__31272 = 0;
                      var G__31273 = 0;
                      seq__31224_31253 = G__31270;
                      chunk__31225_31254 = G__31271;
                      count__31226_31255 = G__31272;
                      i__31227_31256 = G__31273;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj31275 = {};
  return obj31275;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3628__auto__ = x;
    if (and__3628__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4277__auto__ = x == null ? null : x;
    return function() {
      var or__3640__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__31296__delegate = function(x, opts) {
      if (function() {
        var G__31286 = x;
        if (G__31286) {
          var bit__4304__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3640__auto__ = bit__4304__auto__;
            if (cljs.core.truth_(or__3640__auto__)) {
              return or__3640__auto__;
            } else {
              return G__31286.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__31286.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__31286);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__31286);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__31287 = opts;
          var map__31287__$1 = cljs.core.seq_QMARK_.call(null, map__31287) ? cljs.core.apply.call(null, cljs.core.hash_map, map__31287) : map__31287;
          var keywordize_keys = cljs.core.get.call(null, map__31287__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__31287, map__31287__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__4379__auto__ = function(map__31287, map__31287__$1, keywordize_keys, keyfn) {
                          return function iter__31292(s__31293) {
                            return new cljs.core.LazySeq(null, function(map__31287, map__31287__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__31293__$1 = s__31293;
                                while (true) {
                                  var temp__4126__auto__ = cljs.core.seq.call(null, s__31293__$1);
                                  if (temp__4126__auto__) {
                                    var s__31293__$2 = temp__4126__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__31293__$2)) {
                                      var c__4377__auto__ = cljs.core.chunk_first.call(null, s__31293__$2);
                                      var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                                      var b__31295 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                                      if (function() {
                                        var i__31294 = 0;
                                        while (true) {
                                          if (i__31294 < size__4378__auto__) {
                                            var k = cljs.core._nth.call(null, c__4377__auto__, i__31294);
                                            cljs.core.chunk_append.call(null, b__31295, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__31297 = i__31294 + 1;
                                            i__31294 = G__31297;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__31295), iter__31292.call(null, cljs.core.chunk_rest.call(null, s__31293__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__31295), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__31293__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__31292.call(null, cljs.core.rest.call(null, s__31293__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__31287, map__31287__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__31287, map__31287__$1, keywordize_keys, keyfn);
                        return iter__4379__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      return x__$1;
                    }
                  }
                }
              }
            };
          }(map__31287, map__31287__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__31296 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__31296__delegate.call(this, x, opts);
    };
    G__31296.cljs$lang$maxFixedArity = 1;
    G__31296.cljs$lang$applyTo = function(arglist__31298) {
      var x = cljs.core.first(arglist__31298);
      var opts = cljs.core.rest(arglist__31298);
      return G__31296__delegate(x, opts);
    };
    G__31296.cljs$core$IFn$_invoke$arity$variadic = G__31296__delegate;
    return G__31296;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function() {
      var G__31299__delegate = function(args) {
        var v = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.call(null, f, args);
          cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__31299 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__31299__delegate.call(this, args);
      };
      G__31299.cljs$lang$maxFixedArity = 0;
      G__31299.cljs$lang$applyTo = function(arglist__31300) {
        var args = cljs.core.seq(arglist__31300);
        return G__31299__delegate(args);
      };
      G__31299.cljs$core$IFn$_invoke$arity$variadic = G__31299__delegate;
      return G__31299;
    }();
  }(mem);
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__31301 = ret;
        f = G__31301;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__31302__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__31302 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__31302__delegate.call(this, f, args);
    };
    G__31302.cljs$lang$maxFixedArity = 1;
    G__31302.cljs$lang$applyTo = function(arglist__31303) {
      var f = cljs.core.first(arglist__31303);
      var args = cljs.core.rest(arglist__31303);
      return G__31302__delegate(f, args);
    };
    G__31302.cljs$core$IFn$_invoke$arity$variadic = G__31302__delegate;
    return G__31302;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc_BANG_.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__31304) {
    var f = cljs.core.first(arglist__31304);
    var args = cljs.core.rest(arglist__31304);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3640__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__3640__auto__) {
      return or__3640__auto__;
    } else {
      var or__3640__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3640__auto____$1) {
        return or__3640__auto____$1;
      } else {
        var and__3628__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__3628__auto__) {
          var and__3628__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__3628__auto____$1) {
            var and__3628__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__3628__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__31305 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__31306 = i + 1;
                  ret = G__31305;
                  i = G__31306;
                  continue;
                }
                break;
              }
            } else {
              return and__3628__auto____$2;
            }
          } else {
            return and__3628__auto____$1;
          }
        } else {
          return and__3628__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null)))));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null)))));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__3640__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "already has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "as ancestor");
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error("Cyclic derivation:" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "as ancestor");
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3640__auto__)) {
      return or__3640__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__31307_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__31307_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__31307_SHARP_), cljs.core.second.call(null, p1__31307_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(parentMap, childsParents, newParents, deriv_seq) {
        return function(p1__31308_SHARP_, p2__31309_SHARP_) {
          return cljs.core.apply.call(null, cljs.core.derive, p1__31308_SHARP_, p2__31309_SHARP_);
        };
      }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3640__auto__ = cljs.core.truth_(function() {
    var and__3628__auto__ = xprefs;
    if (cljs.core.truth_(and__3628__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__3628__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3640__auto__)) {
    return or__3640__auto__;
  } else {
    var or__3640__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__31310 = cljs.core.rest.call(null, ps);
          ps = G__31310;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3640__auto____$1)) {
      return or__3640__auto____$1;
    } else {
      var or__3640__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__31311 = cljs.core.rest.call(null, ps);
            ps = G__31311;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3640__auto____$2)) {
        return or__3640__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3640__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__3640__auto__)) {
    return or__3640__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__31314) {
    var vec__31315 = p__31314;
    var k = cljs.core.nth.call(null, vec__31315, 0, null);
    var _ = cljs.core.nth.call(null, vec__31315, 1, null);
    var e = vec__31315;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3640__auto__ = be == null;
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error("Multiple methods in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' match dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val) + " -\x3e " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(k) + " and " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, be2)) + ", and neither is preferred");
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj31317 = {};
  return obj31317;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3628__auto__ = mf;
    if (and__3628__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4277__auto__ = mf == null ? null : mf;
    return function() {
      var or__3640__auto__ = cljs.core._reset[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._reset["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3628__auto__ = mf;
    if (and__3628__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4277__auto__ = mf == null ? null : mf;
    return function() {
      var or__3640__auto__ = cljs.core._add_method[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._add_method["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3628__auto__ = mf;
    if (and__3628__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4277__auto__ = mf == null ? null : mf;
    return function() {
      var or__3640__auto__ = cljs.core._remove_method[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._remove_method["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3628__auto__ = mf;
    if (and__3628__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4277__auto__ = mf == null ? null : mf;
    return function() {
      var or__3640__auto__ = cljs.core._prefer_method[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3628__auto__ = mf;
    if (and__3628__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4277__auto__ = mf == null ? null : mf;
    return function() {
      var or__3640__auto__ = cljs.core._get_method[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._get_method["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3628__auto__ = mf;
    if (and__3628__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4277__auto__ = mf == null ? null : mf;
    return function() {
      var or__3640__auto__ = cljs.core._methods[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._methods["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3628__auto__ = mf;
    if (and__3628__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4277__auto__ = mf == null ? null : mf;
    return function() {
      var or__3640__auto__ = cljs.core._prefers[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._prefers["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function throw_no_method_error(name, dispatch_val) {
  throw new Error("No method in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' for dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4124__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var target_fn = temp__4124__auto__;
    return target_fn;
  } else {
    var temp__4124__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var target_fn = temp__4124__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error("Preference conflict in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.name) + "': " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_y) + " is already preferred to " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_x));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__31319 = null;
  var G__31319__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a);
  };
  var G__31319__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b);
  };
  var G__31319__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c);
  };
  var G__31319__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d);
  };
  var G__31319__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e);
  };
  var G__31319__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f);
  };
  var G__31319__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g);
  };
  var G__31319__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__31319__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__31319__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__31319__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__31319__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__31319__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__31319__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__31319__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__31319__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__31319__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__31319__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__31319__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__31319__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__31319__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__31319 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 2:
        return G__31319__2.call(this, self__, a);
      case 3:
        return G__31319__3.call(this, self__, a, b);
      case 4:
        return G__31319__4.call(this, self__, a, b, c);
      case 5:
        return G__31319__5.call(this, self__, a, b, c, d);
      case 6:
        return G__31319__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__31319__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__31319__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__31319__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__31319__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__31319__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__31319__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__31319__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__31319__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__31319__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__31319__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__31319__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__31319__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__31319__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__31319__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__31319__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__31319__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__31319.cljs$core$IFn$_invoke$arity$2 = G__31319__2;
  G__31319.cljs$core$IFn$_invoke$arity$3 = G__31319__3;
  G__31319.cljs$core$IFn$_invoke$arity$4 = G__31319__4;
  G__31319.cljs$core$IFn$_invoke$arity$5 = G__31319__5;
  G__31319.cljs$core$IFn$_invoke$arity$6 = G__31319__6;
  G__31319.cljs$core$IFn$_invoke$arity$7 = G__31319__7;
  G__31319.cljs$core$IFn$_invoke$arity$8 = G__31319__8;
  G__31319.cljs$core$IFn$_invoke$arity$9 = G__31319__9;
  G__31319.cljs$core$IFn$_invoke$arity$10 = G__31319__10;
  G__31319.cljs$core$IFn$_invoke$arity$11 = G__31319__11;
  G__31319.cljs$core$IFn$_invoke$arity$12 = G__31319__12;
  G__31319.cljs$core$IFn$_invoke$arity$13 = G__31319__13;
  G__31319.cljs$core$IFn$_invoke$arity$14 = G__31319__14;
  G__31319.cljs$core$IFn$_invoke$arity$15 = G__31319__15;
  G__31319.cljs$core$IFn$_invoke$arity$16 = G__31319__16;
  G__31319.cljs$core$IFn$_invoke$arity$17 = G__31319__17;
  G__31319.cljs$core$IFn$_invoke$arity$18 = G__31319__18;
  G__31319.cljs$core$IFn$_invoke$arity$19 = G__31319__19;
  G__31319.cljs$core$IFn$_invoke$arity$20 = G__31319__20;
  G__31319.cljs$core$IFn$_invoke$arity$21 = G__31319__21;
  G__31319.cljs$core$IFn$_invoke$arity$22 = G__31319__22;
  return G__31319;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args31318) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args31318)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, '#uuid "' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.uuid) + '"');
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__4220__auto__, writer__4221__auto__, opts__4222__auto__) {
  return cljs.core._write.call(null, writer__4221__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, 
  "letfn*", "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, 
  null), null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
goog.provide("cljs.looperscript.audio");
goog.require("cljs.core");
cljs.looperscript.audio.log = function() {
  var log__delegate = function(args) {
    return console.log(cljs.core.apply.call(null, cljs.core.str, args));
  };
  var log = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return log__delegate.call(this, args);
  };
  log.cljs$lang$maxFixedArity = 0;
  log.cljs$lang$applyTo = function(arglist__29720) {
    var args = cljs.core.seq(arglist__29720);
    return log__delegate(args);
  };
  log.cljs$core$IFn$_invoke$arity$variadic = log__delegate;
  return log;
}();
cljs.looperscript.audio.ctx = new AudioContext;
cljs.looperscript.audio.drums = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["kick", "snare", "hat", "sidestick", "ride-bell", "ride"], null);
cljs.looperscript.audio.sample_lags = new cljs.core.PersistentArrayMap(null, 6, ["kick", .026, "snare", .0293, "hat", .0267, "sidestick", .0245, "ride-bell", .0395, "ride", .0443], null);
cljs.looperscript.audio.drum_codes = new cljs.core.PersistentArrayMap(null, 6, ["k", "kick", "s", "snare", "h", "hat", "d", "sidestick", "b", "ride-bell", "r", "ride"], null);
cljs.looperscript.audio.buffers = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cljs.looperscript.audio.sample_folder = "/media/webaudio/sample/mp3s/";
cljs.looperscript.audio.on_decode = function on_decode(buffer, fname) {
  cljs.core.swap_BANG_.call(null, cljs.looperscript.audio.buffers, cljs.core.assoc, fname, buffer);
  return console.log("loaded", fname, cljs.core.rand_int.call(null, 99));
};
cljs.looperscript.audio.on_mp3_load = function on_mp3_load(req, fname) {
  return cljs.looperscript.audio.ctx.decodeAudioData(req.response, function(p1__29721_SHARP_) {
    return cljs.looperscript.audio.on_decode.call(null, p1__29721_SHARP_, fname);
  });
};
cljs.looperscript.audio.load_file = function load_file(fname) {
  var req = new XMLHttpRequest;
  var full_name = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.looperscript.audio.sample_folder) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(fname) + ".mp3";
  req.open("GET", full_name);
  req["responseType"] = "arraybuffer";
  req["onload"] = function(req, full_name) {
    return function() {
      return cljs.looperscript.audio.on_mp3_load.call(null, req, fname);
    };
  }(req, full_name);
  return req.send();
};
cljs.looperscript.audio.load_some_drums = function load_some_drums() {
  var seq__29726 = cljs.core.seq.call(null, cljs.looperscript.audio.drums);
  var chunk__29727 = null;
  var count__29728 = 0;
  var i__29729 = 0;
  while (true) {
    if (i__29729 < count__29728) {
      var d = cljs.core._nth.call(null, chunk__29727, i__29729);
      cljs.looperscript.audio.load_file.call(null, d);
      var G__29730 = seq__29726;
      var G__29731 = chunk__29727;
      var G__29732 = count__29728;
      var G__29733 = i__29729 + 1;
      seq__29726 = G__29730;
      chunk__29727 = G__29731;
      count__29728 = G__29732;
      i__29729 = G__29733;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__29726);
      if (temp__4126__auto__) {
        var seq__29726__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__29726__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__29726__$1);
          var G__29734 = cljs.core.chunk_rest.call(null, seq__29726__$1);
          var G__29735 = c__4410__auto__;
          var G__29736 = cljs.core.count.call(null, c__4410__auto__);
          var G__29737 = 0;
          seq__29726 = G__29734;
          chunk__29727 = G__29735;
          count__29728 = G__29736;
          i__29729 = G__29737;
          continue;
        } else {
          var d = cljs.core.first.call(null, seq__29726__$1);
          cljs.looperscript.audio.load_file.call(null, d);
          var G__29738 = cljs.core.next.call(null, seq__29726__$1);
          var G__29739 = null;
          var G__29740 = 0;
          var G__29741 = 0;
          seq__29726 = G__29738;
          chunk__29727 = G__29739;
          count__29728 = G__29740;
          i__29729 = G__29741;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.looperscript.audio.play_sound = function play_sound(fname, start_time, vol, rate) {
  var buf_s = cljs.looperscript.audio.ctx.createBufferSource();
  var gain = cljs.looperscript.audio.ctx.createGain();
  buf_s["buffer"] = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.looperscript.audio.buffers), fname);
  buf_s["playbackRate"]["value"] = rate;
  gain["gain"]["value"] = vol;
  buf_s.connect(gain);
  gain.connect(cljs.looperscript.audio.ctx["destination"]);
  buf_s.start(start_time);
  return buf_s;
};
cljs.looperscript.audio.play_tone = function play_tone(freq, start_time, dur, vol, pan, synth, overtones) {
  var osc = cljs.looperscript.audio.ctx.createOscillator();
  var gain = cljs.looperscript.audio.ctx.createGain();
  osc["type"] = synth;
  osc["frequency"]["value"] = freq;
  gain["gain"]["value"] = .1 * vol;
  osc.connect(gain);
  gain.connect(cljs.looperscript.audio.ctx["destination"]);
  osc.start(start_time);
  osc.stop(start_time + dur);
  return osc;
};
cljs.looperscript.audio.play_filtered_tone = function play_filtered_tone(freq, start_time, dur, vol, pan, filt_freq, synth, overtones) {
  var oscs = function() {
    var iter__4379__auto__ = function iter__29752(s__29753) {
      return new cljs.core.LazySeq(null, function() {
        var s__29753__$1 = s__29753;
        while (true) {
          var temp__4126__auto__ = cljs.core.seq.call(null, s__29753__$1);
          if (temp__4126__auto__) {
            var s__29753__$2 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__29753__$2)) {
              var c__4377__auto__ = cljs.core.chunk_first.call(null, s__29753__$2);
              var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
              var b__29755 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
              if (function() {
                var i__29754 = 0;
                while (true) {
                  if (i__29754 < size__4378__auto__) {
                    var i = cljs.core._nth.call(null, c__4377__auto__, i__29754);
                    cljs.core.chunk_append.call(null, b__29755, cljs.looperscript.audio.ctx.createOscillator());
                    var G__29762 = i__29754 + 1;
                    i__29754 = G__29762;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__29755), iter__29752.call(null, cljs.core.chunk_rest.call(null, s__29753__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__29755), null);
              }
            } else {
              var i = cljs.core.first.call(null, s__29753__$2);
              return cljs.core.cons.call(null, cljs.looperscript.audio.ctx.createOscillator(), iter__29752.call(null, cljs.core.rest.call(null, s__29753__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4379__auto__.call(null, cljs.core.range.call(null, cljs.core.count.call(null, overtones)));
  }();
  var gain = cljs.looperscript.audio.ctx.createGain();
  var q = .25;
  var filter = cljs.looperscript.audio.ctx.createBiquadFilter();
  var panner = cljs.looperscript.audio.ctx.createPanner();
  gain["gain"]["value"] = .1 * vol;
  gain["gain"].linearRampToValueAtTime(.1 * vol, start_time);
  gain["gain"].exponentialRampToValueAtTime(.1 * .1 * vol, start_time + 3);
  filter["frequency"]["value"] = filt_freq;
  filter["Q"]["value"] = q;
  filter["frequency"].exponentialRampToValueAtTime(filt_freq, start_time);
  filter["frequency"].exponentialRampToValueAtTime(1E3, .1 + start_time);
  filter["frequency"].exponentialRampToValueAtTime(300, 1 + start_time);
  panner["panningModel"] = "equalpower";
  panner.setPosition(pan, 0, 0);
  gain.connect(filter);
  filter.connect(panner);
  panner.connect(cljs.looperscript.audio.ctx["destination"]);
  var seq__29756_29763 = cljs.core.seq.call(null, cljs.core.map.call(null, cljs.core.vector, oscs, overtones));
  var chunk__29757_29764 = null;
  var count__29758_29765 = 0;
  var i__29759_29766 = 0;
  while (true) {
    if (i__29759_29766 < count__29758_29765) {
      var vec__29760_29767 = cljs.core._nth.call(null, chunk__29757_29764, i__29759_29766);
      var osc_29768 = cljs.core.nth.call(null, vec__29760_29767, 0, null);
      var o_29769 = cljs.core.nth.call(null, vec__29760_29767, 1, null);
      osc_29768["type"] = synth;
      osc_29768["frequency"]["value"] = o_29769 * freq;
      osc_29768.connect(gain);
      osc_29768.start(start_time);
      osc_29768.stop(start_time + dur);
      var G__29770 = seq__29756_29763;
      var G__29771 = chunk__29757_29764;
      var G__29772 = count__29758_29765;
      var G__29773 = i__29759_29766 + 1;
      seq__29756_29763 = G__29770;
      chunk__29757_29764 = G__29771;
      count__29758_29765 = G__29772;
      i__29759_29766 = G__29773;
      continue;
    } else {
      var temp__4126__auto___29774 = cljs.core.seq.call(null, seq__29756_29763);
      if (temp__4126__auto___29774) {
        var seq__29756_29775__$1 = temp__4126__auto___29774;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__29756_29775__$1)) {
          var c__4410__auto___29776 = cljs.core.chunk_first.call(null, seq__29756_29775__$1);
          var G__29777 = cljs.core.chunk_rest.call(null, seq__29756_29775__$1);
          var G__29778 = c__4410__auto___29776;
          var G__29779 = cljs.core.count.call(null, c__4410__auto___29776);
          var G__29780 = 0;
          seq__29756_29763 = G__29777;
          chunk__29757_29764 = G__29778;
          count__29758_29765 = G__29779;
          i__29759_29766 = G__29780;
          continue;
        } else {
          var vec__29761_29781 = cljs.core.first.call(null, seq__29756_29775__$1);
          var osc_29782 = cljs.core.nth.call(null, vec__29761_29781, 0, null);
          var o_29783 = cljs.core.nth.call(null, vec__29761_29781, 1, null);
          osc_29782["type"] = synth;
          osc_29782["frequency"]["value"] = o_29783 * freq;
          osc_29782.connect(gain);
          osc_29782.start(start_time);
          osc_29782.stop(start_time + dur);
          var G__29784 = cljs.core.next.call(null, seq__29756_29775__$1);
          var G__29785 = null;
          var G__29786 = 0;
          var G__29787 = 0;
          seq__29756_29763 = G__29784;
          chunk__29757_29764 = G__29785;
          count__29758_29765 = G__29786;
          i__29759_29766 = G__29787;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return oscs;
};
goog.provide("cljs.looperscript.start_time");
goog.require("cljs.core");
goog.require("cljs.looperscript.audio");
goog.require("cljs.looperscript.audio");
cljs.looperscript.start_time.current_start_time = cljs.core.atom.call(null, null);
cljs.looperscript.start_time.get_current_start_time = function get_current_start_time() {
  return cljs.core.deref.call(null, cljs.looperscript.start_time.current_start_time);
};
cljs.looperscript.start_time.reset_clock_BANG_ = function() {
  var reset_clock_BANG_ = null;
  var reset_clock_BANG___0 = function() {
    return reset_clock_BANG_.call(null, null);
  };
  var reset_clock_BANG___1 = function(time) {
    return cljs.core.reset_BANG_.call(null, cljs.looperscript.start_time.current_start_time, time);
  };
  reset_clock_BANG_ = function(time) {
    switch(arguments.length) {
      case 0:
        return reset_clock_BANG___0.call(this);
      case 1:
        return reset_clock_BANG___1.call(this, time);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reset_clock_BANG_.cljs$core$IFn$_invoke$arity$0 = reset_clock_BANG___0;
  reset_clock_BANG_.cljs$core$IFn$_invoke$arity$1 = reset_clock_BANG___1;
  return reset_clock_BANG_;
}();
cljs.looperscript.start_time.now = function now() {
  return cljs.looperscript.audio.ctx["currentTime"];
};
goog.provide("cljs.looperscript.interp_rhythms");
goog.require("cljs.core");
cljs.looperscript.interp_rhythms.cumulative = cljs.core.memoize.call(null, function(v) {
  return cljs.core.reductions.call(null, cljs.core._PLUS_, 0, v);
});
cljs.looperscript.interp_rhythms.blend = function blend(a, b, percent) {
  return percent * b + (1 - percent) * a;
};
cljs.looperscript.interp_rhythms.whole_QMARK_ = function whole_QMARK_(n) {
  return cljs.core.mod.call(null, n, 1) === 0;
};
cljs.looperscript.interp_rhythms.ints_nth = cljs.core.memoize.call(null, function(rhythm, n) {
  var cums = cljs.looperscript.interp_rhythms.cumulative.call(null, rhythm);
  var rhythm_len = cljs.core.last.call(null, cums);
  var cnt = cljs.core.count.call(null, rhythm);
  var chorus = n / cnt | 0;
  var chorus_start = rhythm_len * chorus;
  var pos_in_chorus = cljs.core.mod.call(null, n, cnt);
  return cljs.core.nth.call(null, cums, pos_in_chorus) + chorus_start;
});
cljs.looperscript.interp_rhythms.rhythms_interp = function rhythms_interp(rs, n) {
  var r = cljs.core.last.call(null, rs);
  var vec__29789 = !cljs.core.map_QMARK_.call(null, r) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [r, 0], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.get.call(null, r, new cljs.core.Keyword(null, "r", "r", -471384190)), cljs.core.get.call(null, r, new cljs.core.Keyword(null, "offset", "offset", 296498311))], null);
  var r__$1 = cljs.core.nth.call(null, vec__29789, 0, null);
  var offset = cljs.core.nth.call(null, vec__29789, 1, null);
  var n__$1 = n + offset;
  var rem_rs = cljs.core.drop_last.call(null, rs);
  var whole = cljs.looperscript.interp_rhythms.whole_QMARK_.call(null, n__$1);
  var res = cljs.core._EQ_.call(null, cljs.core.count.call(null, rs), 1) ? whole ? cljs.looperscript.interp_rhythms.ints_nth.call(null, r__$1, n__$1) : cljs.looperscript.interp_rhythms.blend.call(null, cljs.looperscript.interp_rhythms.ints_nth.call(null, r__$1, n__$1 | 0), cljs.looperscript.interp_rhythms.ints_nth.call(null, r__$1, (n__$1 | 0) + 1), cljs.core.mod.call(null, n__$1, 1)) : whole ? rhythms_interp.call(null, rem_rs, cljs.looperscript.interp_rhythms.ints_nth.call(null, r__$1, n__$1)) : 
  cljs.looperscript.interp_rhythms.blend.call(null, rhythms_interp.call(null, rem_rs, cljs.looperscript.interp_rhythms.ints_nth.call(null, r__$1, n__$1 | 0)), rhythms_interp.call(null, rem_rs, cljs.looperscript.interp_rhythms.ints_nth.call(null, r__$1, (n__$1 | 0) + 1)), cljs.core.mod.call(null, n__$1, 1));
  return res;
};
cljs.looperscript.interp_rhythms.upper_bound = function upper_bound(f, n) {
  var i = 1;
  while (true) {
    if (f.call(null, i) > n) {
      return i;
    } else {
      var G__29790 = i * 2;
      i = G__29790;
      continue;
    }
    break;
  }
};
cljs.looperscript.interp_rhythms.binary_search = function binary_search(f, n) {
  var l_bound = 0;
  var u_bound = cljs.looperscript.interp_rhythms.upper_bound.call(null, f, n);
  while (true) {
    if (1 >= u_bound - l_bound) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [l_bound, u_bound], null);
    } else {
      var new_i = cljs.looperscript.interp_rhythms.blend.call(null, l_bound, u_bound, .5);
      var new_n = f.call(null, new_i);
      var vec__29792 = new_n > n ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [l_bound, new_i], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new_i, u_bound], null);
      var l_bound__$1 = cljs.core.nth.call(null, vec__29792, 0, null);
      var u_bound__$1 = cljs.core.nth.call(null, vec__29792, 1, null);
      var G__29793 = l_bound__$1;
      var G__29794 = u_bound__$1;
      l_bound = G__29793;
      u_bound = G__29794;
      continue;
    }
    break;
  }
};
cljs.looperscript.interp_rhythms.pos_in_layered_rhythm = function pos_in_layered_rhythm(rs, t) {
  return cljs.looperscript.interp_rhythms.binary_search.call(null, cljs.core.partial.call(null, cljs.looperscript.interp_rhythms.rhythms_interp, rs), t);
};
cljs.looperscript.interp_rhythms.next_hit_of_layered_rhythm = function next_hit_of_layered_rhythm(rs, t) {
  return cljs.looperscript.interp_rhythms.rhythms_interp.call(null, rs, cljs.core.second.call(null, cljs.looperscript.interp_rhythms.pos_in_layered_rhythm.call(null, rs, t)));
};
goog.provide("cljs.looperscript.vector_fns");
goog.require("cljs.core");
goog.require("cljs.looperscript.interp_rhythms");
goog.require("cljs.looperscript.start_time");
goog.require("cljs.looperscript.start_time");
goog.require("cljs.looperscript.interp_rhythms");
cljs.looperscript.vector_fns.log = function() {
  var log__delegate = function(args) {
    return console.log(cljs.core.apply.call(null, cljs.core.str, args));
  };
  var log = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return log__delegate.call(this, args);
  };
  log.cljs$lang$maxFixedArity = 0;
  log.cljs$lang$applyTo = function(arglist__32926) {
    var args = cljs.core.seq(arglist__32926);
    return log__delegate(args);
  };
  log.cljs$core$IFn$_invoke$arity$variadic = log__delegate;
  return log;
}();
cljs.looperscript.vector_fns.shuffle_STAR_ = function shuffle_STAR_(v) {
  return cljs.core.shuffle;
};
cljs.looperscript.vector_fns.range_STAR_ = function() {
  var range_STAR_ = null;
  var range_STAR___1 = function(a) {
    return cljs.core.range.call(null, a + 1);
  };
  var range_STAR___2 = function(a, b) {
    return cljs.core.range.call(null, a, b + 1);
  };
  var range_STAR___3 = function(a, b, c) {
    return cljs.core.range.call(null, a, b + c, c);
  };
  range_STAR_ = function(a, b, c) {
    switch(arguments.length) {
      case 1:
        return range_STAR___1.call(this, a);
      case 2:
        return range_STAR___2.call(this, a, b);
      case 3:
        return range_STAR___3.call(this, a, b, c);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range_STAR_.cljs$core$IFn$_invoke$arity$1 = range_STAR___1;
  range_STAR_.cljs$core$IFn$_invoke$arity$2 = range_STAR___2;
  range_STAR_.cljs$core$IFn$_invoke$arity$3 = range_STAR___3;
  return range_STAR_;
}();
cljs.looperscript.vector_fns.rand_range = function rand_range(floor, ceil) {
  return cljs.core.rand.call(null) * (ceil - floor) + floor;
};
cljs.looperscript.vector_fns.rand_int_STAR_ = function() {
  var rand_int_STAR_ = null;
  var rand_int_STAR___1 = function(b) {
    return cljs.core.rand_int.call(null, b + 1);
  };
  var rand_int_STAR___2 = function(a, b) {
    return a + cljs.core.rand_int.call(null, b - a + 1);
  };
  rand_int_STAR_ = function(a, b) {
    switch(arguments.length) {
      case 1:
        return rand_int_STAR___1.call(this, a);
      case 2:
        return rand_int_STAR___2.call(this, a, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand_int_STAR_.cljs$core$IFn$_invoke$arity$1 = rand_int_STAR___1;
  rand_int_STAR_.cljs$core$IFn$_invoke$arity$2 = rand_int_STAR___2;
  return rand_int_STAR_;
}();
cljs.looperscript.vector_fns.rand_nth_STAR_ = cljs.core.rand_nth;
cljs.looperscript.vector_fns.take_STAR_ = cljs.core.take;
cljs.looperscript.vector_fns.rand_exp_range = function rand_exp_range(floor, ceil, exp) {
  return Math.pow.call(null, cljs.core.rand.call(null), exp) * (ceil - floor) + floor;
};
cljs.looperscript.vector_fns.handle_v_keyword = function handle_v_keyword(n, d) {
  return cljs.core.repeat.call(null, n, d / n);
};
cljs.looperscript.vector_fns.rand_weighted = function() {
  var rand_weighted__delegate = function(v) {
    var vec__32929 = cljs.core.apply.call(null, cljs.core.map, cljs.core.vector, cljs.core.partition.call(null, 2, v));
    var vs = cljs.core.nth.call(null, vec__32929, 0, null);
    var ws = cljs.core.nth.call(null, vec__32929, 1, null);
    var cum_ws = cljs.core.reductions.call(null, cljs.core._PLUS_, 0, ws);
    var sum = cljs.core.last.call(null, cum_ws);
    var r = cljs.core.rand.call(null) * sum;
    return cljs.core.some.call(null, function(vec__32929, vs, ws, cum_ws, sum, r) {
      return function(p1__32927_SHARP_) {
        if (cljs.core.nth.call(null, cum_ws, p1__32927_SHARP_) < r) {
          return cljs.core.nth.call(null, vs, p1__32927_SHARP_);
        } else {
          return null;
        }
      };
    }(vec__32929, vs, ws, cum_ws, sum, r), cljs.core.range.call(null, cljs.core.count.call(null, vs) - 1, -1, -1));
  };
  var rand_weighted = function(var_args) {
    var v = null;
    if (arguments.length > 0) {
      v = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return rand_weighted__delegate.call(this, v);
  };
  rand_weighted.cljs$lang$maxFixedArity = 0;
  rand_weighted.cljs$lang$applyTo = function(arglist__32930) {
    var v = cljs.core.seq(arglist__32930);
    return rand_weighted__delegate(v);
  };
  rand_weighted.cljs$core$IFn$_invoke$arity$variadic = rand_weighted__delegate;
  return rand_weighted;
}();
cljs.looperscript.vector_fns.rand_weighted_either_or = function rand_weighted_either_or(odds, a, b) {
  if (cljs.core.rand.call(null) < odds) {
    return a;
  } else {
    return b;
  }
};
cljs.looperscript.vector_fns.rand_weighted_zip = function rand_weighted_zip(vs, ws) {
  return cljs.looperscript.vector_fns.rand_weighted.call(null, cljs.core.interleave.call(null, vs, ws));
};
cljs.looperscript.vector_fns.rand_hold = function rand_hold(odds_of_change, options) {
  var current_choice = cljs.core.atom.call(null, cljs.core.fn_QMARK_.call(null, options) ? options.call(null) : cljs.core.rand_nth.call(null, options));
  return function(current_choice) {
    return function() {
      if (odds_of_change < cljs.core.rand.call(null)) {
        return cljs.core.deref.call(null, current_choice);
      } else {
        return cljs.core.reset_BANG_.call(null, current_choice, cljs.core.fn_QMARK_.call(null, options) ? options.call(null) : cljs.core.rand_nth.call(null, cljs.core.remove.call(null, function(current_choice) {
          return function(p1__32931_SHARP_) {
            return cljs.core._EQ_.call(null, cljs.core.deref.call(null, current_choice), p1__32931_SHARP_);
          };
        }(current_choice), options)));
      }
    };
  }(current_choice);
};
cljs.looperscript.vector_fns.rand_walk = function rand_walk(max_step, v) {
  var rand_int_range = function(a, b) {
    return a + cljs.core.rand_int.call(null, b - a + 1);
  };
  var max_v = cljs.core.count.call(null, v) - 1;
  var pos = cljs.core.atom.call(null, cljs.core.rand_int.call(null, cljs.core.count.call(null, v)));
  return function(rand_int_range, max_v, pos) {
    return function() {
      return cljs.core.nth.call(null, v, cljs.core.reset_BANG_.call(null, pos, rand_int_range.call(null, function() {
        var x__3947__auto__ = 0;
        var y__3948__auto__ = cljs.core.deref.call(null, pos) - max_step;
        return x__3947__auto__ > y__3948__auto__ ? x__3947__auto__ : y__3948__auto__;
      }(), function() {
        var x__3954__auto__ = max_v;
        var y__3955__auto__ = cljs.core.deref.call(null, pos) + max_step;
        return x__3954__auto__ < y__3955__auto__ ? x__3954__auto__ : y__3955__auto__;
      }())));
    };
  }(rand_int_range, max_v, pos);
};
cljs.looperscript.vector_fns.rand_walk1 = function rand_walk1(max_step, v) {
  var rand_int_range = function(a, b) {
    return a + cljs.core.rand_int.call(null, b - a + 1);
  };
  var max_v = cljs.core.count.call(null, v) - 1;
  var pos = cljs.core.atom.call(null, cljs.core.rand_int.call(null, cljs.core.count.call(null, v)));
  return function(rand_int_range, max_v, pos) {
    return function() {
      return cljs.core.nth.call(null, v, cljs.core.reset_BANG_.call(null, pos, function() {
        while (true) {
          var new_pos = rand_int_range.call(null, function() {
            var x__3947__auto__ = 0;
            var y__3948__auto__ = cljs.core.deref.call(null, pos) - max_step;
            return x__3947__auto__ > y__3948__auto__ ? x__3947__auto__ : y__3948__auto__;
          }(), function() {
            var x__3954__auto__ = max_v;
            var y__3955__auto__ = cljs.core.deref.call(null, pos) + max_step;
            return x__3954__auto__ < y__3955__auto__ ? x__3954__auto__ : y__3955__auto__;
          }());
          if (cljs.core._EQ_.call(null, new_pos, cljs.core.deref.call(null, pos))) {
            continue;
          } else {
            return new_pos;
          }
          break;
        }
      }()));
    };
  }(rand_int_range, max_v, pos);
};
cljs.looperscript.vector_fns.rand_walk2 = function rand_walk2(intervals, v) {
  var rand_int_range = function(a, b) {
    return a + cljs.core.rand_int.call(null, b - a + 1);
  };
  var max_v = cljs.core.count.call(null, v) - 1;
  var pos = cljs.core.atom.call(null, cljs.core.rand_int.call(null, cljs.core.count.call(null, v)));
  return function(rand_int_range, max_v, pos) {
    return function() {
      return cljs.core.nth.call(null, v, cljs.core.reset_BANG_.call(null, pos, function() {
        while (true) {
          var new_pos = cljs.core.rand_nth.call(null, cljs.core.filter.call(null, function(rand_int_range, max_v, pos) {
            return function(p1__32933_SHARP_) {
              return 0 <= p1__32933_SHARP_ && p1__32933_SHARP_ <= max_v;
            };
          }(rand_int_range, max_v, pos), cljs.core.map.call(null, function(rand_int_range, max_v, pos) {
            return function(p1__32932_SHARP_) {
              return p1__32932_SHARP_ + cljs.core.deref.call(null, pos);
            };
          }(rand_int_range, max_v, pos), intervals)));
          if (cljs.core._EQ_.call(null, new_pos, cljs.core.deref.call(null, pos))) {
            continue;
          } else {
            return new_pos;
          }
          break;
        }
      }()));
    };
  }(rand_int_range, max_v, pos);
};
cljs.looperscript.vector_fns.in$ = function in$(t, v) {
  var v__$1 = cljs.core.flatten.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [v], null));
  var factor = t / cljs.core.reduce.call(null, cljs.core._PLUS_, v__$1);
  return cljs.core.map.call(null, function(v__$1, factor) {
    return function(p1__32934_SHARP_) {
      return factor * p1__32934_SHARP_;
    };
  }(v__$1, factor), v__$1);
};
cljs.looperscript.vector_fns.cycle_STAR_ = function cycle_STAR_(v) {
  var pos = cljs.core.atom.call(null, -1);
  var v_len = cljs.core.count.call(null, v);
  return function(pos, v_len) {
    return function() {
      return cljs.core.nth.call(null, v, cljs.core.swap_BANG_.call(null, pos, function(pos, v_len) {
        return function(p1__32935_SHARP_) {
          return cljs.core.mod.call(null, p1__32935_SHARP_ + 1, v_len);
        };
      }(pos, v_len)));
    };
  }(pos, v_len);
};
cljs.looperscript.vector_fns.fill_time = function fill_time(t, v) {
  var previous_total = cljs.core.atom.call(null, null);
  var total = cljs.core.atom.call(null, 0);
  return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.take_while.call(null, function(previous_total, total) {
    return function(p1__32936_SHARP_) {
      cljs.core.reset_BANG_.call(null, previous_total, cljs.core.deref.call(null, total));
      return cljs.core.swap_BANG_.call(null, total, cljs.core._PLUS_, p1__32936_SHARP_) < t;
    };
  }(previous_total, total), cljs.core.fn_QMARK_.call(null, v) ? cljs.core.repeatedly.call(null, v) : cljs.core.cycle.call(null, cljs.core.flatten.call(null, v)))), t - cljs.core.deref.call(null, previous_total));
};
cljs.looperscript.vector_fns.once = function once(x) {
  var called_QMARK_ = cljs.core.atom.call(null, false);
  return function(called_QMARK_) {
    return function() {
      if (cljs.core.not.call(null, cljs.core.deref.call(null, called_QMARK_))) {
        cljs.core.reset_BANG_.call(null, called_QMARK_, true);
        return x;
      } else {
        return null;
      }
    };
  }(called_QMARK_);
};
cljs.looperscript.vector_fns.flatten_STAR_ = function() {
  var flatten_STAR___delegate = function(args) {
    return cljs.core.flatten.call(null, args);
  };
  var flatten_STAR_ = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return flatten_STAR___delegate.call(this, args);
  };
  flatten_STAR_.cljs$lang$maxFixedArity = 0;
  flatten_STAR_.cljs$lang$applyTo = function(arglist__32937) {
    var args = cljs.core.seq(arglist__32937);
    return flatten_STAR___delegate(args);
  };
  flatten_STAR_.cljs$core$IFn$_invoke$arity$variadic = flatten_STAR___delegate;
  return flatten_STAR_;
}();
cljs.looperscript.vector_fns.dethunk = function dethunk(x) {
  if (cljs.core.fn_QMARK_.call(null, x)) {
    return dethunk.call(null, x.call(null));
  } else {
    return x;
  }
};
cljs.looperscript.vector_fns.nth_STAR_ = cljs.core.nth;
cljs.looperscript.vector_fns.scale_nth = function scale_nth(scale, degree) {
  return 12 * Math.floor.call(null, degree / cljs.core.count.call(null, scale)) + cljs.core.nth.call(null, scale, cljs.core.mod.call(null, degree, cljs.core.count.call(null, scale)));
};
cljs.looperscript.vector_fns.scale_pattern = function scale_pattern(scale, pattern, degrees) {
  var iter__4379__auto__ = function iter__32944(s__32945) {
    return new cljs.core.LazySeq(null, function() {
      var s__32945__$1 = s__32945;
      while (true) {
        var temp__4126__auto__ = cljs.core.seq.call(null, s__32945__$1);
        if (temp__4126__auto__) {
          var xs__4624__auto__ = temp__4126__auto__;
          var d = cljs.core.first.call(null, xs__4624__auto__);
          var iterys__4375__auto__ = function(s__32945__$1, d, xs__4624__auto__, temp__4126__auto__) {
            return function iter__32946(s__32947) {
              return new cljs.core.LazySeq(null, function(s__32945__$1, d, xs__4624__auto__, temp__4126__auto__) {
                return function() {
                  var s__32947__$1 = s__32947;
                  while (true) {
                    var temp__4126__auto____$1 = cljs.core.seq.call(null, s__32947__$1);
                    if (temp__4126__auto____$1) {
                      var s__32947__$2 = temp__4126__auto____$1;
                      if (cljs.core.chunked_seq_QMARK_.call(null, s__32947__$2)) {
                        var c__4377__auto__ = cljs.core.chunk_first.call(null, s__32947__$2);
                        var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                        var b__32949 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                        if (function() {
                          var i__32948 = 0;
                          while (true) {
                            if (i__32948 < size__4378__auto__) {
                              var p = cljs.core._nth.call(null, c__4377__auto__, i__32948);
                              cljs.core.chunk_append.call(null, b__32949, cljs.looperscript.vector_fns.scale_nth.call(null, scale, d + p));
                              var G__32950 = i__32948 + 1;
                              i__32948 = G__32950;
                              continue;
                            } else {
                              return true;
                            }
                            break;
                          }
                        }()) {
                          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__32949), iter__32946.call(null, cljs.core.chunk_rest.call(null, s__32947__$2)));
                        } else {
                          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__32949), null);
                        }
                      } else {
                        var p = cljs.core.first.call(null, s__32947__$2);
                        return cljs.core.cons.call(null, cljs.looperscript.vector_fns.scale_nth.call(null, scale, d + p), iter__32946.call(null, cljs.core.rest.call(null, s__32947__$2)));
                      }
                    } else {
                      return null;
                    }
                    break;
                  }
                };
              }(s__32945__$1, d, xs__4624__auto__, temp__4126__auto__), null, null);
            };
          }(s__32945__$1, d, xs__4624__auto__, temp__4126__auto__);
          var fs__4376__auto__ = cljs.core.seq.call(null, iterys__4375__auto__.call(null, pattern));
          if (fs__4376__auto__) {
            return cljs.core.concat.call(null, fs__4376__auto__, iter__32944.call(null, cljs.core.rest.call(null, s__32945__$1)));
          } else {
            var G__32951 = cljs.core.rest.call(null, s__32945__$1);
            s__32945__$1 = G__32951;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    }, null, null);
  };
  return iter__4379__auto__.call(null, degrees);
};
cljs.looperscript.vector_fns.transpose_scale = function transpose_scale(degree, scale) {
  return cljs.core.sort.call(null, cljs.core.map.call(null, function(p1__32952_SHARP_) {
    return cljs.core.mod.call(null, p1__32952_SHARP_ + degree, 12);
  }, scale));
};
cljs.looperscript.vector_fns.scale_range = function scale_range(floor, ceil, scale) {
  var a = (floor / 12 | 0) - 1;
  var b = ceil / 12 + 1 + 1;
  return cljs.core.filter.call(null, function(a, b) {
    return function(p1__32953_SHARP_) {
      return floor <= p1__32953_SHARP_ && p1__32953_SHARP_ <= ceil;
    };
  }(a, b), function() {
    var iter__4379__auto__ = function(a, b) {
      return function iter__32960(s__32961) {
        return new cljs.core.LazySeq(null, function(a, b) {
          return function() {
            var s__32961__$1 = s__32961;
            while (true) {
              var temp__4126__auto__ = cljs.core.seq.call(null, s__32961__$1);
              if (temp__4126__auto__) {
                var xs__4624__auto__ = temp__4126__auto__;
                var o = cljs.core.first.call(null, xs__4624__auto__);
                var iterys__4375__auto__ = function(s__32961__$1, o, xs__4624__auto__, temp__4126__auto__, a, b) {
                  return function iter__32962(s__32963) {
                    return new cljs.core.LazySeq(null, function(s__32961__$1, o, xs__4624__auto__, temp__4126__auto__, a, b) {
                      return function() {
                        var s__32963__$1 = s__32963;
                        while (true) {
                          var temp__4126__auto____$1 = cljs.core.seq.call(null, s__32963__$1);
                          if (temp__4126__auto____$1) {
                            var s__32963__$2 = temp__4126__auto____$1;
                            if (cljs.core.chunked_seq_QMARK_.call(null, s__32963__$2)) {
                              var c__4377__auto__ = cljs.core.chunk_first.call(null, s__32963__$2);
                              var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                              var b__32965 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                              if (function() {
                                var i__32964 = 0;
                                while (true) {
                                  if (i__32964 < size__4378__auto__) {
                                    var s = cljs.core._nth.call(null, c__4377__auto__, i__32964);
                                    cljs.core.chunk_append.call(null, b__32965, 12 * o + s);
                                    var G__32966 = i__32964 + 1;
                                    i__32964 = G__32966;
                                    continue;
                                  } else {
                                    return true;
                                  }
                                  break;
                                }
                              }()) {
                                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__32965), iter__32962.call(null, cljs.core.chunk_rest.call(null, s__32963__$2)));
                              } else {
                                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__32965), null);
                              }
                            } else {
                              var s = cljs.core.first.call(null, s__32963__$2);
                              return cljs.core.cons.call(null, 12 * o + s, iter__32962.call(null, cljs.core.rest.call(null, s__32963__$2)));
                            }
                          } else {
                            return null;
                          }
                          break;
                        }
                      };
                    }(s__32961__$1, o, xs__4624__auto__, temp__4126__auto__, a, b), null, null);
                  };
                }(s__32961__$1, o, xs__4624__auto__, temp__4126__auto__, a, b);
                var fs__4376__auto__ = cljs.core.seq.call(null, iterys__4375__auto__.call(null, scale));
                if (fs__4376__auto__) {
                  return cljs.core.concat.call(null, fs__4376__auto__, iter__32960.call(null, cljs.core.rest.call(null, s__32961__$1)));
                } else {
                  var G__32967 = cljs.core.rest.call(null, s__32961__$1);
                  s__32961__$1 = G__32967;
                  continue;
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(a, b), null, null);
      };
    }(a, b);
    return iter__4379__auto__.call(null, cljs.core.range.call(null, a, b));
  }());
};
cljs.looperscript.vector_fns.scale_range_sweep = function scale_range_sweep(floor, ceil, scale) {
  var sr = cljs.core.vec.call(null, cljs.looperscript.vector_fns.scale_range.call(null, floor, ceil, scale));
  return cljs.core.into.call(null, sr, cljs.core.drop_last.call(null, cljs.core.rest.call(null, cljs.core.reverse.call(null, sr))));
};
cljs.looperscript.vector_fns.mild_shuffle = function mild_shuffle(degree, col) {
  return cljs.core.map.call(null, cljs.core.second, cljs.core.sort.call(null, cljs.core.map_indexed.call(null, function(idx, n) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [idx + cljs.core.rand_int.call(null, degree - 1), n], null);
  }, col)));
};
cljs.looperscript.vector_fns.log_STAR_ = function log_STAR_(v) {
  cljs.looperscript.vector_fns.log.call(null, v);
  return v;
};
cljs.looperscript.vector_fns.say = function say(x) {
  window["speechSynthesis"].speak(new SpeechSynthesisUtterance(x));
  return x;
};
cljs.looperscript.vector_fns.memo_STAR_ = function memo_STAR_(id, f) {
  var memo_fn = function(cnt) {
    return f.call(null);
  };
  var counts = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return null;
};
cljs.looperscript.vector_fns.bass_fret = function bass_fret(string, fret) {
  return-17 + fret + -5 * (string - 1);
};
cljs.looperscript.vector_fns.user_vars = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cljs.looperscript.vector_fns.set_user_var = function set_user_var(k, v) {
  return cljs.core.swap_BANG_.call(null, cljs.looperscript.vector_fns.user_vars, cljs.core.assoc, k, v);
};
cljs.looperscript.vector_fns.user = function user(k, default$) {
  return function() {
    return cljs.core.get.call(null, cljs.core.deref.call(null, cljs.looperscript.vector_fns.user_vars), k, default$);
  };
};
cljs.looperscript.vector_fns.test_mod = function test_mod(n) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "modifier-fn", "modifier-fn", -1624543303), function(x) {
    return x * n;
  }], null);
};
cljs.looperscript.vector_fns.over_mod = function() {
  var over_mod__delegate = function(layers) {
    cljs.looperscript.vector_fns.log.call(null, new cljs.core.Keyword(null, "over-mod", "over-mod", -523435366), layers);
    var last_res = cljs.core.atom.call(null, 0);
    var cum_time_in = cljs.core.atom.call(null, 0);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "modifier-fn", "modifier-fn", -1624543303), function(last_res, cum_time_in) {
      return function(time_in) {
        var new_res = cljs.looperscript.interp_rhythms.rhythms_interp.call(null, layers, cljs.core.swap_BANG_.call(null, cum_time_in, cljs.core._PLUS_, time_in));
        var res_diff = new_res - cljs.core.deref.call(null, last_res);
        cljs.core.reset_BANG_.call(null, last_res, new_res);
        return res_diff;
      };
    }(last_res, cum_time_in)], null);
  };
  var over_mod = function(var_args) {
    var layers = null;
    if (arguments.length > 0) {
      layers = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return over_mod__delegate.call(this, layers);
  };
  over_mod.cljs$lang$maxFixedArity = 0;
  over_mod.cljs$lang$applyTo = function(arglist__32968) {
    var layers = cljs.core.seq(arglist__32968);
    return over_mod__delegate(layers);
  };
  over_mod.cljs$core$IFn$_invoke$arity$variadic = over_mod__delegate;
  return over_mod;
}();
cljs.looperscript.vector_fns.insert_randomly = function insert_randomly(v, x) {
  var pos = cljs.core.rand_int.call(null, cljs.core.count.call(null, v) + 1);
  return cljs.core.into.call(null, cljs.core.into.call(null, cljs.core.vec.call(null, cljs.core.take.call(null, pos, v)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null)), cljs.core.drop.call(null, pos, v));
};
cljs.looperscript.vector_fns.grow = function grow(odds, new_note_fn) {
  var accum = cljs.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
  return function(accum) {
    return function() {
      if (cljs.core.empty_QMARK_.call(null, cljs.core.deref.call(null, accum)) || cljs.core.rand.call(null) < odds) {
        return cljs.core.swap_BANG_.call(null, accum, cljs.looperscript.vector_fns.insert_randomly, new_note_fn.call(null));
      } else {
        return cljs.core.deref.call(null, accum);
      }
    };
  }(accum);
};
cljs.looperscript.vector_fns.step = function step(start_val, increment) {
  var val = cljs.core.atom.call(null, start_val);
  return function(val) {
    return function() {
      var res = cljs.core.deref.call(null, val);
      cljs.core.swap_BANG_.call(null, val, cljs.core._PLUS_, increment);
      return res;
    };
  }(val);
};
cljs.looperscript.vector_fns.time = function time() {
  return cljs.looperscript.start_time.now.call(null) - cljs.looperscript.start_time.get_current_start_time.call(null);
};
cljs.looperscript.vector_fns.add_dethunk_test = function() {
  var add_dethunk_test__delegate = function(args) {
    var dethunk = function dethunk(x) {
      if (cljs.core.fn_QMARK_.call(null, x)) {
        return dethunk.call(null, x.call(null));
      } else {
        return x;
      }
    };
    return cljs.core.apply.call(null, cljs.core._PLUS_, cljs.core.map.call(null, dethunk, args));
  };
  var add_dethunk_test = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return add_dethunk_test__delegate.call(this, args);
  };
  add_dethunk_test.cljs$lang$maxFixedArity = 0;
  add_dethunk_test.cljs$lang$applyTo = function(arglist__32969) {
    var args = cljs.core.seq(arglist__32969);
    return add_dethunk_test__delegate(args);
  };
  add_dethunk_test.cljs$core$IFn$_invoke$arity$variadic = add_dethunk_test__delegate;
  return add_dethunk_test;
}();
cljs.looperscript.vector_fns.variable_map = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cljs.looperscript.vector_fns.reset_variables_BANG_ = function reset_variables_BANG_() {
  return cljs.core.reset_BANG_.call(null, cljs.looperscript.vector_fns.variable_map, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.looperscript.vector_fns.define_variable = function define_variable(s, x) {
  cljs.core.swap_BANG_.call(null, cljs.looperscript.vector_fns.variable_map, cljs.core.assoc, s, x);
  return null;
};
cljs.looperscript.vector_fns.get_variable = function get_variable(s) {
  return cljs.core.get.call(null, cljs.core.deref.call(null, cljs.looperscript.vector_fns.variable_map), s);
};
cljs.looperscript.vector_fns.cache = function cache(f) {
  var output = cljs.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
  var output_pos = cljs.core.atom.call(null, 0);
  var key_positions = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(output, output_pos, key_positions) {
    return function(key) {
      if (!cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, key_positions), key)) {
        cljs.core.swap_BANG_.call(null, key_positions, cljs.core.assoc, key, 0);
      } else {
      }
      var key_pos = cljs.core.get.call(null, cljs.core.deref.call(null, key_positions), key);
      if (cljs.core._EQ_.call(null, key_pos, cljs.core.deref.call(null, output_pos))) {
        cljs.core.swap_BANG_.call(null, output, cljs.core.conj, f.call(null));
        cljs.core.swap_BANG_.call(null, output_pos, cljs.core.inc);
      } else {
      }
      var res = cljs.core.nth.call(null, cljs.core.deref.call(null, output), key_pos);
      cljs.core.swap_BANG_.call(null, key_positions, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [key], null), cljs.core.inc);
      return res;
    };
  }(output, output_pos, key_positions);
};
cljs.looperscript.vector_fns.set_rand_seed = function() {
  var set_rand_seed__delegate = function(args) {
    if (cljs.core.empty_QMARK_.call(null, args)) {
      Math.seedrandom();
    } else {
      Math.seedrandom(args);
    }
    return null;
  };
  var set_rand_seed = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return set_rand_seed__delegate.call(this, args);
  };
  set_rand_seed.cljs$lang$maxFixedArity = 0;
  set_rand_seed.cljs$lang$applyTo = function(arglist__32970) {
    var args = cljs.core.seq(arglist__32970);
    return set_rand_seed__delegate(args);
  };
  set_rand_seed.cljs$core$IFn$_invoke$arity$variadic = set_rand_seed__delegate;
  return set_rand_seed;
}();
cljs.looperscript.vector_fns.plus = function() {
  var plus__delegate = function(args) {
    return cljs.core.apply.call(null, cljs.core._PLUS_, args);
  };
  var plus = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return plus__delegate.call(this, args);
  };
  plus.cljs$lang$maxFixedArity = 0;
  plus.cljs$lang$applyTo = function(arglist__32971) {
    var args = cljs.core.seq(arglist__32971);
    return plus__delegate(args);
  };
  plus.cljs$core$IFn$_invoke$arity$variadic = plus__delegate;
  return plus;
}();
cljs.looperscript.vector_fns.sum = function() {
  var sum__delegate = function(args) {
    return cljs.core.apply.call(null, cljs.core._PLUS_, cljs.core.flatten.call(null, args));
  };
  var sum = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sum__delegate.call(this, args);
  };
  sum.cljs$lang$maxFixedArity = 0;
  sum.cljs$lang$applyTo = function(arglist__32972) {
    var args = cljs.core.seq(arglist__32972);
    return sum__delegate(args);
  };
  sum.cljs$core$IFn$_invoke$arity$variadic = sum__delegate;
  return sum;
}();
cljs.looperscript.vector_fns.times = function() {
  var times__delegate = function(args) {
    return cljs.core.apply.call(null, cljs.core._STAR_, args);
  };
  var times = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return times__delegate.call(this, args);
  };
  times.cljs$lang$maxFixedArity = 0;
  times.cljs$lang$applyTo = function(arglist__32973) {
    var args = cljs.core.seq(arglist__32973);
    return times__delegate(args);
  };
  times.cljs$core$IFn$_invoke$arity$variadic = times__delegate;
  return times;
}();
cljs.looperscript.vector_fns.pow_STAR_ = function pow_STAR_(a, b) {
  return Math.pow.call(null, a, b);
};
cljs.looperscript.vector_fns.sin = function sin(n) {
  return Math.sin.call(null, n);
};
cljs.looperscript.vector_fns.cos = function cos(n) {
  return Math.cos.call(null, n);
};
cljs.looperscript.vector_fns.floor = function floor(n) {
  return Math.floor.call(null, n);
};
cljs.looperscript.vector_fns.vec_fns = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "say", "say", 504378016), new cljs.core.Keyword(null, "shuffle", "shuffle", 1261412160), new cljs.core.Keyword(null, "repeatedly", "repeatedly", -440567070), new cljs.core.Keyword(null, "get", "get", 1683182755), new cljs.core.Keyword(null, "dethunk", "dethunk", -54386077), new cljs.core.Keyword(null, "interleave", "interleave", -1475043421), new cljs.core.Keyword(null, "cos", "cos", 1201758276), 
new cljs.core.Keyword(null, "cycle", "cycle", 710365284), new cljs.core.Keyword(null, "walk", "walk", 32921637), new cljs.core.Keyword(null, "call", "call", -519999866), new cljs.core.Keyword(null, "rand", "rand", 908504774), new cljs.core.Keyword(null, "mod", "mod", -130487320), new cljs.core.Keyword(null, "pow", "pow", -1444004567), new cljs.core.Keyword(null, "weight1", "weight1", 584068617), new cljs.core.Keyword(null, "fill", "fill", 883462889), new cljs.core.Keyword(null, "time", "time", 1385887882), 
new cljs.core.Keyword(null, "times", "times", 1671571467), new cljs.core.Keyword(null, "nth", "nth", -111321973), new cljs.core.Keyword(null, "xx", "xx", -1542203733), new cljs.core.Keyword(null, "walk2", "walk2", 1167361132), new cljs.core.Keyword(null, "scale-range-sweep", "scale-range-sweep", 255716877), new cljs.core.Keyword(null, "vector", "vector", 1902966158), new cljs.core.Keyword(null, "seed", "seed", 68613327), new cljs.core.Keyword(null, "walk1", "walk1", -824993744), new cljs.core.Keyword(null, 
"scale-range", "scale-range", -910552944), new cljs.core.Keyword(null, "flatten", "flatten", 1212802416), new cljs.core.Keyword(null, "grow", "grow", -524118895), new cljs.core.Keyword(null, "rand-hold", "rand-hold", 1221211378), new cljs.core.Keyword(null, "cache", "cache", -1237023054), new cljs.core.Keyword(null, "weight2", "weight2", -1471744749), new cljs.core.Keyword(null, "weight", "weight", -1262796205), new cljs.core.Keyword(null, "rand-range", "rand-range", -1792793772), new cljs.core.Keyword(null, 
"once", "once", -262568523), new cljs.core.Keyword(null, "plus", "plus", 211540661), new cljs.core.Keyword(null, "transpose-scale", "transpose-scale", -213992459), new cljs.core.Keyword(null, "sin", "sin", 80907862), new cljs.core.Keyword(null, "rand-exp-range", "rand-exp-range", 1927268695), new cljs.core.Keyword(null, "def", "def", -1043430536), new cljs.core.Keyword(null, "x", "x", 2099068185), new cljs.core.Keyword(null, "over", "over", 192553051), new cljs.core.Keyword(null, "add", "add", 235287739), 
new cljs.core.Keyword(null, "mild-shuffle", "mild-shuffle", -1737984709), new cljs.core.Keyword(null, "bass-fret", "bass-fret", -264582661), new cljs.core.Keyword(null, "rand-int", "rand-int", -2135543684), new cljs.core.Keyword(null, "step", "step", 1288888124), new cljs.core.Keyword(null, "take", "take", -768884900), new cljs.core.Keyword(null, "log", "log", -1595516004), new cljs.core.Keyword(null, "user", "user", 1532431356), new cljs.core.Keyword(null, "floor", "floor", 1882041021), new cljs.core.Keyword(null, 
"sort", "sort", 953465918), new cljs.core.Keyword(null, "sum", "sum", 136986814), new cljs.core.Keyword(null, "range", "range", 1639692286), new cljs.core.Keyword(null, "in", "in", -1531184865), new cljs.core.Keyword(null, "pattern", "pattern", 242135423)], [cljs.looperscript.vector_fns.say, cljs.core.shuffle, cljs.core.repeatedly, cljs.looperscript.vector_fns.get_variable, cljs.looperscript.vector_fns.dethunk, cljs.core.interleave, cljs.looperscript.vector_fns.cos, cljs.looperscript.vector_fns.cycle_STAR_, 
cljs.looperscript.vector_fns.rand_walk, cljs.looperscript.vector_fns.dethunk, cljs.looperscript.vector_fns.rand_nth_STAR_, cljs.core.mod, cljs.looperscript.vector_fns.pow_STAR_, cljs.looperscript.vector_fns.rand_weighted_either_or, cljs.looperscript.vector_fns.fill_time, cljs.looperscript.vector_fns.time, cljs.looperscript.vector_fns.times, cljs.looperscript.vector_fns.nth_STAR_, cljs.core.repeatedly, cljs.looperscript.vector_fns.rand_walk2, cljs.looperscript.vector_fns.scale_range_sweep, cljs.core.vector, 
cljs.looperscript.vector_fns.set_rand_seed, cljs.looperscript.vector_fns.rand_walk1, cljs.looperscript.vector_fns.scale_range, cljs.looperscript.vector_fns.flatten_STAR_, cljs.looperscript.vector_fns.grow, cljs.looperscript.vector_fns.rand_hold, cljs.looperscript.vector_fns.cache, cljs.looperscript.vector_fns.rand_weighted_zip, cljs.looperscript.vector_fns.rand_weighted, cljs.looperscript.vector_fns.rand_range, cljs.looperscript.vector_fns.once, cljs.looperscript.vector_fns.plus, cljs.looperscript.vector_fns.transpose_scale, 
cljs.looperscript.vector_fns.sin, cljs.looperscript.vector_fns.rand_exp_range, cljs.looperscript.vector_fns.define_variable, cljs.core.repeat, cljs.looperscript.vector_fns.over_mod, cljs.looperscript.vector_fns.add_dethunk_test, cljs.looperscript.vector_fns.mild_shuffle, cljs.looperscript.vector_fns.bass_fret, cljs.looperscript.vector_fns.rand_int_STAR_, cljs.looperscript.vector_fns.step, cljs.looperscript.vector_fns.take_STAR_, cljs.looperscript.vector_fns.log_STAR_, cljs.looperscript.vector_fns.user, 
cljs.looperscript.vector_fns.floor, cljs.core.sort, cljs.looperscript.vector_fns.sum, cljs.looperscript.vector_fns.range_STAR_, cljs.looperscript.vector_fns.in$, cljs.looperscript.vector_fns.scale_pattern]);
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera") || goog.labs.userAgent.util.matchUserAgent("OPR");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS") && !goog.labs.userAgent.util.matchUserAgent("Android");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return goog.labs.userAgent.browser.getOperaVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.labs.userAgent.browser.getOperaVersion_ = function(userAgent) {
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgent);
  var lastTuple = goog.array.peek(versionTuples);
  if (lastTuple[0] == "OPR" && lastTuple[1]) {
    return lastTuple[1];
  }
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.getVersionFromTuples_ = function(versionTuples) {
  goog.asserts.assert(versionTuples.length > 2, "Couldn't extract version tuple from user agent string");
  return versionTuples[2] && versionTuples[2][1] ? versionTuples[2][1] : "";
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit");
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = tuples[1];
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.userAgent");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"] || null;
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
};
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD;
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && goog.string.contains(ua, "Android");
  goog.userAgent.detectedIPhone_ = !!ua && goog.string.contains(ua, "iPhone");
  goog.userAgent.detectedIPad_ = !!ua && goog.string.contains(ua, "iPad");
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    return goog.isFunction(operaVersion) ? operaVersion() : operaVersion;
  }
  if (goog.userAgent.GECKO) {
    re = /rv\:([^\);]+)(\)|;)/;
  } else {
    if (goog.userAgent.IE) {
      re = /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.WEBKIT) {
        re = /WebKit\/(\S+)/;
      }
    }
  }
  if (re) {
    var arr = re.exec(goog.userAgent.getUserAgentString());
    version = arr ? arr[1] : "";
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || goog.userAgent.IE && goog.userAgent.isDocumentModeOrHigher(9) || goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9.1"), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || goog.userAgent.OPERA || goog.userAgent.WEBKIT, 
INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE, LEGACY_IE_RANGES:goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)};
goog.provide("instaparse.auto_flatten_seq");
goog.require("cljs.core");
instaparse.auto_flatten_seq.threshold = 32;
instaparse.auto_flatten_seq.hash_ordered_coll_without_mix = function() {
  var hash_ordered_coll_without_mix = null;
  var hash_ordered_coll_without_mix__1 = function(coll) {
    return hash_ordered_coll_without_mix.call(null, 1, coll);
  };
  var hash_ordered_coll_without_mix__2 = function(existing_unmixed_hash, coll) {
    var unmixed_hash = existing_unmixed_hash;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (!(coll__$1 == null)) {
        var G__31860 = cljs.core.imul.call(null, 31, unmixed_hash) + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
        var G__31861 = cljs.core.next.call(null, coll__$1);
        unmixed_hash = G__31860;
        coll__$1 = G__31861;
        continue;
      } else {
        return unmixed_hash;
      }
      break;
    }
  };
  hash_ordered_coll_without_mix = function(existing_unmixed_hash, coll) {
    switch(arguments.length) {
      case 1:
        return hash_ordered_coll_without_mix__1.call(this, existing_unmixed_hash);
      case 2:
        return hash_ordered_coll_without_mix__2.call(this, existing_unmixed_hash, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$1 = hash_ordered_coll_without_mix__1;
  hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$2 = hash_ordered_coll_without_mix__2;
  return hash_ordered_coll_without_mix;
}();
instaparse.auto_flatten_seq.hash_conj = function hash_conj(unmixed_hash, item) {
  return cljs.core.imul.call(null, 31, unmixed_hash) + cljs.core.hash.call(null, item) | 0;
};
instaparse.auto_flatten_seq.expt = function expt(base, pow) {
  if (pow === 0) {
    return 1;
  } else {
    var n = pow | 0;
    var y = 1 | 0;
    var z = base | 0;
    while (true) {
      var t = cljs.core.even_QMARK_.call(null, n);
      var n__$1 = cljs.core.quot.call(null, n, 2);
      if (t) {
        var G__31862 = n__$1;
        var G__31863 = y;
        var G__31864 = cljs.core.imul.call(null, z, z);
        n = G__31862;
        y = G__31863;
        z = G__31864;
        continue;
      } else {
        if (n__$1 === 0) {
          return cljs.core.imul.call(null, z, y);
        } else {
          var G__31865 = n__$1;
          var G__31866 = cljs.core.imul.call(null, z, y);
          var G__31867 = cljs.core.imul.call(null, z, z);
          n = G__31865;
          y = G__31866;
          z = G__31867;
          continue;
        }
      }
      break;
    }
  }
};
instaparse.auto_flatten_seq.hash_cat = function hash_cat(v1, v2) {
  var c = cljs.core.count.call(null, v2);
  var e = instaparse.auto_flatten_seq.expt.call(null, 31, c) | 0;
  return(cljs.core.imul.call(null, e, v1.premix_hashcode) | 0) + (v2.premix_hashcode - e);
};
instaparse.auto_flatten_seq.delve = function delve(v, index) {
  var v__$1 = cljs.core.get_in.call(null, v, index);
  var index__$1 = index;
  while (true) {
    if (cljs.core.truth_(instaparse.auto_flatten_seq.afs_QMARK_.call(null, v__$1))) {
      var G__31868 = cljs.core.get.call(null, v__$1, 0);
      var G__31869 = cljs.core.conj.call(null, index__$1, 0);
      v__$1 = G__31868;
      index__$1 = G__31869;
      continue;
    } else {
      return index__$1;
    }
    break;
  }
};
instaparse.auto_flatten_seq.advance = function advance(v, index) {
  while (true) {
    if (cljs.core._EQ_.call(null, cljs.core.count.call(null, index), 1)) {
      if (cljs.core.peek.call(null, index) < instaparse.auto_flatten_seq.true_count.call(null, v) - 1) {
        return instaparse.auto_flatten_seq.delve.call(null, v, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.peek.call(null, index) + 1], null));
      } else {
        return null;
      }
    } else {
      if (cljs.core.peek.call(null, index) < instaparse.auto_flatten_seq.true_count.call(null, cljs.core.get_in.call(null, v, cljs.core.pop.call(null, index))) - 1) {
        return instaparse.auto_flatten_seq.delve.call(null, v, cljs.core.conj.call(null, cljs.core.pop.call(null, index), cljs.core.peek.call(null, index) + 1));
      } else {
        var G__31870 = v;
        var G__31871 = cljs.core.pop.call(null, index);
        v = G__31870;
        index = G__31871;
        continue;
      }
    }
    break;
  }
};
instaparse.auto_flatten_seq.flat_seq = function() {
  var flat_seq = null;
  var flat_seq__1 = function(v) {
    if (cljs.core.count.call(null, v) > 0) {
      return flat_seq.call(null, v, instaparse.auto_flatten_seq.delve.call(null, v, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [0], null)));
    } else {
      return null;
    }
  };
  var flat_seq__2 = function(v, index) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, cljs.core.get_in.call(null, v, index), function() {
        var temp__4126__auto__ = instaparse.auto_flatten_seq.advance.call(null, v, index);
        if (cljs.core.truth_(temp__4126__auto__)) {
          var next_index = temp__4126__auto__;
          return flat_seq.call(null, v, next_index);
        } else {
          return null;
        }
      }());
    }, null, null);
  };
  flat_seq = function(v, index) {
    switch(arguments.length) {
      case 1:
        return flat_seq__1.call(this, v);
      case 2:
        return flat_seq__2.call(this, v, index);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  flat_seq.cljs$core$IFn$_invoke$arity$1 = flat_seq__1;
  flat_seq.cljs$core$IFn$_invoke$arity$2 = flat_seq__2;
  return flat_seq;
}();
instaparse.auto_flatten_seq.ConjFlat = function() {
  var obj31873 = {};
  return obj31873;
}();
instaparse.auto_flatten_seq.conj_flat = function conj_flat(self, obj) {
  if (function() {
    var and__3628__auto__ = self;
    if (and__3628__auto__) {
      return self.instaparse$auto_flatten_seq$ConjFlat$conj_flat$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return self.instaparse$auto_flatten_seq$ConjFlat$conj_flat$arity$2(self, obj);
  } else {
    var x__4277__auto__ = self == null ? null : self;
    return function() {
      var or__3640__auto__ = instaparse.auto_flatten_seq.conj_flat[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = instaparse.auto_flatten_seq.conj_flat["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ConjFlat.conj-flat", self);
        }
      }
    }().call(null, self, obj);
  }
};
instaparse.auto_flatten_seq.cached_QMARK_ = function cached_QMARK_(self) {
  if (function() {
    var and__3628__auto__ = self;
    if (and__3628__auto__) {
      return self.instaparse$auto_flatten_seq$ConjFlat$cached_QMARK_$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return self.instaparse$auto_flatten_seq$ConjFlat$cached_QMARK_$arity$1(self);
  } else {
    var x__4277__auto__ = self == null ? null : self;
    return function() {
      var or__3640__auto__ = instaparse.auto_flatten_seq.cached_QMARK_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = instaparse.auto_flatten_seq.cached_QMARK_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ConjFlat.cached?", self);
        }
      }
    }().call(null, self);
  }
};
instaparse.auto_flatten_seq.AutoFlattenSeq = function(v, premix_hashcode, hashcode, cnt, dirty, cached_seq) {
  this.v = v;
  this.premix_hashcode = premix_hashcode;
  this.hashcode = hashcode;
  this.cnt = cnt;
  this.dirty = dirty;
  this.cached_seq = cached_seq;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850950;
};
instaparse.auto_flatten_seq.AutoFlattenSeq.cljs$lang$type = true;
instaparse.auto_flatten_seq.AutoFlattenSeq.cljs$lang$ctorStr = "instaparse.auto-flatten-seq/AutoFlattenSeq";
instaparse.auto_flatten_seq.AutoFlattenSeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "instaparse.auto-flatten-seq/AutoFlattenSeq");
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ILookup$_lookup$arity$2 = function(self, key) {
  var self__ = this;
  var self__$1 = this;
  return self__.v.cljs$core$ILookup$_lookup$arity$2(null, key);
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ILookup$_lookup$arity$3 = function(self, key, not_found) {
  var self__ = this;
  var self__$1 = this;
  return self__.v.cljs$core$ILookup$_lookup$arity$3(null, key, not_found);
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.meta.call(null, self__.v);
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$INext$_next$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.next.call(null, cljs.core.seq.call(null, self__$1));
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return self__.cnt;
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return self__.hashcode;
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(self, other) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core._EQ_.call(null, self__.hashcode, cljs.core.hash.call(null, other)) && cljs.core._EQ_.call(null, self__.cnt, cljs.core.count.call(null, other)) && (cljs.core._EQ_.call(null, self__.cnt, 0) || cljs.core._EQ_.call(null, cljs.core.seq.call(null, self__$1), other));
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.with_meta.call(null, instaparse.auto_flatten_seq.EMPTY, cljs.core.meta.call(null, self__$1));
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.first.call(null, cljs.core.seq.call(null, self__$1));
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, self__$1));
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  if (cljs.core.truth_(self__.cached_seq)) {
    return self__.cached_seq;
  } else {
    self__.cached_seq = self__.dirty ? instaparse.auto_flatten_seq.flat_seq.call(null, self__.v) : cljs.core.seq.call(null, self__.v);
    return self__.cached_seq;
  }
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(self, metamap) {
  var self__ = this;
  var self__$1 = this;
  return new instaparse.auto_flatten_seq.AutoFlattenSeq(cljs.core.with_meta.call(null, self__.v, metamap), self__.premix_hashcode, self__.hashcode, self__.cnt, self__.dirty, null);
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.instaparse$auto_flatten_seq$ConjFlat$ = true;
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.instaparse$auto_flatten_seq$ConjFlat$conj_flat$arity$2 = function(self, obj) {
  var self__ = this;
  var self__$1 = this;
  if (obj == null) {
    return self__$1;
  } else {
    if (cljs.core.truth_(instaparse.auto_flatten_seq.afs_QMARK_.call(null, obj))) {
      if (self__.cnt === 0) {
        return obj;
      } else {
        if (cljs.core.count.call(null, obj) <= instaparse.auto_flatten_seq.threshold) {
          var phc = instaparse.auto_flatten_seq.hash_cat.call(null, self__$1, obj);
          var new_cnt = self__.cnt + cljs.core.count.call(null, obj);
          return new instaparse.auto_flatten_seq.AutoFlattenSeq(cljs.core.into.call(null, self__.v, obj), phc, cljs.core.mix_collection_hash.call(null, phc, new_cnt), new_cnt, function() {
            var or__3640__auto__ = self__.dirty;
            if (or__3640__auto__) {
              return or__3640__auto__;
            } else {
              return obj.dirty;
            }
          }(), null);
        } else {
          var phc = instaparse.auto_flatten_seq.hash_cat.call(null, self__$1, obj);
          var new_cnt = self__.cnt + cljs.core.count.call(null, obj);
          return new instaparse.auto_flatten_seq.AutoFlattenSeq(cljs.core.conj.call(null, self__.v, obj), phc, cljs.core.mix_collection_hash.call(null, phc, new_cnt), new_cnt, true, null);
        }
      }
    } else {
      var phc = instaparse.auto_flatten_seq.hash_conj.call(null, self__.premix_hashcode, obj);
      var new_cnt = self__.cnt + 1;
      return new instaparse.auto_flatten_seq.AutoFlattenSeq(cljs.core.conj.call(null, self__.v, obj), phc, cljs.core.mix_collection_hash.call(null, phc, new_cnt), new_cnt, self__.dirty, null);
    }
  }
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.instaparse$auto_flatten_seq$ConjFlat$cached_QMARK_$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return self__.cached_seq;
};
instaparse.auto_flatten_seq.__GT_AutoFlattenSeq = function __GT_AutoFlattenSeq(v, premix_hashcode, hashcode, cnt, dirty, cached_seq) {
  return new instaparse.auto_flatten_seq.AutoFlattenSeq(v, premix_hashcode, hashcode, cnt, dirty, cached_seq);
};
instaparse.auto_flatten_seq.auto_flatten_seq = function auto_flatten_seq(v) {
  var v__$1 = cljs.core.vec.call(null, v);
  var c = cljs.core.count.call(null, v__$1);
  var unmixed_hash = instaparse.auto_flatten_seq.hash_ordered_coll_without_mix.call(null, v__$1);
  return new instaparse.auto_flatten_seq.AutoFlattenSeq(v__$1, unmixed_hash, cljs.core.mix_collection_hash.call(null, unmixed_hash, c), c, false, null);
};
instaparse.auto_flatten_seq.EMPTY = instaparse.auto_flatten_seq.auto_flatten_seq.call(null, cljs.core.PersistentVector.EMPTY);
instaparse.auto_flatten_seq.afs_QMARK_ = function afs_QMARK_(s) {
  return s instanceof instaparse.auto_flatten_seq.AutoFlattenSeq;
};
instaparse.auto_flatten_seq.true_count = function true_count(v) {
  if (instaparse.auto_flatten_seq.afs_QMARK_.call(null, v)) {
    return cljs.core.count.call(null, v.v);
  } else {
    return cljs.core.count.call(null, v);
  }
};
instaparse.auto_flatten_seq.flat_vec_helper = function flat_vec_helper(acc, v) {
  while (true) {
    var temp__4124__auto__ = cljs.core.seq.call(null, v);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      var fst = cljs.core.first.call(null, v);
      if (instaparse.auto_flatten_seq.afs_QMARK_.call(null, fst)) {
        var G__31874 = flat_vec_helper.call(null, acc, fst);
        var G__31875 = cljs.core.next.call(null, v);
        acc = G__31874;
        v = G__31875;
        continue;
      } else {
        var G__31876 = cljs.core.conj_BANG_.call(null, acc, fst);
        var G__31877 = cljs.core.next.call(null, v);
        acc = G__31876;
        v = G__31877;
        continue;
      }
    } else {
      return acc;
    }
    break;
  }
};
instaparse.auto_flatten_seq.flat_vec = function flat_vec(v) {
  return cljs.core.persistent_BANG_.call(null, instaparse.auto_flatten_seq.flat_vec_helper.call(null, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), v));
};
instaparse.auto_flatten_seq.GetVec = function() {
  var obj31879 = {};
  return obj31879;
}();
instaparse.auto_flatten_seq.get_vec = function get_vec(self) {
  if (function() {
    var and__3628__auto__ = self;
    if (and__3628__auto__) {
      return self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(self);
  } else {
    var x__4277__auto__ = self == null ? null : self;
    return function() {
      var or__3640__auto__ = instaparse.auto_flatten_seq.get_vec[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = instaparse.auto_flatten_seq.get_vec["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "GetVec.get-vec", self);
        }
      }
    }().call(null, self);
  }
};
instaparse.auto_flatten_seq.FlattenOnDemandVector = function(v, hashcode, cnt, flat) {
  this.v = v;
  this.hashcode = hashcode;
  this.cnt = cnt;
  this.flat = flat;
  this.cljs$lang$protocol_mask$partition0$ = 150364959;
  this.cljs$lang$protocol_mask$partition1$ = 2048;
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.cljs$lang$type = true;
instaparse.auto_flatten_seq.FlattenOnDemandVector.cljs$lang$ctorStr = "instaparse.auto-flatten-seq/FlattenOnDemandVector";
instaparse.auto_flatten_seq.FlattenOnDemandVector.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "instaparse.auto-flatten-seq/FlattenOnDemandVector");
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.toString = function() {
  var self__ = this;
  var self = this;
  return cljs.core.pr_str_STAR_.call(null, self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null));
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(self, key) {
  var self__ = this;
  var self__$1 = this;
  return instaparse.auto_flatten_seq.get_vec.call(null, self__$1).cljs$core$ILookup$_lookup$arity$2(null, key);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(self, key, not_found) {
  var self__ = this;
  var self__$1 = this;
  return instaparse.auto_flatten_seq.get_vec.call(null, self__$1).cljs$core$ILookup$_lookup$arity$3(null, key, not_found);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.instaparse$auto_flatten_seq$GetVec$ = true;
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  if (cljs.core.not.call(null, cljs.core.deref.call(null, self__.flat))) {
    cljs.core.swap_BANG_.call(null, self__.flat, function(self__$1) {
      return function(_) {
        return cljs.core.with_meta.call(null, instaparse.auto_flatten_seq.flat_vec.call(null, cljs.core.deref.call(null, self__.v)), cljs.core.meta.call(null, cljs.core.deref.call(null, self__.v)));
      };
    }(self__$1));
    cljs.core.swap_BANG_.call(null, self__.v, function(self__$1) {
      return function(_) {
        return null;
      };
    }(self__$1));
  } else {
  }
  return cljs.core.deref.call(null, self__.flat);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(self, f, init) {
  var self__ = this;
  var self__$1 = this;
  return instaparse.auto_flatten_seq.get_vec.call(null, self__$1).cljs$core$IKVReduce$_kv_reduce$arity$3(null, f, init);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(self, i) {
  var self__ = this;
  var self__$1 = this;
  return instaparse.auto_flatten_seq.get_vec.call(null, self__$1).cljs$core$IIndexed$_nth$arity$2(null, i);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(self, i, not_found) {
  var self__ = this;
  var self__$1 = this;
  return instaparse.auto_flatten_seq.get_vec.call(null, self__$1).cljs$core$IIndexed$_nth$arity$3(null, i, not_found);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(self, i, val) {
  var self__ = this;
  var self__$1 = this;
  return instaparse.auto_flatten_seq.get_vec.call(null, self__$1).cljs$core$IVector$_assoc_n$arity$3(null, i, val);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  if (cljs.core.truth_(cljs.core.deref.call(null, self__.flat))) {
    return cljs.core.meta.call(null, cljs.core.deref.call(null, self__.flat));
  } else {
    return cljs.core.meta.call(null, cljs.core.deref.call(null, self__.v));
  }
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ICounted$_count$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return self__.cnt;
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IStack$_peek$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return instaparse.auto_flatten_seq.get_vec.call(null, self__$1).cljs$core$IStack$_peek$arity$1(null);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IStack$_pop$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return instaparse.auto_flatten_seq.get_vec.call(null, self__$1).cljs$core$IStack$_pop$arity$1(null);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.rseq.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1));
  } else {
    return null;
  }
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IHash$_hash$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return self__.hashcode;
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(self, other) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core._EQ_.call(null, self__.hashcode, cljs.core.hash.call(null, other)) && cljs.core._EQ_.call(null, self__.cnt, cljs.core.count.call(null, other)) && cljs.core._EQ_.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1), other);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.with_meta.call(null, instaparse.auto_flatten_seq.EMPTY, cljs.core.meta.call(null, self__$1));
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(self, i, val) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.assoc.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1), i, val);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(self, k) {
  var self__ = this;
  var self__$1 = this;
  return instaparse.auto_flatten_seq.get_vec.call(null, self__$1).cljs$core$IAssociative$_contains_key_QMARK_$arity$2(null, k);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.seq.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1));
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(self, metamap) {
  var self__ = this;
  var self__$1 = this;
  if (cljs.core.truth_(cljs.core.deref.call(null, self__.flat))) {
    return new instaparse.auto_flatten_seq.FlattenOnDemandVector(cljs.core.atom.call(null, cljs.core.deref.call(null, self__.v)), self__.hashcode, self__.cnt, cljs.core.atom.call(null, cljs.core.with_meta.call(null, cljs.core.deref.call(null, self__.flat), metamap)));
  } else {
    return new instaparse.auto_flatten_seq.FlattenOnDemandVector(cljs.core.atom.call(null, cljs.core.with_meta.call(null, cljs.core.deref.call(null, self__.v), metamap)), self__.hashcode, self__.cnt, cljs.core.atom.call(null, cljs.core.deref.call(null, self__.flat)));
  }
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(self, obj) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.conj.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1), obj);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.call = function() {
  var G__31881 = null;
  var G__31881__2 = function(self__, arg) {
    var self__ = this;
    var self____$1 = this;
    var self = self____$1;
    return self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null).cljs$core$IFn$_invoke$arity$2(null, arg);
  };
  var G__31881__3 = function(self__, arg, not_found) {
    var self__ = this;
    var self____$1 = this;
    var self = self____$1;
    return self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null).cljs$core$IFn$_invoke$arity$3(null, arg, not_found);
  };
  G__31881 = function(self__, arg, not_found) {
    switch(arguments.length) {
      case 2:
        return G__31881__2.call(this, self__, arg);
      case 3:
        return G__31881__3.call(this, self__, arg, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__31881.cljs$core$IFn$_invoke$arity$2 = G__31881__2;
  G__31881.cljs$core$IFn$_invoke$arity$3 = G__31881__3;
  return G__31881;
}();
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.apply = function(self__, args31880) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args31880)));
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(arg) {
  var self__ = this;
  var self = this;
  return self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null).cljs$core$IFn$_invoke$arity$2(null, arg);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(arg, not_found) {
  var self__ = this;
  var self = this;
  return self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null).cljs$core$IFn$_invoke$arity$3(null, arg, not_found);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(self, that) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core._compare.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1), that);
};
instaparse.auto_flatten_seq.__GT_FlattenOnDemandVector = function __GT_FlattenOnDemandVector(v, hashcode, cnt, flat) {
  return new instaparse.auto_flatten_seq.FlattenOnDemandVector(v, hashcode, cnt, flat);
};
instaparse.auto_flatten_seq.convert_afs_to_vec = function convert_afs_to_vec(afs) {
  if (cljs.core.truth_(afs.dirty)) {
    if (cljs.core.truth_(instaparse.auto_flatten_seq.cached_QMARK_.call(null, afs))) {
      return cljs.core.vec.call(null, cljs.core.seq.call(null, afs));
    } else {
      return new instaparse.auto_flatten_seq.FlattenOnDemandVector(cljs.core.atom.call(null, afs.v), afs.hashcode, afs.cnt, cljs.core.atom.call(null, null));
    }
  } else {
    return afs.v;
  }
};
goog.provide("instaparse.reduction");
goog.require("cljs.core");
goog.require("instaparse.auto_flatten_seq");
goog.require("instaparse.auto_flatten_seq");
instaparse.reduction.singleton_QMARK_ = function singleton_QMARK_(s) {
  return cljs.core.seq.call(null, s) && cljs.core.not.call(null, cljs.core.next.call(null, s));
};
instaparse.reduction.red = function red(parser, f) {
  return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "red", "red", -969428204), f);
};
instaparse.reduction.raw_non_terminal_reduction = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "reduction-type", "reduction-type", -488293450), new cljs.core.Keyword(null, "raw", "raw", 1604651272)], null);
instaparse.reduction.HiccupNonTerminalReduction = function HiccupNonTerminalReduction(key) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "reduction-type", "reduction-type", -488293450), new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), new cljs.core.Keyword(null, "key", "key", -1516042587), key], null);
};
instaparse.reduction.EnliveNonTerminalReduction = function EnliveNonTerminalReduction(key) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "reduction-type", "reduction-type", -488293450), new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), new cljs.core.Keyword(null, "key", "key", -1516042587), key], null);
};
instaparse.reduction.reduction_types = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), instaparse.reduction.HiccupNonTerminalReduction, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), instaparse.reduction.EnliveNonTerminalReduction], null);
instaparse.reduction.node_builders = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), function(tag, item) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), tag, new cljs.core.Keyword(null, "content", "content", 15833224), cljs.core._conj.call(null, cljs.core.List.EMPTY, item)], null);
}, new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), function(tag, item) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag, item], null);
}], null);
instaparse.reduction.standard_non_terminal_reduction = new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238);
instaparse.reduction.apply_reduction = function apply_reduction(f, result) {
  var G__32294 = (new cljs.core.Keyword(null, "reduction-type", "reduction-type", -488293450)).cljs$core$IFn$_invoke$arity$1(f) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "reduction-type", "reduction-type", -488293450)).cljs$core$IFn$_invoke$arity$1(f).fqn : null;
  switch(G__32294) {
    case "enlive":
      var content = instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.EMPTY, result);
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), (new cljs.core.Keyword(null, "key", "key", -1516042587)).cljs$core$IFn$_invoke$arity$1(f), new cljs.core.Keyword(null, "content", "content", 15833224), cljs.core.count.call(null, content) === 0 ? null : content], null);
      break;
    case "hiccup":
      return instaparse.auto_flatten_seq.convert_afs_to_vec.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.auto_flatten_seq.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "key", "key", -1516042587)).cljs$core$IFn$_invoke$arity$1(f)], null)), result));
      break;
    case "raw":
      return instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.EMPTY, result);
      break;
    default:
      return f.call(null, result);
  }
};
instaparse.reduction.apply_standard_reductions = function() {
  var apply_standard_reductions = null;
  var apply_standard_reductions__1 = function(grammar) {
    return apply_standard_reductions.call(null, instaparse.reduction.standard_non_terminal_reduction, grammar);
  };
  var apply_standard_reductions__2 = function(reduction_type, grammar) {
    var temp__4124__auto__ = instaparse.reduction.reduction_types.call(null, reduction_type);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var reduction = temp__4124__auto__;
      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
        var iter__4379__auto__ = function(reduction, temp__4124__auto__) {
          return function iter__32304(s__32305) {
            return new cljs.core.LazySeq(null, function(reduction, temp__4124__auto__) {
              return function() {
                var s__32305__$1 = s__32305;
                while (true) {
                  var temp__4126__auto__ = cljs.core.seq.call(null, s__32305__$1);
                  if (temp__4126__auto__) {
                    var s__32305__$2 = temp__4126__auto__;
                    if (cljs.core.chunked_seq_QMARK_.call(null, s__32305__$2)) {
                      var c__4377__auto__ = cljs.core.chunk_first.call(null, s__32305__$2);
                      var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                      var b__32307 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                      if (function() {
                        var i__32306 = 0;
                        while (true) {
                          if (i__32306 < size__4378__auto__) {
                            var vec__32310 = cljs.core._nth.call(null, c__4377__auto__, i__32306);
                            var k = cljs.core.nth.call(null, vec__32310, 0, null);
                            var v = cljs.core.nth.call(null, vec__32310, 1, null);
                            cljs.core.chunk_append.call(null, b__32307, cljs.core.truth_((new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(v)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.assoc.call(null, v, new cljs.core.Keyword(null, "red", "red", -969428204), reduction.call(null, k))], null));
                            var G__32312 = i__32306 + 1;
                            i__32306 = G__32312;
                            continue;
                          } else {
                            return true;
                          }
                          break;
                        }
                      }()) {
                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__32307), iter__32304.call(null, cljs.core.chunk_rest.call(null, s__32305__$2)));
                      } else {
                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__32307), null);
                      }
                    } else {
                      var vec__32311 = cljs.core.first.call(null, s__32305__$2);
                      var k = cljs.core.nth.call(null, vec__32311, 0, null);
                      var v = cljs.core.nth.call(null, vec__32311, 1, null);
                      return cljs.core.cons.call(null, cljs.core.truth_((new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(v)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.assoc.call(null, v, new cljs.core.Keyword(null, "red", "red", -969428204), reduction.call(null, k))], null), iter__32304.call(null, cljs.core.rest.call(null, 
                      s__32305__$2)));
                    }
                  } else {
                    return null;
                  }
                  break;
                }
              };
            }(reduction, temp__4124__auto__), null, null);
          };
        }(reduction, temp__4124__auto__);
        return iter__4379__auto__.call(null, grammar);
      }());
    } else {
      throw "Invalid output format" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(reduction_type) + ". Use :enlive or :hiccup.";
    }
  };
  apply_standard_reductions = function(reduction_type, grammar) {
    switch(arguments.length) {
      case 1:
        return apply_standard_reductions__1.call(this, reduction_type);
      case 2:
        return apply_standard_reductions__2.call(this, reduction_type, grammar);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply_standard_reductions.cljs$core$IFn$_invoke$arity$1 = apply_standard_reductions__1;
  apply_standard_reductions.cljs$core$IFn$_invoke$arity$2 = apply_standard_reductions__2;
  return apply_standard_reductions;
}();
goog.provide("instaparse.combinators_source");
goog.require("cljs.core");
goog.require("instaparse.reduction");
goog.require("instaparse.reduction");
instaparse.combinators_source.Epsilon = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "epsilon", "epsilon", -730158570)], null);
instaparse.combinators_source.opt = function opt(parser) {
  if (cljs.core._EQ_.call(null, parser, instaparse.combinators_source.Epsilon)) {
    return instaparse.combinators_source.Epsilon;
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "opt", "opt", -794706369), new cljs.core.Keyword(null, "parser", "parser", -1543495310), parser], null);
  }
};
instaparse.combinators_source.plus = function plus(parser) {
  if (cljs.core._EQ_.call(null, parser, instaparse.combinators_source.Epsilon)) {
    return instaparse.combinators_source.Epsilon;
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "plus", "plus", 211540661), new cljs.core.Keyword(null, "parser", "parser", -1543495310), parser], null);
  }
};
instaparse.combinators_source.star = function star(parser) {
  if (cljs.core._EQ_.call(null, parser, instaparse.combinators_source.Epsilon)) {
    return instaparse.combinators_source.Epsilon;
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "star", "star", 279424429), new cljs.core.Keyword(null, "parser", "parser", -1543495310), parser], null);
  }
};
instaparse.combinators_source.rep = function rep(m, n, parser) {
  if (m <= n) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c\x3d", "\x3c\x3d", 1244895369, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null)))));
  }
  if (cljs.core._EQ_.call(null, parser, instaparse.combinators_source.Epsilon)) {
    return instaparse.combinators_source.Epsilon;
  } else {
    return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "rep", "rep", -1226820564), new cljs.core.Keyword(null, "parser", "parser", -1543495310), parser, new cljs.core.Keyword(null, "min", "min", 444991522), m, new cljs.core.Keyword(null, "max", "max", 61366548), n], null);
  }
};
instaparse.combinators_source.alt = function() {
  var alt__delegate = function(parsers) {
    if (cljs.core.every_QMARK_.call(null, cljs.core.partial.call(null, cljs.core._EQ_, instaparse.combinators_source.Epsilon), parsers)) {
      return instaparse.combinators_source.Epsilon;
    } else {
      if (instaparse.reduction.singleton_QMARK_.call(null, parsers)) {
        return cljs.core.first.call(null, parsers);
      } else {
        return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "alt", "alt", -3214426), new cljs.core.Keyword(null, "parsers", "parsers", -804353827), parsers], null);
      }
    }
  };
  var alt = function(var_args) {
    var parsers = null;
    if (arguments.length > 0) {
      parsers = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return alt__delegate.call(this, parsers);
  };
  alt.cljs$lang$maxFixedArity = 0;
  alt.cljs$lang$applyTo = function(arglist__32350) {
    var parsers = cljs.core.seq(arglist__32350);
    return alt__delegate(parsers);
  };
  alt.cljs$core$IFn$_invoke$arity$variadic = alt__delegate;
  return alt;
}();
instaparse.combinators_source.ord2 = function ord2(parser1, parser2) {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "ord", "ord", 1142548323), new cljs.core.Keyword(null, "parser1", "parser1", -439601422), parser1, new cljs.core.Keyword(null, "parser2", "parser2", 1013754688), parser2], null);
};
instaparse.combinators_source.ord = function() {
  var ord = null;
  var ord__0 = function() {
    return instaparse.combinators_source.Epsilon;
  };
  var ord__2 = function() {
    var G__32351__delegate = function(parser1, parsers) {
      var parsers__$1 = cljs.core._EQ_.call(null, parser1, instaparse.combinators_source.Epsilon) ? cljs.core.remove.call(null, cljs.core.PersistentHashSet.fromArray([instaparse.combinators_source.Epsilon], true), parsers) : parsers;
      if (cljs.core.seq.call(null, parsers__$1)) {
        return instaparse.combinators_source.ord2.call(null, parser1, cljs.core.apply.call(null, ord, parsers__$1));
      } else {
        return parser1;
      }
    };
    var G__32351 = function(parser1, var_args) {
      var parsers = null;
      if (arguments.length > 1) {
        parsers = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__32351__delegate.call(this, parser1, parsers);
    };
    G__32351.cljs$lang$maxFixedArity = 1;
    G__32351.cljs$lang$applyTo = function(arglist__32352) {
      var parser1 = cljs.core.first(arglist__32352);
      var parsers = cljs.core.rest(arglist__32352);
      return G__32351__delegate(parser1, parsers);
    };
    G__32351.cljs$core$IFn$_invoke$arity$variadic = G__32351__delegate;
    return G__32351;
  }();
  ord = function(parser1, var_args) {
    var parsers = var_args;
    switch(arguments.length) {
      case 0:
        return ord__0.call(this);
      default:
        return ord__2.cljs$core$IFn$_invoke$arity$variadic(parser1, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ord.cljs$lang$maxFixedArity = 1;
  ord.cljs$lang$applyTo = ord__2.cljs$lang$applyTo;
  ord.cljs$core$IFn$_invoke$arity$0 = ord__0;
  ord.cljs$core$IFn$_invoke$arity$variadic = ord__2.cljs$core$IFn$_invoke$arity$variadic;
  return ord;
}();
instaparse.combinators_source.cat = function() {
  var cat__delegate = function(parsers) {
    if (cljs.core.every_QMARK_.call(null, cljs.core.partial.call(null, cljs.core._EQ_, instaparse.combinators_source.Epsilon), parsers)) {
      return instaparse.combinators_source.Epsilon;
    } else {
      var parsers__$1 = cljs.core.remove.call(null, cljs.core.PersistentHashSet.fromArray([instaparse.combinators_source.Epsilon], true), parsers);
      if (instaparse.reduction.singleton_QMARK_.call(null, parsers__$1)) {
        return cljs.core.first.call(null, parsers__$1);
      } else {
        return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "cat", "cat", -1457810207), new cljs.core.Keyword(null, "parsers", "parsers", -804353827), parsers__$1], null);
      }
    }
  };
  var cat = function(var_args) {
    var parsers = null;
    if (arguments.length > 0) {
      parsers = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cat__delegate.call(this, parsers);
  };
  cat.cljs$lang$maxFixedArity = 0;
  cat.cljs$lang$applyTo = function(arglist__32353) {
    var parsers = cljs.core.seq(arglist__32353);
    return cat__delegate(parsers);
  };
  cat.cljs$core$IFn$_invoke$arity$variadic = cat__delegate;
  return cat;
}();
instaparse.combinators_source.string = function string(s) {
  if (cljs.core._EQ_.call(null, s, "")) {
    return instaparse.combinators_source.Epsilon;
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "string", "string", -1989541586), new cljs.core.Keyword(null, "string", "string", -1989541586), s], null);
  }
};
instaparse.combinators_source.string_ci = function string_ci(s) {
  if (cljs.core._EQ_.call(null, s, "")) {
    return instaparse.combinators_source.Epsilon;
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "string-ci", "string-ci", 374631805), new cljs.core.Keyword(null, "string", "string", -1989541586), s], null);
  }
};
instaparse.combinators_source.regexp__GT_str = function regexp__GT_str(r) {
  if (cljs.core.regexp_QMARK_.call(null, r)) {
    var s = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(r);
    return cljs.core.subs.call(null, s, 1, cljs.core.count.call(null, s) - 1);
  } else {
    return r;
  }
};
instaparse.combinators_source.regexp = function regexp(r) {
  var s = "^" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.combinators_source.regexp__GT_str.call(null, r));
  if (cljs.core._EQ_.call(null, s, "^")) {
    return instaparse.combinators_source.Epsilon;
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "regexp", "regexp", -541372782), new cljs.core.Keyword(null, "regexp", "regexp", -541372782), cljs.core.re_pattern.call(null, s)], null);
  }
};
instaparse.combinators_source.nt = function nt(s) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "nt", "nt", -835425781), new cljs.core.Keyword(null, "keyword", "keyword", 811389747), s], null);
};
instaparse.combinators_source.look = function look(parser) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "look", "look", -539441433), new cljs.core.Keyword(null, "parser", "parser", -1543495310), parser], null);
};
instaparse.combinators_source.neg = function neg(parser) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "neg", "neg", 1800032960), new cljs.core.Keyword(null, "parser", "parser", -1543495310), parser], null);
};
instaparse.combinators_source.hide = function hide(parser) {
  return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "hide", "hide", -596913169), true);
};
instaparse.combinators_source.hide_tag = function hide_tag(parser) {
  return instaparse.reduction.red.call(null, parser, instaparse.reduction.raw_non_terminal_reduction);
};
instaparse.combinators_source.hidden_tag_QMARK_ = function hidden_tag_QMARK_(parser) {
  return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser), instaparse.reduction.raw_non_terminal_reduction);
};
instaparse.combinators_source.unhide_content = function unhide_content(parser) {
  var parser__$1 = cljs.core.truth_((new cljs.core.Keyword(null, "hide", "hide", -596913169)).cljs$core$IFn$_invoke$arity$1(parser)) ? cljs.core.dissoc.call(null, parser, new cljs.core.Keyword(null, "hide", "hide", -596913169)) : parser;
  if (cljs.core.truth_((new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser__$1))) {
    return cljs.core.assoc.call(null, parser__$1, new cljs.core.Keyword(null, "parser", "parser", -1543495310), unhide_content.call(null, (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser__$1)));
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(parser__$1))) {
      return cljs.core.assoc.call(null, parser__$1, new cljs.core.Keyword(null, "parsers", "parsers", -804353827), cljs.core.map.call(null, unhide_content, (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(parser__$1)));
    } else {
      if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser__$1), new cljs.core.Keyword(null, "ord", "ord", 1142548323))) {
        return cljs.core.assoc.call(null, parser__$1, new cljs.core.Keyword(null, "parser1", "parser1", -439601422), unhide_content.call(null, (new cljs.core.Keyword(null, "parser1", "parser1", -439601422)).cljs$core$IFn$_invoke$arity$1(parser__$1)), new cljs.core.Keyword(null, "parser2", "parser2", 1013754688), unhide_content.call(null, (new cljs.core.Keyword(null, "parser2", "parser2", 1013754688)).cljs$core$IFn$_invoke$arity$1(parser__$1)));
      } else {
        return parser__$1;
      }
    }
  }
};
instaparse.combinators_source.unhide_all_content = function unhide_all_content(grammar) {
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__4379__auto__ = function iter__32362(s__32363) {
      return new cljs.core.LazySeq(null, function() {
        var s__32363__$1 = s__32363;
        while (true) {
          var temp__4126__auto__ = cljs.core.seq.call(null, s__32363__$1);
          if (temp__4126__auto__) {
            var s__32363__$2 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__32363__$2)) {
              var c__4377__auto__ = cljs.core.chunk_first.call(null, s__32363__$2);
              var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
              var b__32365 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
              if (function() {
                var i__32364 = 0;
                while (true) {
                  if (i__32364 < size__4378__auto__) {
                    var vec__32368 = cljs.core._nth.call(null, c__4377__auto__, i__32364);
                    var k = cljs.core.nth.call(null, vec__32368, 0, null);
                    var v = cljs.core.nth.call(null, vec__32368, 1, null);
                    cljs.core.chunk_append.call(null, b__32365, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, instaparse.combinators_source.unhide_content.call(null, v)], null));
                    var G__32370 = i__32364 + 1;
                    i__32364 = G__32370;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__32365), iter__32362.call(null, cljs.core.chunk_rest.call(null, s__32363__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__32365), null);
              }
            } else {
              var vec__32369 = cljs.core.first.call(null, s__32363__$2);
              var k = cljs.core.nth.call(null, vec__32369, 0, null);
              var v = cljs.core.nth.call(null, vec__32369, 1, null);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, instaparse.combinators_source.unhide_content.call(null, v)], null), iter__32362.call(null, cljs.core.rest.call(null, s__32363__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4379__auto__.call(null, grammar);
  }());
};
instaparse.combinators_source.unhide_tags = function unhide_tags(reduction_type, grammar) {
  var temp__4124__auto__ = instaparse.reduction.reduction_types.call(null, reduction_type);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var reduction = temp__4124__auto__;
    return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
      var iter__4379__auto__ = function(reduction, temp__4124__auto__) {
        return function iter__32379(s__32380) {
          return new cljs.core.LazySeq(null, function(reduction, temp__4124__auto__) {
            return function() {
              var s__32380__$1 = s__32380;
              while (true) {
                var temp__4126__auto__ = cljs.core.seq.call(null, s__32380__$1);
                if (temp__4126__auto__) {
                  var s__32380__$2 = temp__4126__auto__;
                  if (cljs.core.chunked_seq_QMARK_.call(null, s__32380__$2)) {
                    var c__4377__auto__ = cljs.core.chunk_first.call(null, s__32380__$2);
                    var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                    var b__32382 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                    if (function() {
                      var i__32381 = 0;
                      while (true) {
                        if (i__32381 < size__4378__auto__) {
                          var vec__32385 = cljs.core._nth.call(null, c__4377__auto__, i__32381);
                          var k = cljs.core.nth.call(null, vec__32385, 0, null);
                          var v = cljs.core.nth.call(null, vec__32385, 1, null);
                          cljs.core.chunk_append.call(null, b__32382, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.assoc.call(null, v, new cljs.core.Keyword(null, "red", "red", -969428204), reduction.call(null, k))], null));
                          var G__32387 = i__32381 + 1;
                          i__32381 = G__32387;
                          continue;
                        } else {
                          return true;
                        }
                        break;
                      }
                    }()) {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__32382), iter__32379.call(null, cljs.core.chunk_rest.call(null, s__32380__$2)));
                    } else {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__32382), null);
                    }
                  } else {
                    var vec__32386 = cljs.core.first.call(null, s__32380__$2);
                    var k = cljs.core.nth.call(null, vec__32386, 0, null);
                    var v = cljs.core.nth.call(null, vec__32386, 1, null);
                    return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.assoc.call(null, v, new cljs.core.Keyword(null, "red", "red", -969428204), reduction.call(null, k))], null), iter__32379.call(null, cljs.core.rest.call(null, s__32380__$2)));
                  }
                } else {
                  return null;
                }
                break;
              }
            };
          }(reduction, temp__4124__auto__), null, null);
        };
      }(reduction, temp__4124__auto__);
      return iter__4379__auto__.call(null, grammar);
    }());
  } else {
    throw "Invalid output format" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(reduction_type) + ". Use :enlive or :hiccup.";
  }
};
instaparse.combinators_source.unhide_all = function unhide_all(reduction_type, grammar) {
  var temp__4124__auto__ = instaparse.reduction.reduction_types.call(null, reduction_type);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var reduction = temp__4124__auto__;
    return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
      var iter__4379__auto__ = function(reduction, temp__4124__auto__) {
        return function iter__32396(s__32397) {
          return new cljs.core.LazySeq(null, function(reduction, temp__4124__auto__) {
            return function() {
              var s__32397__$1 = s__32397;
              while (true) {
                var temp__4126__auto__ = cljs.core.seq.call(null, s__32397__$1);
                if (temp__4126__auto__) {
                  var s__32397__$2 = temp__4126__auto__;
                  if (cljs.core.chunked_seq_QMARK_.call(null, s__32397__$2)) {
                    var c__4377__auto__ = cljs.core.chunk_first.call(null, s__32397__$2);
                    var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                    var b__32399 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                    if (function() {
                      var i__32398 = 0;
                      while (true) {
                        if (i__32398 < size__4378__auto__) {
                          var vec__32402 = cljs.core._nth.call(null, c__4377__auto__, i__32398);
                          var k = cljs.core.nth.call(null, vec__32402, 0, null);
                          var v = cljs.core.nth.call(null, vec__32402, 1, null);
                          cljs.core.chunk_append.call(null, b__32399, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.assoc.call(null, instaparse.combinators_source.unhide_content.call(null, v), new cljs.core.Keyword(null, "red", "red", -969428204), reduction.call(null, k))], null));
                          var G__32404 = i__32398 + 1;
                          i__32398 = G__32404;
                          continue;
                        } else {
                          return true;
                        }
                        break;
                      }
                    }()) {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__32399), iter__32396.call(null, cljs.core.chunk_rest.call(null, s__32397__$2)));
                    } else {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__32399), null);
                    }
                  } else {
                    var vec__32403 = cljs.core.first.call(null, s__32397__$2);
                    var k = cljs.core.nth.call(null, vec__32403, 0, null);
                    var v = cljs.core.nth.call(null, vec__32403, 1, null);
                    return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.assoc.call(null, instaparse.combinators_source.unhide_content.call(null, v), new cljs.core.Keyword(null, "red", "red", -969428204), reduction.call(null, k))], null), iter__32396.call(null, cljs.core.rest.call(null, s__32397__$2)));
                  }
                } else {
                  return null;
                }
                break;
              }
            };
          }(reduction, temp__4124__auto__), null, null);
        };
      }(reduction, temp__4124__auto__);
      return iter__4379__auto__.call(null, grammar);
    }());
  } else {
    throw "Invalid output format" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(reduction_type) + ". Use :enlive or :hiccup.";
  }
};
instaparse.combinators_source.auto_whitespace_parser = function auto_whitespace_parser(parser, ws_parser) {
  var G__32407 = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser).fqn : null;
  switch(G__32407) {
    case "neg":
      return cljs.core.update_in.call(null, parser, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parser", "parser", -1543495310)], null), auto_whitespace_parser, ws_parser);
      break;
    case "cat":
      return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "parsers", "parsers", -804353827), cljs.core.map.call(null, function(G__32407) {
        return function(p1__32405_SHARP_) {
          return auto_whitespace_parser.call(null, p1__32405_SHARP_, ws_parser);
        };
      }(G__32407), (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(parser)));
      break;
    case "ord":
      return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "parser1", "parser1", -439601422), auto_whitespace_parser.call(null, (new cljs.core.Keyword(null, "parser1", "parser1", -439601422)).cljs$core$IFn$_invoke$arity$1(parser), ws_parser), new cljs.core.Keyword(null, "parser2", "parser2", 1013754688), auto_whitespace_parser.call(null, (new cljs.core.Keyword(null, "parser2", "parser2", 1013754688)).cljs$core$IFn$_invoke$arity$1(parser), ws_parser));
      break;
    case "alt":
      return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "parsers", "parsers", -804353827), cljs.core.map.call(null, function(G__32407) {
        return function(p1__32405_SHARP_) {
          return auto_whitespace_parser.call(null, p1__32405_SHARP_, ws_parser);
        };
      }(G__32407), (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(parser)));
      break;
    case "look":
      return cljs.core.update_in.call(null, parser, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parser", "parser", -1543495310)], null), auto_whitespace_parser, ws_parser);
      break;
    case "nt":
      return parser;
      break;
    case "rep":
      return cljs.core.update_in.call(null, parser, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parser", "parser", -1543495310)], null), auto_whitespace_parser, ws_parser);
      break;
    case "star":
      return cljs.core.update_in.call(null, parser, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parser", "parser", -1543495310)], null), auto_whitespace_parser, ws_parser);
      break;
    case "string":
      if (cljs.core.truth_((new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser))) {
        return cljs.core.assoc.call(null, instaparse.combinators_source.cat.call(null, ws_parser, cljs.core.dissoc.call(null, parser, new cljs.core.Keyword(null, "red", "red", -969428204))), new cljs.core.Keyword(null, "red", "red", -969428204), (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser));
      } else {
        return instaparse.combinators_source.cat.call(null, ws_parser, parser);
      }
      break;
    case "regexp":
      if (cljs.core.truth_((new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser))) {
        return cljs.core.assoc.call(null, instaparse.combinators_source.cat.call(null, ws_parser, cljs.core.dissoc.call(null, parser, new cljs.core.Keyword(null, "red", "red", -969428204))), new cljs.core.Keyword(null, "red", "red", -969428204), (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser));
      } else {
        return instaparse.combinators_source.cat.call(null, ws_parser, parser);
      }
      break;
    case "plus":
      return cljs.core.update_in.call(null, parser, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parser", "parser", -1543495310)], null), auto_whitespace_parser, ws_parser);
      break;
    case "epsilon":
      return parser;
      break;
    case "string-ci":
      if (cljs.core.truth_((new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser))) {
        return cljs.core.assoc.call(null, instaparse.combinators_source.cat.call(null, ws_parser, cljs.core.dissoc.call(null, parser, new cljs.core.Keyword(null, "red", "red", -969428204))), new cljs.core.Keyword(null, "red", "red", -969428204), (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser));
      } else {
        return instaparse.combinators_source.cat.call(null, ws_parser, parser);
      }
      break;
    case "opt":
      return cljs.core.update_in.call(null, parser, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parser", "parser", -1543495310)], null), auto_whitespace_parser, ws_parser);
      break;
    default:
      throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser)));;
  }
};
instaparse.combinators_source.auto_whitespace = function auto_whitespace(grammar, start, grammar_ws, start_ws) {
  var ws_parser = instaparse.combinators_source.hide.call(null, instaparse.combinators_source.opt.call(null, instaparse.combinators_source.nt.call(null, start_ws)));
  var grammar_ws__$1 = cljs.core.assoc.call(null, grammar_ws, start_ws, instaparse.combinators_source.hide_tag.call(null, grammar_ws.call(null, start_ws)));
  var modified_grammar = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__4379__auto__ = function(ws_parser, grammar_ws__$1) {
      return function iter__32417(s__32418) {
        return new cljs.core.LazySeq(null, function(ws_parser, grammar_ws__$1) {
          return function() {
            var s__32418__$1 = s__32418;
            while (true) {
              var temp__4126__auto__ = cljs.core.seq.call(null, s__32418__$1);
              if (temp__4126__auto__) {
                var s__32418__$2 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__32418__$2)) {
                  var c__4377__auto__ = cljs.core.chunk_first.call(null, s__32418__$2);
                  var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                  var b__32420 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                  if (function() {
                    var i__32419 = 0;
                    while (true) {
                      if (i__32419 < size__4378__auto__) {
                        var vec__32423 = cljs.core._nth.call(null, c__4377__auto__, i__32419);
                        var nt = cljs.core.nth.call(null, vec__32423, 0, null);
                        var parser = cljs.core.nth.call(null, vec__32423, 1, null);
                        cljs.core.chunk_append.call(null, b__32420, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [nt, instaparse.combinators_source.auto_whitespace_parser.call(null, parser, ws_parser)], null));
                        var G__32425 = i__32419 + 1;
                        i__32419 = G__32425;
                        continue;
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__32420), iter__32417.call(null, cljs.core.chunk_rest.call(null, s__32418__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__32420), null);
                  }
                } else {
                  var vec__32424 = cljs.core.first.call(null, s__32418__$2);
                  var nt = cljs.core.nth.call(null, vec__32424, 0, null);
                  var parser = cljs.core.nth.call(null, vec__32424, 1, null);
                  return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [nt, instaparse.combinators_source.auto_whitespace_parser.call(null, parser, ws_parser)], null), iter__32417.call(null, cljs.core.rest.call(null, s__32418__$2)));
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(ws_parser, grammar_ws__$1), null, null);
      };
    }(ws_parser, grammar_ws__$1);
    return iter__4379__auto__.call(null, grammar);
  }());
  var final_grammar = cljs.core.assoc.call(null, modified_grammar, start, cljs.core.assoc.call(null, instaparse.combinators_source.cat.call(null, cljs.core.dissoc.call(null, modified_grammar.call(null, start), new cljs.core.Keyword(null, "red", "red", -969428204)), ws_parser), new cljs.core.Keyword(null, "red", "red", -969428204), (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(modified_grammar.call(null, start))));
  return cljs.core.merge.call(null, final_grammar, grammar_ws__$1);
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.standardAngleInRadians = function(angle) {
  return goog.math.modulo(angle, 2 * Math.PI);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length2;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return(goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (parseFloat("1e" + x) > num);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return!f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return "(" + this.x + ", " + this.y + ")";
  };
}
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += tx;
    if (goog.isNumber(opt_ty)) {
      this.y += opt_ty;
    }
  }
  return this;
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};
goog.math.Coordinate.prototype.rotateRadians = function(radians, opt_center) {
  var center = opt_center || new goog.math.Coordinate(0, 0);
  var x = this.x;
  var y = this.y;
  var cos = Math.cos(radians);
  var sin = Math.sin(radians);
  this.x = (x - center.x) * cos - (y - center.y) * sin + center.x;
  this.y = (x - center.x) * sin + (y - center.y) * cos + center.y;
};
goog.math.Coordinate.prototype.rotateDegrees = function(degrees, opt_center) {
  this.rotateRadians(goog.math.toRadians(degrees), opt_center);
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height;
};
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return "(" + this.width + " x " + this.height + ")";
  };
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function() {
  return(this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function() {
  return!this.area();
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.provide("goog.dom");
goog.provide("goog.dom.Appendable");
goog.provide("goog.dom.DomHelper");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.TagName");
goog.require("goog.functions");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.define("goog.dom.ASSUME_QUIRKS_MODE", false);
goog.define("goog.dom.ASSUME_STANDARDS_MODE", false);
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper);
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document;
};
goog.dom.getElement = function(element) {
  return goog.dom.getElementHelper_(document, element);
};
goog.dom.getElementHelper_ = function(doc, element) {
  return goog.isString(element) ? doc.getElementById(element) : element;
};
goog.dom.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(document, id);
};
goog.dom.getRequiredElementHelper_ = function(doc, id) {
  goog.asserts.assertString(id);
  var element = goog.dom.getElementHelper_(doc, id);
  element = goog.asserts.assertElement(element, "No element found with id: " + id);
  return element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className);
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el);
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (goog.dom.canUseQuerySelector_(parent)) {
    retVal = parent.querySelector("." + className);
  } else {
    retVal = goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el)[0];
  }
  return retVal || null;
};
goog.dom.getRequiredElementByClass = function(className, opt_root) {
  var retValue = goog.dom.getElementByClass(className, opt_root);
  return goog.asserts.assert(retValue, "No element found with className: " + className);
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return!!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query);
  }
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if (tagName) {
      var arrayLike = {};
      var len = 0;
      for (var i = 0, el;el = els[i];i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;
      return arrayLike;
    } else {
      return els;
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if (typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return arrayLike;
  } else {
    return els;
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (key == "style") {
      element.style.cssText = val;
    } else {
      if (key == "class") {
        element.className = val;
      } else {
        if (key == "for") {
          element.htmlFor = val;
        } else {
          if (key in goog.dom.DIRECT_ATTRIBUTE_MAP_) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
          } else {
            if (goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val);
            } else {
              element[key] = val;
            }
          }
        }
      }
    }
  });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if (doc) {
    var body = doc.body;
    var docEl = doc.documentElement;
    if (!body && !docEl) {
      return 0;
    }
    var vh = goog.dom.getViewportSize_(win).height;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
    } else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }
      if (sh > vh) {
        height = sh > oh ? sh : oh;
      } else {
        height = sh < oh ? sh : oh;
      }
    }
  }
  return height;
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || goog.global || window;
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  if (goog.userAgent.IE && goog.userAgent.isVersionOrHigher("10") && win.pageYOffset != el.scrollTop) {
    return new goog.math.Coordinate(el.scrollLeft, el.scrollTop);
  }
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  if (!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc)) {
    return doc.documentElement;
  }
  return doc.body || doc.documentElement;
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && attributes && (attributes.name || attributes.type)) {
    var tagNameArr = ["\x3c", tagName];
    if (attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone;
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("");
  }
  var element = doc.createElement(tagName);
  if (attributes) {
    if (goog.isString(attributes)) {
      element.className = attributes;
    } else {
      if (goog.isArray(attributes)) {
        element.className = attributes.join(" ");
      } else {
        goog.dom.setProperties(element, attributes);
      }
    }
  }
  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }
  return element;
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if (child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
    }
  }
  for (var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
    } else {
      childHandler(arg);
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name);
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var rowHtml = ["\x3ctr\x3e"];
  for (var i = 0;i < columns;i++) {
    rowHtml.push(fillWithNbsp ? "\x3ctd\x3e\x26nbsp;\x3c/td\x3e" : "\x3ctd\x3e\x3c/td\x3e");
  }
  rowHtml.push("\x3c/tr\x3e");
  rowHtml = rowHtml.join("");
  var totalHtml = ["\x3ctable\x3e"];
  for (i = 0;i < rows;i++) {
    totalHtml.push(rowHtml);
  }
  totalHtml.push("\x3c/table\x3e");
  var elem = doc.createElement(goog.dom.TagName.DIV);
  elem.innerHTML = totalHtml.join("");
  return(elem.removeChild(elem.firstChild));
};
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString);
};
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement("div");
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    tempDiv.innerHTML = "\x3cbr\x3e" + htmlString;
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    tempDiv.innerHTML = htmlString;
  }
  if (tempDiv.childNodes.length == 1) {
    return(tempDiv.removeChild(tempDiv.firstChild));
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }
  return doc.compatMode == "CSS1Compat";
};
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch(node.tagName) {
    case goog.dom.TagName.APPLET:
    ;
    case goog.dom.TagName.AREA:
    ;
    case goog.dom.TagName.BASE:
    ;
    case goog.dom.TagName.BR:
    ;
    case goog.dom.TagName.COL:
    ;
    case goog.dom.TagName.COMMAND:
    ;
    case goog.dom.TagName.EMBED:
    ;
    case goog.dom.TagName.FRAME:
    ;
    case goog.dom.TagName.HR:
    ;
    case goog.dom.TagName.IMG:
    ;
    case goog.dom.TagName.INPUT:
    ;
    case goog.dom.TagName.IFRAME:
    ;
    case goog.dom.TagName.ISINDEX:
    ;
    case goog.dom.TagName.KEYGEN:
    ;
    case goog.dom.TagName.LINK:
    ;
    case goog.dom.TagName.NOFRAMES:
    ;
    case goog.dom.TagName.NOSCRIPT:
    ;
    case goog.dom.TagName.META:
    ;
    case goog.dom.TagName.OBJECT:
    ;
    case goog.dom.TagName.PARAM:
    ;
    case goog.dom.TagName.SCRIPT:
    ;
    case goog.dom.TagName.SOURCE:
    ;
    case goog.dom.TagName.STYLE:
    ;
    case goog.dom.TagName.TRACK:
    ;
    case goog.dom.TagName.WBR:
      return false;
  }
  return true;
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child);
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function(node) {
  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if (element.removeNode) {
      return(element.removeNode(false));
    } else {
      while (child = element.firstChild) {
        parent.insertBefore(child, element);
      }
      return(goog.dom.removeNode(element));
    }
  }
};
goog.dom.getChildren = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children;
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};
goog.dom.getFirstElementChild = function(node) {
  if (node.firstElementChild != undefined) {
    return(node).firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function(node) {
  if (node.lastElementChild != undefined) {
    return(node).lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function(node) {
  if (node.nextElementSibling != undefined) {
    return(node).nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function(node) {
  if (node.previousElementSibling != undefined) {
    return(node).previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }
  return(node);
};
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }
  if (node.firstChild) {
    return node.firstChild;
  }
  while (node && !node.nextSibling) {
    node = node.parentNode;
  }
  return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }
  if (!node.previousSibling) {
    return node.parentNode;
  }
  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }
  return node;
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj;
};
goog.dom.getParentElement = function(element) {
  var parent;
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    var isIe9 = goog.userAgent.IE && goog.userAgent.isVersionOrHigher("9") && !goog.userAgent.isVersionOrHigher("10");
    if (!(isIe9 && goog.global["SVGElement"] && element instanceof goog.global["SVGElement"])) {
      parent = element.parentElement;
      if (parent) {
        return parent;
      }
    }
  }
  parent = element.parentNode;
  return goog.dom.isElement(parent) ? (parent) : null;
};
goog.dom.contains = function(parent, descendant) {
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }
  if (typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16);
  }
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if (node1 == node2) {
    return 0;
  }
  if (node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return-1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }
  if ("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }
      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return-1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }
      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }
      return(isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    return-1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while (s = s.previousSibling) {
    if (s == node1) {
      return-1;
    }
  }
  return 1;
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else {
    if (count == 1) {
      return arguments[0];
    }
  }
  var paths = [];
  var minLength = Infinity;
  for (i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for (var j = 1;j < count;j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};
goog.dom.getOwnerDocument = function(node) {
  goog.asserts.assert(node, "Node cannot be null or undefined.");
  return(node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document);
};
goog.dom.getFrameContentDocument = function(frame) {
  var doc = frame.contentDocument || frame.contentWindow.document;
  return doc;
};
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow || goog.dom.getWindow(goog.dom.getFrameContentDocument(frame));
};
goog.dom.setTextContent = function(node, text) {
  goog.asserts.assert(node != null, "goog.dom.setTextContent expects a non-null value for node");
  if ("textContent" in node) {
    node.textContent = text;
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      node.data = text;
    } else {
      if (node.firstChild && node.firstChild.nodeType == goog.dom.NodeType.TEXT) {
        while (node.lastChild != node.firstChild) {
          node.removeChild(node.lastChild);
        }
        node.firstChild.data = text;
      } else {
        goog.dom.removeChildren(node);
        var doc = goog.dom.getOwnerDocument(node);
        node.appendChild(doc.createTextNode(String(text)));
      }
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  if ("outerHTML" in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement("div");
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  return goog.dom.hasSpecifiedTabIndex_(element) && goog.dom.isTabIndexFocusable_(element);
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex");
  }
};
goog.dom.isFocusable = function(element) {
  var focusable;
  if (goog.dom.nativelySupportsFocus_(element)) {
    focusable = !element.disabled && (!goog.dom.hasSpecifiedTabIndex_(element) || goog.dom.isTabIndexFocusable_(element));
  } else {
    focusable = goog.dom.isFocusableTabIndex(element);
  }
  return focusable && goog.userAgent.IE ? goog.dom.hasNonZeroBoundingRect_(element) : focusable;
};
goog.dom.hasSpecifiedTabIndex_ = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  return goog.isDefAndNotNull(attrNode) && attrNode.specified;
};
goog.dom.isTabIndexFocusable_ = function(element) {
  var index = element.tabIndex;
  return goog.isNumber(index) && index >= 0 && index < 32768;
};
goog.dom.nativelySupportsFocus_ = function(element) {
  return element.tagName == goog.dom.TagName.A || element.tagName == goog.dom.TagName.INPUT || element.tagName == goog.dom.TagName.TEXTAREA || element.tagName == goog.dom.TagName.SELECT || element.tagName == goog.dom.TagName.BUTTON;
};
goog.dom.hasNonZeroBoundingRect_ = function(element) {
  var rect = goog.isFunction(element["getBoundingClientRect"]) ? element.getBoundingClientRect() : {"height":element.offsetHeight, "width":element.offsetWidth};
  return goog.isDefAndNotNull(rect) && rect.height > 0 && rect.width > 0;
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("");
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ");
  }
  if (textContent != " ") {
    textContent = textContent.replace(/^\s*/, "");
  }
  return textContent;
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("");
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      if (normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""));
      } else {
        buf.push(node.nodeValue);
      }
    } else {
      if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
      } else {
        var child = node.firstChild;
        while (child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling;
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while (cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length;
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    } else {
      if (cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length;
      } else {
        if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        } else {
          for (var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i]);
          }
        }
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }
  return cur;
};
goog.dom.isNodeList = function(val) {
  if (val && typeof val.length == "number") {
    if (goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string";
    } else {
      if (goog.isFunction(val)) {
        return typeof val.item == "function";
      }
    }
  }
  return false;
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return(goog.dom.getAncestor(element, function(node) {
    return(!tagName || node.nodeName == tagName) && (!opt_class || goog.isString(node.className) && goog.array.contains(node.className.split(/\s+/), opt_class));
  }, true));
};
goog.dom.getAncestorByClass = function(element, className) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className);
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (!opt_includeNode) {
    element = element.parentNode;
  }
  var ignoreSearchSteps = opt_maxSearchSteps == null;
  var steps = 0;
  while (element && (ignoreSearchSteps || steps <= opt_maxSearchSteps)) {
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  return null;
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement;
  } catch (e) {
  }
  return null;
};
goog.dom.devicePixelRatio_;
goog.dom.getPixelRatio = goog.functions.cacheReturnValue(function() {
  var win = goog.dom.getWindow();
  var isFirefoxMobile = goog.userAgent.GECKO && goog.userAgent.MOBILE;
  if (goog.isDef(win.devicePixelRatio) && !isFirefoxMobile) {
    return win.devicePixelRatio;
  } else {
    if (win.matchMedia) {
      return goog.dom.matchesPixelRatio_(.75) || goog.dom.matchesPixelRatio_(1.5) || goog.dom.matchesPixelRatio_(2) || goog.dom.matchesPixelRatio_(3) || 1;
    }
  }
  return 1;
});
goog.dom.matchesPixelRatio_ = function(pixelRatio) {
  var win = goog.dom.getWindow();
  var query = "(-webkit-min-device-pixel-ratio: " + pixelRatio + ")," + "(min--moz-device-pixel-ratio: " + pixelRatio + ")," + "(min-resolution: " + pixelRatio + "dppx)";
  return win.matchMedia(query).matches ? pixelRatio : 0;
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || goog.global.document || document;
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  return goog.dom.getElementHelper_(this.document_, element);
};
goog.dom.DomHelper.prototype.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(this.document_, id);
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.getRequiredElementByClass = function(className, opt_root) {
  var root = opt_root || this.document_;
  return goog.dom.getRequiredElementByClass(className, root);
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name);
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString);
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.isFocusable = goog.dom.isFocusable;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9b") || goog.userAgent.IE && 
goog.userAgent.isVersionOrHigher("8") || goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher("528"), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("8") || goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || !!(goog.global["document"] && document.documentElement && "ontouchstart" in document.documentElement) || !!(goog.global["navigator"] && 
goog.global["navigator"]["msMaxTouchPoints"])};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose = goog.abstractMethod;
goog.disposable.IDisposable.prototype.isDisposed = goog.abstractMethod;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.provide("goog.disposeAll");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
      this.creationStack = (new Error).stack;
    }
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.define("goog.Disposable.MONITORING_MODE", 0);
goog.define("goog.Disposable.INCLUDE_STACK_ON_CREATION", true);
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.isDef(opt_scope) ? goog.bind(callback, opt_scope) : callback);
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.events.EventId");
goog.events.EventId = function(eventId) {
  this.id = eventId;
};
goog.events.EventId.prototype.toString = function() {
  return this.id;
};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.require("goog.events.EventId");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type instanceof goog.events.EventId ? String(type) : type;
  this.target = opt_target;
  this.currentTarget = this.target;
  this.propagationStopped_ = false;
  this.defaultPrevented = false;
  this.returnValue_ = true;
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.getVendorPrefixedName_ = function(eventName) {
  return goog.userAgent.WEBKIT ? "webkit" + eventName : goog.userAgent.OPERA ? "o" + eventName.toLowerCase() : eventName.toLowerCase();
};
goog.events.EventType = {CLICK:"click", RIGHTCLICK:"rightclick", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", MOUSEENTER:"mouseenter", MOUSELEAVE:"mouseleave", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", 
SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONSOLEMESSAGE:"consolemessage", CONTEXTMENU:"contextmenu", DOMCONTENTLOADED:"DOMContentLoaded", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", 
ORIENTATIONCHANGE:"orientationchange", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", ANIMATIONSTART:goog.events.getVendorPrefixedName_("AnimationStart"), ANIMATIONEND:goog.events.getVendorPrefixedName_("AnimationEnd"), 
ANIMATIONITERATION:goog.events.getVendorPrefixedName_("AnimationIteration"), TRANSITIONEND:goog.events.getVendorPrefixedName_("TransitionEnd"), POINTERDOWN:"pointerdown", POINTERUP:"pointerup", POINTERCANCEL:"pointercancel", POINTERMOVE:"pointermove", POINTEROVER:"pointerover", POINTEROUT:"pointerout", POINTERENTER:"pointerenter", POINTERLEAVE:"pointerleave", GOTPOINTERCAPTURE:"gotpointercapture", LOSTPOINTERCAPTURE:"lostpointercapture", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", 
MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERENTER:"MSPointerEnter", MSPOINTERHOVER:"MSPointerHover", MSPOINTERLEAVE:"MSPointerLeave", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROUT:"MSPointerOut", MSPOINTEROVER:"MSPointerOver", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", 
COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend", EXIT:"exit", LOADABORT:"loadabort", LOADCOMMIT:"loadcommit", LOADREDIRECT:"loadredirect", LOADSTART:"loadstart", LOADSTOP:"loadstop", RESPONSIVE:"responsive", SIZECHANGED:"sizechanged", UNRESPONSIVE:"unresponsive", VISIBILITYCHANGE:"visibilitychange", STORAGE:"storage", DOMSUBTREEMODIFIED:"DOMSubtreeModified", DOMNODEINSERTED:"DOMNodeInserted", DOMNODEREMOVED:"DOMNodeRemoved", DOMNODEREMOVEDFROMDOCUMENT:"DOMNodeRemovedFromDocument", 
DOMNODEINSERTEDINTODOCUMENT:"DOMNodeInsertedIntoDocument", DOMATTRMODIFIED:"DOMAttrModified", DOMCHARACTERDATAMODIFIED:"DOMCharacterDataModified"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  goog.events.BrowserEvent.base(this, "constructor", opt_e ? opt_e.type : "");
  this.target = null;
  this.currentTarget = null;
  this.relatedTarget = null;
  this.offsetX = 0;
  this.offsetY = 0;
  this.clientX = 0;
  this.clientY = 0;
  this.screenX = 0;
  this.screenY = 0;
  this.button = 0;
  this.keyCode = 0;
  this.charCode = 0;
  this.ctrlKey = false;
  this.altKey = false;
  this.shiftKey = false;
  this.metaKey = false;
  this.state = null;
  this.platformModifierKey = false;
  this.event_ = null;
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.provide("goog.iter");
goog.provide("goog.iter.Iterable");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.functions");
goog.require("goog.math");
goog.iter.Iterable;
if ("StopIteration" in goog.global) {
  goog.iter.StopIteration = goog.global["StopIteration"];
} else {
  goog.iter.StopIteration = Error("StopIteration");
}
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.filterFalse = function(iterable, f, opt_obj) {
  return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    var val = iterator.next();
    return f.call(opt_obj, val, undefined, iterator);
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  var iterator = goog.iter.toIterator(arguments);
  var iter = new goog.iter.Iterator;
  var current = null;
  iter.next = function() {
    while (true) {
      if (current == null) {
        var it = iterator.next();
        current = goog.iter.toIterator(it);
      }
      try {
        return current.next();
      } catch (ex) {
        if (ex !== goog.iter.StopIteration) {
          throw ex;
        }
        current = null;
      }
    }
  };
  return iter;
};
goog.iter.chainFromIterable = function(iterable) {
  return goog.iter.chain.apply(undefined, iterable);
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while (true) {
      if (taking) {
        var val = iterator.next();
        if (f.call(opt_obj, val, undefined, iterator)) {
          return val;
        } else {
          taking = false;
        }
      } else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2) {
  var fillValue = {};
  var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);
  return goog.iter.every(pairs, function(pair) {
    return pair[0] == pair[1];
  });
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return!arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.iter.count = function(opt_start, opt_step) {
  var counter = opt_start || 0;
  var step = goog.isDef(opt_step) ? opt_step : 1;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var returnValue = counter;
    counter += step;
    return returnValue;
  };
  return iter;
};
goog.iter.repeat = function(value) {
  var iter = new goog.iter.Iterator;
  iter.next = goog.functions.constant(value);
  return iter;
};
goog.iter.accumulate = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var total = 0;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    total += iterator.next();
    return total;
  };
  return iter;
};
goog.iter.zip = function(var_args) {
  var args = arguments;
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var arr = goog.array.map(iterators, function(it) {
        return it.next();
      });
      return arr;
    };
  }
  return iter;
};
goog.iter.zipLongest = function(fillValue, var_args) {
  var args = goog.array.slice(arguments, 1);
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var iteratorsHaveValues = false;
      var arr = goog.array.map(iterators, function(it) {
        var returnValue;
        try {
          returnValue = it.next();
          iteratorsHaveValues = true;
        } catch (ex) {
          if (ex !== goog.iter.StopIteration) {
            throw ex;
          }
          returnValue = fillValue;
        }
        return returnValue;
      });
      if (!iteratorsHaveValues) {
        throw goog.iter.StopIteration;
      }
      return arr;
    };
  }
  return iter;
};
goog.iter.compress = function(iterable, selectors) {
  var selectorIterator = goog.iter.toIterator(selectors);
  return goog.iter.filter(iterable, function() {
    return!!selectorIterator.next();
  });
};
goog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {
  this.iterator = goog.iter.toIterator(iterable);
  this.keyFunc = opt_keyFunc || goog.functions.identity;
  this.targetKey;
  this.currentKey;
  this.currentValue;
};
goog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);
goog.iter.GroupByIterator_.prototype.next = function() {
  while (this.currentKey == this.targetKey) {
    this.currentValue = this.iterator.next();
    this.currentKey = this.keyFunc(this.currentValue);
  }
  this.targetKey = this.currentKey;
  return[this.currentKey, this.groupItems_(this.targetKey)];
};
goog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {
  var arr = [];
  while (this.currentKey == targetKey) {
    arr.push(this.currentValue);
    try {
      this.currentValue = this.iterator.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
      break;
    }
    this.currentKey = this.keyFunc(this.currentValue);
  }
  return arr;
};
goog.iter.groupBy = function(iterable, opt_keyFunc) {
  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);
};
goog.iter.starMap = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var args = goog.iter.toArray(iterator.next());
    return f.apply(opt_obj, goog.array.concat(args, undefined, iterator));
  };
  return iter;
};
goog.iter.tee = function(iterable, opt_num) {
  var iterator = goog.iter.toIterator(iterable);
  var num = goog.isNumber(opt_num) ? opt_num : 2;
  var buffers = goog.array.map(goog.array.range(num), function() {
    return[];
  });
  var addNextIteratorValueToBuffers = function() {
    var val = iterator.next();
    goog.array.forEach(buffers, function(buffer) {
      buffer.push(val);
    });
  };
  var createIterator = function(buffer) {
    var iter = new goog.iter.Iterator;
    iter.next = function() {
      if (goog.array.isEmpty(buffer)) {
        addNextIteratorValueToBuffers();
      }
      goog.asserts.assert(!goog.array.isEmpty(buffer));
      return buffer.shift();
    };
    return iter;
  };
  return goog.array.map(buffers, createIterator);
};
goog.iter.enumerate = function(iterable, opt_start) {
  return goog.iter.zip(goog.iter.count(opt_start), iterable);
};
goog.iter.limit = function(iterable, limitSize) {
  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var remaining = limitSize;
  iter.next = function() {
    if (remaining-- > 0) {
      return iterator.next();
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.consume = function(iterable, count) {
  goog.asserts.assert(goog.math.isInt(count) && count >= 0);
  var iterator = goog.iter.toIterator(iterable);
  while (count-- > 0) {
    goog.iter.nextOrValue(iterator, null);
  }
  return iterator;
};
goog.iter.slice = function(iterable, start, opt_end) {
  goog.asserts.assert(goog.math.isInt(start) && start >= 0);
  var iterator = goog.iter.consume(iterable, start);
  if (goog.isNumber(opt_end)) {
    goog.asserts.assert(goog.math.isInt((opt_end)) && opt_end >= start);
    iterator = goog.iter.limit(iterator, opt_end - start);
  }
  return iterator;
};
goog.iter.hasDuplicates_ = function(arr) {
  var deduped = [];
  goog.array.removeDuplicates(arr, deduped);
  return arr.length != deduped.length;
};
goog.iter.permutations = function(iterable, opt_length) {
  var elements = goog.iter.toArray(iterable);
  var length = goog.isNumber(opt_length) ? opt_length : elements.length;
  var sets = goog.array.repeat(elements, length);
  var product = goog.iter.product.apply(undefined, sets);
  return goog.iter.filter(product, function(arr) {
    return!goog.iter.hasDuplicates_(arr);
  });
};
goog.iter.combinations = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.iter.range(elements.length);
  var indexIterator = goog.iter.permutations(indexes, length);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.iter.combinationsWithReplacement = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.array.range(elements.length);
  var sets = goog.array.repeat(indexes, length);
  var indexIterator = goog.iter.product.apply(undefined, sets);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  this.count_ = 0;
  this.version_ = 0;
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return(this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.forEach = function(f, opt_obj) {
  var keys = this.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = this.get(key);
    f.call(opt_obj, value, key, this);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      if (version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if (i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key];
    }
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.dom.forms");
goog.require("goog.structs.Map");
goog.dom.forms.getFormDataMap = function(form) {
  var map = new goog.structs.Map;
  goog.dom.forms.getFormDataHelper_(form, map, goog.dom.forms.addFormDataToMap_);
  return map;
};
goog.dom.forms.getFormDataString = function(form) {
  var sb = [];
  goog.dom.forms.getFormDataHelper_(form, sb, goog.dom.forms.addFormDataToStringBuffer_);
  return sb.join("\x26");
};
goog.dom.forms.getFormDataHelper_ = function(form, result, fnAppend) {
  var els = form.elements;
  for (var el, i = 0;el = els[i];i++) {
    if (el.form != form || el.disabled || el.tagName.toLowerCase() == "fieldset") {
      continue;
    }
    var name = el.name;
    switch(el.type.toLowerCase()) {
      case "file":
      ;
      case "submit":
      ;
      case "reset":
      ;
      case "button":
        break;
      case "select-multiple":
        var values = goog.dom.forms.getValue(el);
        if (values != null) {
          for (var value, j = 0;value = values[j];j++) {
            fnAppend(result, name, value);
          }
        }
        break;
      default:
        var value = goog.dom.forms.getValue(el);
        if (value != null) {
          fnAppend(result, name, value);
        }
      ;
    }
  }
  var inputs = form.getElementsByTagName("input");
  for (var input, i = 0;input = inputs[i];i++) {
    if (input.form == form && input.type.toLowerCase() == "image") {
      name = input.name;
      fnAppend(result, name, input.value);
      fnAppend(result, name + ".x", "0");
      fnAppend(result, name + ".y", "0");
    }
  }
};
goog.dom.forms.addFormDataToMap_ = function(map, name, value) {
  var array = map.get(name);
  if (!array) {
    array = [];
    map.set(name, array);
  }
  array.push(value);
};
goog.dom.forms.addFormDataToStringBuffer_ = function(sb, name, value) {
  sb.push(encodeURIComponent(name) + "\x3d" + encodeURIComponent(value));
};
goog.dom.forms.hasFileInput = function(form) {
  var els = form.elements;
  for (var el, i = 0;el = els[i];i++) {
    if (!el.disabled && el.type && el.type.toLowerCase() == "file") {
      return true;
    }
  }
  return false;
};
goog.dom.forms.setDisabled = function(el, disabled) {
  if (el.tagName == "FORM") {
    var els = el.elements;
    for (var i = 0;el = els[i];i++) {
      goog.dom.forms.setDisabled(el, disabled);
    }
  } else {
    if (disabled == true) {
      el.blur();
    }
    el.disabled = disabled;
  }
};
goog.dom.forms.focusAndSelect = function(el) {
  el.focus();
  if (el.select) {
    el.select();
  }
};
goog.dom.forms.hasValue = function(el) {
  var value = goog.dom.forms.getValue(el);
  return!!value;
};
goog.dom.forms.hasValueByName = function(form, name) {
  var value = goog.dom.forms.getValueByName(form, name);
  return!!value;
};
goog.dom.forms.getValue = function(el) {
  var type = el.type;
  if (!goog.isDef(type)) {
    return null;
  }
  switch(type.toLowerCase()) {
    case "checkbox":
    ;
    case "radio":
      return goog.dom.forms.getInputChecked_(el);
    case "select-one":
      return goog.dom.forms.getSelectSingle_(el);
    case "select-multiple":
      return goog.dom.forms.getSelectMultiple_(el);
    default:
      return goog.isDef(el.value) ? el.value : null;
  }
};
goog.dom.$F = goog.dom.forms.getValue;
goog.dom.forms.getValueByName = function(form, name) {
  var els = form.elements[name];
  if (els) {
    if (els.type) {
      return goog.dom.forms.getValue(els);
    } else {
      for (var i = 0;i < els.length;i++) {
        var val = goog.dom.forms.getValue(els[i]);
        if (val) {
          return val;
        }
      }
    }
  }
  return null;
};
goog.dom.forms.getInputChecked_ = function(el) {
  return el.checked ? el.value : null;
};
goog.dom.forms.getSelectSingle_ = function(el) {
  var selectedIndex = el.selectedIndex;
  return selectedIndex >= 0 ? el.options[selectedIndex].value : null;
};
goog.dom.forms.getSelectMultiple_ = function(el) {
  var values = [];
  for (var option, i = 0;option = el.options[i];i++) {
    if (option.selected) {
      values.push(option.value);
    }
  }
  return values.length ? values : null;
};
goog.dom.forms.setValue = function(el, opt_value) {
  var type = el.type;
  if (goog.isDef(type)) {
    switch(type.toLowerCase()) {
      case "checkbox":
      ;
      case "radio":
        goog.dom.forms.setInputChecked_(el, (opt_value));
        break;
      case "select-one":
        goog.dom.forms.setSelectSingle_(el, (opt_value));
        break;
      case "select-multiple":
        goog.dom.forms.setSelectMultiple_(el, (opt_value));
        break;
      default:
        el.value = goog.isDefAndNotNull(opt_value) ? opt_value : "";
    }
  }
};
goog.dom.forms.setInputChecked_ = function(el, opt_value) {
  el.checked = opt_value ? "checked" : null;
};
goog.dom.forms.setSelectSingle_ = function(el, opt_value) {
  el.selectedIndex = -1;
  if (goog.isString(opt_value)) {
    for (var option, i = 0;option = el.options[i];i++) {
      if (option.value == opt_value) {
        option.selected = true;
        break;
      }
    }
  }
};
goog.dom.forms.setSelectMultiple_ = function(el, opt_value) {
  if (goog.isString(opt_value)) {
    opt_value = [opt_value];
  }
  for (var option, i = 0;option = el.options[i];i++) {
    option.selected = false;
    if (opt_value) {
      for (var value, j = 0;value = opt_value[j];j++) {
        if (option.value == value) {
          option.selected = true;
        }
      }
    }
  }
};
goog.provide("goog.dom.classes");
goog.require("goog.array");
goog.dom.classes.set = function(element, className) {
  element.className = className;
};
goog.dom.classes.get = function(element) {
  var className = element.className;
  return goog.isString(className) && className.match(/\S+/g) || [];
};
goog.dom.classes.add = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var expectedCount = classes.length + args.length;
  goog.dom.classes.add_(classes, args);
  goog.dom.classes.set(element, classes.join(" "));
  return classes.length == expectedCount;
};
goog.dom.classes.remove = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var newClasses = goog.dom.classes.getDifference_(classes, args);
  goog.dom.classes.set(element, newClasses.join(" "));
  return newClasses.length == classes.length - args.length;
};
goog.dom.classes.add_ = function(classes, args) {
  for (var i = 0;i < args.length;i++) {
    if (!goog.array.contains(classes, args[i])) {
      classes.push(args[i]);
    }
  }
};
goog.dom.classes.getDifference_ = function(arr1, arr2) {
  return goog.array.filter(arr1, function(item) {
    return!goog.array.contains(arr2, item);
  });
};
goog.dom.classes.swap = function(element, fromClass, toClass) {
  var classes = goog.dom.classes.get(element);
  var removed = false;
  for (var i = 0;i < classes.length;i++) {
    if (classes[i] == fromClass) {
      goog.array.splice(classes, i--, 1);
      removed = true;
    }
  }
  if (removed) {
    classes.push(toClass);
    goog.dom.classes.set(element, classes.join(" "));
  }
  return removed;
};
goog.dom.classes.addRemove = function(element, classesToRemove, classesToAdd) {
  var classes = goog.dom.classes.get(element);
  if (goog.isString(classesToRemove)) {
    goog.array.remove(classes, classesToRemove);
  } else {
    if (goog.isArray(classesToRemove)) {
      classes = goog.dom.classes.getDifference_(classes, classesToRemove);
    }
  }
  if (goog.isString(classesToAdd) && !goog.array.contains(classes, classesToAdd)) {
    classes.push(classesToAdd);
  } else {
    if (goog.isArray(classesToAdd)) {
      goog.dom.classes.add_(classes, classesToAdd);
    }
  }
  goog.dom.classes.set(element, classes.join(" "));
};
goog.dom.classes.has = function(element, className) {
  return goog.array.contains(goog.dom.classes.get(element), className);
};
goog.dom.classes.enable = function(element, className, enabled) {
  if (enabled) {
    goog.dom.classes.add(element, className);
  } else {
    goog.dom.classes.remove(element, className);
  }
};
goog.dom.classes.toggle = function(element, className) {
  var add = !goog.dom.classes.has(element, className);
  goog.dom.classes.enable(element, className, add);
  return add;
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventId");
goog.events.Listenable = function() {
};
goog.events.Listenable.IMPLEMENTED_BY_PROP = "closure_listenable_" + (Math.random() * 1E6 | 0);
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return!!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.getParentEventTarget;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.key = goog.events.ListenableKey.reserveKey();
  this.callOnce = false;
  this.removed = false;
};
goog.define("goog.events.Listener.ENABLE_MONITORING", false);
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.markAsRemoved = function() {
  this.removed = true;
  this.listener = null;
  this.proxy = null;
  this.src = null;
  this.handler = null;
};
goog.provide("goog.events.ListenerMap");
goog.require("goog.array");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.ListenerMap = function(src) {
  this.src = src;
  this.listeners = {};
  this.typeCount_ = 0;
};
goog.events.ListenerMap.prototype.getTypeCount = function() {
  return this.typeCount_;
};
goog.events.ListenerMap.prototype.getListenerCount = function() {
  var count = 0;
  for (var type in this.listeners) {
    count += this.listeners[type].length;
  }
  return count;
};
goog.events.ListenerMap.prototype.add = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  var listenerArray = this.listeners[typeStr];
  if (!listenerArray) {
    listenerArray = this.listeners[typeStr] = [];
    this.typeCount_++;
  }
  var listenerObj;
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    listenerObj = listenerArray[index];
    if (!callOnce) {
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = new goog.events.Listener(listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
  }
  return listenerObj;
};
goog.events.ListenerMap.prototype.remove = function(type, listener, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  if (!(typeStr in this.listeners)) {
    return false;
  }
  var listenerArray = this.listeners[typeStr];
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    var listenerObj = listenerArray[index];
    listenerObj.markAsRemoved();
    goog.array.removeAt(listenerArray, index);
    if (listenerArray.length == 0) {
      delete this.listeners[typeStr];
      this.typeCount_--;
    }
    return true;
  }
  return false;
};
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
  var type = listener.type;
  if (!(type in this.listeners)) {
    return false;
  }
  var removed = goog.array.remove(this.listeners[type], listener);
  if (removed) {
    listener.markAsRemoved();
    if (this.listeners[type].length == 0) {
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return removed;
};
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
  var typeStr = opt_type && opt_type.toString();
  var count = 0;
  for (var type in this.listeners) {
    if (!typeStr || type == typeStr) {
      var listenerArray = this.listeners[type];
      for (var i = 0;i < listenerArray.length;i++) {
        ++count;
        listenerArray[i].markAsRemoved();
      }
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return count;
};
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
  var listenerArray = this.listeners[type.toString()];
  var rv = [];
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.capture == capture) {
        rv.push(listenerObj);
      }
    }
  }
  return rv;
};
goog.events.ListenerMap.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  var listenerArray = this.listeners[type.toString()];
  var i = -1;
  if (listenerArray) {
    i = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
  }
  return i > -1 ? listenerArray[i] : null;
};
goog.events.ListenerMap.prototype.hasListener = function(opt_type, opt_capture) {
  var hasType = goog.isDef(opt_type);
  var typeStr = hasType ? opt_type.toString() : "";
  var hasCapture = goog.isDef(opt_capture);
  return goog.object.some(this.listeners, function(listenerArray, type) {
    for (var i = 0;i < listenerArray.length;++i) {
      if ((!hasType || listenerArray[i].type == typeStr) && (!hasCapture || listenerArray[i].capture == opt_capture)) {
        return true;
      }
    }
    return false;
  });
};
goog.events.ListenerMap.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
  for (var i = 0;i < listenerArray.length;++i) {
    var listenerObj = listenerArray[i];
    if (!listenerObj.removed && listenerObj.listener == listener && listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope) {
      return i;
    }
  }
  return-1;
};
goog.provide("goog.events");
goog.provide("goog.events.CaptureSimulationMode");
goog.provide("goog.events.Key");
goog.provide("goog.events.ListenableType");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.forwardDeclare("goog.debug.ErrorHandler");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.Key;
goog.events.ListenableType;
goog.events.LISTENER_MAP_PROP_ = "closure_lm_" + (Math.random() * 1E6 | 0);
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.CaptureSimulationMode = {OFF_AND_FAIL:0, OFF_AND_SILENT:1, ON:2};
goog.define("goog.events.CAPTURE_SIMULATION_MODE", 2);
goog.events.listenerCountEstimate_ = 0;
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listen((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, false, opt_capt, opt_handler);
  }
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
      goog.asserts.fail("Can not register capture listener in IE8-.");
      return null;
    } else {
      if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
        return null;
      }
    }
  }
  var listenerMap = goog.events.getListenerMap_(src);
  if (!listenerMap) {
    src[goog.events.LISTENER_MAP_PROP_] = listenerMap = new goog.events.ListenerMap(src);
  }
  var listenerObj = listenerMap.add(type, listener, callOnce, opt_capt, opt_handler);
  if (listenerObj.proxy) {
    return listenerObj;
  }
  var proxy = goog.events.getProxy();
  listenerObj.proxy = proxy;
  proxy.src = src;
  proxy.listener = listenerObj;
  if (src.addEventListener) {
    src.addEventListener(type.toString(), proxy, capture);
  } else {
    src.attachEvent(goog.events.getOnString_(type.toString()), proxy);
  }
  goog.events.listenerCountEstimate_++;
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listenOnce((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, true, opt_capt, opt_handler);
  }
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), listener, opt_capt, opt_handler);
  }
  if (!src) {
    return false;
  }
  var capture = !!opt_capt;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    var listenerObj = listenerMap.getListener((type), listener, capture, opt_handler);
    if (listenerObj) {
      return goog.events.unlistenByKey(listenerObj);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  if (goog.isNumber(key)) {
    return false;
  }
  var listener = (key);
  if (!listener || listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  if (src.removeEventListener) {
    src.removeEventListener(type, proxy, listener.capture);
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  goog.events.listenerCountEstimate_--;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    listenerMap.removeByKey(listener);
    if (listenerMap.getTypeCount() == 0) {
      listenerMap.src = null;
      src[goog.events.LISTENER_MAP_PROP_] = null;
    }
  } else {
    listener.markAsRemoved();
  }
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.removeAll = function(obj, opt_type) {
  if (!obj) {
    return 0;
  }
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.removeAllListeners(opt_type);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  if (!listenerMap) {
    return 0;
  }
  var count = 0;
  var typeStr = opt_type && opt_type.toString();
  for (var type in listenerMap.listeners) {
    if (!typeStr || type == typeStr) {
      var listeners = listenerMap.listeners[type].concat();
      for (var i = 0;i < listeners.length;++i) {
        if (goog.events.unlistenByKey(listeners[i])) {
          ++count;
        }
      }
    }
  }
  return count;
};
goog.events.removeAllNativeListeners = function() {
  goog.events.listenerCountEstimate_ = 0;
  return 0;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    if (!obj) {
      return[];
    }
    var listenerMap = goog.events.getListenerMap_((obj));
    return listenerMap ? listenerMap.getListeners(type, capture) : [];
  }
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  type = (type);
  listener = goog.events.wrapListener(listener);
  var capture = !!opt_capt;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener(type, listener, capture, opt_handler);
  }
  if (!src) {
    return null;
  }
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    return listenerMap.getListener(type, listener, capture, opt_handler);
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  return!!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  return goog.events.fireListeners_(obj, type, capture, eventObject);
};
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
  var retval = 1;
  var listenerMap = goog.events.getListenerMap_((obj));
  if (listenerMap) {
    var listenerArray = listenerMap.listeners[type.toString()];
    if (listenerArray) {
      listenerArray = listenerArray.concat();
      for (var i = 0;i < listenerArray.length;i++) {
        var listener = listenerArray[i];
        if (listener && listener.capture == capture && !listener.removed) {
          retval &= goog.events.fireListener(listener, eventObject) !== false;
        }
      }
    }
  }
  return Boolean(retval);
};
goog.events.fireListener = function(listener, eventObject) {
  var listenerFn = listener.listener;
  var listenerHandler = listener.handler || listener.src;
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener);
  }
  return listenerFn.call(listenerHandler, eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.events.listenerCountEstimate_;
};
goog.events.dispatchEvent = function(src, e) {
  goog.asserts.assert(goog.events.Listenable.isImplementedBy(src), "Can not use goog.events.dispatchEvent with " + "non-goog.events.Listenable instance.");
  return src.dispatchEvent(e);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var evt = new goog.events.BrowserEvent(ieEvent, this);
    var retval = true;
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.ON) {
      if (!goog.events.isMarkedIeEvent_(ieEvent)) {
        goog.events.markIeEvent_(ieEvent);
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        var type = listener.type;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && i >= 0;i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, true, evt);
        }
        for (var i = 0;!evt.propagationStopped_ && i < ancestors.length;i++) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, false, evt);
        }
      }
    } else {
      retval = goog.events.fireListener(listener, evt);
    }
    return retval;
  }
  return goog.events.fireListener(listener, new goog.events.BrowserEvent(opt_evt, this));
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.getListenerMap_ = function(src) {
  var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener = function(listener) {
  goog.asserts.assert(listener, "Listener can not be null.");
  if (goog.isFunction(listener)) {
    return listener;
  }
  goog.asserts.assert(listener.handleEvent, "An object listener must have handleEvent method.");
  if (!listener[goog.events.LISTENER_WRAPPER_PROP_]) {
    listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
      return listener.handleEvent(e);
    };
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_];
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("domina.support");
goog.require("cljs.core");
goog.require("goog.events");
goog.require("goog.events");
goog.require("goog.dom");
goog.require("goog.dom");
var div_31784 = document.createElement("div");
var test_html_31785 = "   \x3clink/\x3e\x3ctable\x3e\x3c/table\x3e\x3ca href\x3d'/a' style\x3d'top:1px;float:left;opacity:.55;'\x3ea\x3c/a\x3e\x3cinput type\x3d'checkbox'/\x3e";
div_31784.innerHTML = test_html_31785;
domina.support.leading_whitespace_QMARK_ = cljs.core._EQ_.call(null, div_31784.firstChild.nodeType, 3);
domina.support.extraneous_tbody_QMARK_ = cljs.core._EQ_.call(null, div_31784.getElementsByTagName("tbody").length, 0);
domina.support.unscoped_html_elements_QMARK_ = cljs.core._EQ_.call(null, div_31784.getElementsByTagName("link").length, 0);
goog.provide("goog.dom.vendor");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.dom.vendor.getVendorJsPrefix = function() {
  if (goog.userAgent.WEBKIT) {
    return "Webkit";
  } else {
    if (goog.userAgent.GECKO) {
      return "Moz";
    } else {
      if (goog.userAgent.IE) {
        return "ms";
      } else {
        if (goog.userAgent.OPERA) {
          return "O";
        }
      }
    }
  }
  return null;
};
goog.dom.vendor.getVendorPrefix = function() {
  if (goog.userAgent.WEBKIT) {
    return "-webkit";
  } else {
    if (goog.userAgent.GECKO) {
      return "-moz";
    } else {
      if (goog.userAgent.IE) {
        return "-ms";
      } else {
        if (goog.userAgent.OPERA) {
          return "-o";
        }
      }
    }
  }
  return null;
};
goog.dom.vendor.getPrefixedPropertyName = function(propertyName, opt_object) {
  if (opt_object && propertyName in opt_object) {
    return propertyName;
  }
  var prefix = goog.dom.vendor.getVendorJsPrefix();
  if (prefix) {
    prefix = prefix.toLowerCase();
    var prefixedPropertyName = prefix + goog.string.toTitleCase(propertyName);
    return!goog.isDef(opt_object) || prefixedPropertyName in opt_object ? prefixedPropertyName : null;
  }
  return null;
};
goog.dom.vendor.getPrefixedEventType = function(eventType) {
  var prefix = goog.dom.vendor.getVendorJsPrefix() || "";
  return(prefix + eventType).toLowerCase();
};
goog.provide("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.math.Box = function(top, right, bottom, left) {
  this.top = top;
  this.right = right;
  this.bottom = bottom;
  this.left = left;
};
goog.math.Box.boundingBox = function(var_args) {
  var box = new goog.math.Box(arguments[0].y, arguments[0].x, arguments[0].y, arguments[0].x);
  for (var i = 1;i < arguments.length;i++) {
    var coord = arguments[i];
    box.top = Math.min(box.top, coord.y);
    box.right = Math.max(box.right, coord.x);
    box.bottom = Math.max(box.bottom, coord.y);
    box.left = Math.min(box.left, coord.x);
  }
  return box;
};
goog.math.Box.prototype.getWidth = function() {
  return this.right - this.left;
};
goog.math.Box.prototype.getHeight = function() {
  return this.bottom - this.top;
};
goog.math.Box.prototype.clone = function() {
  return new goog.math.Box(this.top, this.right, this.bottom, this.left);
};
if (goog.DEBUG) {
  goog.math.Box.prototype.toString = function() {
    return "(" + this.top + "t, " + this.right + "r, " + this.bottom + "b, " + this.left + "l)";
  };
}
goog.math.Box.prototype.contains = function(other) {
  return goog.math.Box.contains(this, other);
};
goog.math.Box.prototype.expand = function(top, opt_right, opt_bottom, opt_left) {
  if (goog.isObject(top)) {
    this.top -= top.top;
    this.right += top.right;
    this.bottom += top.bottom;
    this.left -= top.left;
  } else {
    this.top -= top;
    this.right += opt_right;
    this.bottom += opt_bottom;
    this.left -= opt_left;
  }
  return this;
};
goog.math.Box.prototype.expandToInclude = function(box) {
  this.left = Math.min(this.left, box.left);
  this.top = Math.min(this.top, box.top);
  this.right = Math.max(this.right, box.right);
  this.bottom = Math.max(this.bottom, box.bottom);
};
goog.math.Box.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.top == b.top && a.right == b.right && a.bottom == b.bottom && a.left == b.left;
};
goog.math.Box.contains = function(box, other) {
  if (!box || !other) {
    return false;
  }
  if (other instanceof goog.math.Box) {
    return other.left >= box.left && other.right <= box.right && other.top >= box.top && other.bottom <= box.bottom;
  }
  return other.x >= box.left && other.x <= box.right && other.y >= box.top && other.y <= box.bottom;
};
goog.math.Box.relativePositionX = function(box, coord) {
  if (coord.x < box.left) {
    return coord.x - box.left;
  } else {
    if (coord.x > box.right) {
      return coord.x - box.right;
    }
  }
  return 0;
};
goog.math.Box.relativePositionY = function(box, coord) {
  if (coord.y < box.top) {
    return coord.y - box.top;
  } else {
    if (coord.y > box.bottom) {
      return coord.y - box.bottom;
    }
  }
  return 0;
};
goog.math.Box.distance = function(box, coord) {
  var x = goog.math.Box.relativePositionX(box, coord);
  var y = goog.math.Box.relativePositionY(box, coord);
  return Math.sqrt(x * x + y * y);
};
goog.math.Box.intersects = function(a, b) {
  return a.left <= b.right && b.left <= a.right && a.top <= b.bottom && b.top <= a.bottom;
};
goog.math.Box.intersectsWithPadding = function(a, b, padding) {
  return a.left <= b.right + padding && b.left <= a.right + padding && a.top <= b.bottom + padding && b.top <= a.bottom + padding;
};
goog.math.Box.prototype.ceil = function() {
  this.top = Math.ceil(this.top);
  this.right = Math.ceil(this.right);
  this.bottom = Math.ceil(this.bottom);
  this.left = Math.ceil(this.left);
  return this;
};
goog.math.Box.prototype.floor = function() {
  this.top = Math.floor(this.top);
  this.right = Math.floor(this.right);
  this.bottom = Math.floor(this.bottom);
  this.left = Math.floor(this.left);
  return this;
};
goog.math.Box.prototype.round = function() {
  this.top = Math.round(this.top);
  this.right = Math.round(this.right);
  this.bottom = Math.round(this.bottom);
  this.left = Math.round(this.left);
  return this;
};
goog.math.Box.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.left += tx.x;
    this.right += tx.x;
    this.top += tx.y;
    this.bottom += tx.y;
  } else {
    this.left += tx;
    this.right += tx;
    if (goog.isNumber(opt_ty)) {
      this.top += opt_ty;
      this.bottom += opt_ty;
    }
  }
  return this;
};
goog.math.Box.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.left *= sx;
  this.right *= sx;
  this.top *= sy;
  this.bottom *= sy;
  return this;
};
goog.provide("goog.math.Rect");
goog.require("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.math.Rect = function(x, y, w, h) {
  this.left = x;
  this.top = y;
  this.width = w;
  this.height = h;
};
goog.math.Rect.prototype.clone = function() {
  return new goog.math.Rect(this.left, this.top, this.width, this.height);
};
goog.math.Rect.prototype.toBox = function() {
  var right = this.left + this.width;
  var bottom = this.top + this.height;
  return new goog.math.Box(this.top, right, bottom, this.left);
};
goog.math.Rect.createFromBox = function(box) {
  return new goog.math.Rect(box.left, box.top, box.right - box.left, box.bottom - box.top);
};
if (goog.DEBUG) {
  goog.math.Rect.prototype.toString = function() {
    return "(" + this.left + ", " + this.top + " - " + this.width + "w x " + this.height + "h)";
  };
}
goog.math.Rect.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.left == b.left && a.width == b.width && a.top == b.top && a.height == b.height;
};
goog.math.Rect.prototype.intersection = function(rect) {
  var x0 = Math.max(this.left, rect.left);
  var x1 = Math.min(this.left + this.width, rect.left + rect.width);
  if (x0 <= x1) {
    var y0 = Math.max(this.top, rect.top);
    var y1 = Math.min(this.top + this.height, rect.top + rect.height);
    if (y0 <= y1) {
      this.left = x0;
      this.top = y0;
      this.width = x1 - x0;
      this.height = y1 - y0;
      return true;
    }
  }
  return false;
};
goog.math.Rect.intersection = function(a, b) {
  var x0 = Math.max(a.left, b.left);
  var x1 = Math.min(a.left + a.width, b.left + b.width);
  if (x0 <= x1) {
    var y0 = Math.max(a.top, b.top);
    var y1 = Math.min(a.top + a.height, b.top + b.height);
    if (y0 <= y1) {
      return new goog.math.Rect(x0, y0, x1 - x0, y1 - y0);
    }
  }
  return null;
};
goog.math.Rect.intersects = function(a, b) {
  return a.left <= b.left + b.width && b.left <= a.left + a.width && a.top <= b.top + b.height && b.top <= a.top + a.height;
};
goog.math.Rect.prototype.intersects = function(rect) {
  return goog.math.Rect.intersects(this, rect);
};
goog.math.Rect.difference = function(a, b) {
  var intersection = goog.math.Rect.intersection(a, b);
  if (!intersection || !intersection.height || !intersection.width) {
    return[a.clone()];
  }
  var result = [];
  var top = a.top;
  var height = a.height;
  var ar = a.left + a.width;
  var ab = a.top + a.height;
  var br = b.left + b.width;
  var bb = b.top + b.height;
  if (b.top > a.top) {
    result.push(new goog.math.Rect(a.left, a.top, a.width, b.top - a.top));
    top = b.top;
    height -= b.top - a.top;
  }
  if (bb < ab) {
    result.push(new goog.math.Rect(a.left, bb, a.width, ab - bb));
    height = bb - top;
  }
  if (b.left > a.left) {
    result.push(new goog.math.Rect(a.left, top, b.left - a.left, height));
  }
  if (br < ar) {
    result.push(new goog.math.Rect(br, top, ar - br, height));
  }
  return result;
};
goog.math.Rect.prototype.difference = function(rect) {
  return goog.math.Rect.difference(this, rect);
};
goog.math.Rect.prototype.boundingRect = function(rect) {
  var right = Math.max(this.left + this.width, rect.left + rect.width);
  var bottom = Math.max(this.top + this.height, rect.top + rect.height);
  this.left = Math.min(this.left, rect.left);
  this.top = Math.min(this.top, rect.top);
  this.width = right - this.left;
  this.height = bottom - this.top;
};
goog.math.Rect.boundingRect = function(a, b) {
  if (!a || !b) {
    return null;
  }
  var clone = a.clone();
  clone.boundingRect(b);
  return clone;
};
goog.math.Rect.prototype.contains = function(another) {
  if (another instanceof goog.math.Rect) {
    return this.left <= another.left && this.left + this.width >= another.left + another.width && this.top <= another.top && this.top + this.height >= another.top + another.height;
  } else {
    return another.x >= this.left && another.x <= this.left + this.width && another.y >= this.top && another.y <= this.top + this.height;
  }
};
goog.math.Rect.prototype.squaredDistance = function(point) {
  var dx = point.x < this.left ? this.left - point.x : Math.max(point.x - (this.left + this.width), 0);
  var dy = point.y < this.top ? this.top - point.y : Math.max(point.y - (this.top + this.height), 0);
  return dx * dx + dy * dy;
};
goog.math.Rect.prototype.distance = function(point) {
  return Math.sqrt(this.squaredDistance(point));
};
goog.math.Rect.prototype.getSize = function() {
  return new goog.math.Size(this.width, this.height);
};
goog.math.Rect.prototype.getTopLeft = function() {
  return new goog.math.Coordinate(this.left, this.top);
};
goog.math.Rect.prototype.getCenter = function() {
  return new goog.math.Coordinate(this.left + this.width / 2, this.top + this.height / 2);
};
goog.math.Rect.prototype.getBottomRight = function() {
  return new goog.math.Coordinate(this.left + this.width, this.top + this.height);
};
goog.math.Rect.prototype.ceil = function() {
  this.left = Math.ceil(this.left);
  this.top = Math.ceil(this.top);
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Rect.prototype.floor = function() {
  this.left = Math.floor(this.left);
  this.top = Math.floor(this.top);
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Rect.prototype.round = function() {
  this.left = Math.round(this.left);
  this.top = Math.round(this.top);
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Rect.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.left += tx.x;
    this.top += tx.y;
  } else {
    this.left += tx;
    if (goog.isNumber(opt_ty)) {
      this.top += opt_ty;
    }
  }
  return this;
};
goog.math.Rect.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.left *= sx;
  this.width *= sx;
  this.top *= sy;
  this.height *= sy;
  return this;
};
goog.provide("goog.style");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.vendor");
goog.require("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Rect");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.define("goog.style.GET_BOUNDING_CLIENT_RECT_ALWAYS_EXISTS", false);
goog.style.setStyle = function(element, style, opt_value) {
  if (goog.isString(style)) {
    goog.style.setStyle_(element, opt_value, style);
  } else {
    goog.object.forEach(style, goog.partial(goog.style.setStyle_, element));
  }
};
goog.style.setStyle_ = function(element, value, style) {
  var propertyName = goog.style.getVendorJsStyleName_(element, style);
  if (propertyName) {
    element.style[propertyName] = value;
  }
};
goog.style.getVendorJsStyleName_ = function(element, style) {
  var camelStyle = goog.string.toCamelCase(style);
  if (element.style[camelStyle] === undefined) {
    var prefixedStyle = goog.dom.vendor.getVendorJsPrefix() + goog.string.toTitleCase(camelStyle);
    if (element.style[prefixedStyle] !== undefined) {
      return prefixedStyle;
    }
  }
  return camelStyle;
};
goog.style.getVendorStyleName_ = function(element, style) {
  var camelStyle = goog.string.toCamelCase(style);
  if (element.style[camelStyle] === undefined) {
    var prefixedStyle = goog.dom.vendor.getVendorJsPrefix() + goog.string.toTitleCase(camelStyle);
    if (element.style[prefixedStyle] !== undefined) {
      return goog.dom.vendor.getVendorPrefix() + "-" + style;
    }
  }
  return style;
};
goog.style.getStyle = function(element, property) {
  var styleValue = element.style[goog.string.toCamelCase(property)];
  if (typeof styleValue !== "undefined") {
    return styleValue;
  }
  return element.style[goog.style.getVendorJsStyleName_(element, property)] || "";
};
goog.style.getComputedStyle = function(element, property) {
  var doc = goog.dom.getOwnerDocument(element);
  if (doc.defaultView && doc.defaultView.getComputedStyle) {
    var styles = doc.defaultView.getComputedStyle(element, null);
    if (styles) {
      return styles[property] || styles.getPropertyValue(property) || "";
    }
  }
  return "";
};
goog.style.getCascadedStyle = function(element, style) {
  return element.currentStyle ? element.currentStyle[style] : null;
};
goog.style.getStyle_ = function(element, style) {
  return goog.style.getComputedStyle(element, style) || goog.style.getCascadedStyle(element, style) || element.style && element.style[style];
};
goog.style.getComputedBoxSizing = function(element) {
  return goog.style.getStyle_(element, "boxSizing") || goog.style.getStyle_(element, "MozBoxSizing") || goog.style.getStyle_(element, "WebkitBoxSizing") || null;
};
goog.style.getComputedPosition = function(element) {
  return goog.style.getStyle_(element, "position");
};
goog.style.getBackgroundColor = function(element) {
  return goog.style.getStyle_(element, "backgroundColor");
};
goog.style.getComputedOverflowX = function(element) {
  return goog.style.getStyle_(element, "overflowX");
};
goog.style.getComputedOverflowY = function(element) {
  return goog.style.getStyle_(element, "overflowY");
};
goog.style.getComputedZIndex = function(element) {
  return goog.style.getStyle_(element, "zIndex");
};
goog.style.getComputedTextAlign = function(element) {
  return goog.style.getStyle_(element, "textAlign");
};
goog.style.getComputedCursor = function(element) {
  return goog.style.getStyle_(element, "cursor");
};
goog.style.getComputedTransform = function(element) {
  var property = goog.style.getVendorStyleName_(element, "transform");
  return goog.style.getStyle_(element, property) || goog.style.getStyle_(element, "transform");
};
goog.style.setPosition = function(el, arg1, opt_arg2) {
  var x, y;
  var buggyGeckoSubPixelPos = goog.userAgent.GECKO && (goog.userAgent.MAC || goog.userAgent.X11) && goog.userAgent.isVersionOrHigher("1.9");
  if (arg1 instanceof goog.math.Coordinate) {
    x = arg1.x;
    y = arg1.y;
  } else {
    x = arg1;
    y = opt_arg2;
  }
  el.style.left = goog.style.getPixelStyleValue_((x), buggyGeckoSubPixelPos);
  el.style.top = goog.style.getPixelStyleValue_((y), buggyGeckoSubPixelPos);
};
goog.style.getPosition = function(element) {
  return new goog.math.Coordinate(element.offsetLeft, element.offsetTop);
};
goog.style.getClientViewportElement = function(opt_node) {
  var doc;
  if (opt_node) {
    doc = goog.dom.getOwnerDocument(opt_node);
  } else {
    doc = goog.dom.getDocument();
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9) && !goog.dom.getDomHelper(doc).isCss1CompatMode()) {
    return doc.body;
  }
  return doc.documentElement;
};
goog.style.getViewportPageOffset = function(doc) {
  var body = doc.body;
  var documentElement = doc.documentElement;
  var scrollLeft = body.scrollLeft || documentElement.scrollLeft;
  var scrollTop = body.scrollTop || documentElement.scrollTop;
  return new goog.math.Coordinate(scrollLeft, scrollTop);
};
goog.style.getBoundingClientRect_ = function(el) {
  var rect;
  try {
    rect = el.getBoundingClientRect();
  } catch (e) {
    return{"left":0, "top":0, "right":0, "bottom":0};
  }
  if (goog.userAgent.IE && el.ownerDocument.body) {
    var doc = el.ownerDocument;
    rect.left -= doc.documentElement.clientLeft + doc.body.clientLeft;
    rect.top -= doc.documentElement.clientTop + doc.body.clientTop;
  }
  return(rect);
};
goog.style.getOffsetParent = function(element) {
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(8)) {
    return element.offsetParent;
  }
  var doc = goog.dom.getOwnerDocument(element);
  var positionStyle = goog.style.getStyle_(element, "position");
  var skipStatic = positionStyle == "fixed" || positionStyle == "absolute";
  for (var parent = element.parentNode;parent && parent != doc;parent = parent.parentNode) {
    positionStyle = goog.style.getStyle_((parent), "position");
    skipStatic = skipStatic && positionStyle == "static" && parent != doc.documentElement && parent != doc.body;
    if (!skipStatic && (parent.scrollWidth > parent.clientWidth || parent.scrollHeight > parent.clientHeight || positionStyle == "fixed" || positionStyle == "absolute" || positionStyle == "relative")) {
      return(parent);
    }
  }
  return null;
};
goog.style.getVisibleRectForElement = function(element) {
  var visibleRect = new goog.math.Box(0, Infinity, Infinity, 0);
  var dom = goog.dom.getDomHelper(element);
  var body = dom.getDocument().body;
  var documentElement = dom.getDocument().documentElement;
  var scrollEl = dom.getDocumentScrollElement();
  for (var el = element;el = goog.style.getOffsetParent(el);) {
    if ((!goog.userAgent.IE || el.clientWidth != 0) && (!goog.userAgent.WEBKIT || el.clientHeight != 0 || el != body) && (el != body && el != documentElement && goog.style.getStyle_(el, "overflow") != "visible")) {
      var pos = goog.style.getPageOffset(el);
      var client = goog.style.getClientLeftTop(el);
      pos.x += client.x;
      pos.y += client.y;
      visibleRect.top = Math.max(visibleRect.top, pos.y);
      visibleRect.right = Math.min(visibleRect.right, pos.x + el.clientWidth);
      visibleRect.bottom = Math.min(visibleRect.bottom, pos.y + el.clientHeight);
      visibleRect.left = Math.max(visibleRect.left, pos.x);
    }
  }
  var scrollX = scrollEl.scrollLeft, scrollY = scrollEl.scrollTop;
  visibleRect.left = Math.max(visibleRect.left, scrollX);
  visibleRect.top = Math.max(visibleRect.top, scrollY);
  var winSize = dom.getViewportSize();
  visibleRect.right = Math.min(visibleRect.right, scrollX + winSize.width);
  visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + winSize.height);
  return visibleRect.top >= 0 && visibleRect.left >= 0 && visibleRect.bottom > visibleRect.top && visibleRect.right > visibleRect.left ? visibleRect : null;
};
goog.style.getContainerOffsetToScrollInto = function(element, container, opt_center) {
  var elementPos = goog.style.getPageOffset(element);
  var containerPos = goog.style.getPageOffset(container);
  var containerBorder = goog.style.getBorderBox(container);
  var relX = elementPos.x - containerPos.x - containerBorder.left;
  var relY = elementPos.y - containerPos.y - containerBorder.top;
  var spaceX = container.clientWidth - element.offsetWidth;
  var spaceY = container.clientHeight - element.offsetHeight;
  var scrollLeft = container.scrollLeft;
  var scrollTop = container.scrollTop;
  if (opt_center) {
    scrollLeft += relX - spaceX / 2;
    scrollTop += relY - spaceY / 2;
  } else {
    scrollLeft += Math.min(relX, Math.max(relX - spaceX, 0));
    scrollTop += Math.min(relY, Math.max(relY - spaceY, 0));
  }
  return new goog.math.Coordinate(scrollLeft, scrollTop);
};
goog.style.scrollIntoContainerView = function(element, container, opt_center) {
  var offset = goog.style.getContainerOffsetToScrollInto(element, container, opt_center);
  container.scrollLeft = offset.x;
  container.scrollTop = offset.y;
};
goog.style.getClientLeftTop = function(el) {
  if (goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("1.9")) {
    var left = parseFloat(goog.style.getComputedStyle(el, "borderLeftWidth"));
    if (goog.style.isRightToLeft(el)) {
      var scrollbarWidth = el.offsetWidth - el.clientWidth - left - parseFloat(goog.style.getComputedStyle(el, "borderRightWidth"));
      left += scrollbarWidth;
    }
    return new goog.math.Coordinate(left, parseFloat(goog.style.getComputedStyle(el, "borderTopWidth")));
  }
  return new goog.math.Coordinate(el.clientLeft, el.clientTop);
};
goog.style.getPageOffset = function(el) {
  var box, doc = goog.dom.getOwnerDocument(el);
  var positionStyle = goog.style.getStyle_(el, "position");
  goog.asserts.assertObject(el, "Parameter is required");
  var BUGGY_GECKO_BOX_OBJECT = !goog.style.GET_BOUNDING_CLIENT_RECT_ALWAYS_EXISTS && goog.userAgent.GECKO && doc.getBoxObjectFor && !el.getBoundingClientRect && positionStyle == "absolute" && (box = doc.getBoxObjectFor(el)) && (box.screenX < 0 || box.screenY < 0);
  var pos = new goog.math.Coordinate(0, 0);
  var viewportElement = goog.style.getClientViewportElement(doc);
  if (el == viewportElement) {
    return pos;
  }
  if (goog.style.GET_BOUNDING_CLIENT_RECT_ALWAYS_EXISTS || el.getBoundingClientRect) {
    box = goog.style.getBoundingClientRect_(el);
    var scrollCoord = goog.dom.getDomHelper(doc).getDocumentScroll();
    pos.x = box.left + scrollCoord.x;
    pos.y = box.top + scrollCoord.y;
  } else {
    if (doc.getBoxObjectFor && !BUGGY_GECKO_BOX_OBJECT) {
      box = doc.getBoxObjectFor(el);
      var vpBox = doc.getBoxObjectFor(viewportElement);
      pos.x = box.screenX - vpBox.screenX;
      pos.y = box.screenY - vpBox.screenY;
    } else {
      var parent = el;
      do {
        pos.x += parent.offsetLeft;
        pos.y += parent.offsetTop;
        if (parent != el) {
          pos.x += parent.clientLeft || 0;
          pos.y += parent.clientTop || 0;
        }
        if (goog.userAgent.WEBKIT && goog.style.getComputedPosition(parent) == "fixed") {
          pos.x += doc.body.scrollLeft;
          pos.y += doc.body.scrollTop;
          break;
        }
        parent = parent.offsetParent;
      } while (parent && parent != el);
      if (goog.userAgent.OPERA || goog.userAgent.WEBKIT && positionStyle == "absolute") {
        pos.y -= doc.body.offsetTop;
      }
      for (parent = el;(parent = goog.style.getOffsetParent(parent)) && parent != doc.body && parent != viewportElement;) {
        pos.x -= parent.scrollLeft;
        if (!goog.userAgent.OPERA || parent.tagName != "TR") {
          pos.y -= parent.scrollTop;
        }
      }
    }
  }
  return pos;
};
goog.style.getPageOffsetLeft = function(el) {
  return goog.style.getPageOffset(el).x;
};
goog.style.getPageOffsetTop = function(el) {
  return goog.style.getPageOffset(el).y;
};
goog.style.getFramedPageOffset = function(el, relativeWin) {
  var position = new goog.math.Coordinate(0, 0);
  var currentWin = goog.dom.getWindow(goog.dom.getOwnerDocument(el));
  var currentEl = el;
  do {
    var offset = currentWin == relativeWin ? goog.style.getPageOffset(currentEl) : goog.style.getClientPositionForElement_(goog.asserts.assert(currentEl));
    position.x += offset.x;
    position.y += offset.y;
  } while (currentWin && currentWin != relativeWin && (currentEl = currentWin.frameElement) && (currentWin = currentWin.parent));
  return position;
};
goog.style.translateRectForAnotherFrame = function(rect, origBase, newBase) {
  if (origBase.getDocument() != newBase.getDocument()) {
    var body = origBase.getDocument().body;
    var pos = goog.style.getFramedPageOffset(body, newBase.getWindow());
    pos = goog.math.Coordinate.difference(pos, goog.style.getPageOffset(body));
    if (goog.userAgent.IE && !origBase.isCss1CompatMode()) {
      pos = goog.math.Coordinate.difference(pos, origBase.getDocumentScroll());
    }
    rect.left += pos.x;
    rect.top += pos.y;
  }
};
goog.style.getRelativePosition = function(a, b) {
  var ap = goog.style.getClientPosition(a);
  var bp = goog.style.getClientPosition(b);
  return new goog.math.Coordinate(ap.x - bp.x, ap.y - bp.y);
};
goog.style.getClientPositionForElement_ = function(el) {
  var pos;
  if (goog.style.GET_BOUNDING_CLIENT_RECT_ALWAYS_EXISTS || el.getBoundingClientRect) {
    var box = goog.style.getBoundingClientRect_(el);
    pos = new goog.math.Coordinate(box.left, box.top);
  } else {
    var scrollCoord = goog.dom.getDomHelper(el).getDocumentScroll();
    var pageCoord = goog.style.getPageOffset(el);
    pos = new goog.math.Coordinate(pageCoord.x - scrollCoord.x, pageCoord.y - scrollCoord.y);
  }
  if (goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher(12)) {
    return goog.math.Coordinate.sum(pos, goog.style.getCssTranslation(el));
  } else {
    return pos;
  }
};
goog.style.getClientPosition = function(el) {
  goog.asserts.assert(el);
  if (el.nodeType == goog.dom.NodeType.ELEMENT) {
    return goog.style.getClientPositionForElement_((el));
  } else {
    var isAbstractedEvent = goog.isFunction(el.getBrowserEvent);
    var be = (el);
    var targetEvent = el;
    if (el.targetTouches) {
      targetEvent = el.targetTouches[0];
    } else {
      if (isAbstractedEvent && be.getBrowserEvent().targetTouches) {
        targetEvent = be.getBrowserEvent().targetTouches[0];
      }
    }
    return new goog.math.Coordinate(targetEvent.clientX, targetEvent.clientY);
  }
};
goog.style.setPageOffset = function(el, x, opt_y) {
  var cur = goog.style.getPageOffset(el);
  if (x instanceof goog.math.Coordinate) {
    opt_y = x.y;
    x = x.x;
  }
  var dx = x - cur.x;
  var dy = opt_y - cur.y;
  goog.style.setPosition(el, el.offsetLeft + dx, el.offsetTop + dy);
};
goog.style.setSize = function(element, w, opt_h) {
  var h;
  if (w instanceof goog.math.Size) {
    h = w.height;
    w = w.width;
  } else {
    if (opt_h == undefined) {
      throw Error("missing height argument");
    }
    h = opt_h;
  }
  goog.style.setWidth(element, (w));
  goog.style.setHeight(element, (h));
};
goog.style.getPixelStyleValue_ = function(value, round) {
  if (typeof value == "number") {
    value = (round ? Math.round(value) : value) + "px";
  }
  return value;
};
goog.style.setHeight = function(element, height) {
  element.style.height = goog.style.getPixelStyleValue_(height, true);
};
goog.style.setWidth = function(element, width) {
  element.style.width = goog.style.getPixelStyleValue_(width, true);
};
goog.style.getSize = function(element) {
  return goog.style.evaluateWithTemporaryDisplay_(goog.style.getSizeWithDisplay_, (element));
};
goog.style.evaluateWithTemporaryDisplay_ = function(fn, element) {
  if (goog.style.getStyle_(element, "display") != "none") {
    return fn(element);
  }
  var style = element.style;
  var originalDisplay = style.display;
  var originalVisibility = style.visibility;
  var originalPosition = style.position;
  style.visibility = "hidden";
  style.position = "absolute";
  style.display = "inline";
  var retVal = fn(element);
  style.display = originalDisplay;
  style.position = originalPosition;
  style.visibility = originalVisibility;
  return retVal;
};
goog.style.getSizeWithDisplay_ = function(element) {
  var offsetWidth = element.offsetWidth;
  var offsetHeight = element.offsetHeight;
  var webkitOffsetsZero = goog.userAgent.WEBKIT && !offsetWidth && !offsetHeight;
  if ((!goog.isDef(offsetWidth) || webkitOffsetsZero) && element.getBoundingClientRect) {
    var clientRect = goog.style.getBoundingClientRect_(element);
    return new goog.math.Size(clientRect.right - clientRect.left, clientRect.bottom - clientRect.top);
  }
  return new goog.math.Size(offsetWidth, offsetHeight);
};
goog.style.getTransformedSize = function(element) {
  if (!element.getBoundingClientRect) {
    return null;
  }
  var clientRect = goog.style.evaluateWithTemporaryDisplay_(goog.style.getBoundingClientRect_, element);
  return new goog.math.Size(clientRect.right - clientRect.left, clientRect.bottom - clientRect.top);
};
goog.style.getBounds = function(element) {
  var o = goog.style.getPageOffset(element);
  var s = goog.style.getSize(element);
  return new goog.math.Rect(o.x, o.y, s.width, s.height);
};
goog.style.toCamelCase = function(selector) {
  return goog.string.toCamelCase(String(selector));
};
goog.style.toSelectorCase = function(selector) {
  return goog.string.toSelectorCase(selector);
};
goog.style.getOpacity = function(el) {
  var style = el.style;
  var result = "";
  if ("opacity" in style) {
    result = style.opacity;
  } else {
    if ("MozOpacity" in style) {
      result = style.MozOpacity;
    } else {
      if ("filter" in style) {
        var match = style.filter.match(/alpha\(opacity=([\d.]+)\)/);
        if (match) {
          result = String(match[1] / 100);
        }
      }
    }
  }
  return result == "" ? result : Number(result);
};
goog.style.setOpacity = function(el, alpha) {
  var style = el.style;
  if ("opacity" in style) {
    style.opacity = alpha;
  } else {
    if ("MozOpacity" in style) {
      style.MozOpacity = alpha;
    } else {
      if ("filter" in style) {
        if (alpha === "") {
          style.filter = "";
        } else {
          style.filter = "alpha(opacity\x3d" + alpha * 100 + ")";
        }
      }
    }
  }
};
goog.style.setTransparentBackgroundImage = function(el, src) {
  var style = el.style;
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("8")) {
    style.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader(" + 'src\x3d"' + src + '", sizingMethod\x3d"crop")';
  } else {
    style.backgroundImage = "url(" + src + ")";
    style.backgroundPosition = "top left";
    style.backgroundRepeat = "no-repeat";
  }
};
goog.style.clearTransparentBackgroundImage = function(el) {
  var style = el.style;
  if ("filter" in style) {
    style.filter = "";
  } else {
    style.backgroundImage = "none";
  }
};
goog.style.showElement = function(el, display) {
  goog.style.setElementShown(el, display);
};
goog.style.setElementShown = function(el, isShown) {
  el.style.display = isShown ? "" : "none";
};
goog.style.isElementShown = function(el) {
  return el.style.display != "none";
};
goog.style.installStyles = function(stylesString, opt_node) {
  var dh = goog.dom.getDomHelper(opt_node);
  var styleSheet = null;
  var doc = dh.getDocument();
  if (goog.userAgent.IE && doc.createStyleSheet) {
    styleSheet = doc.createStyleSheet();
    goog.style.setStyles(styleSheet, stylesString);
  } else {
    var head = dh.getElementsByTagNameAndClass("head")[0];
    if (!head) {
      var body = dh.getElementsByTagNameAndClass("body")[0];
      head = dh.createDom("head");
      body.parentNode.insertBefore(head, body);
    }
    styleSheet = dh.createDom("style");
    goog.style.setStyles(styleSheet, stylesString);
    dh.appendChild(head, styleSheet);
  }
  return styleSheet;
};
goog.style.uninstallStyles = function(styleSheet) {
  var node = styleSheet.ownerNode || styleSheet.owningElement || (styleSheet);
  goog.dom.removeNode(node);
};
goog.style.setStyles = function(element, stylesString) {
  if (goog.userAgent.IE && goog.isDef(element.cssText)) {
    element.cssText = stylesString;
  } else {
    element.innerHTML = stylesString;
  }
};
goog.style.setPreWrap = function(el) {
  var style = el.style;
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("8")) {
    style.whiteSpace = "pre";
    style.wordWrap = "break-word";
  } else {
    if (goog.userAgent.GECKO) {
      style.whiteSpace = "-moz-pre-wrap";
    } else {
      style.whiteSpace = "pre-wrap";
    }
  }
};
goog.style.setInlineBlock = function(el) {
  var style = el.style;
  style.position = "relative";
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("8")) {
    style.zoom = "1";
    style.display = "inline";
  } else {
    if (goog.userAgent.GECKO) {
      style.display = goog.userAgent.isVersionOrHigher("1.9a") ? "inline-block" : "-moz-inline-box";
    } else {
      style.display = "inline-block";
    }
  }
};
goog.style.isRightToLeft = function(el) {
  return "rtl" == goog.style.getStyle_(el, "direction");
};
goog.style.unselectableStyle_ = goog.userAgent.GECKO ? "MozUserSelect" : goog.userAgent.WEBKIT ? "WebkitUserSelect" : null;
goog.style.isUnselectable = function(el) {
  if (goog.style.unselectableStyle_) {
    return el.style[goog.style.unselectableStyle_].toLowerCase() == "none";
  } else {
    if (goog.userAgent.IE || goog.userAgent.OPERA) {
      return el.getAttribute("unselectable") == "on";
    }
  }
  return false;
};
goog.style.setUnselectable = function(el, unselectable, opt_noRecurse) {
  var descendants = !opt_noRecurse ? el.getElementsByTagName("*") : null;
  var name = goog.style.unselectableStyle_;
  if (name) {
    var value = unselectable ? "none" : "";
    el.style[name] = value;
    if (descendants) {
      for (var i = 0, descendant;descendant = descendants[i];i++) {
        descendant.style[name] = value;
      }
    }
  } else {
    if (goog.userAgent.IE || goog.userAgent.OPERA) {
      var value = unselectable ? "on" : "";
      el.setAttribute("unselectable", value);
      if (descendants) {
        for (var i = 0, descendant;descendant = descendants[i];i++) {
          descendant.setAttribute("unselectable", value);
        }
      }
    }
  }
};
goog.style.getBorderBoxSize = function(element) {
  return new goog.math.Size(element.offsetWidth, element.offsetHeight);
};
goog.style.setBorderBoxSize = function(element, size) {
  var doc = goog.dom.getOwnerDocument(element);
  var isCss1CompatMode = goog.dom.getDomHelper(doc).isCss1CompatMode();
  if (goog.userAgent.IE && (!isCss1CompatMode || !goog.userAgent.isVersionOrHigher("8"))) {
    var style = element.style;
    if (isCss1CompatMode) {
      var paddingBox = goog.style.getPaddingBox(element);
      var borderBox = goog.style.getBorderBox(element);
      style.pixelWidth = size.width - borderBox.left - paddingBox.left - paddingBox.right - borderBox.right;
      style.pixelHeight = size.height - borderBox.top - paddingBox.top - paddingBox.bottom - borderBox.bottom;
    } else {
      style.pixelWidth = size.width;
      style.pixelHeight = size.height;
    }
  } else {
    goog.style.setBoxSizingSize_(element, size, "border-box");
  }
};
goog.style.getContentBoxSize = function(element) {
  var doc = goog.dom.getOwnerDocument(element);
  var ieCurrentStyle = goog.userAgent.IE && element.currentStyle;
  if (ieCurrentStyle && goog.dom.getDomHelper(doc).isCss1CompatMode() && ieCurrentStyle.width != "auto" && ieCurrentStyle.height != "auto" && !ieCurrentStyle.boxSizing) {
    var width = goog.style.getIePixelValue_(element, ieCurrentStyle.width, "width", "pixelWidth");
    var height = goog.style.getIePixelValue_(element, ieCurrentStyle.height, "height", "pixelHeight");
    return new goog.math.Size(width, height);
  } else {
    var borderBoxSize = goog.style.getBorderBoxSize(element);
    var paddingBox = goog.style.getPaddingBox(element);
    var borderBox = goog.style.getBorderBox(element);
    return new goog.math.Size(borderBoxSize.width - borderBox.left - paddingBox.left - paddingBox.right - borderBox.right, borderBoxSize.height - borderBox.top - paddingBox.top - paddingBox.bottom - borderBox.bottom);
  }
};
goog.style.setContentBoxSize = function(element, size) {
  var doc = goog.dom.getOwnerDocument(element);
  var isCss1CompatMode = goog.dom.getDomHelper(doc).isCss1CompatMode();
  if (goog.userAgent.IE && (!isCss1CompatMode || !goog.userAgent.isVersionOrHigher("8"))) {
    var style = element.style;
    if (isCss1CompatMode) {
      style.pixelWidth = size.width;
      style.pixelHeight = size.height;
    } else {
      var paddingBox = goog.style.getPaddingBox(element);
      var borderBox = goog.style.getBorderBox(element);
      style.pixelWidth = size.width + borderBox.left + paddingBox.left + paddingBox.right + borderBox.right;
      style.pixelHeight = size.height + borderBox.top + paddingBox.top + paddingBox.bottom + borderBox.bottom;
    }
  } else {
    goog.style.setBoxSizingSize_(element, size, "content-box");
  }
};
goog.style.setBoxSizingSize_ = function(element, size, boxSizing) {
  var style = element.style;
  if (goog.userAgent.GECKO) {
    style.MozBoxSizing = boxSizing;
  } else {
    if (goog.userAgent.WEBKIT) {
      style.WebkitBoxSizing = boxSizing;
    } else {
      style.boxSizing = boxSizing;
    }
  }
  style.width = Math.max(size.width, 0) + "px";
  style.height = Math.max(size.height, 0) + "px";
};
goog.style.getIePixelValue_ = function(element, value, name, pixelName) {
  if (/^\d+px?$/.test(value)) {
    return parseInt(value, 10);
  } else {
    var oldStyleValue = element.style[name];
    var oldRuntimeValue = element.runtimeStyle[name];
    element.runtimeStyle[name] = element.currentStyle[name];
    element.style[name] = value;
    var pixelValue = element.style[pixelName];
    element.style[name] = oldStyleValue;
    element.runtimeStyle[name] = oldRuntimeValue;
    return pixelValue;
  }
};
goog.style.getIePixelDistance_ = function(element, propName) {
  var value = goog.style.getCascadedStyle(element, propName);
  return value ? goog.style.getIePixelValue_(element, value, "left", "pixelLeft") : 0;
};
goog.style.getBox_ = function(element, stylePrefix) {
  if (goog.userAgent.IE) {
    var left = goog.style.getIePixelDistance_(element, stylePrefix + "Left");
    var right = goog.style.getIePixelDistance_(element, stylePrefix + "Right");
    var top = goog.style.getIePixelDistance_(element, stylePrefix + "Top");
    var bottom = goog.style.getIePixelDistance_(element, stylePrefix + "Bottom");
    return new goog.math.Box(top, right, bottom, left);
  } else {
    var left = (goog.style.getComputedStyle(element, stylePrefix + "Left"));
    var right = (goog.style.getComputedStyle(element, stylePrefix + "Right"));
    var top = (goog.style.getComputedStyle(element, stylePrefix + "Top"));
    var bottom = (goog.style.getComputedStyle(element, stylePrefix + "Bottom"));
    return new goog.math.Box(parseFloat(top), parseFloat(right), parseFloat(bottom), parseFloat(left));
  }
};
goog.style.getPaddingBox = function(element) {
  return goog.style.getBox_(element, "padding");
};
goog.style.getMarginBox = function(element) {
  return goog.style.getBox_(element, "margin");
};
goog.style.ieBorderWidthKeywords_ = {"thin":2, "medium":4, "thick":6};
goog.style.getIePixelBorder_ = function(element, prop) {
  if (goog.style.getCascadedStyle(element, prop + "Style") == "none") {
    return 0;
  }
  var width = goog.style.getCascadedStyle(element, prop + "Width");
  if (width in goog.style.ieBorderWidthKeywords_) {
    return goog.style.ieBorderWidthKeywords_[width];
  }
  return goog.style.getIePixelValue_(element, width, "left", "pixelLeft");
};
goog.style.getBorderBox = function(element) {
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    var left = goog.style.getIePixelBorder_(element, "borderLeft");
    var right = goog.style.getIePixelBorder_(element, "borderRight");
    var top = goog.style.getIePixelBorder_(element, "borderTop");
    var bottom = goog.style.getIePixelBorder_(element, "borderBottom");
    return new goog.math.Box(top, right, bottom, left);
  } else {
    var left = (goog.style.getComputedStyle(element, "borderLeftWidth"));
    var right = (goog.style.getComputedStyle(element, "borderRightWidth"));
    var top = (goog.style.getComputedStyle(element, "borderTopWidth"));
    var bottom = (goog.style.getComputedStyle(element, "borderBottomWidth"));
    return new goog.math.Box(parseFloat(top), parseFloat(right), parseFloat(bottom), parseFloat(left));
  }
};
goog.style.getFontFamily = function(el) {
  var doc = goog.dom.getOwnerDocument(el);
  var font = "";
  if (doc.body.createTextRange && goog.dom.contains(doc, el)) {
    var range = doc.body.createTextRange();
    range.moveToElementText(el);
    try {
      font = range.queryCommandValue("FontName");
    } catch (e) {
      font = "";
    }
  }
  if (!font) {
    font = goog.style.getStyle_(el, "fontFamily");
  }
  var fontsArray = font.split(",");
  if (fontsArray.length > 1) {
    font = fontsArray[0];
  }
  return goog.string.stripQuotes(font, "\"'");
};
goog.style.lengthUnitRegex_ = /[^\d]+$/;
goog.style.getLengthUnits = function(value) {
  var units = value.match(goog.style.lengthUnitRegex_);
  return units && units[0] || null;
};
goog.style.ABSOLUTE_CSS_LENGTH_UNITS_ = {"cm":1, "in":1, "mm":1, "pc":1, "pt":1};
goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_ = {"em":1, "ex":1};
goog.style.getFontSize = function(el) {
  var fontSize = goog.style.getStyle_(el, "fontSize");
  var sizeUnits = goog.style.getLengthUnits(fontSize);
  if (fontSize && "px" == sizeUnits) {
    return parseInt(fontSize, 10);
  }
  if (goog.userAgent.IE) {
    if (sizeUnits in goog.style.ABSOLUTE_CSS_LENGTH_UNITS_) {
      return goog.style.getIePixelValue_(el, fontSize, "left", "pixelLeft");
    } else {
      if (el.parentNode && el.parentNode.nodeType == goog.dom.NodeType.ELEMENT && sizeUnits in goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_) {
        var parentElement = (el.parentNode);
        var parentSize = goog.style.getStyle_(parentElement, "fontSize");
        return goog.style.getIePixelValue_(parentElement, fontSize == parentSize ? "1em" : fontSize, "left", "pixelLeft");
      }
    }
  }
  var sizeElement = goog.dom.createDom("span", {"style":"visibility:hidden;position:absolute;" + "line-height:0;padding:0;margin:0;border:0;height:1em;"});
  goog.dom.appendChild(el, sizeElement);
  fontSize = sizeElement.offsetHeight;
  goog.dom.removeNode(sizeElement);
  return fontSize;
};
goog.style.parseStyleAttribute = function(value) {
  var result = {};
  goog.array.forEach(value.split(/\s*;\s*/), function(pair) {
    var keyValue = pair.split(/\s*:\s*/);
    if (keyValue.length == 2) {
      result[goog.string.toCamelCase(keyValue[0].toLowerCase())] = keyValue[1];
    }
  });
  return result;
};
goog.style.toStyleAttribute = function(obj) {
  var buffer = [];
  goog.object.forEach(obj, function(value, key) {
    buffer.push(goog.string.toSelectorCase(key), ":", value, ";");
  });
  return buffer.join("");
};
goog.style.setFloat = function(el, value) {
  el.style[goog.userAgent.IE ? "styleFloat" : "cssFloat"] = value;
};
goog.style.getFloat = function(el) {
  return el.style[goog.userAgent.IE ? "styleFloat" : "cssFloat"] || "";
};
goog.style.getScrollbarWidth = function(opt_className) {
  var outerDiv = goog.dom.createElement("div");
  if (opt_className) {
    outerDiv.className = opt_className;
  }
  outerDiv.style.cssText = "overflow:auto;" + "position:absolute;top:0;width:100px;height:100px";
  var innerDiv = goog.dom.createElement("div");
  goog.style.setSize(innerDiv, "200px", "200px");
  outerDiv.appendChild(innerDiv);
  goog.dom.appendChild(goog.dom.getDocument().body, outerDiv);
  var width = outerDiv.offsetWidth - outerDiv.clientWidth;
  goog.dom.removeNode(outerDiv);
  return width;
};
goog.style.MATRIX_TRANSLATION_REGEX_ = new RegExp("matrix\\([0-9\\.\\-]+, [0-9\\.\\-]+, " + "[0-9\\.\\-]+, [0-9\\.\\-]+, " + "([0-9\\.\\-]+)p?x?, ([0-9\\.\\-]+)p?x?\\)");
goog.style.getCssTranslation = function(element) {
  var transform = goog.style.getComputedTransform(element);
  if (!transform) {
    return new goog.math.Coordinate(0, 0);
  }
  var matches = transform.match(goog.style.MATRIX_TRANSLATION_REGEX_);
  if (!matches) {
    return new goog.math.Coordinate(0, 0);
  }
  return new goog.math.Coordinate(parseFloat(matches[1]), parseFloat(matches[2]));
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      throw "Invalid match arg: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(match);
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)));
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__31770 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__31770;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__31774 = cljs.core._EQ_;
    var expr__31775 = limit;
    if (cljs.core.truth_(pred__31774.call(null, 1, expr__31775))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__31774.call(null, 2, expr__31775))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(re), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)).split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4124__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4124__auto__)) {
            var m = temp__4124__auto__;
            var index = s__$1.indexOf(m);
            var G__31777 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__31778 = limit__$1 - 1;
            var G__31779 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__31777;
            limit__$1 = G__31778;
            parts = G__31779;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__31780 = index - 1;
        index = G__31780;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4124__auto___31781 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4124__auto___31781)) {
        var replacement_31782 = temp__4124__auto___31781;
        buffer.append("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(replacement_31782));
      } else {
        buffer.append(ch);
      }
      var G__31783 = index + 1;
      index = G__31783;
      continue;
    }
    break;
  }
};
goog.provide("goog.dom.xml");
goog.require("goog.dom");
goog.require("goog.dom.NodeType");
goog.dom.xml.MAX_XML_SIZE_KB = 2 * 1024;
goog.dom.xml.MAX_ELEMENT_DEPTH = 256;
goog.dom.xml.createDocument = function(opt_rootTagName, opt_namespaceUri) {
  if (opt_namespaceUri && !opt_rootTagName) {
    throw Error("Can't create document with namespace and no root tag");
  }
  if (document.implementation && document.implementation.createDocument) {
    return document.implementation.createDocument(opt_namespaceUri || "", opt_rootTagName || "", null);
  } else {
    if (typeof ActiveXObject != "undefined") {
      var doc = goog.dom.xml.createMsXmlDocument_();
      if (doc) {
        if (opt_rootTagName) {
          doc.appendChild(doc.createNode(goog.dom.NodeType.ELEMENT, opt_rootTagName, opt_namespaceUri || ""));
        }
        return doc;
      }
    }
  }
  throw Error("Your browser does not support creating new documents");
};
goog.dom.xml.loadXml = function(xml) {
  if (typeof DOMParser != "undefined") {
    return(new DOMParser).parseFromString(xml, "application/xml");
  } else {
    if (typeof ActiveXObject != "undefined") {
      var doc = goog.dom.xml.createMsXmlDocument_();
      doc.loadXML(xml);
      return doc;
    }
  }
  throw Error("Your browser does not support loading xml documents");
};
goog.dom.xml.serialize = function(xml) {
  if (typeof XMLSerializer != "undefined") {
    return(new XMLSerializer).serializeToString(xml);
  }
  var text = xml.xml;
  if (text) {
    return text;
  }
  throw Error("Your browser does not support serializing XML documents");
};
goog.dom.xml.selectSingleNode = function(node, path) {
  if (typeof node.selectSingleNode != "undefined") {
    var doc = goog.dom.getOwnerDocument(node);
    if (typeof doc.setProperty != "undefined") {
      doc.setProperty("SelectionLanguage", "XPath");
    }
    return node.selectSingleNode(path);
  } else {
    if (document.implementation.hasFeature("XPath", "3.0")) {
      var doc = goog.dom.getOwnerDocument(node);
      var resolver = doc.createNSResolver(doc.documentElement);
      var result = doc.evaluate(path, node, resolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
      return result.singleNodeValue;
    }
  }
  return null;
};
goog.dom.xml.selectNodes = function(node, path) {
  if (typeof node.selectNodes != "undefined") {
    var doc = goog.dom.getOwnerDocument(node);
    if (typeof doc.setProperty != "undefined") {
      doc.setProperty("SelectionLanguage", "XPath");
    }
    return node.selectNodes(path);
  } else {
    if (document.implementation.hasFeature("XPath", "3.0")) {
      var doc = goog.dom.getOwnerDocument(node);
      var resolver = doc.createNSResolver(doc.documentElement);
      var nodes = doc.evaluate(path, node, resolver, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
      var results = [];
      var count = nodes.snapshotLength;
      for (var i = 0;i < count;i++) {
        results.push(nodes.snapshotItem(i));
      }
      return results;
    } else {
      return[];
    }
  }
};
goog.dom.xml.setAttributes = function(element, attributes) {
  for (var key in attributes) {
    if (attributes.hasOwnProperty(key)) {
      element.setAttribute(key, attributes[key]);
    }
  }
};
goog.dom.xml.createMsXmlDocument_ = function() {
  var doc = new ActiveXObject("MSXML2.DOMDocument");
  if (doc) {
    doc.resolveExternals = false;
    doc.validateOnParse = false;
    try {
      doc.setProperty("ProhibitDTD", true);
      doc.setProperty("MaxXMLSize", goog.dom.xml.MAX_XML_SIZE_KB);
      doc.setProperty("MaxElementDepth", goog.dom.xml.MAX_ELEMENT_DEPTH);
    } catch (e) {
    }
  }
  return doc;
};
goog.provide("domina");
goog.require("cljs.core");
goog.require("goog.dom.forms");
goog.require("goog.dom");
goog.require("goog.dom.classes");
goog.require("goog.dom.xml");
goog.require("goog.dom");
goog.require("goog.dom.classes");
goog.require("goog.dom.forms");
goog.require("goog.string");
goog.require("cljs.core");
goog.require("domina.support");
goog.require("goog.events");
goog.require("goog.string");
goog.require("domina.support");
goog.require("goog.style");
goog.require("goog.style");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("goog.events");
goog.require("goog.dom.xml");
goog.require("cljs.core");
domina.re_html = /<|&#?\w+;/;
domina.re_leading_whitespace = /^\s+/;
domina.re_xhtml_tag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/i;
domina.re_tag_name = /<([\w:]+)/;
domina.re_no_inner_html = /<(?:script|style)/i;
domina.re_tbody = /<tbody/i;
var opt_wrapper_31320 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3cselect multiple\x3d'multiple'\x3e", "\x3c/select\x3e"], null);
var table_section_wrapper_31321 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3ctable\x3e", "\x3c/table\x3e"], null);
var cell_wrapper_31322 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [3, "\x3ctable\x3e\x3ctbody\x3e\x3ctr\x3e", "\x3c/tr\x3e\x3c/tbody\x3e\x3c/table\x3e"], null);
domina.wrap_map = cljs.core.PersistentHashMap.fromArrays(["td", "optgroup", "tfoot", "tr", "area", new cljs.core.Keyword(null, "default", "default", -1987822328), "option", "legend", "thead", "col", "caption", "th", "colgroup", "tbody"], [cell_wrapper_31322, opt_wrapper_31320, table_section_wrapper_31321, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [2, "\x3ctable\x3e\x3ctbody\x3e", "\x3c/tbody\x3e\x3c/table\x3e"], null), new cljs.core.PersistentVector(null, 3, 
5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3cmap\x3e", "\x3c/map\x3e"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, "", ""], null), opt_wrapper_31320, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3cfieldset\x3e", "\x3c/fieldset\x3e"], null), table_section_wrapper_31321, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [2, "\x3ctable\x3e\x3ctbody\x3e\x3c/tbody\x3e\x3ccolgroup\x3e", 
"\x3c/colgroup\x3e\x3c/table\x3e"], null), table_section_wrapper_31321, cell_wrapper_31322, table_section_wrapper_31321, table_section_wrapper_31321]);
domina.remove_extraneous_tbody_BANG_ = function remove_extraneous_tbody_BANG_(div, html, tag_name, start_wrap) {
  var no_tbody_QMARK_ = cljs.core.not.call(null, cljs.core.re_find.call(null, domina.re_tbody, html));
  var tbody = cljs.core._EQ_.call(null, tag_name, "table") && no_tbody_QMARK_ ? function() {
    var and__3628__auto__ = div.firstChild;
    if (cljs.core.truth_(and__3628__auto__)) {
      return div.firstChild.childNodes;
    } else {
      return and__3628__auto__;
    }
  }() : cljs.core._EQ_.call(null, start_wrap, "\x3ctable\x3e") && no_tbody_QMARK_ ? div.childNodes : cljs.core.PersistentVector.EMPTY;
  var seq__31327 = cljs.core.seq.call(null, tbody);
  var chunk__31328 = null;
  var count__31329 = 0;
  var i__31330 = 0;
  while (true) {
    if (i__31330 < count__31329) {
      var child = cljs.core._nth.call(null, chunk__31328, i__31330);
      if (cljs.core._EQ_.call(null, child.nodeName, "tbody") && cljs.core._EQ_.call(null, child.childNodes.length, 0)) {
        child.parentNode.removeChild(child);
      } else {
      }
      var G__31331 = seq__31327;
      var G__31332 = chunk__31328;
      var G__31333 = count__31329;
      var G__31334 = i__31330 + 1;
      seq__31327 = G__31331;
      chunk__31328 = G__31332;
      count__31329 = G__31333;
      i__31330 = G__31334;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__31327);
      if (temp__4126__auto__) {
        var seq__31327__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__31327__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__31327__$1);
          var G__31335 = cljs.core.chunk_rest.call(null, seq__31327__$1);
          var G__31336 = c__4410__auto__;
          var G__31337 = cljs.core.count.call(null, c__4410__auto__);
          var G__31338 = 0;
          seq__31327 = G__31335;
          chunk__31328 = G__31336;
          count__31329 = G__31337;
          i__31330 = G__31338;
          continue;
        } else {
          var child = cljs.core.first.call(null, seq__31327__$1);
          if (cljs.core._EQ_.call(null, child.nodeName, "tbody") && cljs.core._EQ_.call(null, child.childNodes.length, 0)) {
            child.parentNode.removeChild(child);
          } else {
          }
          var G__31339 = cljs.core.next.call(null, seq__31327__$1);
          var G__31340 = null;
          var G__31341 = 0;
          var G__31342 = 0;
          seq__31327 = G__31339;
          chunk__31328 = G__31340;
          count__31329 = G__31341;
          i__31330 = G__31342;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
domina.restore_leading_whitespace_BANG_ = function restore_leading_whitespace_BANG_(div, html) {
  return div.insertBefore(document.createTextNode(cljs.core.first.call(null, cljs.core.re_find.call(null, domina.re_leading_whitespace, html))), div.firstChild);
};
domina.html_to_dom = function html_to_dom(html) {
  var html__$1 = clojure.string.replace.call(null, html, domina.re_xhtml_tag, "\x3c$1\x3e\x3c/$2\x3e");
  var tag_name = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.second.call(null, cljs.core.re_find.call(null, domina.re_tag_name, html__$1)))).toLowerCase();
  var vec__31344 = cljs.core.get.call(null, domina.wrap_map, tag_name, (new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(domina.wrap_map));
  var depth = cljs.core.nth.call(null, vec__31344, 0, null);
  var start_wrap = cljs.core.nth.call(null, vec__31344, 1, null);
  var end_wrap = cljs.core.nth.call(null, vec__31344, 2, null);
  var div = function() {
    var wrapper = function() {
      var div = document.createElement("div");
      div.innerHTML = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(start_wrap) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(html__$1) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(end_wrap);
      return div;
    }();
    var level = depth;
    while (true) {
      if (level > 0) {
        var G__31345 = wrapper.lastChild;
        var G__31346 = level - 1;
        wrapper = G__31345;
        level = G__31346;
        continue;
      } else {
        return wrapper;
      }
      break;
    }
  }();
  if (cljs.core.truth_(domina.support.extraneous_tbody_QMARK_)) {
    domina.remove_extraneous_tbody_BANG_.call(null, div, html__$1, tag_name, start_wrap);
  } else {
  }
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = cljs.core.not.call(null, domina.support.leading_whitespace_QMARK_);
    if (and__3628__auto__) {
      return cljs.core.re_find.call(null, domina.re_leading_whitespace, html__$1);
    } else {
      return and__3628__auto__;
    }
  }())) {
    domina.restore_leading_whitespace_BANG_.call(null, div, html__$1);
  } else {
  }
  return div.childNodes;
};
domina.string_to_dom = function string_to_dom(s) {
  if (cljs.core.truth_(cljs.core.re_find.call(null, domina.re_html, s))) {
    return domina.html_to_dom.call(null, s);
  } else {
    return document.createTextNode(s);
  }
};
domina.DomContent = function() {
  var obj31348 = {};
  return obj31348;
}();
domina.nodes = function nodes(content) {
  if (function() {
    var and__3628__auto__ = content;
    if (and__3628__auto__) {
      return content.domina$DomContent$nodes$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return content.domina$DomContent$nodes$arity$1(content);
  } else {
    var x__4277__auto__ = content == null ? null : content;
    return function() {
      var or__3640__auto__ = domina.nodes[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = domina.nodes["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "DomContent.nodes", content);
        }
      }
    }().call(null, content);
  }
};
domina.single_node = function single_node(nodeseq) {
  if (function() {
    var and__3628__auto__ = nodeseq;
    if (and__3628__auto__) {
      return nodeseq.domina$DomContent$single_node$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return nodeseq.domina$DomContent$single_node$arity$1(nodeseq);
  } else {
    var x__4277__auto__ = nodeseq == null ? null : nodeseq;
    return function() {
      var or__3640__auto__ = domina.single_node[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = domina.single_node["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "DomContent.single-node", nodeseq);
        }
      }
    }().call(null, nodeseq);
  }
};
domina._STAR_debug_STAR_ = true;
domina.log_debug = function() {
  var log_debug__delegate = function(mesg) {
    if (cljs.core.truth_(function() {
      var and__3628__auto__ = domina._STAR_debug_STAR_;
      if (cljs.core.truth_(and__3628__auto__)) {
        return!cljs.core._EQ_.call(null, window.console, undefined);
      } else {
        return and__3628__auto__;
      }
    }())) {
      return console.log(cljs.core.apply.call(null, cljs.core.str, mesg));
    } else {
      return null;
    }
  };
  var log_debug = function(var_args) {
    var mesg = null;
    if (arguments.length > 0) {
      mesg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return log_debug__delegate.call(this, mesg);
  };
  log_debug.cljs$lang$maxFixedArity = 0;
  log_debug.cljs$lang$applyTo = function(arglist__31349) {
    var mesg = cljs.core.seq(arglist__31349);
    return log_debug__delegate(mesg);
  };
  log_debug.cljs$core$IFn$_invoke$arity$variadic = log_debug__delegate;
  return log_debug;
}();
domina.log = function() {
  var log__delegate = function(mesg) {
    if (cljs.core.truth_(window.console)) {
      return console.log(cljs.core.apply.call(null, cljs.core.str, mesg));
    } else {
      return null;
    }
  };
  var log = function(var_args) {
    var mesg = null;
    if (arguments.length > 0) {
      mesg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return log__delegate.call(this, mesg);
  };
  log.cljs$lang$maxFixedArity = 0;
  log.cljs$lang$applyTo = function(arglist__31350) {
    var mesg = cljs.core.seq(arglist__31350);
    return log__delegate(mesg);
  };
  log.cljs$core$IFn$_invoke$arity$variadic = log__delegate;
  return log;
}();
domina.by_id = function by_id(id) {
  return goog.dom.getElement(cljs.core.name.call(null, id));
};
domina.by_class = function by_class(class_name) {
  return domina.normalize_seq.call(null, goog.dom.getElementsByClass(cljs.core.name.call(null, class_name)));
};
domina.children = function children(content) {
  return cljs.core.doall.call(null, cljs.core.mapcat.call(null, goog.dom.getChildren, domina.nodes.call(null, content)));
};
domina.common_ancestor = function() {
  var common_ancestor__delegate = function(contents) {
    return cljs.core.apply.call(null, goog.dom.findCommonAncestor, cljs.core.map.call(null, domina.single_node, contents));
  };
  var common_ancestor = function(var_args) {
    var contents = null;
    if (arguments.length > 0) {
      contents = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return common_ancestor__delegate.call(this, contents);
  };
  common_ancestor.cljs$lang$maxFixedArity = 0;
  common_ancestor.cljs$lang$applyTo = function(arglist__31351) {
    var contents = cljs.core.seq(arglist__31351);
    return common_ancestor__delegate(contents);
  };
  common_ancestor.cljs$core$IFn$_invoke$arity$variadic = common_ancestor__delegate;
  return common_ancestor;
}();
domina.ancestor_QMARK_ = function ancestor_QMARK_(ancestor_content, descendant_content) {
  return cljs.core._EQ_.call(null, domina.common_ancestor.call(null, ancestor_content, descendant_content), domina.single_node.call(null, ancestor_content));
};
domina.clone = function clone(content) {
  return cljs.core.map.call(null, function(p1__31352_SHARP_) {
    return p1__31352_SHARP_.cloneNode(true);
  }, domina.nodes.call(null, content));
};
domina.append_BANG_ = function append_BANG_(parent_content, child_content) {
  domina.apply_with_cloning.call(null, goog.dom.appendChild, parent_content, child_content);
  return parent_content;
};
domina.insert_BANG_ = function insert_BANG_(parent_content, child_content, idx) {
  domina.apply_with_cloning.call(null, function(p1__31353_SHARP_, p2__31354_SHARP_) {
    return goog.dom.insertChildAt(p1__31353_SHARP_, p2__31354_SHARP_, idx);
  }, parent_content, child_content);
  return parent_content;
};
domina.prepend_BANG_ = function prepend_BANG_(parent_content, child_content) {
  domina.insert_BANG_.call(null, parent_content, child_content, 0);
  return parent_content;
};
domina.insert_before_BANG_ = function insert_before_BANG_(content, new_content) {
  domina.apply_with_cloning.call(null, function(p1__31356_SHARP_, p2__31355_SHARP_) {
    return goog.dom.insertSiblingBefore(p2__31355_SHARP_, p1__31356_SHARP_);
  }, content, new_content);
  return content;
};
domina.insert_after_BANG_ = function insert_after_BANG_(content, new_content) {
  domina.apply_with_cloning.call(null, function(p1__31358_SHARP_, p2__31357_SHARP_) {
    return goog.dom.insertSiblingAfter(p2__31357_SHARP_, p1__31358_SHARP_);
  }, content, new_content);
  return content;
};
domina.swap_content_BANG_ = function swap_content_BANG_(old_content, new_content) {
  domina.apply_with_cloning.call(null, function(p1__31360_SHARP_, p2__31359_SHARP_) {
    return goog.dom.replaceNode(p2__31359_SHARP_, p1__31360_SHARP_);
  }, old_content, new_content);
  return old_content;
};
domina.detach_BANG_ = function detach_BANG_(content) {
  return cljs.core.doall.call(null, cljs.core.map.call(null, goog.dom.removeNode, domina.nodes.call(null, content)));
};
domina.destroy_BANG_ = function destroy_BANG_(content) {
  return cljs.core.dorun.call(null, cljs.core.map.call(null, goog.dom.removeNode, domina.nodes.call(null, content)));
};
domina.destroy_children_BANG_ = function destroy_children_BANG_(content) {
  cljs.core.dorun.call(null, cljs.core.map.call(null, goog.dom.removeChildren, domina.nodes.call(null, content)));
  return content;
};
domina.style = function style(content, name) {
  var s = goog.style.getStyle(domina.single_node.call(null, content), cljs.core.name.call(null, name));
  if (cljs.core.truth_(clojure.string.blank_QMARK_.call(null, s))) {
    return null;
  } else {
    return s;
  }
};
domina.attr = function attr(content, name) {
  return domina.single_node.call(null, content).getAttribute(cljs.core.name.call(null, name));
};
domina.set_style_BANG_ = function() {
  var set_style_BANG___delegate = function(content, name, value) {
    var seq__31365_31369 = cljs.core.seq.call(null, domina.nodes.call(null, content));
    var chunk__31366_31370 = null;
    var count__31367_31371 = 0;
    var i__31368_31372 = 0;
    while (true) {
      if (i__31368_31372 < count__31367_31371) {
        var n_31373 = cljs.core._nth.call(null, chunk__31366_31370, i__31368_31372);
        goog.style.setStyle(n_31373, cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
        var G__31374 = seq__31365_31369;
        var G__31375 = chunk__31366_31370;
        var G__31376 = count__31367_31371;
        var G__31377 = i__31368_31372 + 1;
        seq__31365_31369 = G__31374;
        chunk__31366_31370 = G__31375;
        count__31367_31371 = G__31376;
        i__31368_31372 = G__31377;
        continue;
      } else {
        var temp__4126__auto___31378 = cljs.core.seq.call(null, seq__31365_31369);
        if (temp__4126__auto___31378) {
          var seq__31365_31379__$1 = temp__4126__auto___31378;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__31365_31379__$1)) {
            var c__4410__auto___31380 = cljs.core.chunk_first.call(null, seq__31365_31379__$1);
            var G__31381 = cljs.core.chunk_rest.call(null, seq__31365_31379__$1);
            var G__31382 = c__4410__auto___31380;
            var G__31383 = cljs.core.count.call(null, c__4410__auto___31380);
            var G__31384 = 0;
            seq__31365_31369 = G__31381;
            chunk__31366_31370 = G__31382;
            count__31367_31371 = G__31383;
            i__31368_31372 = G__31384;
            continue;
          } else {
            var n_31385 = cljs.core.first.call(null, seq__31365_31379__$1);
            goog.style.setStyle(n_31385, cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
            var G__31386 = cljs.core.next.call(null, seq__31365_31379__$1);
            var G__31387 = null;
            var G__31388 = 0;
            var G__31389 = 0;
            seq__31365_31369 = G__31386;
            chunk__31366_31370 = G__31387;
            count__31367_31371 = G__31388;
            i__31368_31372 = G__31389;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return content;
  };
  var set_style_BANG_ = function(content, name, var_args) {
    var value = null;
    if (arguments.length > 2) {
      value = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return set_style_BANG___delegate.call(this, content, name, value);
  };
  set_style_BANG_.cljs$lang$maxFixedArity = 2;
  set_style_BANG_.cljs$lang$applyTo = function(arglist__31390) {
    var content = cljs.core.first(arglist__31390);
    arglist__31390 = cljs.core.next(arglist__31390);
    var name = cljs.core.first(arglist__31390);
    var value = cljs.core.rest(arglist__31390);
    return set_style_BANG___delegate(content, name, value);
  };
  set_style_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_style_BANG___delegate;
  return set_style_BANG_;
}();
domina.set_attr_BANG_ = function() {
  var set_attr_BANG___delegate = function(content, name, value) {
    var seq__31395_31399 = cljs.core.seq.call(null, domina.nodes.call(null, content));
    var chunk__31396_31400 = null;
    var count__31397_31401 = 0;
    var i__31398_31402 = 0;
    while (true) {
      if (i__31398_31402 < count__31397_31401) {
        var n_31403 = cljs.core._nth.call(null, chunk__31396_31400, i__31398_31402);
        n_31403.setAttribute(cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
        var G__31404 = seq__31395_31399;
        var G__31405 = chunk__31396_31400;
        var G__31406 = count__31397_31401;
        var G__31407 = i__31398_31402 + 1;
        seq__31395_31399 = G__31404;
        chunk__31396_31400 = G__31405;
        count__31397_31401 = G__31406;
        i__31398_31402 = G__31407;
        continue;
      } else {
        var temp__4126__auto___31408 = cljs.core.seq.call(null, seq__31395_31399);
        if (temp__4126__auto___31408) {
          var seq__31395_31409__$1 = temp__4126__auto___31408;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__31395_31409__$1)) {
            var c__4410__auto___31410 = cljs.core.chunk_first.call(null, seq__31395_31409__$1);
            var G__31411 = cljs.core.chunk_rest.call(null, seq__31395_31409__$1);
            var G__31412 = c__4410__auto___31410;
            var G__31413 = cljs.core.count.call(null, c__4410__auto___31410);
            var G__31414 = 0;
            seq__31395_31399 = G__31411;
            chunk__31396_31400 = G__31412;
            count__31397_31401 = G__31413;
            i__31398_31402 = G__31414;
            continue;
          } else {
            var n_31415 = cljs.core.first.call(null, seq__31395_31409__$1);
            n_31415.setAttribute(cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
            var G__31416 = cljs.core.next.call(null, seq__31395_31409__$1);
            var G__31417 = null;
            var G__31418 = 0;
            var G__31419 = 0;
            seq__31395_31399 = G__31416;
            chunk__31396_31400 = G__31417;
            count__31397_31401 = G__31418;
            i__31398_31402 = G__31419;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return content;
  };
  var set_attr_BANG_ = function(content, name, var_args) {
    var value = null;
    if (arguments.length > 2) {
      value = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return set_attr_BANG___delegate.call(this, content, name, value);
  };
  set_attr_BANG_.cljs$lang$maxFixedArity = 2;
  set_attr_BANG_.cljs$lang$applyTo = function(arglist__31420) {
    var content = cljs.core.first(arglist__31420);
    arglist__31420 = cljs.core.next(arglist__31420);
    var name = cljs.core.first(arglist__31420);
    var value = cljs.core.rest(arglist__31420);
    return set_attr_BANG___delegate(content, name, value);
  };
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_attr_BANG___delegate;
  return set_attr_BANG_;
}();
domina.remove_attr_BANG_ = function remove_attr_BANG_(content, name) {
  var seq__31425_31429 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__31426_31430 = null;
  var count__31427_31431 = 0;
  var i__31428_31432 = 0;
  while (true) {
    if (i__31428_31432 < count__31427_31431) {
      var n_31433 = cljs.core._nth.call(null, chunk__31426_31430, i__31428_31432);
      n_31433.removeAttribute(cljs.core.name.call(null, name));
      var G__31434 = seq__31425_31429;
      var G__31435 = chunk__31426_31430;
      var G__31436 = count__31427_31431;
      var G__31437 = i__31428_31432 + 1;
      seq__31425_31429 = G__31434;
      chunk__31426_31430 = G__31435;
      count__31427_31431 = G__31436;
      i__31428_31432 = G__31437;
      continue;
    } else {
      var temp__4126__auto___31438 = cljs.core.seq.call(null, seq__31425_31429);
      if (temp__4126__auto___31438) {
        var seq__31425_31439__$1 = temp__4126__auto___31438;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__31425_31439__$1)) {
          var c__4410__auto___31440 = cljs.core.chunk_first.call(null, seq__31425_31439__$1);
          var G__31441 = cljs.core.chunk_rest.call(null, seq__31425_31439__$1);
          var G__31442 = c__4410__auto___31440;
          var G__31443 = cljs.core.count.call(null, c__4410__auto___31440);
          var G__31444 = 0;
          seq__31425_31429 = G__31441;
          chunk__31426_31430 = G__31442;
          count__31427_31431 = G__31443;
          i__31428_31432 = G__31444;
          continue;
        } else {
          var n_31445 = cljs.core.first.call(null, seq__31425_31439__$1);
          n_31445.removeAttribute(cljs.core.name.call(null, name));
          var G__31446 = cljs.core.next.call(null, seq__31425_31439__$1);
          var G__31447 = null;
          var G__31448 = 0;
          var G__31449 = 0;
          seq__31425_31429 = G__31446;
          chunk__31426_31430 = G__31447;
          count__31427_31431 = G__31448;
          i__31428_31432 = G__31449;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.parse_style_attributes = function parse_style_attributes(style) {
  return cljs.core.reduce.call(null, function(acc, pair) {
    var vec__31451 = pair.split(/\s*:\s*/);
    var k = cljs.core.nth.call(null, vec__31451, 0, null);
    var v = cljs.core.nth.call(null, vec__31451, 1, null);
    if (cljs.core.truth_(function() {
      var and__3628__auto__ = k;
      if (cljs.core.truth_(and__3628__auto__)) {
        return v;
      } else {
        return and__3628__auto__;
      }
    }())) {
      return cljs.core.assoc.call(null, acc, cljs.core.keyword.call(null, k.toLowerCase()), v);
    } else {
      return acc;
    }
  }, cljs.core.PersistentArrayMap.EMPTY, style.split(/\s*;\s*/));
};
domina.styles = function styles(content) {
  var style = domina.attr.call(null, content, "style");
  if (typeof style === "string") {
    return domina.parse_style_attributes.call(null, style);
  } else {
    if (style == null) {
      return cljs.core.PersistentArrayMap.EMPTY;
    } else {
      if (cljs.core.truth_(style.cssText)) {
        return domina.parse_style_attributes.call(null, style.cssText);
      } else {
        return cljs.core.PersistentArrayMap.EMPTY;
      }
    }
  }
};
domina.attrs = function attrs(content) {
  var node = domina.single_node.call(null, content);
  var attrs__$1 = node.attributes;
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.filter.call(null, cljs.core.complement.call(null, cljs.core.nil_QMARK_), cljs.core.map.call(null, function(node, attrs__$1) {
    return function(p1__31452_SHARP_) {
      var attr = attrs__$1.item(p1__31452_SHARP_);
      var value = attr.nodeValue;
      if (cljs.core.not_EQ_.call(null, null, value) && cljs.core.not_EQ_.call(null, "", value)) {
        return new cljs.core.PersistentArrayMap.fromArray([cljs.core.keyword.call(null, attr.nodeName.toLowerCase()), attr.nodeValue], true, false);
      } else {
        return null;
      }
    };
  }(node, attrs__$1), cljs.core.range.call(null, attrs__$1.length))));
};
domina.set_styles_BANG_ = function set_styles_BANG_(content, styles) {
  var seq__31459_31465 = cljs.core.seq.call(null, styles);
  var chunk__31460_31466 = null;
  var count__31461_31467 = 0;
  var i__31462_31468 = 0;
  while (true) {
    if (i__31462_31468 < count__31461_31467) {
      var vec__31463_31469 = cljs.core._nth.call(null, chunk__31460_31466, i__31462_31468);
      var name_31470 = cljs.core.nth.call(null, vec__31463_31469, 0, null);
      var value_31471 = cljs.core.nth.call(null, vec__31463_31469, 1, null);
      domina.set_style_BANG_.call(null, content, name_31470, value_31471);
      var G__31472 = seq__31459_31465;
      var G__31473 = chunk__31460_31466;
      var G__31474 = count__31461_31467;
      var G__31475 = i__31462_31468 + 1;
      seq__31459_31465 = G__31472;
      chunk__31460_31466 = G__31473;
      count__31461_31467 = G__31474;
      i__31462_31468 = G__31475;
      continue;
    } else {
      var temp__4126__auto___31476 = cljs.core.seq.call(null, seq__31459_31465);
      if (temp__4126__auto___31476) {
        var seq__31459_31477__$1 = temp__4126__auto___31476;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__31459_31477__$1)) {
          var c__4410__auto___31478 = cljs.core.chunk_first.call(null, seq__31459_31477__$1);
          var G__31479 = cljs.core.chunk_rest.call(null, seq__31459_31477__$1);
          var G__31480 = c__4410__auto___31478;
          var G__31481 = cljs.core.count.call(null, c__4410__auto___31478);
          var G__31482 = 0;
          seq__31459_31465 = G__31479;
          chunk__31460_31466 = G__31480;
          count__31461_31467 = G__31481;
          i__31462_31468 = G__31482;
          continue;
        } else {
          var vec__31464_31483 = cljs.core.first.call(null, seq__31459_31477__$1);
          var name_31484 = cljs.core.nth.call(null, vec__31464_31483, 0, null);
          var value_31485 = cljs.core.nth.call(null, vec__31464_31483, 1, null);
          domina.set_style_BANG_.call(null, content, name_31484, value_31485);
          var G__31486 = cljs.core.next.call(null, seq__31459_31477__$1);
          var G__31487 = null;
          var G__31488 = 0;
          var G__31489 = 0;
          seq__31459_31465 = G__31486;
          chunk__31460_31466 = G__31487;
          count__31461_31467 = G__31488;
          i__31462_31468 = G__31489;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.set_attrs_BANG_ = function set_attrs_BANG_(content, attrs) {
  var seq__31496_31502 = cljs.core.seq.call(null, attrs);
  var chunk__31497_31503 = null;
  var count__31498_31504 = 0;
  var i__31499_31505 = 0;
  while (true) {
    if (i__31499_31505 < count__31498_31504) {
      var vec__31500_31506 = cljs.core._nth.call(null, chunk__31497_31503, i__31499_31505);
      var name_31507 = cljs.core.nth.call(null, vec__31500_31506, 0, null);
      var value_31508 = cljs.core.nth.call(null, vec__31500_31506, 1, null);
      domina.set_attr_BANG_.call(null, content, name_31507, value_31508);
      var G__31509 = seq__31496_31502;
      var G__31510 = chunk__31497_31503;
      var G__31511 = count__31498_31504;
      var G__31512 = i__31499_31505 + 1;
      seq__31496_31502 = G__31509;
      chunk__31497_31503 = G__31510;
      count__31498_31504 = G__31511;
      i__31499_31505 = G__31512;
      continue;
    } else {
      var temp__4126__auto___31513 = cljs.core.seq.call(null, seq__31496_31502);
      if (temp__4126__auto___31513) {
        var seq__31496_31514__$1 = temp__4126__auto___31513;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__31496_31514__$1)) {
          var c__4410__auto___31515 = cljs.core.chunk_first.call(null, seq__31496_31514__$1);
          var G__31516 = cljs.core.chunk_rest.call(null, seq__31496_31514__$1);
          var G__31517 = c__4410__auto___31515;
          var G__31518 = cljs.core.count.call(null, c__4410__auto___31515);
          var G__31519 = 0;
          seq__31496_31502 = G__31516;
          chunk__31497_31503 = G__31517;
          count__31498_31504 = G__31518;
          i__31499_31505 = G__31519;
          continue;
        } else {
          var vec__31501_31520 = cljs.core.first.call(null, seq__31496_31514__$1);
          var name_31521 = cljs.core.nth.call(null, vec__31501_31520, 0, null);
          var value_31522 = cljs.core.nth.call(null, vec__31501_31520, 1, null);
          domina.set_attr_BANG_.call(null, content, name_31521, value_31522);
          var G__31523 = cljs.core.next.call(null, seq__31496_31514__$1);
          var G__31524 = null;
          var G__31525 = 0;
          var G__31526 = 0;
          seq__31496_31502 = G__31523;
          chunk__31497_31503 = G__31524;
          count__31498_31504 = G__31525;
          i__31499_31505 = G__31526;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.has_class_QMARK_ = function has_class_QMARK_(content, class$) {
  return goog.dom.classes.has(domina.single_node.call(null, content), class$);
};
domina.add_class_BANG_ = function add_class_BANG_(content, class$) {
  var seq__31531_31535 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__31532_31536 = null;
  var count__31533_31537 = 0;
  var i__31534_31538 = 0;
  while (true) {
    if (i__31534_31538 < count__31533_31537) {
      var node_31539 = cljs.core._nth.call(null, chunk__31532_31536, i__31534_31538);
      goog.dom.classes.add(node_31539, class$);
      var G__31540 = seq__31531_31535;
      var G__31541 = chunk__31532_31536;
      var G__31542 = count__31533_31537;
      var G__31543 = i__31534_31538 + 1;
      seq__31531_31535 = G__31540;
      chunk__31532_31536 = G__31541;
      count__31533_31537 = G__31542;
      i__31534_31538 = G__31543;
      continue;
    } else {
      var temp__4126__auto___31544 = cljs.core.seq.call(null, seq__31531_31535);
      if (temp__4126__auto___31544) {
        var seq__31531_31545__$1 = temp__4126__auto___31544;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__31531_31545__$1)) {
          var c__4410__auto___31546 = cljs.core.chunk_first.call(null, seq__31531_31545__$1);
          var G__31547 = cljs.core.chunk_rest.call(null, seq__31531_31545__$1);
          var G__31548 = c__4410__auto___31546;
          var G__31549 = cljs.core.count.call(null, c__4410__auto___31546);
          var G__31550 = 0;
          seq__31531_31535 = G__31547;
          chunk__31532_31536 = G__31548;
          count__31533_31537 = G__31549;
          i__31534_31538 = G__31550;
          continue;
        } else {
          var node_31551 = cljs.core.first.call(null, seq__31531_31545__$1);
          goog.dom.classes.add(node_31551, class$);
          var G__31552 = cljs.core.next.call(null, seq__31531_31545__$1);
          var G__31553 = null;
          var G__31554 = 0;
          var G__31555 = 0;
          seq__31531_31535 = G__31552;
          chunk__31532_31536 = G__31553;
          count__31533_31537 = G__31554;
          i__31534_31538 = G__31555;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.remove_class_BANG_ = function remove_class_BANG_(content, class$) {
  var seq__31560_31564 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__31561_31565 = null;
  var count__31562_31566 = 0;
  var i__31563_31567 = 0;
  while (true) {
    if (i__31563_31567 < count__31562_31566) {
      var node_31568 = cljs.core._nth.call(null, chunk__31561_31565, i__31563_31567);
      goog.dom.classes.remove(node_31568, class$);
      var G__31569 = seq__31560_31564;
      var G__31570 = chunk__31561_31565;
      var G__31571 = count__31562_31566;
      var G__31572 = i__31563_31567 + 1;
      seq__31560_31564 = G__31569;
      chunk__31561_31565 = G__31570;
      count__31562_31566 = G__31571;
      i__31563_31567 = G__31572;
      continue;
    } else {
      var temp__4126__auto___31573 = cljs.core.seq.call(null, seq__31560_31564);
      if (temp__4126__auto___31573) {
        var seq__31560_31574__$1 = temp__4126__auto___31573;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__31560_31574__$1)) {
          var c__4410__auto___31575 = cljs.core.chunk_first.call(null, seq__31560_31574__$1);
          var G__31576 = cljs.core.chunk_rest.call(null, seq__31560_31574__$1);
          var G__31577 = c__4410__auto___31575;
          var G__31578 = cljs.core.count.call(null, c__4410__auto___31575);
          var G__31579 = 0;
          seq__31560_31564 = G__31576;
          chunk__31561_31565 = G__31577;
          count__31562_31566 = G__31578;
          i__31563_31567 = G__31579;
          continue;
        } else {
          var node_31580 = cljs.core.first.call(null, seq__31560_31574__$1);
          goog.dom.classes.remove(node_31580, class$);
          var G__31581 = cljs.core.next.call(null, seq__31560_31574__$1);
          var G__31582 = null;
          var G__31583 = 0;
          var G__31584 = 0;
          seq__31560_31564 = G__31581;
          chunk__31561_31565 = G__31582;
          count__31562_31566 = G__31583;
          i__31563_31567 = G__31584;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.toggle_class_BANG_ = function toggle_class_BANG_(content, class$) {
  var seq__31589_31593 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__31590_31594 = null;
  var count__31591_31595 = 0;
  var i__31592_31596 = 0;
  while (true) {
    if (i__31592_31596 < count__31591_31595) {
      var node_31597 = cljs.core._nth.call(null, chunk__31590_31594, i__31592_31596);
      goog.dom.classes.toggle(node_31597, class$);
      var G__31598 = seq__31589_31593;
      var G__31599 = chunk__31590_31594;
      var G__31600 = count__31591_31595;
      var G__31601 = i__31592_31596 + 1;
      seq__31589_31593 = G__31598;
      chunk__31590_31594 = G__31599;
      count__31591_31595 = G__31600;
      i__31592_31596 = G__31601;
      continue;
    } else {
      var temp__4126__auto___31602 = cljs.core.seq.call(null, seq__31589_31593);
      if (temp__4126__auto___31602) {
        var seq__31589_31603__$1 = temp__4126__auto___31602;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__31589_31603__$1)) {
          var c__4410__auto___31604 = cljs.core.chunk_first.call(null, seq__31589_31603__$1);
          var G__31605 = cljs.core.chunk_rest.call(null, seq__31589_31603__$1);
          var G__31606 = c__4410__auto___31604;
          var G__31607 = cljs.core.count.call(null, c__4410__auto___31604);
          var G__31608 = 0;
          seq__31589_31593 = G__31605;
          chunk__31590_31594 = G__31606;
          count__31591_31595 = G__31607;
          i__31592_31596 = G__31608;
          continue;
        } else {
          var node_31609 = cljs.core.first.call(null, seq__31589_31603__$1);
          goog.dom.classes.toggle(node_31609, class$);
          var G__31610 = cljs.core.next.call(null, seq__31589_31603__$1);
          var G__31611 = null;
          var G__31612 = 0;
          var G__31613 = 0;
          seq__31589_31593 = G__31610;
          chunk__31590_31594 = G__31611;
          count__31591_31595 = G__31612;
          i__31592_31596 = G__31613;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.classes = function classes(content) {
  return cljs.core.seq.call(null, goog.dom.classes.get(domina.single_node.call(null, content)));
};
domina.set_classes_BANG_ = function set_classes_BANG_(content, classes) {
  var classes_31622__$1 = cljs.core.coll_QMARK_.call(null, classes) ? clojure.string.join.call(null, " ", classes) : classes;
  var seq__31618_31623 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__31619_31624 = null;
  var count__31620_31625 = 0;
  var i__31621_31626 = 0;
  while (true) {
    if (i__31621_31626 < count__31620_31625) {
      var node_31627 = cljs.core._nth.call(null, chunk__31619_31624, i__31621_31626);
      goog.dom.classes.set(node_31627, classes_31622__$1);
      var G__31628 = seq__31618_31623;
      var G__31629 = chunk__31619_31624;
      var G__31630 = count__31620_31625;
      var G__31631 = i__31621_31626 + 1;
      seq__31618_31623 = G__31628;
      chunk__31619_31624 = G__31629;
      count__31620_31625 = G__31630;
      i__31621_31626 = G__31631;
      continue;
    } else {
      var temp__4126__auto___31632 = cljs.core.seq.call(null, seq__31618_31623);
      if (temp__4126__auto___31632) {
        var seq__31618_31633__$1 = temp__4126__auto___31632;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__31618_31633__$1)) {
          var c__4410__auto___31634 = cljs.core.chunk_first.call(null, seq__31618_31633__$1);
          var G__31635 = cljs.core.chunk_rest.call(null, seq__31618_31633__$1);
          var G__31636 = c__4410__auto___31634;
          var G__31637 = cljs.core.count.call(null, c__4410__auto___31634);
          var G__31638 = 0;
          seq__31618_31623 = G__31635;
          chunk__31619_31624 = G__31636;
          count__31620_31625 = G__31637;
          i__31621_31626 = G__31638;
          continue;
        } else {
          var node_31639 = cljs.core.first.call(null, seq__31618_31633__$1);
          goog.dom.classes.set(node_31639, classes_31622__$1);
          var G__31640 = cljs.core.next.call(null, seq__31618_31633__$1);
          var G__31641 = null;
          var G__31642 = 0;
          var G__31643 = 0;
          seq__31618_31623 = G__31640;
          chunk__31619_31624 = G__31641;
          count__31620_31625 = G__31642;
          i__31621_31626 = G__31643;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.text = function text(content) {
  return goog.string.trim(goog.dom.getTextContent(domina.single_node.call(null, content)));
};
domina.set_text_BANG_ = function set_text_BANG_(content, value) {
  var seq__31648_31652 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__31649_31653 = null;
  var count__31650_31654 = 0;
  var i__31651_31655 = 0;
  while (true) {
    if (i__31651_31655 < count__31650_31654) {
      var node_31656 = cljs.core._nth.call(null, chunk__31649_31653, i__31651_31655);
      goog.dom.setTextContent(node_31656, value);
      var G__31657 = seq__31648_31652;
      var G__31658 = chunk__31649_31653;
      var G__31659 = count__31650_31654;
      var G__31660 = i__31651_31655 + 1;
      seq__31648_31652 = G__31657;
      chunk__31649_31653 = G__31658;
      count__31650_31654 = G__31659;
      i__31651_31655 = G__31660;
      continue;
    } else {
      var temp__4126__auto___31661 = cljs.core.seq.call(null, seq__31648_31652);
      if (temp__4126__auto___31661) {
        var seq__31648_31662__$1 = temp__4126__auto___31661;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__31648_31662__$1)) {
          var c__4410__auto___31663 = cljs.core.chunk_first.call(null, seq__31648_31662__$1);
          var G__31664 = cljs.core.chunk_rest.call(null, seq__31648_31662__$1);
          var G__31665 = c__4410__auto___31663;
          var G__31666 = cljs.core.count.call(null, c__4410__auto___31663);
          var G__31667 = 0;
          seq__31648_31652 = G__31664;
          chunk__31649_31653 = G__31665;
          count__31650_31654 = G__31666;
          i__31651_31655 = G__31667;
          continue;
        } else {
          var node_31668 = cljs.core.first.call(null, seq__31648_31662__$1);
          goog.dom.setTextContent(node_31668, value);
          var G__31669 = cljs.core.next.call(null, seq__31648_31662__$1);
          var G__31670 = null;
          var G__31671 = 0;
          var G__31672 = 0;
          seq__31648_31652 = G__31669;
          chunk__31649_31653 = G__31670;
          count__31650_31654 = G__31671;
          i__31651_31655 = G__31672;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.value = function value(content) {
  return goog.dom.forms.getValue(domina.single_node.call(null, content));
};
domina.set_value_BANG_ = function set_value_BANG_(content, value) {
  var seq__31677_31681 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__31678_31682 = null;
  var count__31679_31683 = 0;
  var i__31680_31684 = 0;
  while (true) {
    if (i__31680_31684 < count__31679_31683) {
      var node_31685 = cljs.core._nth.call(null, chunk__31678_31682, i__31680_31684);
      goog.dom.forms.setValue(node_31685, value);
      var G__31686 = seq__31677_31681;
      var G__31687 = chunk__31678_31682;
      var G__31688 = count__31679_31683;
      var G__31689 = i__31680_31684 + 1;
      seq__31677_31681 = G__31686;
      chunk__31678_31682 = G__31687;
      count__31679_31683 = G__31688;
      i__31680_31684 = G__31689;
      continue;
    } else {
      var temp__4126__auto___31690 = cljs.core.seq.call(null, seq__31677_31681);
      if (temp__4126__auto___31690) {
        var seq__31677_31691__$1 = temp__4126__auto___31690;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__31677_31691__$1)) {
          var c__4410__auto___31692 = cljs.core.chunk_first.call(null, seq__31677_31691__$1);
          var G__31693 = cljs.core.chunk_rest.call(null, seq__31677_31691__$1);
          var G__31694 = c__4410__auto___31692;
          var G__31695 = cljs.core.count.call(null, c__4410__auto___31692);
          var G__31696 = 0;
          seq__31677_31681 = G__31693;
          chunk__31678_31682 = G__31694;
          count__31679_31683 = G__31695;
          i__31680_31684 = G__31696;
          continue;
        } else {
          var node_31697 = cljs.core.first.call(null, seq__31677_31691__$1);
          goog.dom.forms.setValue(node_31697, value);
          var G__31698 = cljs.core.next.call(null, seq__31677_31691__$1);
          var G__31699 = null;
          var G__31700 = 0;
          var G__31701 = 0;
          seq__31677_31681 = G__31698;
          chunk__31678_31682 = G__31699;
          count__31679_31683 = G__31700;
          i__31680_31684 = G__31701;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.html = function html(content) {
  return domina.single_node.call(null, content).innerHTML;
};
domina.replace_children_BANG_ = function replace_children_BANG_(content, inner_content) {
  return domina.append_BANG_.call(null, domina.destroy_children_BANG_.call(null, content), inner_content);
};
domina.set_inner_html_BANG_ = function set_inner_html_BANG_(content, html_string) {
  var allows_inner_html_QMARK_ = cljs.core.not.call(null, cljs.core.re_find.call(null, domina.re_no_inner_html, html_string));
  var leading_whitespace_QMARK_ = cljs.core.re_find.call(null, domina.re_leading_whitespace, html_string);
  var tag_name = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.second.call(null, cljs.core.re_find.call(null, domina.re_tag_name, html_string)))).toLowerCase();
  var special_tag_QMARK_ = cljs.core.contains_QMARK_.call(null, domina.wrap_map, tag_name);
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = allows_inner_html_QMARK_;
    if (and__3628__auto__) {
      var and__3628__auto____$1 = function() {
        var or__3640__auto__ = domina.support.leading_whitespace_QMARK_;
        if (cljs.core.truth_(or__3640__auto__)) {
          return or__3640__auto__;
        } else {
          return cljs.core.not.call(null, leading_whitespace_QMARK_);
        }
      }();
      if (cljs.core.truth_(and__3628__auto____$1)) {
        return!special_tag_QMARK_;
      } else {
        return and__3628__auto____$1;
      }
    } else {
      return and__3628__auto__;
    }
  }())) {
    var value_31712 = clojure.string.replace.call(null, html_string, domina.re_xhtml_tag, "\x3c$1\x3e\x3c/$2\x3e");
    try {
      var seq__31708_31713 = cljs.core.seq.call(null, domina.nodes.call(null, content));
      var chunk__31709_31714 = null;
      var count__31710_31715 = 0;
      var i__31711_31716 = 0;
      while (true) {
        if (i__31711_31716 < count__31710_31715) {
          var node_31717 = cljs.core._nth.call(null, chunk__31709_31714, i__31711_31716);
          node_31717.innerHTML = value_31712;
          var G__31718 = seq__31708_31713;
          var G__31719 = chunk__31709_31714;
          var G__31720 = count__31710_31715;
          var G__31721 = i__31711_31716 + 1;
          seq__31708_31713 = G__31718;
          chunk__31709_31714 = G__31719;
          count__31710_31715 = G__31720;
          i__31711_31716 = G__31721;
          continue;
        } else {
          var temp__4126__auto___31722 = cljs.core.seq.call(null, seq__31708_31713);
          if (temp__4126__auto___31722) {
            var seq__31708_31723__$1 = temp__4126__auto___31722;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__31708_31723__$1)) {
              var c__4410__auto___31724 = cljs.core.chunk_first.call(null, seq__31708_31723__$1);
              var G__31725 = cljs.core.chunk_rest.call(null, seq__31708_31723__$1);
              var G__31726 = c__4410__auto___31724;
              var G__31727 = cljs.core.count.call(null, c__4410__auto___31724);
              var G__31728 = 0;
              seq__31708_31713 = G__31725;
              chunk__31709_31714 = G__31726;
              count__31710_31715 = G__31727;
              i__31711_31716 = G__31728;
              continue;
            } else {
              var node_31729 = cljs.core.first.call(null, seq__31708_31723__$1);
              node_31729.innerHTML = value_31712;
              var G__31730 = cljs.core.next.call(null, seq__31708_31723__$1);
              var G__31731 = null;
              var G__31732 = 0;
              var G__31733 = 0;
              seq__31708_31713 = G__31730;
              chunk__31709_31714 = G__31731;
              count__31710_31715 = G__31732;
              i__31711_31716 = G__31733;
              continue;
            }
          } else {
          }
        }
        break;
      }
    } catch (e31707) {
      if (e31707 instanceof Error) {
        var e_31734 = e31707;
        domina.replace_children_BANG_.call(null, content, value_31712);
      } else {
        throw e31707;
      }
    }
  } else {
    domina.replace_children_BANG_.call(null, content, html_string);
  }
  return content;
};
domina.set_html_BANG_ = function set_html_BANG_(content, inner_content) {
  if (typeof inner_content === "string") {
    return domina.set_inner_html_BANG_.call(null, content, inner_content);
  } else {
    return domina.replace_children_BANG_.call(null, content, inner_content);
  }
};
domina.get_data = function() {
  var get_data = null;
  var get_data__2 = function(node, key) {
    return get_data.call(null, node, key, false);
  };
  var get_data__3 = function(node, key, bubble) {
    var m = domina.single_node.call(null, node).__domina_data;
    var value = cljs.core.truth_(m) ? cljs.core.get.call(null, m, key) : null;
    if (cljs.core.truth_(function() {
      var and__3628__auto__ = bubble;
      if (cljs.core.truth_(and__3628__auto__)) {
        return value == null;
      } else {
        return and__3628__auto__;
      }
    }())) {
      var temp__4126__auto__ = domina.single_node.call(null, node).parentNode;
      if (cljs.core.truth_(temp__4126__auto__)) {
        var parent = temp__4126__auto__;
        return get_data.call(null, parent, key, true);
      } else {
        return null;
      }
    } else {
      return value;
    }
  };
  get_data = function(node, key, bubble) {
    switch(arguments.length) {
      case 2:
        return get_data__2.call(this, node, key);
      case 3:
        return get_data__3.call(this, node, key, bubble);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_data.cljs$core$IFn$_invoke$arity$2 = get_data__2;
  get_data.cljs$core$IFn$_invoke$arity$3 = get_data__3;
  return get_data;
}();
domina.set_data_BANG_ = function set_data_BANG_(node, key, value) {
  var m = function() {
    var or__3640__auto__ = domina.single_node.call(null, node).__domina_data;
    if (cljs.core.truth_(or__3640__auto__)) {
      return or__3640__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }();
  return domina.single_node.call(null, node).__domina_data = cljs.core.assoc.call(null, m, key, value);
};
domina.apply_with_cloning = function apply_with_cloning(f, parent_content, child_content) {
  var parents = domina.nodes.call(null, parent_content);
  var children = domina.nodes.call(null, child_content);
  var first_child = function() {
    var frag = document.createDocumentFragment();
    var seq__31741_31745 = cljs.core.seq.call(null, children);
    var chunk__31742_31746 = null;
    var count__31743_31747 = 0;
    var i__31744_31748 = 0;
    while (true) {
      if (i__31744_31748 < count__31743_31747) {
        var child_31749 = cljs.core._nth.call(null, chunk__31742_31746, i__31744_31748);
        frag.appendChild(child_31749);
        var G__31750 = seq__31741_31745;
        var G__31751 = chunk__31742_31746;
        var G__31752 = count__31743_31747;
        var G__31753 = i__31744_31748 + 1;
        seq__31741_31745 = G__31750;
        chunk__31742_31746 = G__31751;
        count__31743_31747 = G__31752;
        i__31744_31748 = G__31753;
        continue;
      } else {
        var temp__4126__auto___31754 = cljs.core.seq.call(null, seq__31741_31745);
        if (temp__4126__auto___31754) {
          var seq__31741_31755__$1 = temp__4126__auto___31754;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__31741_31755__$1)) {
            var c__4410__auto___31756 = cljs.core.chunk_first.call(null, seq__31741_31755__$1);
            var G__31757 = cljs.core.chunk_rest.call(null, seq__31741_31755__$1);
            var G__31758 = c__4410__auto___31756;
            var G__31759 = cljs.core.count.call(null, c__4410__auto___31756);
            var G__31760 = 0;
            seq__31741_31745 = G__31757;
            chunk__31742_31746 = G__31758;
            count__31743_31747 = G__31759;
            i__31744_31748 = G__31760;
            continue;
          } else {
            var child_31761 = cljs.core.first.call(null, seq__31741_31755__$1);
            frag.appendChild(child_31761);
            var G__31762 = cljs.core.next.call(null, seq__31741_31755__$1);
            var G__31763 = null;
            var G__31764 = 0;
            var G__31765 = 0;
            seq__31741_31745 = G__31762;
            chunk__31742_31746 = G__31763;
            count__31743_31747 = G__31764;
            i__31744_31748 = G__31765;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return frag;
  }();
  var other_children = cljs.core.doall.call(null, cljs.core.repeatedly.call(null, cljs.core.count.call(null, parents) - 1, function(parents, children, first_child) {
    return function() {
      return first_child.cloneNode(true);
    };
  }(parents, children, first_child)));
  if (cljs.core.seq.call(null, parents)) {
    f.call(null, cljs.core.first.call(null, parents), first_child);
    return cljs.core.doall.call(null, cljs.core.map.call(null, function(parents, children, first_child, other_children) {
      return function(p1__31735_SHARP_, p2__31736_SHARP_) {
        return f.call(null, p1__31735_SHARP_, p2__31736_SHARP_);
      };
    }(parents, children, first_child, other_children), cljs.core.rest.call(null, parents), other_children));
  } else {
    return null;
  }
};
domina.lazy_nl_via_item = function() {
  var lazy_nl_via_item = null;
  var lazy_nl_via_item__1 = function(nl) {
    return lazy_nl_via_item.call(null, nl, 0);
  };
  var lazy_nl_via_item__2 = function(nl, n) {
    if (n < nl.length) {
      return new cljs.core.LazySeq(null, function() {
        return cljs.core.cons.call(null, nl.item(n), lazy_nl_via_item.call(null, nl, n + 1));
      }, null, null);
    } else {
      return null;
    }
  };
  lazy_nl_via_item = function(nl, n) {
    switch(arguments.length) {
      case 1:
        return lazy_nl_via_item__1.call(this, nl);
      case 2:
        return lazy_nl_via_item__2.call(this, nl, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  lazy_nl_via_item.cljs$core$IFn$_invoke$arity$1 = lazy_nl_via_item__1;
  lazy_nl_via_item.cljs$core$IFn$_invoke$arity$2 = lazy_nl_via_item__2;
  return lazy_nl_via_item;
}();
domina.lazy_nl_via_array_ref = function() {
  var lazy_nl_via_array_ref = null;
  var lazy_nl_via_array_ref__1 = function(nl) {
    return lazy_nl_via_array_ref.call(null, nl, 0);
  };
  var lazy_nl_via_array_ref__2 = function(nl, n) {
    if (n < nl.length) {
      return new cljs.core.LazySeq(null, function() {
        return cljs.core.cons.call(null, nl[n], lazy_nl_via_array_ref.call(null, nl, n + 1));
      }, null, null);
    } else {
      return null;
    }
  };
  lazy_nl_via_array_ref = function(nl, n) {
    switch(arguments.length) {
      case 1:
        return lazy_nl_via_array_ref__1.call(this, nl);
      case 2:
        return lazy_nl_via_array_ref__2.call(this, nl, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  lazy_nl_via_array_ref.cljs$core$IFn$_invoke$arity$1 = lazy_nl_via_array_ref__1;
  lazy_nl_via_array_ref.cljs$core$IFn$_invoke$arity$2 = lazy_nl_via_array_ref__2;
  return lazy_nl_via_array_ref;
}();
domina.lazy_nodelist = function lazy_nodelist(nl) {
  if (cljs.core.truth_(nl.item)) {
    return domina.lazy_nl_via_item.call(null, nl);
  } else {
    return domina.lazy_nl_via_array_ref.call(null, nl);
  }
};
domina.array_like_QMARK_ = function array_like_QMARK_(obj) {
  var and__3628__auto__ = obj;
  if (cljs.core.truth_(and__3628__auto__)) {
    var and__3628__auto____$1 = cljs.core.not.call(null, obj.nodeName);
    if (and__3628__auto____$1) {
      return obj.length;
    } else {
      return and__3628__auto____$1;
    }
  } else {
    return and__3628__auto__;
  }
};
domina.normalize_seq = function normalize_seq(list_thing) {
  if (list_thing == null) {
    return cljs.core.List.EMPTY;
  } else {
    if (function() {
      var G__31767 = list_thing;
      if (G__31767) {
        var bit__4304__auto__ = G__31767.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4304__auto__ || G__31767.cljs$core$ISeqable$) {
          return true;
        } else {
          if (!G__31767.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__31767);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__31767);
      }
    }()) {
      return cljs.core.seq.call(null, list_thing);
    } else {
      if (cljs.core.truth_(domina.array_like_QMARK_.call(null, list_thing))) {
        return domina.lazy_nodelist.call(null, list_thing);
      } else {
        return cljs.core.seq.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [list_thing], null));
      }
    }
  }
};
domina.DomContent["_"] = true;
domina.nodes["_"] = function(content) {
  if (content == null) {
    return cljs.core.List.EMPTY;
  } else {
    if (function() {
      var G__31768 = content;
      if (G__31768) {
        var bit__4304__auto__ = G__31768.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4304__auto__ || G__31768.cljs$core$ISeqable$) {
          return true;
        } else {
          if (!G__31768.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__31768);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__31768);
      }
    }()) {
      return cljs.core.seq.call(null, content);
    } else {
      if (cljs.core.truth_(domina.array_like_QMARK_.call(null, content))) {
        return domina.lazy_nodelist.call(null, content);
      } else {
        return cljs.core.seq.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [content], null));
      }
    }
  }
};
domina.single_node["_"] = function(content) {
  if (content == null) {
    return null;
  } else {
    if (function() {
      var G__31769 = content;
      if (G__31769) {
        var bit__4304__auto__ = G__31769.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4304__auto__ || G__31769.cljs$core$ISeqable$) {
          return true;
        } else {
          if (!G__31769.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__31769);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__31769);
      }
    }()) {
      return cljs.core.first.call(null, content);
    } else {
      if (cljs.core.truth_(domina.array_like_QMARK_.call(null, content))) {
        return content.item(0);
      } else {
        return content;
      }
    }
  }
};
domina.DomContent["string"] = true;
domina.nodes["string"] = function(s) {
  return cljs.core.doall.call(null, domina.nodes.call(null, domina.string_to_dom.call(null, s)));
};
domina.single_node["string"] = function(s) {
  return domina.single_node.call(null, domina.string_to_dom.call(null, s));
};
if (cljs.core.truth_(typeof NodeList != "undefined")) {
  NodeList.prototype.cljs$core$ISeqable$ = true;
  NodeList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return domina.lazy_nodelist.call(null, nodelist__$1);
  };
  NodeList.prototype.cljs$core$IIndexed$ = true;
  NodeList.prototype.cljs$core$IIndexed$_nth$arity$2 = function(nodelist, n) {
    var nodelist__$1 = this;
    return nodelist__$1.item(n);
  };
  NodeList.prototype.cljs$core$IIndexed$_nth$arity$3 = function(nodelist, n, not_found) {
    var nodelist__$1 = this;
    if (nodelist__$1.length <= n) {
      return not_found;
    } else {
      return cljs.core.nth.call(null, nodelist__$1, n);
    }
  };
  NodeList.prototype.cljs$core$ICounted$ = true;
  NodeList.prototype.cljs$core$ICounted$_count$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return nodelist__$1.length;
  };
} else {
}
if (cljs.core.truth_(typeof StaticNodeList != "undefined")) {
  StaticNodeList.prototype.cljs$core$ISeqable$ = true;
  StaticNodeList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return domina.lazy_nodelist.call(null, nodelist__$1);
  };
  StaticNodeList.prototype.cljs$core$IIndexed$ = true;
  StaticNodeList.prototype.cljs$core$IIndexed$_nth$arity$2 = function(nodelist, n) {
    var nodelist__$1 = this;
    return nodelist__$1.item(n);
  };
  StaticNodeList.prototype.cljs$core$IIndexed$_nth$arity$3 = function(nodelist, n, not_found) {
    var nodelist__$1 = this;
    if (nodelist__$1.length <= n) {
      return not_found;
    } else {
      return cljs.core.nth.call(null, nodelist__$1, n);
    }
  };
  StaticNodeList.prototype.cljs$core$ICounted$ = true;
  StaticNodeList.prototype.cljs$core$ICounted$_count$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return nodelist__$1.length;
  };
} else {
}
if (cljs.core.truth_(typeof HTMLCollection != "undefined")) {
  HTMLCollection.prototype.cljs$core$ISeqable$ = true;
  HTMLCollection.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
    var coll__$1 = this;
    return domina.lazy_nodelist.call(null, coll__$1);
  };
  HTMLCollection.prototype.cljs$core$IIndexed$ = true;
  HTMLCollection.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
    var coll__$1 = this;
    return coll__$1.item(n);
  };
  HTMLCollection.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
    var coll__$1 = this;
    if (coll__$1.length <= n) {
      return not_found;
    } else {
      return cljs.core.nth.call(null, coll__$1, n);
    }
  };
  HTMLCollection.prototype.cljs$core$ICounted$ = true;
  HTMLCollection.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
    var coll__$1 = this;
    return coll__$1.length;
  };
} else {
}
;goog.provide("cljs.looperscript.logging");
goog.require("cljs.core");
goog.require("domina");
goog.require("domina");
cljs.looperscript.logging.log = function() {
  var log__delegate = function(args) {
    var s = cljs.core.apply.call(null, cljs.core.str, cljs.core.conj.call(null, cljs.core.vec.call(null, args), "\n"));
    domina.append_BANG_.call(null, domina.by_id.call(null, "console"), "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s) + "\x3cp /\x3e");
    return console.log(s);
  };
  var log = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return log__delegate.call(this, args);
  };
  log.cljs$lang$maxFixedArity = 0;
  log.cljs$lang$applyTo = function(arglist__29902) {
    var args = cljs.core.seq(arglist__29902);
    return log__delegate(args);
  };
  log.cljs$core$IFn$_invoke$arity$variadic = log__delegate;
  return log;
}();
cljs.looperscript.logging.log__GT_ = function() {
  var log__GT___delegate = function(args) {
    cljs.core.apply.call(null, cljs.looperscript.logging.log, args);
    return cljs.core.first.call(null, args);
  };
  var log__GT_ = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return log__GT___delegate.call(this, args);
  };
  log__GT_.cljs$lang$maxFixedArity = 0;
  log__GT_.cljs$lang$applyTo = function(arglist__29903) {
    var args = cljs.core.seq(arglist__29903);
    return log__GT___delegate(args);
  };
  log__GT_.cljs$core$IFn$_invoke$arity$variadic = log__GT___delegate;
  return log__GT_;
}();
goog.provide("cljs.looperscript.iterator");
goog.require("cljs.core");
goog.require("cljs.looperscript.logging");
goog.require("cljs.looperscript.logging");
cljs.looperscript.iterator._pop_BANG_ = function _pop_BANG_(stack) {
  var res = cljs.core.last.call(null, cljs.core.deref.call(null, stack));
  cljs.core.swap_BANG_.call(null, stack, cljs.core.comp.call(null, cljs.core.vec, cljs.core.drop_last));
  return res;
};
cljs.looperscript.iterator.push_BANG_ = function push_BANG_(stack, x) {
  if (!(x == null)) {
    return cljs.core.swap_BANG_.call(null, stack, cljs.core.conj, x);
  } else {
    return null;
  }
};
cljs.looperscript.iterator.vec_push_BANG_ = function vec_push_BANG_(stack, v) {
  var seq__29846 = cljs.core.seq.call(null, cljs.core.reverse.call(null, v));
  var chunk__29847 = null;
  var count__29848 = 0;
  var i__29849 = 0;
  while (true) {
    if (i__29849 < count__29848) {
      var i = cljs.core._nth.call(null, chunk__29847, i__29849);
      cljs.looperscript.iterator.push_BANG_.call(null, stack, i);
      var G__29850 = seq__29846;
      var G__29851 = chunk__29847;
      var G__29852 = count__29848;
      var G__29853 = i__29849 + 1;
      seq__29846 = G__29850;
      chunk__29847 = G__29851;
      count__29848 = G__29852;
      i__29849 = G__29853;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__29846);
      if (temp__4126__auto__) {
        var seq__29846__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__29846__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__29846__$1);
          var G__29854 = cljs.core.chunk_rest.call(null, seq__29846__$1);
          var G__29855 = c__4410__auto__;
          var G__29856 = cljs.core.count.call(null, c__4410__auto__);
          var G__29857 = 0;
          seq__29846 = G__29854;
          chunk__29847 = G__29855;
          count__29848 = G__29856;
          i__29849 = G__29857;
          continue;
        } else {
          var i = cljs.core.first.call(null, seq__29846__$1);
          cljs.looperscript.iterator.push_BANG_.call(null, stack, i);
          var G__29858 = cljs.core.next.call(null, seq__29846__$1);
          var G__29859 = null;
          var G__29860 = 0;
          var G__29861 = 0;
          seq__29846 = G__29858;
          chunk__29847 = G__29859;
          count__29848 = G__29860;
          i__29849 = G__29861;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.looperscript.iterator.dethunk = function dethunk(x) {
  var r = x;
  while (true) {
    if (cljs.core.fn_QMARK_.call(null, r)) {
      var G__29862 = r.call(null);
      r = G__29862;
      continue;
    } else {
      return r;
    }
    break;
  }
};
cljs.looperscript.iterator.get_next_stack_val = function() {
  var get_next_stack_val = null;
  var get_next_stack_val__1 = function(stack) {
    return get_next_stack_val.call(null, stack, true);
  };
  var get_next_stack_val__2 = function(stack, preserve_carots_QMARK_) {
    var x = cljs.looperscript.iterator._pop_BANG_.call(null, stack);
    var preserve_QMARK_ = function() {
      var and__3628__auto__ = cljs.core.get.call(null, cljs.core.meta.call(null, x), new cljs.core.Keyword(null, "intact-for-sub-time", "intact-for-sub-time", 1903796476));
      if (cljs.core.truth_(and__3628__auto__)) {
        return preserve_carots_QMARK_;
      } else {
        return and__3628__auto__;
      }
    }();
    var x__$1 = cljs.core.not.call(null, preserve_QMARK_) ? cljs.looperscript.iterator.dethunk.call(null, x) : x;
    if ((cljs.core.seq_QMARK_.call(null, x__$1) || cljs.core.vector_QMARK_.call(null, x__$1)) && cljs.core.not.call(null, preserve_QMARK_) && !(cljs.core.first.call(null, x__$1) instanceof cljs.core.Keyword)) {
      var seq__29867_29871 = cljs.core.seq.call(null, cljs.core.reverse.call(null, x__$1));
      var chunk__29868_29872 = null;
      var count__29869_29873 = 0;
      var i__29870_29874 = 0;
      while (true) {
        if (i__29870_29874 < count__29869_29873) {
          var i_29875 = cljs.core._nth.call(null, chunk__29868_29872, i__29870_29874);
          cljs.looperscript.iterator.push_BANG_.call(null, stack, i_29875);
          var G__29876 = seq__29867_29871;
          var G__29877 = chunk__29868_29872;
          var G__29878 = count__29869_29873;
          var G__29879 = i__29870_29874 + 1;
          seq__29867_29871 = G__29876;
          chunk__29868_29872 = G__29877;
          count__29869_29873 = G__29878;
          i__29870_29874 = G__29879;
          continue;
        } else {
          var temp__4126__auto___29880 = cljs.core.seq.call(null, seq__29867_29871);
          if (temp__4126__auto___29880) {
            var seq__29867_29881__$1 = temp__4126__auto___29880;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__29867_29881__$1)) {
              var c__4410__auto___29882 = cljs.core.chunk_first.call(null, seq__29867_29881__$1);
              var G__29883 = cljs.core.chunk_rest.call(null, seq__29867_29881__$1);
              var G__29884 = c__4410__auto___29882;
              var G__29885 = cljs.core.count.call(null, c__4410__auto___29882);
              var G__29886 = 0;
              seq__29867_29871 = G__29883;
              chunk__29868_29872 = G__29884;
              count__29869_29873 = G__29885;
              i__29870_29874 = G__29886;
              continue;
            } else {
              var i_29887 = cljs.core.first.call(null, seq__29867_29881__$1);
              cljs.looperscript.iterator.push_BANG_.call(null, stack, i_29887);
              var G__29888 = cljs.core.next.call(null, seq__29867_29881__$1);
              var G__29889 = null;
              var G__29890 = 0;
              var G__29891 = 0;
              seq__29867_29871 = G__29888;
              chunk__29868_29872 = G__29889;
              count__29869_29873 = G__29890;
              i__29870_29874 = G__29891;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return get_next_stack_val.call(null, stack);
    } else {
      return x__$1;
    }
  };
  get_next_stack_val = function(stack, preserve_carots_QMARK_) {
    switch(arguments.length) {
      case 1:
        return get_next_stack_val__1.call(this, stack);
      case 2:
        return get_next_stack_val__2.call(this, stack, preserve_carots_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_next_stack_val.cljs$core$IFn$_invoke$arity$1 = get_next_stack_val__1;
  get_next_stack_val.cljs$core$IFn$_invoke$arity$2 = get_next_stack_val__2;
  return get_next_stack_val;
}();
cljs.looperscript.iterator.modifier_QMARK_ = function modifier_QMARK_(x) {
  return cljs.core.vector_QMARK_.call(null, x) && cljs.core._EQ_.call(null, cljs.core.first.call(null, x), new cljs.core.Keyword(null, "modifier", "modifier", 1634442788));
};
cljs.looperscript.iterator.modifier_fn_QMARK_ = function modifier_fn_QMARK_(x) {
  return cljs.core.vector_QMARK_.call(null, x) && cljs.core._EQ_.call(null, cljs.core.first.call(null, x), new cljs.core.Keyword(null, "modifier-fn", "modifier-fn", -1624543303));
};
cljs.looperscript.iterator.justify = function justify(n) {
  var p = cljs.core.mod.call(null, n, 12);
  var oct = n - p;
  var vec__29893 = cljs.core.get.call(null, cljs.core.PersistentHashMap.fromArrays([0, 7, 1, 4, 6, 3, 2, 11, 9, 5, 10, 8], [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 1], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [3, 2], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [16, 15], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [5, 
  4], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [45, 32], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [6, 5], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [9, 8], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [15, 8], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [5, 3], null), 
  new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [4, 3], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [16, 9], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [8, 5], null)]), p);
  var num = cljs.core.nth.call(null, vec__29893, 0, null);
  var den = cljs.core.nth.call(null, vec__29893, 1, null);
  if (cljs.core.not.call(null, num)) {
    return n;
  } else {
    return oct + 12 * (Math.log.call(null, num / den) / Math.log.call(null, 2));
  }
};
cljs.looperscript.iterator.apply_modifiers = function apply_modifiers(mods, x) {
  return cljs.core.reduce.call(null, function(n, m) {
    if (cljs.core.fn_QMARK_.call(null, m)) {
      return m.call(null, n);
    } else {
      var pred__29897 = cljs.core._EQ_;
      var expr__29898 = cljs.core.keyword.call(null, cljs.core.first.call(null, m));
      if (cljs.core.truth_(pred__29897.call(null, new cljs.core.Keyword(null, "fraction", "fraction", 107940680), expr__29898))) {
        return n * cljs.core.second.call(null, m);
      } else {
        if (cljs.core.truth_(pred__29897.call(null, new cljs.core.Keyword(null, "plus-mod", "plus-mod", 248204419), expr__29898))) {
          return n + cljs.core.second.call(null, m);
        } else {
          if (cljs.core.truth_(pred__29897.call(null, new cljs.core.Keyword(null, "just", "just", 466318146), expr__29898))) {
            return cljs.looperscript.iterator.justify.call(null, n);
          } else {
            throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(expr__29898));
          }
        }
      }
    }
  }, x, mods);
};
cljs.looperscript.iterator.iterator = function() {
  var iterator = null;
  var iterator__1 = function(v) {
    return iterator.call(null, v, true);
  };
  var iterator__2 = function(v, preserve_carots_QMARK_) {
    var stack = cljs.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
    var modifiers = cljs.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
    return function(stack, modifiers) {
      return function() {
        var G__29900__delegate = function(args) {
          while (true) {
            if (cljs.core.empty_QMARK_.call(null, cljs.core.deref.call(null, stack))) {
              cljs.core.reset_BANG_.call(null, modifiers, cljs.core.PersistentVector.EMPTY);
              cljs.looperscript.iterator.vec_push_BANG_.call(null, stack, v);
            } else {
            }
            var x = cljs.looperscript.iterator.get_next_stack_val.call(null, stack, preserve_carots_QMARK_);
            if (x == null || cljs.core.sequential_QMARK_.call(null, x) && cljs.core.empty_QMARK_.call(null, x)) {
              continue;
            } else {
              if (cljs.looperscript.iterator.modifier_fn_QMARK_.call(null, x)) {
                cljs.core.swap_BANG_.call(null, modifiers, cljs.core.conj, cljs.core.second.call(null, x));
                continue;
              } else {
                if (cljs.looperscript.iterator.modifier_QMARK_.call(null, x)) {
                  cljs.core.swap_BANG_.call(null, modifiers, cljs.core.conj, cljs.core.map.call(null, cljs.looperscript.iterator.dethunk, cljs.core.second.call(null, x)));
                  continue;
                } else {
                  return cljs.looperscript.iterator.apply_modifiers.call(null, cljs.core.deref.call(null, modifiers), x);
                }
              }
            }
            break;
          }
        };
        var G__29900 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__29900__delegate.call(this, args);
        };
        G__29900.cljs$lang$maxFixedArity = 0;
        G__29900.cljs$lang$applyTo = function(arglist__29901) {
          var args = cljs.core.seq(arglist__29901);
          return G__29900__delegate(args);
        };
        G__29900.cljs$core$IFn$_invoke$arity$variadic = G__29900__delegate;
        return G__29900;
      }();
    }(stack, modifiers);
  };
  iterator = function(v, preserve_carots_QMARK_) {
    switch(arguments.length) {
      case 1:
        return iterator__1.call(this, v);
      case 2:
        return iterator__2.call(this, v, preserve_carots_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  iterator.cljs$core$IFn$_invoke$arity$1 = iterator__1;
  iterator.cljs$core$IFn$_invoke$arity$2 = iterator__2;
  return iterator;
}();
cljs.looperscript.iterator.timed_iterator = function timed_iterator(v, time_v) {
  var v_iterator = cljs.looperscript.iterator.iterator.call(null, v, true);
  var time_iterator = cljs.looperscript.iterator.iterator.call(null, time_v);
  var get_next_v = function(v_iterator, time_iterator) {
    return function() {
      var next_v = v_iterator.call(null);
      if (cljs.core.vector_QMARK_.call(null, next_v) && !(cljs.core.first.call(null, next_v) instanceof cljs.core.Keyword)) {
        return cljs.looperscript.iterator.iterator.call(null, next_v, false);
      } else {
        if (cljs.core.fn_QMARK_.call(null, next_v)) {
          return cljs.looperscript.iterator.iterator.call(null, next_v.call(null), false);
        } else {
          return next_v;
        }
      }
    };
  }(v_iterator, time_iterator);
  var current_val = cljs.core.atom.call(null, get_next_v.call(null));
  var current_val_expiration_time = cljs.core.atom.call(null, time_iterator.call(null));
  return function(v_iterator, time_iterator, get_next_v, current_val, current_val_expiration_time) {
    return function(note_time) {
      while (true) {
        if (note_time >= cljs.core.deref.call(null, current_val_expiration_time)) {
          cljs.core.swap_BANG_.call(null, current_val_expiration_time, cljs.core._PLUS_, time_iterator.call(null));
          cljs.core.reset_BANG_.call(null, current_val, get_next_v.call(null));
          continue;
        } else {
        }
        break;
      }
      return cljs.looperscript.iterator.dethunk.call(null, cljs.core.deref.call(null, current_val));
    };
  }(v_iterator, time_iterator, get_next_v, current_val, current_val_expiration_time);
};
goog.provide("instaparse.print");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
instaparse.print.paren_for_tags = function paren_for_tags(tag_set, hidden_QMARK_, parser) {
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = cljs.core.not.call(null, hidden_QMARK_);
    if (and__3628__auto__) {
      return tag_set.call(null, parser.call(null, new cljs.core.Keyword(null, "tag", "tag", -1290361223)));
    } else {
      return and__3628__auto__;
    }
  }())) {
    return "(" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.combinators__GT_str.call(null, parser, false)) + ")";
  } else {
    return instaparse.print.combinators__GT_str.call(null, parser, false);
  }
};
instaparse.print.paren_for_compound = cljs.core.partial.call(null, instaparse.print.paren_for_tags, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "cat", "cat", -1457810207), null, new cljs.core.Keyword(null, "ord", "ord", 1142548323), null, new cljs.core.Keyword(null, "alt", "alt", -3214426), null], null), null));
instaparse.print.regexp_replace = function regexp_replace(s) {
  var G__32314 = s;
  switch(G__32314) {
    case "\n":
      return "\\n";
      break;
    case "\b":
      return "\\b";
      break;
    case "\f":
      return "\\f";
      break;
    case "\r":
      return "\\r";
      break;
    case "\t":
      return "\\t";
      break;
    default:
      return s;
  }
};
instaparse.print.regexp__GT_str = function regexp__GT_str(r) {
  return clojure.string.replace.call(null, '#"' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.subs.call(null, r.source, 1)) + '"', /[\s]/, instaparse.print.regexp_replace);
};
instaparse.print.combinators__GT_str = function() {
  var combinators__GT_str = null;
  var combinators__GT_str__1 = function(p) {
    return combinators__GT_str.call(null, p, false);
  };
  var combinators__GT_str__2 = function(p__32316, hidden_QMARK_) {
    var map__32321 = p__32316;
    var map__32321__$1 = cljs.core.seq_QMARK_.call(null, map__32321) ? cljs.core.apply.call(null, cljs.core.hash_map, map__32321) : map__32321;
    var p = map__32321__$1;
    var tag = cljs.core.get.call(null, map__32321__$1, new cljs.core.Keyword(null, "tag", "tag", -1290361223));
    var parsers = cljs.core.get.call(null, map__32321__$1, new cljs.core.Keyword(null, "parsers", "parsers", -804353827));
    var parser2 = cljs.core.get.call(null, map__32321__$1, new cljs.core.Keyword(null, "parser2", "parser2", 1013754688));
    var parser1 = cljs.core.get.call(null, map__32321__$1, new cljs.core.Keyword(null, "parser1", "parser1", -439601422));
    var parser = cljs.core.get.call(null, map__32321__$1, new cljs.core.Keyword(null, "parser", "parser", -1543495310));
    if (cljs.core.truth_(function() {
      var and__3628__auto__ = cljs.core.not.call(null, hidden_QMARK_);
      if (and__3628__auto__) {
        return(new cljs.core.Keyword(null, "hide", "hide", -596913169)).cljs$core$IFn$_invoke$arity$1(p);
      } else {
        return and__3628__auto__;
      }
    }())) {
      return "\x3c" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(combinators__GT_str.call(null, p, true)) + "\x3e";
    } else {
      var G__32322 = tag instanceof cljs.core.Keyword ? tag.fqn : null;
      switch(G__32322) {
        case "neg":
          return "!" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_compound.call(null, hidden_QMARK_, parser));
          break;
        case "cat":
          return clojure.string.join.call(null, " ", cljs.core.map.call(null, cljs.core.partial.call(null, instaparse.print.paren_for_tags, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ord", "ord", 1142548323), null, new cljs.core.Keyword(null, "alt", "alt", -3214426), null], null), null), hidden_QMARK_), parsers));
          break;
        case "ord":
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_tags.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "alt", "alt", -3214426), null], null), null), hidden_QMARK_, parser1)) + " / " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_tags.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "alt", 
          "alt", -3214426), null], null), null), hidden_QMARK_, parser2));
          break;
        case "alt":
          return clojure.string.join.call(null, " | ", cljs.core.map.call(null, cljs.core.partial.call(null, instaparse.print.paren_for_tags, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ord", "ord", 1142548323), null], null), null), hidden_QMARK_), parsers));
          break;
        case "look":
          return "\x26" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_compound.call(null, hidden_QMARK_, parser));
          break;
        case "nt":
          return cljs.core.subs.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "keyword", "keyword", 811389747)).cljs$core$IFn$_invoke$arity$1(p)), 1);
          break;
        case "rep":
          if (cljs.core.not_EQ_.call(null, (new cljs.core.Keyword(null, "min", "min", 444991522)).cljs$core$IFn$_invoke$arity$1(p), (new cljs.core.Keyword(null, "max", "max", 61366548)).cljs$core$IFn$_invoke$arity$1(p))) {
            return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_compound.call(null, hidden_QMARK_, parser)) + "{" + cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "min", "min", 444991522)).cljs$core$IFn$_invoke$arity$1(p)) + "," + cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "max", "max", 61366548)).cljs$core$IFn$_invoke$arity$1(p)) + "}";
          } else {
            return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_compound.call(null, hidden_QMARK_, parser)) + "{" + cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "min", "min", 444991522)).cljs$core$IFn$_invoke$arity$1(p)) + "}";
          }
          break;
        case "star":
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_compound.call(null, hidden_QMARK_, parser)) + "*";
          break;
        case "string":
          var sb__4581__auto__ = new goog.string.StringBuffer;
          var _STAR_print_fn_STAR_32323_32326 = cljs.core._STAR_print_fn_STAR_;
          try {
            cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_fn_STAR_32323_32326, sb__4581__auto__, G__32322, map__32321, map__32321__$1, p, tag, parsers, parser2, parser1, parser) {
              return function(x__4582__auto__) {
                return sb__4581__auto__.append(x__4582__auto__);
              };
            }(_STAR_print_fn_STAR_32323_32326, sb__4581__auto__, G__32322, map__32321, map__32321__$1, p, tag, parsers, parser2, parser1, parser);
            cljs.core.pr.call(null, (new cljs.core.Keyword(null, "string", "string", -1989541586)).cljs$core$IFn$_invoke$arity$1(p));
          } finally {
            cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_32323_32326;
          }
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4581__auto__);
          break;
        case "regexp":
          return instaparse.print.regexp__GT_str.call(null, (new cljs.core.Keyword(null, "regexp", "regexp", -541372782)).cljs$core$IFn$_invoke$arity$1(p));
          break;
        case "plus":
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_compound.call(null, hidden_QMARK_, parser)) + "+";
          break;
        case "epsilon":
          return "\u03b5";
          break;
        case "string-ci":
          var sb__4581__auto__ = new goog.string.StringBuffer;
          var _STAR_print_fn_STAR_32324_32327 = cljs.core._STAR_print_fn_STAR_;
          try {
            cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_fn_STAR_32324_32327, sb__4581__auto__, G__32322, map__32321, map__32321__$1, p, tag, parsers, parser2, parser1, parser) {
              return function(x__4582__auto__) {
                return sb__4581__auto__.append(x__4582__auto__);
              };
            }(_STAR_print_fn_STAR_32324_32327, sb__4581__auto__, G__32322, map__32321, map__32321__$1, p, tag, parsers, parser2, parser1, parser);
            cljs.core.pr.call(null, (new cljs.core.Keyword(null, "string", "string", -1989541586)).cljs$core$IFn$_invoke$arity$1(p));
          } finally {
            cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_32324_32327;
          }
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4581__auto__);
          break;
        case "opt":
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_compound.call(null, hidden_QMARK_, parser)) + "?";
          break;
        default:
          throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag));;
      }
    }
  };
  combinators__GT_str = function(p__32316, hidden_QMARK_) {
    switch(arguments.length) {
      case 1:
        return combinators__GT_str__1.call(this, p__32316);
      case 2:
        return combinators__GT_str__2.call(this, p__32316, hidden_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  combinators__GT_str.cljs$core$IFn$_invoke$arity$1 = combinators__GT_str__1;
  combinators__GT_str.cljs$core$IFn$_invoke$arity$2 = combinators__GT_str__2;
  return combinators__GT_str;
}();
instaparse.print.rule__GT_str = function rule__GT_str(terminal, parser) {
  if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "reduction-type", "reduction-type", -488293450)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser)), new cljs.core.Keyword(null, "raw", "raw", 1604651272))) {
    return "\x3c" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.name.call(null, terminal)) + "\x3e \x3d " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.combinators__GT_str.call(null, parser));
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.name.call(null, terminal)) + " \x3d " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.combinators__GT_str.call(null, parser));
  }
};
instaparse.print.Parser__GT_str = function Parser__GT_str(p__32328) {
  var map__32338 = p__32328;
  var map__32338__$1 = cljs.core.seq_QMARK_.call(null, map__32338) ? cljs.core.apply.call(null, cljs.core.hash_map, map__32338) : map__32338;
  var grammar = cljs.core.get.call(null, map__32338__$1, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267));
  var start = cljs.core.get.call(null, map__32338__$1, new cljs.core.Keyword(null, "start-production", "start-production", 687546537));
  return clojure.string.join.call(null, "\n", cljs.core.cons.call(null, instaparse.print.rule__GT_str.call(null, start, grammar.call(null, start)), function() {
    var iter__4379__auto__ = function(map__32338, map__32338__$1, grammar, start) {
      return function iter__32339(s__32340) {
        return new cljs.core.LazySeq(null, function(map__32338, map__32338__$1, grammar, start) {
          return function() {
            var s__32340__$1 = s__32340;
            while (true) {
              var temp__4126__auto__ = cljs.core.seq.call(null, s__32340__$1);
              if (temp__4126__auto__) {
                var s__32340__$2 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__32340__$2)) {
                  var c__4377__auto__ = cljs.core.chunk_first.call(null, s__32340__$2);
                  var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                  var b__32342 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                  if (function() {
                    var i__32341 = 0;
                    while (true) {
                      if (i__32341 < size__4378__auto__) {
                        var vec__32345 = cljs.core._nth.call(null, c__4377__auto__, i__32341);
                        var terminal = cljs.core.nth.call(null, vec__32345, 0, null);
                        var parser = cljs.core.nth.call(null, vec__32345, 1, null);
                        if (cljs.core.not_EQ_.call(null, terminal, start)) {
                          cljs.core.chunk_append.call(null, b__32342, instaparse.print.rule__GT_str.call(null, terminal, parser));
                          var G__32347 = i__32341 + 1;
                          i__32341 = G__32347;
                          continue;
                        } else {
                          var G__32348 = i__32341 + 1;
                          i__32341 = G__32348;
                          continue;
                        }
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__32342), iter__32339.call(null, cljs.core.chunk_rest.call(null, s__32340__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__32342), null);
                  }
                } else {
                  var vec__32346 = cljs.core.first.call(null, s__32340__$2);
                  var terminal = cljs.core.nth.call(null, vec__32346, 0, null);
                  var parser = cljs.core.nth.call(null, vec__32346, 1, null);
                  if (cljs.core.not_EQ_.call(null, terminal, start)) {
                    return cljs.core.cons.call(null, instaparse.print.rule__GT_str.call(null, terminal, parser), iter__32339.call(null, cljs.core.rest.call(null, s__32340__$2)));
                  } else {
                    var G__32349 = cljs.core.rest.call(null, s__32340__$2);
                    s__32340__$1 = G__32349;
                    continue;
                  }
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(map__32338, map__32338__$1, grammar, start), null, null);
      };
    }(map__32338, map__32338__$1, grammar, start);
    return iter__4379__auto__.call(null, grammar);
  }()));
};
goog.provide("instaparse.failure");
goog.require("cljs.core");
goog.require("instaparse.print");
goog.require("instaparse.print");
instaparse.failure.index__GT_line_column = function index__GT_line_column(index, text) {
  var line = 1;
  var col = 1;
  var counter = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, index, counter)) {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "line", "line", 212345235), line, new cljs.core.Keyword(null, "column", "column", 2078222095), col], null);
    } else {
      if (cljs.core._EQ_.call(null, "\n", cljs.core.get.call(null, text, counter))) {
        var G__32114 = line + 1;
        var G__32115 = 1;
        var G__32116 = counter + 1;
        line = G__32114;
        col = G__32115;
        counter = G__32116;
        continue;
      } else {
        var G__32117 = line;
        var G__32118 = col + 1;
        var G__32119 = counter + 1;
        line = G__32117;
        col = G__32118;
        counter = G__32119;
        continue;
      }
    }
    break;
  }
};
instaparse.failure.newline_chars = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["\n", null, "\r", null], null), null);
instaparse.failure.line_seq = function line_seq(s) {
  if (cljs.core.empty_QMARK_.call(null, s)) {
    return null;
  } else {
    return cljs.core.map.call(null, cljs.core.partial.call(null, cljs.core.apply, cljs.core.str), cljs.core.filter.call(null, function(p1__32120_SHARP_) {
      return cljs.core.not.call(null, instaparse.failure.newline_chars.call(null, cljs.core.first.call(null, p1__32120_SHARP_)));
    }, cljs.core.partition_by.call(null, instaparse.failure.newline_chars, s)));
  }
};
instaparse.failure.get_line = function get_line(n, text) {
  return cljs.core.nth.call(null, instaparse.failure.line_seq.call(null, text), n - 1);
};
instaparse.failure.marker = function marker(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    if (n <= 1) {
      return "^";
    } else {
      return cljs.core.apply.call(null, cljs.core.str, cljs.core.concat.call(null, cljs.core.repeat.call(null, n - 1, " "), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["^"], null)));
    }
  } else {
    return null;
  }
};
instaparse.failure.augment_failure = function augment_failure(failure, text) {
  var lc = instaparse.failure.index__GT_line_column.call(null, (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(failure), text);
  return cljs.core.merge.call(null, failure, lc, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "text", "text", -1790561697), instaparse.failure.get_line.call(null, (new cljs.core.Keyword(null, "line", "line", 212345235)).cljs$core$IFn$_invoke$arity$1(lc), text)], null));
};
instaparse.failure.print_reason = function print_reason(r) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "NOT", "NOT", -1689245341)).cljs$core$IFn$_invoke$arity$1(r))) {
    cljs.core.print.call(null, "NOT ");
    return cljs.core.println.call(null, (new cljs.core.Keyword(null, "NOT", "NOT", -1689245341)).cljs$core$IFn$_invoke$arity$1(r));
  } else {
    if (r instanceof java.util.regex.Pattern) {
      return cljs.core.println.call(null, instaparse.print.regexp__GT_str.call(null, r));
    } else {
      return cljs.core.prn.call(null, r);
    }
  }
};
instaparse.failure.pprint_failure = function pprint_failure(p__32121) {
  var map__32131 = p__32121;
  var map__32131__$1 = cljs.core.seq_QMARK_.call(null, map__32131) ? cljs.core.apply.call(null, cljs.core.hash_map, map__32131) : map__32131;
  var reason = cljs.core.get.call(null, map__32131__$1, new cljs.core.Keyword(null, "reason", "reason", -2070751759));
  var text = cljs.core.get.call(null, map__32131__$1, new cljs.core.Keyword(null, "text", "text", -1790561697));
  var column = cljs.core.get.call(null, map__32131__$1, new cljs.core.Keyword(null, "column", "column", 2078222095));
  var line = cljs.core.get.call(null, map__32131__$1, new cljs.core.Keyword(null, "line", "line", 212345235));
  cljs.core.println.call(null, "Parse error at line", line, ", column", column, ":\n");
  cljs.core.println.call(null, text);
  cljs.core.println.call(null, instaparse.failure.marker.call(null, column));
  var full_reasons = cljs.core.distinct.call(null, cljs.core.map.call(null, new cljs.core.Keyword(null, "expecting", "expecting", -57706705), cljs.core.filter.call(null, new cljs.core.Keyword(null, "full", "full", 436801220), reason)));
  var partial_reasons = cljs.core.distinct.call(null, cljs.core.map.call(null, new cljs.core.Keyword(null, "expecting", "expecting", -57706705), cljs.core.filter.call(null, cljs.core.complement.call(null, new cljs.core.Keyword(null, "full", "full", 436801220)), reason)));
  var total = cljs.core.count.call(null, full_reasons) + cljs.core.count.call(null, partial_reasons);
  if (total === 0) {
  } else {
    if (cljs.core._EQ_.call(null, 1, total)) {
      cljs.core.println.call(null, "Expected:");
    } else {
      cljs.core.println.call(null, "Expected one of:");
    }
  }
  var seq__32132_32140 = cljs.core.seq.call(null, full_reasons);
  var chunk__32133_32141 = null;
  var count__32134_32142 = 0;
  var i__32135_32143 = 0;
  while (true) {
    if (i__32135_32143 < count__32134_32142) {
      var r_32144 = cljs.core._nth.call(null, chunk__32133_32141, i__32135_32143);
      cljs.core.pr.call(null, r_32144);
      cljs.core.println.call(null, " (followed by end-of-string)");
      var G__32145 = seq__32132_32140;
      var G__32146 = chunk__32133_32141;
      var G__32147 = count__32134_32142;
      var G__32148 = i__32135_32143 + 1;
      seq__32132_32140 = G__32145;
      chunk__32133_32141 = G__32146;
      count__32134_32142 = G__32147;
      i__32135_32143 = G__32148;
      continue;
    } else {
      var temp__4126__auto___32149 = cljs.core.seq.call(null, seq__32132_32140);
      if (temp__4126__auto___32149) {
        var seq__32132_32150__$1 = temp__4126__auto___32149;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__32132_32150__$1)) {
          var c__4410__auto___32151 = cljs.core.chunk_first.call(null, seq__32132_32150__$1);
          var G__32152 = cljs.core.chunk_rest.call(null, seq__32132_32150__$1);
          var G__32153 = c__4410__auto___32151;
          var G__32154 = cljs.core.count.call(null, c__4410__auto___32151);
          var G__32155 = 0;
          seq__32132_32140 = G__32152;
          chunk__32133_32141 = G__32153;
          count__32134_32142 = G__32154;
          i__32135_32143 = G__32155;
          continue;
        } else {
          var r_32156 = cljs.core.first.call(null, seq__32132_32150__$1);
          cljs.core.pr.call(null, r_32156);
          cljs.core.println.call(null, " (followed by end-of-string)");
          var G__32157 = cljs.core.next.call(null, seq__32132_32150__$1);
          var G__32158 = null;
          var G__32159 = 0;
          var G__32160 = 0;
          seq__32132_32140 = G__32157;
          chunk__32133_32141 = G__32158;
          count__32134_32142 = G__32159;
          i__32135_32143 = G__32160;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var seq__32136 = cljs.core.seq.call(null, partial_reasons);
  var chunk__32137 = null;
  var count__32138 = 0;
  var i__32139 = 0;
  while (true) {
    if (i__32139 < count__32138) {
      var r = cljs.core._nth.call(null, chunk__32137, i__32139);
      instaparse.failure.print_reason.call(null, r);
      var G__32161 = seq__32136;
      var G__32162 = chunk__32137;
      var G__32163 = count__32138;
      var G__32164 = i__32139 + 1;
      seq__32136 = G__32161;
      chunk__32137 = G__32162;
      count__32138 = G__32163;
      i__32139 = G__32164;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__32136);
      if (temp__4126__auto__) {
        var seq__32136__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__32136__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__32136__$1);
          var G__32165 = cljs.core.chunk_rest.call(null, seq__32136__$1);
          var G__32166 = c__4410__auto__;
          var G__32167 = cljs.core.count.call(null, c__4410__auto__);
          var G__32168 = 0;
          seq__32136 = G__32165;
          chunk__32137 = G__32166;
          count__32138 = G__32167;
          i__32139 = G__32168;
          continue;
        } else {
          var r = cljs.core.first.call(null, seq__32136__$1);
          instaparse.failure.print_reason.call(null, r);
          var G__32169 = cljs.core.next.call(null, seq__32136__$1);
          var G__32170 = null;
          var G__32171 = 0;
          var G__32172 = 0;
          seq__32136 = G__32169;
          chunk__32137 = G__32170;
          count__32138 = G__32171;
          i__32139 = G__32172;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
goog.provide("instaparse.gll");
goog.require("cljs.core");
goog.require("instaparse.combinators_source");
goog.require("instaparse.print");
goog.require("instaparse.print");
goog.require("instaparse.combinators_source");
goog.require("instaparse.reduction");
goog.require("instaparse.reduction");
goog.require("instaparse.failure");
goog.require("instaparse.failure");
goog.require("instaparse.auto_flatten_seq");
goog.require("instaparse.auto_flatten_seq");
instaparse.gll.ISegment = function() {
  var obj31883 = {};
  return obj31883;
}();
instaparse.gll.subsegment = function subsegment(this$, start_index, end_index_minus_one) {
  if (function() {
    var and__3628__auto__ = this$;
    if (and__3628__auto__) {
      return this$.instaparse$gll$ISegment$subsegment$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return this$.instaparse$gll$ISegment$subsegment$arity$3(this$, start_index, end_index_minus_one);
  } else {
    var x__4277__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3640__auto__ = instaparse.gll.subsegment[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = instaparse.gll.subsegment["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISegment.subsegment", this$);
        }
      }
    }().call(null, this$, start_index, end_index_minus_one);
  }
};
instaparse.gll.toString = function toString(this$) {
  if (function() {
    var and__3628__auto__ = this$;
    if (and__3628__auto__) {
      return this$.instaparse$gll$ISegment$toString$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return this$.instaparse$gll$ISegment$toString$arity$1(this$);
  } else {
    var x__4277__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3640__auto__ = instaparse.gll.toString[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = instaparse.gll.toString["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISegment.toString", this$);
        }
      }
    }().call(null, this$);
  }
};
instaparse.gll.Segment = function(text, offset, count) {
  this.text = text;
  this.offset = offset;
  this.count = count;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
instaparse.gll.Segment.cljs$lang$type = true;
instaparse.gll.Segment.cljs$lang$ctorStr = "instaparse.gll/Segment";
instaparse.gll.Segment.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "instaparse.gll/Segment");
};
instaparse.gll.Segment.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.count;
};
instaparse.gll.Segment.prototype.instaparse$gll$ISegment$ = true;
instaparse.gll.Segment.prototype.instaparse$gll$ISegment$subsegment$arity$3 = function(this$, start, end) {
  var self__ = this;
  var this$__$1 = this;
  return new instaparse.gll.Segment(self__.text, self__.offset + start, end - start);
};
instaparse.gll.Segment.prototype.instaparse$gll$ISegment$toString$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.subs.call(null, self__.text, self__.offset, self__.offset + self__.count);
};
instaparse.gll.__GT_Segment = function __GT_Segment(text, offset, count) {
  return new instaparse.gll.Segment(text, offset, count);
};
instaparse.gll.get_parser = function get_parser(grammar, p) {
  return cljs.core.get.call(null, grammar, p, p);
};
instaparse.gll._parse = function _parse(parser, index, tramp) {
  var G__31885 = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser).fqn : null;
  switch(G__31885) {
    case "neg":
      return instaparse.gll.negative_lookahead_parse.call(null, parser, index, tramp);
      break;
    case "cat":
      return instaparse.gll.cat_parse.call(null, parser, index, tramp);
      break;
    case "ord":
      return instaparse.gll.ordered_alt_parse.call(null, parser, index, tramp);
      break;
    case "alt":
      return instaparse.gll.alt_parse.call(null, parser, index, tramp);
      break;
    case "look":
      return instaparse.gll.lookahead_parse.call(null, parser, index, tramp);
      break;
    case "nt":
      return instaparse.gll.non_terminal_parse.call(null, parser, index, tramp);
      break;
    case "rep":
      return instaparse.gll.rep_parse.call(null, parser, index, tramp);
      break;
    case "star":
      return instaparse.gll.star_parse.call(null, parser, index, tramp);
      break;
    case "string":
      return instaparse.gll.string_parse.call(null, parser, index, tramp);
      break;
    case "regexp":
      return instaparse.gll.regexp_parse.call(null, parser, index, tramp);
      break;
    case "plus":
      return instaparse.gll.plus_parse.call(null, parser, index, tramp);
      break;
    case "epsilon":
      return instaparse.gll.epsilon_parse.call(null, parser, index, tramp);
      break;
    case "string-ci":
      return instaparse.gll.string_case_insensitive_parse.call(null, parser, index, tramp);
      break;
    case "opt":
      return instaparse.gll.opt_parse.call(null, parser, index, tramp);
      break;
    default:
      throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser)));;
  }
};
instaparse.gll._full_parse = function _full_parse(parser, index, tramp) {
  var G__31888 = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser).fqn : null;
  switch(G__31888) {
    case "neg":
      return instaparse.gll.negative_lookahead_parse.call(null, parser, index, tramp);
      break;
    case "cat":
      return instaparse.gll.cat_full_parse.call(null, parser, index, tramp);
      break;
    case "ord":
      return instaparse.gll.ordered_alt_full_parse.call(null, parser, index, tramp);
      break;
    case "alt":
      return instaparse.gll.alt_full_parse.call(null, parser, index, tramp);
      break;
    case "look":
      return instaparse.gll.lookahead_full_parse.call(null, parser, index, tramp);
      break;
    case "nt":
      return instaparse.gll.non_terminal_full_parse.call(null, parser, index, tramp);
      break;
    case "rep":
      return instaparse.gll.rep_full_parse.call(null, parser, index, tramp);
      break;
    case "star":
      return instaparse.gll.star_full_parse.call(null, parser, index, tramp);
      break;
    case "string":
      return instaparse.gll.string_full_parse.call(null, parser, index, tramp);
      break;
    case "regexp":
      return instaparse.gll.regexp_full_parse.call(null, parser, index, tramp);
      break;
    case "plus":
      return instaparse.gll.plus_full_parse.call(null, parser, index, tramp);
      break;
    case "epsilon":
      return instaparse.gll.epsilon_full_parse.call(null, parser, index, tramp);
      break;
    case "string-ci":
      return instaparse.gll.string_case_insensitive_full_parse.call(null, parser, index, tramp);
      break;
    case "opt":
      return instaparse.gll.opt_full_parse.call(null, parser, index, tramp);
      break;
    default:
      throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser)));;
  }
};
instaparse.gll.Failure = function(index, reason, __meta, __extmap) {
  this.index = index;
  this.reason = reason;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
instaparse.gll.Failure.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4236__auto__, k__4237__auto__) {
  var self__ = this;
  var this__4236__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4236__auto____$1, k__4237__auto__, null);
};
instaparse.gll.Failure.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4238__auto__, k31891, else__4239__auto__) {
  var self__ = this;
  var this__4238__auto____$1 = this;
  var G__31893 = k31891 instanceof cljs.core.Keyword ? k31891.fqn : null;
  switch(G__31893) {
    case "reason":
      return self__.reason;
      break;
    case "index":
      return self__.index;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k31891, else__4239__auto__);
  }
};
instaparse.gll.Failure.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4250__auto__, writer__4251__auto__, opts__4252__auto__) {
  var self__ = this;
  var this__4250__auto____$1 = this;
  var pr_pair__4253__auto__ = function(this__4250__auto____$1) {
    return function(keyval__4254__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4251__auto__, cljs.core.pr_writer, "", " ", "", opts__4252__auto__, keyval__4254__auto__);
    };
  }(this__4250__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4251__auto__, pr_pair__4253__auto__, "#instaparse.gll.Failure{", ", ", "}", opts__4252__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "index", "index", -1531685915), self__.index], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "reason", "reason", -2070751759), self__.reason], null)], null), self__.__extmap));
};
instaparse.gll.Failure.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4234__auto__) {
  var self__ = this;
  var this__4234__auto____$1 = this;
  return self__.__meta;
};
instaparse.gll.Failure.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4230__auto__) {
  var self__ = this;
  var this__4230__auto____$1 = this;
  return new instaparse.gll.Failure(self__.index, self__.reason, self__.__meta, self__.__extmap, self__.__hash);
};
instaparse.gll.Failure.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4240__auto__) {
  var self__ = this;
  var this__4240__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
instaparse.gll.Failure.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4231__auto__) {
  var self__ = this;
  var this__4231__auto____$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_imap.call(null, this__4231__auto____$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
instaparse.gll.Failure.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4232__auto__, other__4233__auto__) {
  var self__ = this;
  var this__4232__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = other__4233__auto__;
    if (cljs.core.truth_(and__3628__auto__)) {
      return this__4232__auto____$1.constructor === other__4233__auto__.constructor && cljs.core.equiv_map.call(null, this__4232__auto____$1, other__4233__auto__);
    } else {
      return and__3628__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
instaparse.gll.Failure.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4245__auto__, k__4246__auto__) {
  var self__ = this;
  var this__4245__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "index", "index", -1531685915), null, new cljs.core.Keyword(null, "reason", "reason", -2070751759), null], null), null), k__4246__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4245__auto____$1), self__.__meta), k__4246__auto__);
  } else {
    return new instaparse.gll.Failure(self__.index, self__.reason, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4246__auto__)), null);
  }
};
instaparse.gll.Failure.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4243__auto__, k__4244__auto__, G__31890) {
  var self__ = this;
  var this__4243__auto____$1 = this;
  var pred__31894 = cljs.core.keyword_identical_QMARK_;
  var expr__31895 = k__4244__auto__;
  if (cljs.core.truth_(pred__31894.call(null, new cljs.core.Keyword(null, "index", "index", -1531685915), expr__31895))) {
    return new instaparse.gll.Failure(G__31890, self__.reason, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__31894.call(null, new cljs.core.Keyword(null, "reason", "reason", -2070751759), expr__31895))) {
      return new instaparse.gll.Failure(self__.index, G__31890, self__.__meta, self__.__extmap, null);
    } else {
      return new instaparse.gll.Failure(self__.index, self__.reason, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4244__auto__, G__31890), null);
    }
  }
};
instaparse.gll.Failure.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4248__auto__) {
  var self__ = this;
  var this__4248__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "index", "index", -1531685915), self__.index], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "reason", "reason", -2070751759), self__.reason], null)], null), self__.__extmap));
};
instaparse.gll.Failure.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4235__auto__, G__31890) {
  var self__ = this;
  var this__4235__auto____$1 = this;
  return new instaparse.gll.Failure(self__.index, self__.reason, G__31890, self__.__extmap, self__.__hash);
};
instaparse.gll.Failure.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4241__auto__, entry__4242__auto__) {
  var self__ = this;
  var this__4241__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4242__auto__)) {
    return cljs.core._assoc.call(null, this__4241__auto____$1, cljs.core._nth.call(null, entry__4242__auto__, 0), cljs.core._nth.call(null, entry__4242__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4241__auto____$1, entry__4242__auto__);
  }
};
instaparse.gll.Failure.cljs$lang$type = true;
instaparse.gll.Failure.cljs$lang$ctorPrSeq = function(this__4270__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "instaparse.gll/Failure");
};
instaparse.gll.Failure.cljs$lang$ctorPrWriter = function(this__4270__auto__, writer__4271__auto__) {
  return cljs.core._write.call(null, writer__4271__auto__, "instaparse.gll/Failure");
};
instaparse.gll.__GT_Failure = function __GT_Failure(index, reason) {
  return new instaparse.gll.Failure(index, reason);
};
instaparse.gll.map__GT_Failure = function map__GT_Failure(G__31892) {
  return new instaparse.gll.Failure((new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(G__31892), (new cljs.core.Keyword(null, "reason", "reason", -2070751759)).cljs$core$IFn$_invoke$arity$1(G__31892), null, cljs.core.dissoc.call(null, G__31892, new cljs.core.Keyword(null, "index", "index", -1531685915), new cljs.core.Keyword(null, "reason", "reason", -2070751759)));
};
instaparse.gll.string__GT_segment = function string__GT_segment(s) {
  return new instaparse.gll.Segment(s, 0, cljs.core.count.call(null, s));
};
instaparse.gll.Tramp = function(grammar, text, segment, fail_index, node_builder, stack, next_stack, generation, negative_listeners, msg_cache, nodes, success, failure, __meta, __extmap) {
  this.grammar = grammar;
  this.text = text;
  this.segment = segment;
  this.fail_index = fail_index;
  this.node_builder = node_builder;
  this.stack = stack;
  this.next_stack = next_stack;
  this.generation = generation;
  this.negative_listeners = negative_listeners;
  this.msg_cache = msg_cache;
  this.nodes = nodes;
  this.success = success;
  this.failure = failure;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 13) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
instaparse.gll.Tramp.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4236__auto__, k__4237__auto__) {
  var self__ = this;
  var this__4236__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4236__auto____$1, k__4237__auto__, null);
};
instaparse.gll.Tramp.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4238__auto__, k31899, else__4239__auto__) {
  var self__ = this;
  var this__4238__auto____$1 = this;
  var G__31901 = k31899 instanceof cljs.core.Keyword ? k31899.fqn : null;
  switch(G__31901) {
    case "msg-cache":
      return self__.msg_cache;
      break;
    case "negative-listeners":
      return self__.negative_listeners;
      break;
    case "generation":
      return self__.generation;
      break;
    case "failure":
      return self__.failure;
      break;
    case "fail-index":
      return self__.fail_index;
      break;
    case "grammar":
      return self__.grammar;
      break;
    case "success":
      return self__.success;
      break;
    case "nodes":
      return self__.nodes;
      break;
    case "node-builder":
      return self__.node_builder;
      break;
    case "segment":
      return self__.segment;
      break;
    case "stack":
      return self__.stack;
      break;
    case "next-stack":
      return self__.next_stack;
      break;
    case "text":
      return self__.text;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k31899, else__4239__auto__);
  }
};
instaparse.gll.Tramp.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4250__auto__, writer__4251__auto__, opts__4252__auto__) {
  var self__ = this;
  var this__4250__auto____$1 = this;
  var pr_pair__4253__auto__ = function(this__4250__auto____$1) {
    return function(keyval__4254__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4251__auto__, cljs.core.pr_writer, "", " ", "", opts__4252__auto__, keyval__4254__auto__);
    };
  }(this__4250__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4251__auto__, pr_pair__4253__auto__, "#instaparse.gll.Tramp{", ", ", "}", opts__4252__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), self__.grammar], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "text", "text", -1790561697), self__.text], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "segment", "segment", -964921196), self__.segment], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "fail-index", "fail-index", 248726923), self__.fail_index], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "node-builder", "node-builder", -1956562605), self__.node_builder], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "stack", "stack", -793405930), self__.stack], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "next-stack", "next-stack", -481930728), self__.next_stack], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "generation", "generation", -2132542044), self__.generation], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "negative-listeners", "negative-listeners", 55241092), self__.negative_listeners], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "msg-cache", "msg-cache", -733775070), self__.msg_cache], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "nodes", "nodes", -2099585805), self__.nodes], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "success", "success", 1890645906), self__.success], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "failure", "failure", 720415879), self__.failure], null)], null), self__.__extmap));
};
instaparse.gll.Tramp.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4234__auto__) {
  var self__ = this;
  var this__4234__auto____$1 = this;
  return self__.__meta;
};
instaparse.gll.Tramp.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4230__auto__) {
  var self__ = this;
  var this__4230__auto____$1 = this;
  return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, self__.__hash);
};
instaparse.gll.Tramp.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4240__auto__) {
  var self__ = this;
  var this__4240__auto____$1 = this;
  return 13 + cljs.core.count.call(null, self__.__extmap);
};
instaparse.gll.Tramp.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4231__auto__) {
  var self__ = this;
  var this__4231__auto____$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_imap.call(null, this__4231__auto____$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
instaparse.gll.Tramp.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4232__auto__, other__4233__auto__) {
  var self__ = this;
  var this__4232__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = other__4233__auto__;
    if (cljs.core.truth_(and__3628__auto__)) {
      return this__4232__auto____$1.constructor === other__4233__auto__.constructor && cljs.core.equiv_map.call(null, this__4232__auto____$1, other__4233__auto__);
    } else {
      return and__3628__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
instaparse.gll.Tramp.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4245__auto__, k__4246__auto__) {
  var self__ = this;
  var this__4245__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [new cljs.core.Keyword(null, "msg-cache", "msg-cache", -733775070), null, new cljs.core.Keyword(null, "negative-listeners", "negative-listeners", 55241092), null, new cljs.core.Keyword(null, "generation", "generation", -2132542044), null, new cljs.core.Keyword(null, "failure", "failure", 720415879), null, new cljs.core.Keyword(null, "fail-index", "fail-index", 248726923), null, 
  new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), null, new cljs.core.Keyword(null, "success", "success", 1890645906), null, new cljs.core.Keyword(null, "nodes", "nodes", -2099585805), null, new cljs.core.Keyword(null, "node-builder", "node-builder", -1956562605), null, new cljs.core.Keyword(null, "segment", "segment", -964921196), null, new cljs.core.Keyword(null, "stack", "stack", -793405930), null, new cljs.core.Keyword(null, "next-stack", "next-stack", -481930728), null, new cljs.core.Keyword(null, 
  "text", "text", -1790561697), null], null), null), k__4246__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4245__auto____$1), self__.__meta), k__4246__auto__);
  } else {
    return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4246__auto__)), null);
  }
};
instaparse.gll.Tramp.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4243__auto__, k__4244__auto__, G__31898) {
  var self__ = this;
  var this__4243__auto____$1 = this;
  var pred__31902 = cljs.core.keyword_identical_QMARK_;
  var expr__31903 = k__4244__auto__;
  if (cljs.core.truth_(pred__31902.call(null, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), expr__31903))) {
    return new instaparse.gll.Tramp(G__31898, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__31902.call(null, new cljs.core.Keyword(null, "text", "text", -1790561697), expr__31903))) {
      return new instaparse.gll.Tramp(self__.grammar, G__31898, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__31902.call(null, new cljs.core.Keyword(null, "segment", "segment", -964921196), expr__31903))) {
        return new instaparse.gll.Tramp(self__.grammar, self__.text, G__31898, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__31902.call(null, new cljs.core.Keyword(null, "fail-index", "fail-index", 248726923), expr__31903))) {
          return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, G__31898, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__31902.call(null, new cljs.core.Keyword(null, "node-builder", "node-builder", -1956562605), expr__31903))) {
            return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, G__31898, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
          } else {
            if (cljs.core.truth_(pred__31902.call(null, new cljs.core.Keyword(null, "stack", "stack", -793405930), expr__31903))) {
              return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, G__31898, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
            } else {
              if (cljs.core.truth_(pred__31902.call(null, new cljs.core.Keyword(null, "next-stack", "next-stack", -481930728), expr__31903))) {
                return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, G__31898, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
              } else {
                if (cljs.core.truth_(pred__31902.call(null, new cljs.core.Keyword(null, "generation", "generation", -2132542044), expr__31903))) {
                  return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, G__31898, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
                } else {
                  if (cljs.core.truth_(pred__31902.call(null, new cljs.core.Keyword(null, "negative-listeners", "negative-listeners", 55241092), expr__31903))) {
                    return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, G__31898, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
                  } else {
                    if (cljs.core.truth_(pred__31902.call(null, new cljs.core.Keyword(null, "msg-cache", "msg-cache", -733775070), expr__31903))) {
                      return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, G__31898, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
                    } else {
                      if (cljs.core.truth_(pred__31902.call(null, new cljs.core.Keyword(null, "nodes", "nodes", -2099585805), expr__31903))) {
                        return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, G__31898, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
                      } else {
                        if (cljs.core.truth_(pred__31902.call(null, new cljs.core.Keyword(null, "success", "success", 1890645906), expr__31903))) {
                          return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, G__31898, self__.failure, self__.__meta, self__.__extmap, null);
                        } else {
                          if (cljs.core.truth_(pred__31902.call(null, new cljs.core.Keyword(null, "failure", "failure", 720415879), expr__31903))) {
                            return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, G__31898, self__.__meta, self__.__extmap, null);
                          } else {
                            return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4244__auto__, G__31898), null);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
instaparse.gll.Tramp.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4248__auto__) {
  var self__ = this;
  var this__4248__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), self__.grammar], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "text", "text", -1790561697), self__.text], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "segment", "segment", -964921196), self__.segment], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "fail-index", "fail-index", 248726923), self__.fail_index], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "node-builder", "node-builder", -1956562605), self__.node_builder], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "stack", "stack", -793405930), self__.stack], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "next-stack", "next-stack", -481930728), self__.next_stack], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "generation", "generation", -2132542044), self__.generation], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "negative-listeners", "negative-listeners", 55241092), self__.negative_listeners], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "msg-cache", "msg-cache", -733775070), self__.msg_cache], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "nodes", "nodes", -2099585805), self__.nodes], null), 
  new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "success", "success", 1890645906), self__.success], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "failure", "failure", 720415879), self__.failure], null)], null), self__.__extmap));
};
instaparse.gll.Tramp.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4235__auto__, G__31898) {
  var self__ = this;
  var this__4235__auto____$1 = this;
  return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, G__31898, self__.__extmap, self__.__hash);
};
instaparse.gll.Tramp.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4241__auto__, entry__4242__auto__) {
  var self__ = this;
  var this__4241__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4242__auto__)) {
    return cljs.core._assoc.call(null, this__4241__auto____$1, cljs.core._nth.call(null, entry__4242__auto__, 0), cljs.core._nth.call(null, entry__4242__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4241__auto____$1, entry__4242__auto__);
  }
};
instaparse.gll.Tramp.cljs$lang$type = true;
instaparse.gll.Tramp.cljs$lang$ctorPrSeq = function(this__4270__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "instaparse.gll/Tramp");
};
instaparse.gll.Tramp.cljs$lang$ctorPrWriter = function(this__4270__auto__, writer__4271__auto__) {
  return cljs.core._write.call(null, writer__4271__auto__, "instaparse.gll/Tramp");
};
instaparse.gll.__GT_Tramp = function __GT_Tramp(grammar, text, segment, fail_index, node_builder, stack, next_stack, generation, negative_listeners, msg_cache, nodes, success, failure) {
  return new instaparse.gll.Tramp(grammar, text, segment, fail_index, node_builder, stack, next_stack, generation, negative_listeners, msg_cache, nodes, success, failure);
};
instaparse.gll.map__GT_Tramp = function map__GT_Tramp(G__31900) {
  return new instaparse.gll.Tramp((new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(G__31900), (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(G__31900), (new cljs.core.Keyword(null, "segment", "segment", -964921196)).cljs$core$IFn$_invoke$arity$1(G__31900), (new cljs.core.Keyword(null, "fail-index", "fail-index", 248726923)).cljs$core$IFn$_invoke$arity$1(G__31900), (new cljs.core.Keyword(null, "node-builder", "node-builder", 
  -1956562605)).cljs$core$IFn$_invoke$arity$1(G__31900), (new cljs.core.Keyword(null, "stack", "stack", -793405930)).cljs$core$IFn$_invoke$arity$1(G__31900), (new cljs.core.Keyword(null, "next-stack", "next-stack", -481930728)).cljs$core$IFn$_invoke$arity$1(G__31900), (new cljs.core.Keyword(null, "generation", "generation", -2132542044)).cljs$core$IFn$_invoke$arity$1(G__31900), (new cljs.core.Keyword(null, "negative-listeners", "negative-listeners", 55241092)).cljs$core$IFn$_invoke$arity$1(G__31900), 
  (new cljs.core.Keyword(null, "msg-cache", "msg-cache", -733775070)).cljs$core$IFn$_invoke$arity$1(G__31900), (new cljs.core.Keyword(null, "nodes", "nodes", -2099585805)).cljs$core$IFn$_invoke$arity$1(G__31900), (new cljs.core.Keyword(null, "success", "success", 1890645906)).cljs$core$IFn$_invoke$arity$1(G__31900), (new cljs.core.Keyword(null, "failure", "failure", 720415879)).cljs$core$IFn$_invoke$arity$1(G__31900), null, cljs.core.dissoc.call(null, G__31900, new cljs.core.Keyword(null, "grammar", 
  "grammar", 1881328267), new cljs.core.Keyword(null, "text", "text", -1790561697), new cljs.core.Keyword(null, "segment", "segment", -964921196), new cljs.core.Keyword(null, "fail-index", "fail-index", 248726923), new cljs.core.Keyword(null, "node-builder", "node-builder", -1956562605), new cljs.core.Keyword(null, "stack", "stack", -793405930), new cljs.core.Keyword(null, "next-stack", "next-stack", -481930728), new cljs.core.Keyword(null, "generation", "generation", -2132542044), new cljs.core.Keyword(null, 
  "negative-listeners", "negative-listeners", 55241092), new cljs.core.Keyword(null, "msg-cache", "msg-cache", -733775070), new cljs.core.Keyword(null, "nodes", "nodes", -2099585805), new cljs.core.Keyword(null, "success", "success", 1890645906), new cljs.core.Keyword(null, "failure", "failure", 720415879)));
};
instaparse.gll.make_tramp = function() {
  var make_tramp = null;
  var make_tramp__2 = function(grammar, text) {
    return make_tramp.call(null, grammar, text, instaparse.gll.string__GT_segment.call(null, text), -1, null);
  };
  var make_tramp__3 = function(grammar, text, segment) {
    return make_tramp.call(null, grammar, text, segment, -1, null);
  };
  var make_tramp__4 = function(grammar, text, fail_index, node_builder) {
    return make_tramp.call(null, grammar, text, instaparse.gll.string__GT_segment.call(null, text), fail_index, node_builder);
  };
  var make_tramp__5 = function(grammar, text, segment, fail_index, node_builder) {
    return new instaparse.gll.Tramp(grammar, text, segment, fail_index, node_builder, cljs.core.PersistentVector.EMPTY, cljs.core.PersistentVector.EMPTY, 0, cljs.core.PersistentVector.EMPTY, cljs.core.PersistentArrayMap.EMPTY, cljs.core.PersistentArrayMap.EMPTY, null, new instaparse.gll.Failure(0, cljs.core.PersistentVector.EMPTY));
  };
  make_tramp = function(grammar, text, segment, fail_index, node_builder) {
    switch(arguments.length) {
      case 2:
        return make_tramp__2.call(this, grammar, text);
      case 3:
        return make_tramp__3.call(this, grammar, text, segment);
      case 4:
        return make_tramp__4.call(this, grammar, text, segment, fail_index);
      case 5:
        return make_tramp__5.call(this, grammar, text, segment, fail_index, node_builder);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_tramp.cljs$core$IFn$_invoke$arity$2 = make_tramp__2;
  make_tramp.cljs$core$IFn$_invoke$arity$3 = make_tramp__3;
  make_tramp.cljs$core$IFn$_invoke$arity$4 = make_tramp__4;
  make_tramp.cljs$core$IFn$_invoke$arity$5 = make_tramp__5;
  return make_tramp;
}();
instaparse.gll.make_success = function make_success(result, index) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "result", "result", 1415092211), result, new cljs.core.Keyword(null, "index", "index", -1531685915), index], null);
};
instaparse.gll.total_success_QMARK_ = function total_success_QMARK_(tramp, s) {
  return cljs.core._EQ_.call(null, cljs.core.count.call(null, tramp.text), (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(s));
};
instaparse.gll.Node = function(listeners, full_listeners, results, full_results, __meta, __extmap) {
  this.listeners = listeners;
  this.full_listeners = full_listeners;
  this.results = results;
  this.full_results = full_results;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 4) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
instaparse.gll.Node.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4236__auto__, k__4237__auto__) {
  var self__ = this;
  var this__4236__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4236__auto____$1, k__4237__auto__, null);
};
instaparse.gll.Node.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4238__auto__, k31907, else__4239__auto__) {
  var self__ = this;
  var this__4238__auto____$1 = this;
  var G__31909 = k31907 instanceof cljs.core.Keyword ? k31907.fqn : null;
  switch(G__31909) {
    case "full-results":
      return self__.full_results;
      break;
    case "results":
      return self__.results;
      break;
    case "full-listeners":
      return self__.full_listeners;
      break;
    case "listeners":
      return self__.listeners;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k31907, else__4239__auto__);
  }
};
instaparse.gll.Node.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4250__auto__, writer__4251__auto__, opts__4252__auto__) {
  var self__ = this;
  var this__4250__auto____$1 = this;
  var pr_pair__4253__auto__ = function(this__4250__auto____$1) {
    return function(keyval__4254__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4251__auto__, cljs.core.pr_writer, "", " ", "", opts__4252__auto__, keyval__4254__auto__);
    };
  }(this__4250__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4251__auto__, pr_pair__4253__auto__, "#instaparse.gll.Node{", ", ", "}", opts__4252__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "listeners", "listeners", 394544445), self__.listeners], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "full-listeners", "full-listeners", 50621827), self__.full_listeners], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "results", "results", -1134170113), self__.results], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "full-results", "full-results", -1500225407), self__.full_results], null)], null), self__.__extmap));
};
instaparse.gll.Node.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4234__auto__) {
  var self__ = this;
  var this__4234__auto____$1 = this;
  return self__.__meta;
};
instaparse.gll.Node.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4230__auto__) {
  var self__ = this;
  var this__4230__auto____$1 = this;
  return new instaparse.gll.Node(self__.listeners, self__.full_listeners, self__.results, self__.full_results, self__.__meta, self__.__extmap, self__.__hash);
};
instaparse.gll.Node.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4240__auto__) {
  var self__ = this;
  var this__4240__auto____$1 = this;
  return 4 + cljs.core.count.call(null, self__.__extmap);
};
instaparse.gll.Node.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4231__auto__) {
  var self__ = this;
  var this__4231__auto____$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_imap.call(null, this__4231__auto____$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
instaparse.gll.Node.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4232__auto__, other__4233__auto__) {
  var self__ = this;
  var this__4232__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = other__4233__auto__;
    if (cljs.core.truth_(and__3628__auto__)) {
      return this__4232__auto____$1.constructor === other__4233__auto__.constructor && cljs.core.equiv_map.call(null, this__4232__auto____$1, other__4233__auto__);
    } else {
      return and__3628__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
instaparse.gll.Node.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4245__auto__, k__4246__auto__) {
  var self__ = this;
  var this__4245__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "full-results", "full-results", -1500225407), null, new cljs.core.Keyword(null, "full-listeners", "full-listeners", 50621827), null, new cljs.core.Keyword(null, "listeners", "listeners", 394544445), null, new cljs.core.Keyword(null, "results", "results", -1134170113), null], null), null), k__4246__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4245__auto____$1), self__.__meta), k__4246__auto__);
  } else {
    return new instaparse.gll.Node(self__.listeners, self__.full_listeners, self__.results, self__.full_results, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4246__auto__)), null);
  }
};
instaparse.gll.Node.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4243__auto__, k__4244__auto__, G__31906) {
  var self__ = this;
  var this__4243__auto____$1 = this;
  var pred__31910 = cljs.core.keyword_identical_QMARK_;
  var expr__31911 = k__4244__auto__;
  if (cljs.core.truth_(pred__31910.call(null, new cljs.core.Keyword(null, "listeners", "listeners", 394544445), expr__31911))) {
    return new instaparse.gll.Node(G__31906, self__.full_listeners, self__.results, self__.full_results, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__31910.call(null, new cljs.core.Keyword(null, "full-listeners", "full-listeners", 50621827), expr__31911))) {
      return new instaparse.gll.Node(self__.listeners, G__31906, self__.results, self__.full_results, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__31910.call(null, new cljs.core.Keyword(null, "results", "results", -1134170113), expr__31911))) {
        return new instaparse.gll.Node(self__.listeners, self__.full_listeners, G__31906, self__.full_results, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__31910.call(null, new cljs.core.Keyword(null, "full-results", "full-results", -1500225407), expr__31911))) {
          return new instaparse.gll.Node(self__.listeners, self__.full_listeners, self__.results, G__31906, self__.__meta, self__.__extmap, null);
        } else {
          return new instaparse.gll.Node(self__.listeners, self__.full_listeners, self__.results, self__.full_results, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4244__auto__, G__31906), null);
        }
      }
    }
  }
};
instaparse.gll.Node.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4248__auto__) {
  var self__ = this;
  var this__4248__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "listeners", "listeners", 394544445), self__.listeners], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "full-listeners", "full-listeners", 50621827), self__.full_listeners], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "results", "results", -1134170113), self__.results], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "full-results", "full-results", -1500225407), self__.full_results], null)], null), self__.__extmap));
};
instaparse.gll.Node.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4235__auto__, G__31906) {
  var self__ = this;
  var this__4235__auto____$1 = this;
  return new instaparse.gll.Node(self__.listeners, self__.full_listeners, self__.results, self__.full_results, G__31906, self__.__extmap, self__.__hash);
};
instaparse.gll.Node.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4241__auto__, entry__4242__auto__) {
  var self__ = this;
  var this__4241__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4242__auto__)) {
    return cljs.core._assoc.call(null, this__4241__auto____$1, cljs.core._nth.call(null, entry__4242__auto__, 0), cljs.core._nth.call(null, entry__4242__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4241__auto____$1, entry__4242__auto__);
  }
};
instaparse.gll.Node.cljs$lang$type = true;
instaparse.gll.Node.cljs$lang$ctorPrSeq = function(this__4270__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "instaparse.gll/Node");
};
instaparse.gll.Node.cljs$lang$ctorPrWriter = function(this__4270__auto__, writer__4271__auto__) {
  return cljs.core._write.call(null, writer__4271__auto__, "instaparse.gll/Node");
};
instaparse.gll.__GT_Node = function __GT_Node(listeners, full_listeners, results, full_results) {
  return new instaparse.gll.Node(listeners, full_listeners, results, full_results);
};
instaparse.gll.map__GT_Node = function map__GT_Node(G__31908) {
  return new instaparse.gll.Node((new cljs.core.Keyword(null, "listeners", "listeners", 394544445)).cljs$core$IFn$_invoke$arity$1(G__31908), (new cljs.core.Keyword(null, "full-listeners", "full-listeners", 50621827)).cljs$core$IFn$_invoke$arity$1(G__31908), (new cljs.core.Keyword(null, "results", "results", -1134170113)).cljs$core$IFn$_invoke$arity$1(G__31908), (new cljs.core.Keyword(null, "full-results", "full-results", -1500225407)).cljs$core$IFn$_invoke$arity$1(G__31908), null, cljs.core.dissoc.call(null, 
  G__31908, new cljs.core.Keyword(null, "listeners", "listeners", 394544445), new cljs.core.Keyword(null, "full-listeners", "full-listeners", 50621827), new cljs.core.Keyword(null, "results", "results", -1134170113), new cljs.core.Keyword(null, "full-results", "full-results", -1500225407)));
};
instaparse.gll.make_node = function make_node() {
  return new instaparse.gll.Node(cljs.core.PersistentVector.EMPTY, cljs.core.PersistentVector.EMPTY, cljs.core.PersistentHashSet.EMPTY, cljs.core.PersistentHashSet.EMPTY);
};
instaparse.gll.push_stack = function push_stack(tramp, item) {
  return tramp.stack = cljs.core.conj.call(null, tramp.stack, item);
};
instaparse.gll.push_message = function push_message(tramp, listener, result) {
  var cache = tramp.msg_cache;
  var i = (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(result);
  var k = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [listener, i], null);
  var c = cljs.core.get.call(null, cache, k, 0);
  var f = function(cache, i, k, c) {
    return function() {
      return listener.call(null, result);
    };
  }(cache, i, k, c);
  if (c > tramp.generation) {
    tramp.next_stack = cljs.core.conj.call(null, tramp.next_stack, f);
  } else {
    tramp.stack = cljs.core.conj.call(null, tramp.stack, f);
  }
  return tramp.msg_cache = cljs.core.assoc.call(null, tramp.msg_cache, k, c + 1);
};
instaparse.gll.listener_exists_QMARK_ = function listener_exists_QMARK_(tramp, node_key) {
  var nodes = tramp.nodes;
  var temp__4126__auto__ = nodes.call(null, node_key);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var node = temp__4126__auto__;
    return cljs.core.count.call(null, node.listeners) > 0;
  } else {
    return null;
  }
};
instaparse.gll.full_listener_exists_QMARK_ = function full_listener_exists_QMARK_(tramp, node_key) {
  var nodes = tramp.nodes;
  var temp__4126__auto__ = nodes.call(null, node_key);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var node = temp__4126__auto__;
    return cljs.core.count.call(null, node.full_listeners) > 0 || cljs.core.count.call(null, node.listeners) > 0;
  } else {
    return null;
  }
};
instaparse.gll.result_exists_QMARK_ = function result_exists_QMARK_(tramp, node_key) {
  var nodes = tramp.nodes;
  var temp__4126__auto__ = nodes.call(null, node_key);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var node = temp__4126__auto__;
    return cljs.core.count.call(null, node.full_results) > 0 || cljs.core.count.call(null, node.results) > 0;
  } else {
    return null;
  }
};
instaparse.gll.full_result_exists_QMARK_ = function full_result_exists_QMARK_(tramp, node_key) {
  var nodes = tramp.nodes;
  var temp__4126__auto__ = nodes.call(null, node_key);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var node = temp__4126__auto__;
    return cljs.core.count.call(null, node.full_results) > 0;
  } else {
    return null;
  }
};
instaparse.gll.node_get = function node_get(tramp, node_key) {
  var nodes = tramp.nodes;
  var temp__4124__auto__ = nodes.call(null, node_key);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var node = temp__4124__auto__;
    return node;
  } else {
    var node = instaparse.gll.make_node.call(null);
    tramp.nodes = cljs.core.assoc.call(null, tramp.nodes, node_key, node);
    return node;
  }
};
instaparse.gll.safe_with_meta = function safe_with_meta(obj, metamap) {
  if (function() {
    var G__31915 = obj;
    if (G__31915) {
      var bit__4304__auto__ = G__31915.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4304__auto__ || G__31915.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__31915.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__31915);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__31915);
    }
  }()) {
    return cljs.core.with_meta.call(null, obj, metamap);
  } else {
    return obj;
  }
};
instaparse.gll.push_result = function push_result(tramp, node_key, result) {
  var node = instaparse.gll.node_get.call(null, tramp, node_key);
  var parser = node_key.call(null, 1);
  var result__$1 = cljs.core.truth_((new cljs.core.Keyword(null, "hide", "hide", -596913169)).cljs$core$IFn$_invoke$arity$1(parser)) ? cljs.core.assoc.call(null, result, new cljs.core.Keyword(null, "result", "result", 1415092211), null) : result;
  var result__$2 = function() {
    var temp__4124__auto__ = (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var reduction_function = temp__4124__auto__;
      return instaparse.gll.make_success.call(null, instaparse.gll.safe_with_meta.call(null, instaparse.reduction.apply_reduction.call(null, reduction_function, (new cljs.core.Keyword(null, "result", "result", 1415092211)).cljs$core$IFn$_invoke$arity$1(result__$1)), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("instaparse.gll", "start-index", "instaparse.gll/start-index", 404653620), node_key.call(null, 0), new cljs.core.Keyword("instaparse.gll", "end-index", "instaparse.gll/end-index", 
      -1851404441), (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(result__$1)], null)), (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(result__$1));
    } else {
      return result__$1;
    }
  }();
  var total_QMARK_ = instaparse.gll.total_success_QMARK_.call(null, tramp, result__$2);
  var results = total_QMARK_ ? node.full_results : node.results;
  if (cljs.core.not.call(null, results.call(null, result__$2))) {
    if (total_QMARK_) {
      node.full_results = cljs.core.conj.call(null, node.full_results, result__$2);
    } else {
      node.results = cljs.core.conj.call(null, node.results, result__$2);
    }
    var seq__31924_31932 = cljs.core.seq.call(null, node.listeners);
    var chunk__31925_31933 = null;
    var count__31926_31934 = 0;
    var i__31927_31935 = 0;
    while (true) {
      if (i__31927_31935 < count__31926_31934) {
        var listener_31936 = cljs.core._nth.call(null, chunk__31925_31933, i__31927_31935);
        instaparse.gll.push_message.call(null, tramp, listener_31936, result__$2);
        var G__31937 = seq__31924_31932;
        var G__31938 = chunk__31925_31933;
        var G__31939 = count__31926_31934;
        var G__31940 = i__31927_31935 + 1;
        seq__31924_31932 = G__31937;
        chunk__31925_31933 = G__31938;
        count__31926_31934 = G__31939;
        i__31927_31935 = G__31940;
        continue;
      } else {
        var temp__4126__auto___31941 = cljs.core.seq.call(null, seq__31924_31932);
        if (temp__4126__auto___31941) {
          var seq__31924_31942__$1 = temp__4126__auto___31941;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__31924_31942__$1)) {
            var c__4410__auto___31943 = cljs.core.chunk_first.call(null, seq__31924_31942__$1);
            var G__31944 = cljs.core.chunk_rest.call(null, seq__31924_31942__$1);
            var G__31945 = c__4410__auto___31943;
            var G__31946 = cljs.core.count.call(null, c__4410__auto___31943);
            var G__31947 = 0;
            seq__31924_31932 = G__31944;
            chunk__31925_31933 = G__31945;
            count__31926_31934 = G__31946;
            i__31927_31935 = G__31947;
            continue;
          } else {
            var listener_31948 = cljs.core.first.call(null, seq__31924_31942__$1);
            instaparse.gll.push_message.call(null, tramp, listener_31948, result__$2);
            var G__31949 = cljs.core.next.call(null, seq__31924_31942__$1);
            var G__31950 = null;
            var G__31951 = 0;
            var G__31952 = 0;
            seq__31924_31932 = G__31949;
            chunk__31925_31933 = G__31950;
            count__31926_31934 = G__31951;
            i__31927_31935 = G__31952;
            continue;
          }
        } else {
        }
      }
      break;
    }
    if (total_QMARK_) {
      var seq__31928 = cljs.core.seq.call(null, node.full_listeners);
      var chunk__31929 = null;
      var count__31930 = 0;
      var i__31931 = 0;
      while (true) {
        if (i__31931 < count__31930) {
          var listener = cljs.core._nth.call(null, chunk__31929, i__31931);
          instaparse.gll.push_message.call(null, tramp, listener, result__$2);
          var G__31953 = seq__31928;
          var G__31954 = chunk__31929;
          var G__31955 = count__31930;
          var G__31956 = i__31931 + 1;
          seq__31928 = G__31953;
          chunk__31929 = G__31954;
          count__31930 = G__31955;
          i__31931 = G__31956;
          continue;
        } else {
          var temp__4126__auto__ = cljs.core.seq.call(null, seq__31928);
          if (temp__4126__auto__) {
            var seq__31928__$1 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__31928__$1)) {
              var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__31928__$1);
              var G__31957 = cljs.core.chunk_rest.call(null, seq__31928__$1);
              var G__31958 = c__4410__auto__;
              var G__31959 = cljs.core.count.call(null, c__4410__auto__);
              var G__31960 = 0;
              seq__31928 = G__31957;
              chunk__31929 = G__31958;
              count__31930 = G__31959;
              i__31931 = G__31960;
              continue;
            } else {
              var listener = cljs.core.first.call(null, seq__31928__$1);
              instaparse.gll.push_message.call(null, tramp, listener, result__$2);
              var G__31961 = cljs.core.next.call(null, seq__31928__$1);
              var G__31962 = null;
              var G__31963 = 0;
              var G__31964 = 0;
              seq__31928 = G__31961;
              chunk__31929 = G__31962;
              count__31930 = G__31963;
              i__31931 = G__31964;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    } else {
      return null;
    }
  } else {
    return null;
  }
};
instaparse.gll.push_listener = function push_listener(tramp, node_key, listener) {
  var listener_already_exists_QMARK_ = instaparse.gll.listener_exists_QMARK_.call(null, tramp, node_key);
  var node = instaparse.gll.node_get.call(null, tramp, node_key);
  node.listeners = cljs.core.conj.call(null, node.listeners, listener);
  var seq__31973_31981 = cljs.core.seq.call(null, node.results);
  var chunk__31974_31982 = null;
  var count__31975_31983 = 0;
  var i__31976_31984 = 0;
  while (true) {
    if (i__31976_31984 < count__31975_31983) {
      var result_31985 = cljs.core._nth.call(null, chunk__31974_31982, i__31976_31984);
      instaparse.gll.push_message.call(null, tramp, listener, result_31985);
      var G__31986 = seq__31973_31981;
      var G__31987 = chunk__31974_31982;
      var G__31988 = count__31975_31983;
      var G__31989 = i__31976_31984 + 1;
      seq__31973_31981 = G__31986;
      chunk__31974_31982 = G__31987;
      count__31975_31983 = G__31988;
      i__31976_31984 = G__31989;
      continue;
    } else {
      var temp__4126__auto___31990 = cljs.core.seq.call(null, seq__31973_31981);
      if (temp__4126__auto___31990) {
        var seq__31973_31991__$1 = temp__4126__auto___31990;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__31973_31991__$1)) {
          var c__4410__auto___31992 = cljs.core.chunk_first.call(null, seq__31973_31991__$1);
          var G__31993 = cljs.core.chunk_rest.call(null, seq__31973_31991__$1);
          var G__31994 = c__4410__auto___31992;
          var G__31995 = cljs.core.count.call(null, c__4410__auto___31992);
          var G__31996 = 0;
          seq__31973_31981 = G__31993;
          chunk__31974_31982 = G__31994;
          count__31975_31983 = G__31995;
          i__31976_31984 = G__31996;
          continue;
        } else {
          var result_31997 = cljs.core.first.call(null, seq__31973_31991__$1);
          instaparse.gll.push_message.call(null, tramp, listener, result_31997);
          var G__31998 = cljs.core.next.call(null, seq__31973_31991__$1);
          var G__31999 = null;
          var G__32000 = 0;
          var G__32001 = 0;
          seq__31973_31981 = G__31998;
          chunk__31974_31982 = G__31999;
          count__31975_31983 = G__32000;
          i__31976_31984 = G__32001;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var seq__31977_32002 = cljs.core.seq.call(null, node.full_results);
  var chunk__31978_32003 = null;
  var count__31979_32004 = 0;
  var i__31980_32005 = 0;
  while (true) {
    if (i__31980_32005 < count__31979_32004) {
      var result_32006 = cljs.core._nth.call(null, chunk__31978_32003, i__31980_32005);
      instaparse.gll.push_message.call(null, tramp, listener, result_32006);
      var G__32007 = seq__31977_32002;
      var G__32008 = chunk__31978_32003;
      var G__32009 = count__31979_32004;
      var G__32010 = i__31980_32005 + 1;
      seq__31977_32002 = G__32007;
      chunk__31978_32003 = G__32008;
      count__31979_32004 = G__32009;
      i__31980_32005 = G__32010;
      continue;
    } else {
      var temp__4126__auto___32011 = cljs.core.seq.call(null, seq__31977_32002);
      if (temp__4126__auto___32011) {
        var seq__31977_32012__$1 = temp__4126__auto___32011;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__31977_32012__$1)) {
          var c__4410__auto___32013 = cljs.core.chunk_first.call(null, seq__31977_32012__$1);
          var G__32014 = cljs.core.chunk_rest.call(null, seq__31977_32012__$1);
          var G__32015 = c__4410__auto___32013;
          var G__32016 = cljs.core.count.call(null, c__4410__auto___32013);
          var G__32017 = 0;
          seq__31977_32002 = G__32014;
          chunk__31978_32003 = G__32015;
          count__31979_32004 = G__32016;
          i__31980_32005 = G__32017;
          continue;
        } else {
          var result_32018 = cljs.core.first.call(null, seq__31977_32012__$1);
          instaparse.gll.push_message.call(null, tramp, listener, result_32018);
          var G__32019 = cljs.core.next.call(null, seq__31977_32012__$1);
          var G__32020 = null;
          var G__32021 = 0;
          var G__32022 = 0;
          seq__31977_32002 = G__32019;
          chunk__31978_32003 = G__32020;
          count__31979_32004 = G__32021;
          i__31980_32005 = G__32022;
          continue;
        }
      } else {
      }
    }
    break;
  }
  if (cljs.core.not.call(null, listener_already_exists_QMARK_)) {
    return instaparse.gll.push_stack.call(null, tramp, function(listener_already_exists_QMARK_, node) {
      return function() {
        return instaparse.gll._parse.call(null, node_key.call(null, 1), node_key.call(null, 0), tramp);
      };
    }(listener_already_exists_QMARK_, node));
  } else {
    return null;
  }
};
instaparse.gll.push_full_listener = function push_full_listener(tramp, node_key, listener) {
  var full_listener_already_exists_QMARK_ = instaparse.gll.full_listener_exists_QMARK_.call(null, tramp, node_key);
  var node = instaparse.gll.node_get.call(null, tramp, node_key);
  node.full_listeners = cljs.core.conj.call(null, node.full_listeners, listener);
  var seq__32027_32031 = cljs.core.seq.call(null, node.full_results);
  var chunk__32028_32032 = null;
  var count__32029_32033 = 0;
  var i__32030_32034 = 0;
  while (true) {
    if (i__32030_32034 < count__32029_32033) {
      var result_32035 = cljs.core._nth.call(null, chunk__32028_32032, i__32030_32034);
      instaparse.gll.push_message.call(null, tramp, listener, result_32035);
      var G__32036 = seq__32027_32031;
      var G__32037 = chunk__32028_32032;
      var G__32038 = count__32029_32033;
      var G__32039 = i__32030_32034 + 1;
      seq__32027_32031 = G__32036;
      chunk__32028_32032 = G__32037;
      count__32029_32033 = G__32038;
      i__32030_32034 = G__32039;
      continue;
    } else {
      var temp__4126__auto___32040 = cljs.core.seq.call(null, seq__32027_32031);
      if (temp__4126__auto___32040) {
        var seq__32027_32041__$1 = temp__4126__auto___32040;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__32027_32041__$1)) {
          var c__4410__auto___32042 = cljs.core.chunk_first.call(null, seq__32027_32041__$1);
          var G__32043 = cljs.core.chunk_rest.call(null, seq__32027_32041__$1);
          var G__32044 = c__4410__auto___32042;
          var G__32045 = cljs.core.count.call(null, c__4410__auto___32042);
          var G__32046 = 0;
          seq__32027_32031 = G__32043;
          chunk__32028_32032 = G__32044;
          count__32029_32033 = G__32045;
          i__32030_32034 = G__32046;
          continue;
        } else {
          var result_32047 = cljs.core.first.call(null, seq__32027_32041__$1);
          instaparse.gll.push_message.call(null, tramp, listener, result_32047);
          var G__32048 = cljs.core.next.call(null, seq__32027_32041__$1);
          var G__32049 = null;
          var G__32050 = 0;
          var G__32051 = 0;
          seq__32027_32031 = G__32048;
          chunk__32028_32032 = G__32049;
          count__32029_32033 = G__32050;
          i__32030_32034 = G__32051;
          continue;
        }
      } else {
      }
    }
    break;
  }
  if (cljs.core.not.call(null, full_listener_already_exists_QMARK_)) {
    return instaparse.gll.push_stack.call(null, tramp, function(full_listener_already_exists_QMARK_, node) {
      return function() {
        return instaparse.gll._full_parse.call(null, node_key.call(null, 1), node_key.call(null, 0), tramp);
      };
    }(full_listener_already_exists_QMARK_, node));
  } else {
    return null;
  }
};
instaparse.gll.push_negative_listener = function push_negative_listener(tramp, negative_listener) {
  return tramp.negative_listeners = cljs.core.conj.call(null, tramp.negative_listeners, negative_listener);
};
instaparse.gll.fail = function fail(tramp, node_key, index, reason) {
  tramp.failure = function(failure) {
    var current_index = (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(failure);
    var G__32053 = cljs.core.compare.call(null, index, current_index);
    switch(G__32053) {
      case 1:
        return new instaparse.gll.Failure(index, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [reason], null));
        break;
      case 0:
        return new instaparse.gll.Failure(index, cljs.core.conj.call(null, (new cljs.core.Keyword(null, "reason", "reason", -2070751759)).cljs$core$IFn$_invoke$arity$1(failure), reason));
        break;
      case -1:
        return failure;
        break;
      default:
        throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.compare.call(null, index, current_index)));;
    }
  }.call(null, tramp.failure);
  if (cljs.core._EQ_.call(null, index, tramp.fail_index)) {
    return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, instaparse.gll.build_node_with_meta.call(null, tramp.node_builder, new cljs.core.Keyword("instaparse", "failure", "instaparse/failure", 1422918607), cljs.core.subs.call(null, tramp.text, index), index, cljs.core.count.call(null, tramp.text)), cljs.core.count.call(null, tramp.text)));
  } else {
    return null;
  }
};
instaparse.gll.step = function step(tramp) {
  var top = cljs.core.peek.call(null, tramp.stack);
  tramp.stack = cljs.core.pop.call(null, tramp.stack);
  return top.call(null);
};
instaparse.gll.run = function() {
  var run = null;
  var run__1 = function(tramp) {
    return run.call(null, tramp, null);
  };
  var run__2 = function(tramp, found_result_QMARK_) {
    while (true) {
      var stack = tramp.stack;
      if (cljs.core.truth_(tramp.success)) {
        return new cljs.core.LazySeq(null, function(tramp, found_result_QMARK_, stack) {
          return function() {
            return cljs.core.cons.call(null, (new cljs.core.Keyword(null, "result", "result", 1415092211)).cljs$core$IFn$_invoke$arity$1(tramp.success), function() {
              tramp.success = null;
              return run.call(null, tramp, true);
            }());
          };
        }(tramp, found_result_QMARK_, stack), null, null);
      } else {
        if (cljs.core.count.call(null, stack) > 0) {
          instaparse.gll.step.call(null, tramp);
          var G__32055 = tramp;
          var G__32056 = found_result_QMARK_;
          tramp = G__32055;
          found_result_QMARK_ = G__32056;
          continue;
        } else {
          if (cljs.core.count.call(null, tramp.negative_listeners) > 0) {
            var listener = cljs.core.peek.call(null, tramp.negative_listeners);
            listener.call(null);
            tramp.negative_listeners = cljs.core.pop.call(null, tramp.negative_listeners);
            var G__32057 = tramp;
            var G__32058 = found_result_QMARK_;
            tramp = G__32057;
            found_result_QMARK_ = G__32058;
            continue;
          } else {
            if (cljs.core.truth_(found_result_QMARK_)) {
              var next_stack = tramp.next_stack;
              tramp.stack = next_stack;
              tramp.next_stack = cljs.core.PersistentVector.EMPTY;
              tramp.generation = tramp.generation + 1;
              var G__32059 = tramp;
              var G__32060 = null;
              tramp = G__32059;
              found_result_QMARK_ = G__32060;
              continue;
            } else {
              return null;
            }
          }
        }
      }
      break;
    }
  };
  run = function(tramp, found_result_QMARK_) {
    switch(arguments.length) {
      case 1:
        return run__1.call(this, tramp);
      case 2:
        return run__2.call(this, tramp, found_result_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  run.cljs$core$IFn$_invoke$arity$1 = run__1;
  run.cljs$core$IFn$_invoke$arity$2 = run__2;
  return run;
}();
instaparse.gll.NodeListener = function NodeListener(node_key, tramp) {
  return function(result) {
    return instaparse.gll.push_result.call(null, tramp, node_key, result);
  };
};
instaparse.gll.LookListener = function LookListener(node_key, tramp) {
  return function(result) {
    return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, null, node_key.call(null, 0)));
  };
};
instaparse.gll.CatListener = function CatListener(results_so_far, parser_sequence, node_key, tramp) {
  return function(result) {
    var map__32062 = result;
    var map__32062__$1 = cljs.core.seq_QMARK_.call(null, map__32062) ? cljs.core.apply.call(null, cljs.core.hash_map, map__32062) : map__32062;
    var parsed_result = cljs.core.get.call(null, map__32062__$1, new cljs.core.Keyword(null, "result", "result", 1415092211));
    var continue_index = cljs.core.get.call(null, map__32062__$1, new cljs.core.Keyword(null, "index", "index", -1531685915));
    var new_results_so_far = instaparse.auto_flatten_seq.conj_flat.call(null, results_so_far, parsed_result);
    if (cljs.core.seq.call(null, parser_sequence)) {
      return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [continue_index, cljs.core.first.call(null, parser_sequence)], null), CatListener.call(null, new_results_so_far, cljs.core.next.call(null, parser_sequence), node_key, tramp));
    } else {
      return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, new_results_so_far, continue_index));
    }
  };
};
instaparse.gll.CatFullListener = function CatFullListener(results_so_far, parser_sequence, node_key, tramp) {
  return function(result) {
    var map__32064 = result;
    var map__32064__$1 = cljs.core.seq_QMARK_.call(null, map__32064) ? cljs.core.apply.call(null, cljs.core.hash_map, map__32064) : map__32064;
    var parsed_result = cljs.core.get.call(null, map__32064__$1, new cljs.core.Keyword(null, "result", "result", 1415092211));
    var continue_index = cljs.core.get.call(null, map__32064__$1, new cljs.core.Keyword(null, "index", "index", -1531685915));
    var new_results_so_far = instaparse.auto_flatten_seq.conj_flat.call(null, results_so_far, parsed_result);
    if (instaparse.reduction.singleton_QMARK_.call(null, parser_sequence)) {
      return instaparse.gll.push_full_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [continue_index, cljs.core.first.call(null, parser_sequence)], null), CatFullListener.call(null, new_results_so_far, cljs.core.next.call(null, parser_sequence), node_key, tramp));
    } else {
      if (cljs.core.seq.call(null, parser_sequence)) {
        return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [continue_index, cljs.core.first.call(null, parser_sequence)], null), CatFullListener.call(null, new_results_so_far, cljs.core.next.call(null, parser_sequence), node_key, tramp));
      } else {
        return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, new_results_so_far, continue_index));
      }
    }
  };
};
instaparse.gll.PlusListener = function PlusListener(results_so_far, parser, prev_index, node_key, tramp) {
  return function(result) {
    var map__32066 = result;
    var map__32066__$1 = cljs.core.seq_QMARK_.call(null, map__32066) ? cljs.core.apply.call(null, cljs.core.hash_map, map__32066) : map__32066;
    var parsed_result = cljs.core.get.call(null, map__32066__$1, new cljs.core.Keyword(null, "result", "result", 1415092211));
    var continue_index = cljs.core.get.call(null, map__32066__$1, new cljs.core.Keyword(null, "index", "index", -1531685915));
    if (cljs.core._EQ_.call(null, continue_index, prev_index)) {
      if (cljs.core.count.call(null, results_so_far) === 0) {
        return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, null, continue_index));
      } else {
        return null;
      }
    } else {
      var new_results_so_far = instaparse.auto_flatten_seq.conj_flat.call(null, results_so_far, parsed_result);
      instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [continue_index, parser], null), PlusListener.call(null, new_results_so_far, parser, continue_index, node_key, tramp));
      return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, new_results_so_far, continue_index));
    }
  };
};
instaparse.gll.PlusFullListener = function PlusFullListener(results_so_far, parser, prev_index, node_key, tramp) {
  return function(result) {
    var map__32068 = result;
    var map__32068__$1 = cljs.core.seq_QMARK_.call(null, map__32068) ? cljs.core.apply.call(null, cljs.core.hash_map, map__32068) : map__32068;
    var parsed_result = cljs.core.get.call(null, map__32068__$1, new cljs.core.Keyword(null, "result", "result", 1415092211));
    var continue_index = cljs.core.get.call(null, map__32068__$1, new cljs.core.Keyword(null, "index", "index", -1531685915));
    if (cljs.core._EQ_.call(null, continue_index, prev_index)) {
      if (cljs.core.count.call(null, results_so_far) === 0) {
        return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, null, continue_index));
      } else {
        return null;
      }
    } else {
      var new_results_so_far = instaparse.auto_flatten_seq.conj_flat.call(null, results_so_far, parsed_result);
      if (cljs.core._EQ_.call(null, continue_index, cljs.core.count.call(null, (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(tramp)))) {
        return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, new_results_so_far, continue_index));
      } else {
        return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [continue_index, parser], null), PlusFullListener.call(null, new_results_so_far, parser, continue_index, node_key, tramp));
      }
    }
  };
};
instaparse.gll.RepListener = function RepListener(results_so_far, parser, m, n, prev_index, node_key, tramp) {
  return function(result) {
    var map__32070 = result;
    var map__32070__$1 = cljs.core.seq_QMARK_.call(null, map__32070) ? cljs.core.apply.call(null, cljs.core.hash_map, map__32070) : map__32070;
    var parsed_result = cljs.core.get.call(null, map__32070__$1, new cljs.core.Keyword(null, "result", "result", 1415092211));
    var continue_index = cljs.core.get.call(null, map__32070__$1, new cljs.core.Keyword(null, "index", "index", -1531685915));
    var new_results_so_far = instaparse.auto_flatten_seq.conj_flat.call(null, results_so_far, parsed_result);
    if (m <= cljs.core.count.call(null, new_results_so_far) && cljs.core.count.call(null, new_results_so_far) <= n) {
      instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, new_results_so_far, continue_index));
    } else {
    }
    if (cljs.core.count.call(null, new_results_so_far) < n) {
      return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [continue_index, parser], null), RepListener.call(null, new_results_so_far, parser, m, n, continue_index, node_key, tramp));
    } else {
      return null;
    }
  };
};
instaparse.gll.RepFullListener = function RepFullListener(results_so_far, parser, m, n, prev_index, node_key, tramp) {
  return function(result) {
    var map__32072 = result;
    var map__32072__$1 = cljs.core.seq_QMARK_.call(null, map__32072) ? cljs.core.apply.call(null, cljs.core.hash_map, map__32072) : map__32072;
    var parsed_result = cljs.core.get.call(null, map__32072__$1, new cljs.core.Keyword(null, "result", "result", 1415092211));
    var continue_index = cljs.core.get.call(null, map__32072__$1, new cljs.core.Keyword(null, "index", "index", -1531685915));
    var new_results_so_far = instaparse.auto_flatten_seq.conj_flat.call(null, results_so_far, parsed_result);
    if (cljs.core._EQ_.call(null, continue_index, cljs.core.count.call(null, (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(tramp)))) {
      if (m <= cljs.core.count.call(null, new_results_so_far) && cljs.core.count.call(null, new_results_so_far) <= n) {
        return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, new_results_so_far, continue_index));
      } else {
        return null;
      }
    } else {
      if (cljs.core.count.call(null, new_results_so_far) < n) {
        return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [continue_index, parser], null), RepFullListener.call(null, new_results_so_far, parser, m, n, continue_index, node_key, tramp));
      } else {
        return null;
      }
    }
  };
};
instaparse.gll.TopListener = function TopListener(tramp) {
  return function(result) {
    return tramp.success = result;
  };
};
instaparse.gll.string_parse = function string_parse(this$, index, tramp) {
  var string = (new cljs.core.Keyword(null, "string", "string", -1989541586)).cljs$core$IFn$_invoke$arity$1(this$);
  var text = tramp.text;
  var end = function() {
    var x__3954__auto__ = cljs.core.count.call(null, text);
    var y__3955__auto__ = index + cljs.core.count.call(null, string);
    return x__3954__auto__ < y__3955__auto__ ? x__3954__auto__ : y__3955__auto__;
  }();
  var head = cljs.core.subs.call(null, text, index, end);
  if (cljs.core._EQ_.call(null, string, head)) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, string, end));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "string", "string", -1989541586), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), string], null));
  }
};
instaparse.gll.string_full_parse = function string_full_parse(this$, index, tramp) {
  var string = (new cljs.core.Keyword(null, "string", "string", -1989541586)).cljs$core$IFn$_invoke$arity$1(this$);
  var text = tramp.text;
  var end = function() {
    var x__3954__auto__ = cljs.core.count.call(null, text);
    var y__3955__auto__ = index + cljs.core.count.call(null, string);
    return x__3954__auto__ < y__3955__auto__ ? x__3954__auto__ : y__3955__auto__;
  }();
  var head = cljs.core.subs.call(null, text, index, end);
  if (cljs.core._EQ_.call(null, end, cljs.core.count.call(null, text)) && cljs.core._EQ_.call(null, string, head)) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, string, end));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "string", "string", -1989541586), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), string, new cljs.core.Keyword(null, "full", "full", 436801220), true], null));
  }
};
instaparse.gll.equals_ignore_case = function equals_ignore_case(s1, s2) {
  return cljs.core._EQ_.call(null, s1.toUpperCase(), s2.toUpperCase());
};
instaparse.gll.string_case_insensitive_parse = function string_case_insensitive_parse(this$, index, tramp) {
  var string = (new cljs.core.Keyword(null, "string", "string", -1989541586)).cljs$core$IFn$_invoke$arity$1(this$);
  var text = tramp.text;
  var end = function() {
    var x__3954__auto__ = cljs.core.count.call(null, text);
    var y__3955__auto__ = index + cljs.core.count.call(null, string);
    return x__3954__auto__ < y__3955__auto__ ? x__3954__auto__ : y__3955__auto__;
  }();
  var head = cljs.core.subs.call(null, text, index, end);
  if (instaparse.gll.equals_ignore_case.call(null, string, head)) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, string, end));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "string", "string", -1989541586), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), string], null));
  }
};
instaparse.gll.string_case_insensitive_full_parse = function string_case_insensitive_full_parse(this$, index, tramp) {
  var string = (new cljs.core.Keyword(null, "string", "string", -1989541586)).cljs$core$IFn$_invoke$arity$1(this$);
  var text = tramp.text;
  var end = function() {
    var x__3954__auto__ = cljs.core.count.call(null, text);
    var y__3955__auto__ = index + cljs.core.count.call(null, string);
    return x__3954__auto__ < y__3955__auto__ ? x__3954__auto__ : y__3955__auto__;
  }();
  var head = cljs.core.subs.call(null, text, index, end);
  if (cljs.core._EQ_.call(null, end, cljs.core.count.call(null, text)) && instaparse.gll.equals_ignore_case.call(null, string, head)) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, string, end));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "string", "string", -1989541586), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), string, new cljs.core.Keyword(null, "full", "full", 436801220), true], null));
  }
};
instaparse.gll.re_match_at_front = function re_match_at_front(regexp, text) {
  var re = new RegExp(regexp.source, "g");
  var m = re.exec(text);
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = m;
    if (cljs.core.truth_(and__3628__auto__)) {
      return m.index === 0;
    } else {
      return and__3628__auto__;
    }
  }())) {
    return cljs.core.first.call(null, m);
  } else {
    return null;
  }
};
instaparse.gll.regexp_parse = function regexp_parse(this$, index, tramp) {
  var regexp = (new cljs.core.Keyword(null, "regexp", "regexp", -541372782)).cljs$core$IFn$_invoke$arity$1(this$);
  var text = tramp.segment;
  var substring = instaparse.gll.toString.call(null, instaparse.gll.subsegment.call(null, text, index, cljs.core.count.call(null, text)));
  var match = instaparse.gll.re_match_at_front.call(null, regexp, substring);
  if (cljs.core.truth_(match)) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, match, index + cljs.core.count.call(null, match)));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "regexp", "regexp", -541372782), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), regexp], null));
  }
};
instaparse.gll.regexp_full_parse = function regexp_full_parse(this$, index, tramp) {
  var regexp = (new cljs.core.Keyword(null, "regexp", "regexp", -541372782)).cljs$core$IFn$_invoke$arity$1(this$);
  var text = (new cljs.core.Keyword(null, "segment", "segment", -964921196)).cljs$core$IFn$_invoke$arity$1(tramp);
  var substring = instaparse.gll.toString.call(null, instaparse.gll.subsegment.call(null, text, index, cljs.core.count.call(null, text)));
  var match = instaparse.gll.re_match_at_front.call(null, regexp, substring);
  var desired_length = cljs.core.count.call(null, text) - index;
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = match;
    if (cljs.core.truth_(and__3628__auto__)) {
      return cljs.core._EQ_.call(null, cljs.core.count.call(null, match), desired_length);
    } else {
      return and__3628__auto__;
    }
  }())) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, match, cljs.core.count.call(null, text)));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "regexp", "regexp", -541372782), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), regexp, new cljs.core.Keyword(null, "full", "full", 436801220), true], null));
  }
};
var empty_cat_result_32073 = instaparse.auto_flatten_seq.EMPTY;
instaparse.gll.cat_parse = function(empty_cat_result_32073) {
  return function cat_parse(this$, index, tramp) {
    var parsers = (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(this$);
    return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, cljs.core.first.call(null, parsers)], null), instaparse.gll.CatListener.call(null, empty_cat_result_32073, cljs.core.next.call(null, parsers), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
  };
}(empty_cat_result_32073);
instaparse.gll.cat_full_parse = function(empty_cat_result_32073) {
  return function cat_full_parse(this$, index, tramp) {
    var parsers = (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(this$);
    return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, cljs.core.first.call(null, parsers)], null), instaparse.gll.CatFullListener.call(null, empty_cat_result_32073, cljs.core.next.call(null, parsers), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
  };
}(empty_cat_result_32073);
instaparse.gll.plus_parse = function(empty_cat_result_32073) {
  return function plus_parse(this$, index, tramp) {
    var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
    return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.PlusListener.call(null, empty_cat_result_32073, parser, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
  };
}(empty_cat_result_32073);
instaparse.gll.plus_full_parse = function(empty_cat_result_32073) {
  return function plus_full_parse(this$, index, tramp) {
    var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
    return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.PlusFullListener.call(null, empty_cat_result_32073, parser, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
  };
}(empty_cat_result_32073);
instaparse.gll.rep_parse = function(empty_cat_result_32073) {
  return function rep_parse(this$, index, tramp) {
    var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
    var m = (new cljs.core.Keyword(null, "min", "min", 444991522)).cljs$core$IFn$_invoke$arity$1(this$);
    var n = (new cljs.core.Keyword(null, "max", "max", 61366548)).cljs$core$IFn$_invoke$arity$1(this$);
    if (m === 0) {
      instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
      if (n >= 1) {
        return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.RepListener.call(null, empty_cat_result_32073, parser, 1, n, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
      } else {
        return null;
      }
    } else {
      return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.RepListener.call(null, empty_cat_result_32073, parser, m, n, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
    }
  };
}(empty_cat_result_32073);
instaparse.gll.rep_full_parse = function(empty_cat_result_32073) {
  return function rep_full_parse(this$, index, tramp) {
    var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
    var m = (new cljs.core.Keyword(null, "min", "min", 444991522)).cljs$core$IFn$_invoke$arity$1(this$);
    var n = (new cljs.core.Keyword(null, "max", "max", 61366548)).cljs$core$IFn$_invoke$arity$1(this$);
    if (m === 0) {
      instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
      if (n >= 1) {
        return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.RepFullListener.call(null, empty_cat_result_32073, parser, 1, n, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
      } else {
        return null;
      }
    } else {
      return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.RepFullListener.call(null, empty_cat_result_32073, parser, m, n, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
    }
  };
}(empty_cat_result_32073);
instaparse.gll.star_parse = function(empty_cat_result_32073) {
  return function star_parse(this$, index, tramp) {
    var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
    instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.PlusListener.call(null, empty_cat_result_32073, parser, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
  };
}(empty_cat_result_32073);
instaparse.gll.star_full_parse = function(empty_cat_result_32073) {
  return function star_full_parse(this$, index, tramp) {
    var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
    if (cljs.core._EQ_.call(null, index, cljs.core.count.call(null, (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(tramp)))) {
      return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
    } else {
      return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.PlusFullListener.call(null, empty_cat_result_32073, parser, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
    }
  };
}(empty_cat_result_32073);
instaparse.gll.alt_parse = function alt_parse(this$, index, tramp) {
  var parsers = (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(this$);
  var seq__32078 = cljs.core.seq.call(null, parsers);
  var chunk__32079 = null;
  var count__32080 = 0;
  var i__32081 = 0;
  while (true) {
    if (i__32081 < count__32080) {
      var parser = cljs.core._nth.call(null, chunk__32079, i__32081);
      instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
      var G__32082 = seq__32078;
      var G__32083 = chunk__32079;
      var G__32084 = count__32080;
      var G__32085 = i__32081 + 1;
      seq__32078 = G__32082;
      chunk__32079 = G__32083;
      count__32080 = G__32084;
      i__32081 = G__32085;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__32078);
      if (temp__4126__auto__) {
        var seq__32078__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__32078__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__32078__$1);
          var G__32086 = cljs.core.chunk_rest.call(null, seq__32078__$1);
          var G__32087 = c__4410__auto__;
          var G__32088 = cljs.core.count.call(null, c__4410__auto__);
          var G__32089 = 0;
          seq__32078 = G__32086;
          chunk__32079 = G__32087;
          count__32080 = G__32088;
          i__32081 = G__32089;
          continue;
        } else {
          var parser = cljs.core.first.call(null, seq__32078__$1);
          instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
          var G__32090 = cljs.core.next.call(null, seq__32078__$1);
          var G__32091 = null;
          var G__32092 = 0;
          var G__32093 = 0;
          seq__32078 = G__32090;
          chunk__32079 = G__32091;
          count__32080 = G__32092;
          i__32081 = G__32093;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
instaparse.gll.alt_full_parse = function alt_full_parse(this$, index, tramp) {
  var parsers = (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(this$);
  var seq__32098 = cljs.core.seq.call(null, parsers);
  var chunk__32099 = null;
  var count__32100 = 0;
  var i__32101 = 0;
  while (true) {
    if (i__32101 < count__32100) {
      var parser = cljs.core._nth.call(null, chunk__32099, i__32101);
      instaparse.gll.push_full_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
      var G__32102 = seq__32098;
      var G__32103 = chunk__32099;
      var G__32104 = count__32100;
      var G__32105 = i__32101 + 1;
      seq__32098 = G__32102;
      chunk__32099 = G__32103;
      count__32100 = G__32104;
      i__32101 = G__32105;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__32098);
      if (temp__4126__auto__) {
        var seq__32098__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__32098__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__32098__$1);
          var G__32106 = cljs.core.chunk_rest.call(null, seq__32098__$1);
          var G__32107 = c__4410__auto__;
          var G__32108 = cljs.core.count.call(null, c__4410__auto__);
          var G__32109 = 0;
          seq__32098 = G__32106;
          chunk__32099 = G__32107;
          count__32100 = G__32108;
          i__32101 = G__32109;
          continue;
        } else {
          var parser = cljs.core.first.call(null, seq__32098__$1);
          instaparse.gll.push_full_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
          var G__32110 = cljs.core.next.call(null, seq__32098__$1);
          var G__32111 = null;
          var G__32112 = 0;
          var G__32113 = 0;
          seq__32098 = G__32110;
          chunk__32099 = G__32111;
          count__32100 = G__32112;
          i__32101 = G__32113;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
instaparse.gll.ordered_alt_parse = function ordered_alt_parse(this$, index, tramp) {
  var parser1 = (new cljs.core.Keyword(null, "parser1", "parser1", -439601422)).cljs$core$IFn$_invoke$arity$1(this$);
  var parser2 = (new cljs.core.Keyword(null, "parser2", "parser2", 1013754688)).cljs$core$IFn$_invoke$arity$1(this$);
  var node_key_parser1 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser1], null);
  var node_key_parser2 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser2], null);
  var listener = instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp);
  instaparse.gll.push_listener.call(null, tramp, node_key_parser1, listener);
  return instaparse.gll.push_negative_listener.call(null, tramp, function(parser1, parser2, node_key_parser1, node_key_parser2, listener) {
    return function() {
      return instaparse.gll.push_listener.call(null, tramp, node_key_parser2, listener);
    };
  }(parser1, parser2, node_key_parser1, node_key_parser2, listener));
};
instaparse.gll.ordered_alt_full_parse = function ordered_alt_full_parse(this$, index, tramp) {
  var parser1 = (new cljs.core.Keyword(null, "parser1", "parser1", -439601422)).cljs$core$IFn$_invoke$arity$1(this$);
  var parser2 = (new cljs.core.Keyword(null, "parser2", "parser2", 1013754688)).cljs$core$IFn$_invoke$arity$1(this$);
  var node_key_parser1 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser1], null);
  var node_key_parser2 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser2], null);
  var listener = instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp);
  instaparse.gll.push_full_listener.call(null, tramp, node_key_parser1, listener);
  return instaparse.gll.push_negative_listener.call(null, tramp, function(parser1, parser2, node_key_parser1, node_key_parser2, listener) {
    return function() {
      return instaparse.gll.push_full_listener.call(null, tramp, node_key_parser2, listener);
    };
  }(parser1, parser2, node_key_parser1, node_key_parser2, listener));
};
instaparse.gll.opt_parse = function opt_parse(this$, index, tramp) {
  var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
  instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
  return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
};
instaparse.gll.opt_full_parse = function opt_full_parse(this$, index, tramp) {
  var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
  instaparse.gll.push_full_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
  if (cljs.core._EQ_.call(null, index, cljs.core.count.call(null, (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(tramp)))) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "optional", "optional", 2053951509), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), new cljs.core.Keyword(null, "end-of-string", "end-of-string", 1567354241)], null));
  }
};
instaparse.gll.non_terminal_parse = function non_terminal_parse(this$, index, tramp) {
  var parser = instaparse.gll.get_parser.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(tramp), (new cljs.core.Keyword(null, "keyword", "keyword", 811389747)).cljs$core$IFn$_invoke$arity$1(this$));
  return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
};
instaparse.gll.non_terminal_full_parse = function non_terminal_full_parse(this$, index, tramp) {
  var parser = instaparse.gll.get_parser.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(tramp), (new cljs.core.Keyword(null, "keyword", "keyword", 811389747)).cljs$core$IFn$_invoke$arity$1(this$));
  return instaparse.gll.push_full_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
};
instaparse.gll.lookahead_parse = function lookahead_parse(this$, index, tramp) {
  var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
  return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.LookListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
};
instaparse.gll.lookahead_full_parse = function lookahead_full_parse(this$, index, tramp) {
  if (cljs.core._EQ_.call(null, index, cljs.core.count.call(null, (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(tramp)))) {
    return instaparse.gll.lookahead_parse.call(null, this$, index, tramp);
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "lookahead", "lookahead", -400102393), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), new cljs.core.Keyword(null, "end-of-string", "end-of-string", 1567354241)], null));
  }
};
instaparse.gll.negative_lookahead_parse = function negative_lookahead_parse(this$, index, tramp) {
  var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
  var node_key = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null);
  if (cljs.core.truth_(instaparse.gll.result_exists_QMARK_.call(null, tramp, node_key))) {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "negative-lookahead", "negative-lookahead", 874382387)], null));
  } else {
    instaparse.gll.push_listener.call(null, tramp, node_key, function() {
      var fail_send = new cljs.core.Delay(function(parser, node_key) {
        return function() {
          return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "negative-lookahead", "negative-lookahead", 874382387), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "NOT", "NOT", 
          -1689245341), instaparse.print.combinators__GT_str.call(null, parser)], null)], null));
        };
      }(parser, node_key), null);
      return function(fail_send, parser, node_key) {
        return function(result) {
          return cljs.core.force.call(null, fail_send);
        };
      }(fail_send, parser, node_key);
    }());
    return instaparse.gll.push_negative_listener.call(null, tramp, function(parser, node_key) {
      return function() {
        if (cljs.core.not.call(null, instaparse.gll.result_exists_QMARK_.call(null, tramp, node_key))) {
          return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
        } else {
          return null;
        }
      };
    }(parser, node_key));
  }
};
instaparse.gll.epsilon_parse = function epsilon_parse(this$, index, tramp) {
  return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
};
instaparse.gll.epsilon_full_parse = function epsilon_full_parse(this$, index, tramp) {
  if (cljs.core._EQ_.call(null, index, cljs.core.count.call(null, (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(tramp)))) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "Epsilon", "Epsilon", 133418452), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), new cljs.core.Keyword(null, "end-of-string", "end-of-string", 1567354241)], null));
  }
};
instaparse.gll.start_parser = function start_parser(tramp, parser, partial_QMARK_) {
  if (cljs.core.truth_(partial_QMARK_)) {
    return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, parser], null), instaparse.gll.TopListener.call(null, tramp));
  } else {
    return instaparse.gll.push_full_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, parser], null), instaparse.gll.TopListener.call(null, tramp));
  }
};
instaparse.gll.parses = function parses(grammar, start, text, partial_QMARK_) {
  var tramp = instaparse.gll.make_tramp.call(null, grammar, text);
  var parser = instaparse.combinators_source.nt.call(null, start);
  instaparse.gll.start_parser.call(null, tramp, parser, partial_QMARK_);
  var temp__4124__auto__ = instaparse.gll.run.call(null, tramp);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var all_parses = temp__4124__auto__;
    return all_parses;
  } else {
    return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, instaparse.failure.augment_failure.call(null, tramp.failure, text));
  }
};
instaparse.gll.parse = function parse(grammar, start, text, partial_QMARK_) {
  var tramp = instaparse.gll.make_tramp.call(null, grammar, text);
  var parser = instaparse.combinators_source.nt.call(null, start);
  instaparse.gll.start_parser.call(null, tramp, parser, partial_QMARK_);
  var temp__4124__auto__ = instaparse.gll.run.call(null, tramp);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var all_parses = temp__4124__auto__;
    return cljs.core.first.call(null, all_parses);
  } else {
    return instaparse.failure.augment_failure.call(null, tramp.failure, text);
  }
};
instaparse.gll.build_node_with_meta = function build_node_with_meta(node_builder, tag, content, start, end) {
  return cljs.core.with_meta.call(null, node_builder.call(null, tag, content), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("instaparse.gll", "start-index", "instaparse.gll/start-index", 404653620), start, new cljs.core.Keyword("instaparse.gll", "end-index", "instaparse.gll/end-index", -1851404441), end], null));
};
instaparse.gll.build_total_failure_node = function build_total_failure_node(node_builder, start, text) {
  var build_failure_node = instaparse.gll.build_node_with_meta.call(null, node_builder, new cljs.core.Keyword("instaparse", "failure", "instaparse/failure", 1422918607), text, 0, cljs.core.count.call(null, text));
  var build_start_node = instaparse.gll.build_node_with_meta.call(null, node_builder, start, build_failure_node, 0, cljs.core.count.call(null, text));
  return build_start_node;
};
instaparse.gll.parses_total_after_fail = function parses_total_after_fail(grammar, start, text, fail_index, partial_QMARK_, node_builder) {
  var tramp = instaparse.gll.make_tramp.call(null, grammar, text, fail_index, node_builder);
  var parser = instaparse.combinators_source.nt.call(null, start);
  instaparse.gll.start_parser.call(null, tramp, parser, partial_QMARK_);
  var temp__4124__auto__ = instaparse.gll.run.call(null, tramp);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var all_parses = temp__4124__auto__;
    return all_parses;
  } else {
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, instaparse.gll.build_total_failure_node.call(null, node_builder, start, text));
  }
};
instaparse.gll.merge_meta = function merge_meta(obj, metamap) {
  return cljs.core.with_meta.call(null, obj, cljs.core.merge.call(null, metamap, cljs.core.meta.call(null, obj)));
};
instaparse.gll.parses_total = function parses_total(grammar, start, text, partial_QMARK_, node_builder) {
  var all_parses = instaparse.gll.parses.call(null, grammar, start, text, partial_QMARK_);
  if (cljs.core.seq.call(null, all_parses)) {
    return all_parses;
  } else {
    return instaparse.gll.merge_meta.call(null, instaparse.gll.parses_total_after_fail.call(null, grammar, start, text, (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, all_parses)), partial_QMARK_, node_builder), cljs.core.meta.call(null, all_parses));
  }
};
instaparse.gll.parse_total_after_fail = function parse_total_after_fail(grammar, start, text, fail_index, partial_QMARK_, node_builder) {
  var tramp = instaparse.gll.make_tramp.call(null, grammar, text, fail_index, node_builder);
  var parser = instaparse.combinators_source.nt.call(null, start);
  instaparse.gll.start_parser.call(null, tramp, parser, partial_QMARK_);
  var temp__4124__auto__ = instaparse.gll.run.call(null, tramp);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var all_parses = temp__4124__auto__;
    return cljs.core.first.call(null, all_parses);
  } else {
    return instaparse.gll.build_total_failure_node.call(null, node_builder, start, text);
  }
};
instaparse.gll.parse_total = function parse_total(grammar, start, text, partial_QMARK_, node_builder) {
  var result = instaparse.gll.parse.call(null, grammar, start, text, partial_QMARK_);
  if (!(result instanceof instaparse.gll.Failure)) {
    return result;
  } else {
    return instaparse.gll.merge_meta.call(null, instaparse.gll.parse_total_after_fail.call(null, grammar, start, text, (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(result), partial_QMARK_, node_builder), result);
  }
};
goog.provide("instaparse.transform");
goog.require("cljs.core");
goog.require("instaparse.gll");
instaparse.transform.map_preserving_meta = function map_preserving_meta(f, l) {
  return cljs.core.with_meta.call(null, cljs.core.map.call(null, f, l), cljs.core.meta.call(null, l));
};
instaparse.transform.merge_meta = function merge_meta(obj, metamap) {
  if (function() {
    var G__32292 = obj;
    if (G__32292) {
      var bit__4304__auto__ = G__32292.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4304__auto__ || G__32292.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__32292.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__32292);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__32292);
    }
  }()) {
    return instaparse.gll.merge_meta.call(null, obj, metamap);
  } else {
    return obj;
  }
};
instaparse.transform.enlive_transform = function enlive_transform(transform_map, parse_tree) {
  var transform = transform_map.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parse_tree));
  if (cljs.core.truth_(transform)) {
    return instaparse.transform.merge_meta.call(null, cljs.core.apply.call(null, transform, cljs.core.map.call(null, cljs.core.partial.call(null, enlive_transform, transform_map), (new cljs.core.Keyword(null, "content", "content", 15833224)).cljs$core$IFn$_invoke$arity$1(parse_tree))), cljs.core.meta.call(null, parse_tree));
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parse_tree))) {
      return cljs.core.assoc.call(null, parse_tree, new cljs.core.Keyword(null, "content", "content", 15833224), cljs.core.map.call(null, cljs.core.partial.call(null, enlive_transform, transform_map), (new cljs.core.Keyword(null, "content", "content", 15833224)).cljs$core$IFn$_invoke$arity$1(parse_tree)));
    } else {
      return parse_tree;
    }
  }
};
instaparse.transform.hiccup_transform = function hiccup_transform(transform_map, parse_tree) {
  var transform = transform_map.call(null, cljs.core.first.call(null, parse_tree));
  if (cljs.core.truth_(transform)) {
    return instaparse.transform.merge_meta.call(null, cljs.core.apply.call(null, transform, cljs.core.map.call(null, cljs.core.partial.call(null, hiccup_transform, transform_map), cljs.core.next.call(null, parse_tree))), cljs.core.meta.call(null, parse_tree));
  } else {
    if (cljs.core.sequential_QMARK_.call(null, parse_tree) && cljs.core.seq.call(null, parse_tree)) {
      return cljs.core.with_meta.call(null, cljs.core.into.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, parse_tree)], null), cljs.core.map.call(null, cljs.core.partial.call(null, hiccup_transform, transform_map), cljs.core.next.call(null, parse_tree))), cljs.core.meta.call(null, parse_tree));
    } else {
      return parse_tree;
    }
  }
};
instaparse.transform.transform = function transform(transform_map, parse_tree) {
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = cljs.core.map_QMARK_.call(null, parse_tree);
    if (and__3628__auto__) {
      return(new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parse_tree);
    } else {
      return and__3628__auto__;
    }
  }())) {
    return instaparse.transform.enlive_transform.call(null, transform_map, parse_tree);
  } else {
    if (cljs.core.vector_QMARK_.call(null, parse_tree) && cljs.core.first.call(null, parse_tree) instanceof cljs.core.Keyword) {
      return instaparse.transform.hiccup_transform.call(null, transform_map, parse_tree);
    } else {
      if (cljs.core.sequential_QMARK_.call(null, parse_tree)) {
        return instaparse.transform.map_preserving_meta.call(null, cljs.core.partial.call(null, transform, transform_map), parse_tree);
      } else {
        if (parse_tree instanceof instaparse.gll.Failure) {
          return parse_tree;
        } else {
          throw "Invalid parse-tree, not recognized as either enlive or hiccup format.";
        }
      }
    }
  }
};
goog.provide("cljs.looperscript.address_bar");
goog.require("cljs.core");
goog.require("domina");
goog.require("domina");
cljs.looperscript.address_bar.default_loop_text = "bpm 237/.5\npart click sound h time 2 volume .5 1\npart form sound b rate .3 .6 .6 .6 time 8/1 8\npart beat sound d\ntime 2 3 2 3 2 2 3";
cljs.looperscript.address_bar.put_text_in_get = function put_text_in_get(s) {
  var preface = document["location"]["pathname"];
  return history.pushState(new Object, "", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(preface) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s));
};
cljs.looperscript.address_bar.text__GT_link = function text__GT_link() {
  var text = escape(btoa(editor.getValue()));
  return cljs.looperscript.address_bar.put_text_in_get.call(null, "?loop\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(text));
};
cljs.looperscript.address_bar.get_text_from_get = function get_text_from_get() {
  var t = cljs.core.last.call(null, cljs.core.re_find.call(null, /^\?loop=([\s\S]*)/, document["location"]["search"]));
  if (cljs.core.truth_(t)) {
    return atob(unescape(t));
  } else {
    return null;
  }
};
cljs.looperscript.address_bar.set_loop_text = function set_loop_text(s) {
  editor.setValue(s);
  editor.moveCursorTo(0, 0);
  return editor.clearSelection();
};
cljs.looperscript.address_bar.load_link__GT_text = function load_link__GT_text(default$) {
  var get_text = cljs.looperscript.address_bar.get_text_from_get.call(null);
  var loop_text = function() {
    var or__3640__auto__ = get_text;
    if (cljs.core.truth_(or__3640__auto__)) {
      return or__3640__auto__;
    } else {
      return default$;
    }
  }();
  return cljs.looperscript.address_bar.set_loop_text.call(null, loop_text);
};
cljs.looperscript.address_bar.load_link__GT_text.call(null, cljs.looperscript.address_bar.default_loop_text);
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj32427 = {};
  return obj32427;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__3628__auto__ = reader;
    if (and__3628__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4277__auto__ = reader == null ? null : reader;
    return function() {
      var or__3640__auto__ = cljs.reader.read_char[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.reader.read_char["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__3628__auto__ = reader;
    if (and__3628__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4277__auto__ = reader == null ? null : reader;
    return function() {
      var or__3640__auto__ = cljs.reader.unread[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.reader.unread["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__3640__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__3640__auto__)) {
    return or__3640__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__32428) {
    var rdr = cljs.core.first(arglist__32428);
    var msg = cljs.core.rest(arglist__32428);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__3628__auto__ = !(ch === "#");
  if (and__3628__auto__) {
    var and__3628__auto____$1 = !(ch === "'");
    if (and__3628__auto____$1) {
      var and__3628__auto____$2 = !(ch === ":");
      if (and__3628__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__3628__auto____$2;
      }
    } else {
      return and__3628__auto____$1;
    }
  } else {
    return and__3628__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__32429 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__32430 = cljs.reader.read_char.call(null, rdr);
      sb = G__32429;
      ch = G__32430;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var ie8_fix = groups[2];
  var zero = cljs.core._EQ_.call(null, ie8_fix, "") ? null : ie8_fix;
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : [null, null];
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return-parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__32431 = cljs.reader.read_char.call(null, rdr);
      ch = G__32431;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4124__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var macrofn = temp__4124__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__32432 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__32432;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__32433 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__32433;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4124__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var obj = temp__4124__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__3640__auto__ = ch == null;
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__3640__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__32434 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__32435 = cljs.reader.read_char.call(null, reader);
      buffer = G__32434;
      ch = G__32435;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__32436 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__32437 = cljs.reader.read_char.call(null, reader);
        buffer = G__32436;
        ch = G__32437;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__32438 = function() {
            buffer.append(ch);
            return buffer;
          }();
          var G__32439 = cljs.reader.read_char.call(null, reader);
          buffer = G__32438;
          ch = G__32439;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__32444 = function() {
            var G__32442 = buffer;
            G__32442.append(nch);
            return G__32442;
          }();
          var G__32445 = cljs.reader.read_char.call(null, reader);
          buffer = G__32444;
          ch = G__32445;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__32446 = function() {
            var G__32443 = buffer;
            G__32443.append(ch);
            return G__32443;
          }();
          var G__32447 = cljs.reader.read_char.call(null, reader);
          buffer = G__32446;
          ch = G__32447;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        return not_found;
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        return f;
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__32449 = o;
    if (G__32449) {
      var bit__4304__auto__ = G__32449.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4304__auto__ || G__32449.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__32449.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__32449);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__32449);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__32450 = reader;
        var G__32451 = eof_is_error;
        var G__32452 = sentinel;
        var G__32453 = is_recursive;
        reader = G__32450;
        eof_is_error = G__32451;
        sentinel = G__32452;
        is_recursive = G__32453;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__32454 = cljs.reader.read_comment.call(null, reader, ch);
          var G__32455 = eof_is_error;
          var G__32456 = sentinel;
          var G__32457 = is_recursive;
          reader = G__32454;
          eof_is_error = G__32455;
          sentinel = G__32456;
          is_recursive = G__32457;
          continue;
        } else {
          var f = cljs.reader.macros.call(null, ch);
          var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : cljs.reader.read_symbol.call(null, reader, ch);
          if (res === reader) {
            var G__32458 = reader;
            var G__32459 = eof_is_error;
            var G__32460 = sentinel;
            var G__32461 = is_recursive;
            reader = G__32458;
            eof_is_error = G__32459;
            sentinel = G__32460;
            is_recursive = G__32461;
            continue;
          } else {
            return res;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      var b = new goog.string.StringBuffer(s);
      while (true) {
        if (b.getLength() < width) {
          var G__32462 = b.append("0");
          b = G__32462;
          continue;
        } else {
          return b.toString();
        }
        break;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(msg) + " Failed:  " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(low) + "\x3c\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + "\x3c\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(high));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__32464 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__32464, 0, null);
  var years = cljs.core.nth.call(null, vec__32464, 1, null);
  var months = cljs.core.nth.call(null, vec__32464, 2, null);
  var days = cljs.core.nth.call(null, vec__32464, 3, null);
  var hours = cljs.core.nth.call(null, vec__32464, 4, null);
  var minutes = cljs.core.nth.call(null, vec__32464, 5, null);
  var seconds = cljs.core.nth.call(null, vec__32464, 6, null);
  var fraction = cljs.core.nth.call(null, vec__32464, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__32464, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__32464, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__32464, 10, null);
  var v = vec__32464;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, "Unrecognized date/time syntax: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__3640__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__3640__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__3640__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__3640__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__3640__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__3640__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__3640__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__3640__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4124__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var vec__32466 = temp__4124__auto__;
    var years = cljs.core.nth.call(null, vec__32466, 0, null);
    var months = cljs.core.nth.call(null, vec__32466, 1, null);
    var days = cljs.core.nth.call(null, vec__32466, 2, null);
    var hours = cljs.core.nth.call(null, vec__32466, 3, null);
    var minutes = cljs.core.nth.call(null, vec__32466, 4, null);
    var seconds = cljs.core.nth.call(null, vec__32466, 5, null);
    var ms = cljs.core.nth.call(null, vec__32466, 6, null);
    var offset = cljs.core.nth.call(null, vec__32466, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, "Unrecognized date/time syntax: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ts));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__32479_32491 = cljs.core.seq.call(null, form);
    var chunk__32480_32492 = null;
    var count__32481_32493 = 0;
    var i__32482_32494 = 0;
    while (true) {
      if (i__32482_32494 < count__32481_32493) {
        var x_32495 = cljs.core._nth.call(null, chunk__32480_32492, i__32482_32494);
        arr.push(x_32495);
        var G__32496 = seq__32479_32491;
        var G__32497 = chunk__32480_32492;
        var G__32498 = count__32481_32493;
        var G__32499 = i__32482_32494 + 1;
        seq__32479_32491 = G__32496;
        chunk__32480_32492 = G__32497;
        count__32481_32493 = G__32498;
        i__32482_32494 = G__32499;
        continue;
      } else {
        var temp__4126__auto___32500 = cljs.core.seq.call(null, seq__32479_32491);
        if (temp__4126__auto___32500) {
          var seq__32479_32501__$1 = temp__4126__auto___32500;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__32479_32501__$1)) {
            var c__4410__auto___32502 = cljs.core.chunk_first.call(null, seq__32479_32501__$1);
            var G__32503 = cljs.core.chunk_rest.call(null, seq__32479_32501__$1);
            var G__32504 = c__4410__auto___32502;
            var G__32505 = cljs.core.count.call(null, c__4410__auto___32502);
            var G__32506 = 0;
            seq__32479_32491 = G__32503;
            chunk__32480_32492 = G__32504;
            count__32481_32493 = G__32505;
            i__32482_32494 = G__32506;
            continue;
          } else {
            var x_32507 = cljs.core.first.call(null, seq__32479_32501__$1);
            arr.push(x_32507);
            var G__32508 = cljs.core.next.call(null, seq__32479_32501__$1);
            var G__32509 = null;
            var G__32510 = 0;
            var G__32511 = 0;
            seq__32479_32491 = G__32508;
            chunk__32480_32492 = G__32509;
            count__32481_32493 = G__32510;
            i__32482_32494 = G__32511;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj32484 = {};
        return obj32484;
      }();
      var seq__32485_32512 = cljs.core.seq.call(null, form);
      var chunk__32486_32513 = null;
      var count__32487_32514 = 0;
      var i__32488_32515 = 0;
      while (true) {
        if (i__32488_32515 < count__32487_32514) {
          var vec__32489_32516 = cljs.core._nth.call(null, chunk__32486_32513, i__32488_32515);
          var k_32517 = cljs.core.nth.call(null, vec__32489_32516, 0, null);
          var v_32518 = cljs.core.nth.call(null, vec__32489_32516, 1, null);
          obj[cljs.core.name.call(null, k_32517)] = v_32518;
          var G__32519 = seq__32485_32512;
          var G__32520 = chunk__32486_32513;
          var G__32521 = count__32487_32514;
          var G__32522 = i__32488_32515 + 1;
          seq__32485_32512 = G__32519;
          chunk__32486_32513 = G__32520;
          count__32487_32514 = G__32521;
          i__32488_32515 = G__32522;
          continue;
        } else {
          var temp__4126__auto___32523 = cljs.core.seq.call(null, seq__32485_32512);
          if (temp__4126__auto___32523) {
            var seq__32485_32524__$1 = temp__4126__auto___32523;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__32485_32524__$1)) {
              var c__4410__auto___32525 = cljs.core.chunk_first.call(null, seq__32485_32524__$1);
              var G__32526 = cljs.core.chunk_rest.call(null, seq__32485_32524__$1);
              var G__32527 = c__4410__auto___32525;
              var G__32528 = cljs.core.count.call(null, c__4410__auto___32525);
              var G__32529 = 0;
              seq__32485_32512 = G__32526;
              chunk__32486_32513 = G__32527;
              count__32487_32514 = G__32528;
              i__32488_32515 = G__32529;
              continue;
            } else {
              var vec__32490_32530 = cljs.core.first.call(null, seq__32485_32524__$1);
              var k_32531 = cljs.core.nth.call(null, vec__32490_32530, 0, null);
              var v_32532 = cljs.core.nth.call(null, vec__32490_32530, 1, null);
              obj[cljs.core.name.call(null, k_32531)] = v_32532;
              var G__32533 = cljs.core.next.call(null, seq__32485_32524__$1);
              var G__32534 = null;
              var G__32535 = 0;
              var G__32536 = 0;
              seq__32485_32512 = G__32533;
              chunk__32486_32513 = G__32534;
              count__32487_32514 = G__32535;
              i__32488_32515 = G__32536;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, null, "JS literal expects a vector or map containing only string or unqualified keyword keys");
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag);
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag);
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("instaparse.cfg");
goog.require("cljs.core");
goog.require("instaparse.gll");
goog.require("instaparse.reduction");
goog.require("instaparse.combinators_source");
goog.require("cljs.reader");
goog.require("cljs.reader");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("instaparse.gll");
goog.require("instaparse.reduction");
goog.require("instaparse.combinators_source");
instaparse.cfg._STAR_case_insensitive_literals_STAR_ = false;
instaparse.cfg.single_quoted_string = /'[^'\\]*(?:\\.[^'\\]*)*'/;
instaparse.cfg.single_quoted_regexp = /#'[^'\\]*(?:\\.[^'\\]*)*'/;
instaparse.cfg.double_quoted_string = /\"[^\"\\]*(?:\\.[^\"\\]*)*\"/;
instaparse.cfg.double_quoted_regexp = /#\"[^\"\\]*(?:\\.[^\"\\]*)*\"/;
instaparse.cfg.inside_comment = /(?:(?!(?:\(\*|\*\)))[\s\S])*/;
instaparse.cfg.ws = "[,\\s]*";
instaparse.cfg.opt_whitespace = instaparse.combinators_source.hide.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "opt-whitespace", "opt-whitespace", 1115207927)));
instaparse.cfg.cfg = instaparse.reduction.apply_standard_reductions.call(null, new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "neg", "neg", 1800032960), new cljs.core.Keyword(null, "cat", "cat", -1457810207), new cljs.core.Keyword(null, "ord", "ord", 1142548323), new cljs.core.Keyword(null, "rule-separator", "rule-separator", 1539322213), new cljs.core.Keyword(null, "alt", "alt", -3214426), new cljs.core.Keyword(null, 
"look", "look", -539441433), new cljs.core.Keyword(null, "rule", "rule", 729973257), new cljs.core.Keyword(null, "nt", "nt", -835425781), new cljs.core.Keyword(null, "hide-nt", "hide-nt", -228813845), new cljs.core.Keyword(null, "inside-comment", "inside-comment", 1258069708), new cljs.core.Keyword(null, "star", "star", 279424429), new cljs.core.Keyword(null, "string", "string", -1989541586), new cljs.core.Keyword(null, "rules", "rules", 1198912366), new cljs.core.Keyword(null, "hide", "hide", -596913169), 
new cljs.core.Keyword(null, "paren", "paren", -294107600), new cljs.core.Keyword(null, "alt-or-ord", "alt-or-ord", 310249425), new cljs.core.Keyword(null, "regexp", "regexp", -541372782), new cljs.core.Keyword(null, "factor", "factor", -2103172748), new cljs.core.Keyword(null, "comment", "comment", 532206069), new cljs.core.Keyword(null, "plus", "plus", 211540661), new cljs.core.Keyword(null, "epsilon", "epsilon", -730158570), new cljs.core.Keyword(null, "opt-whitespace", "opt-whitespace", 1115207927), 
new cljs.core.Keyword(null, "opt", "opt", -794706369)], [instaparse.combinators_source.cat.call(null, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "!")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "factor", "factor", -2103172748))), instaparse.combinators_source.plus.call(null, instaparse.combinators_source.cat.call(null, instaparse.cfg.opt_whitespace, instaparse.combinators_source.alt.call(null, 
instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "factor", "factor", -2103172748)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "look", "look", -539441433)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "neg", "neg", 1800032960))), instaparse.cfg.opt_whitespace)), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "cat", "cat", -1457810207)), instaparse.combinators_source.plus.call(null, 
instaparse.combinators_source.cat.call(null, instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "/")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "cat", "cat", -1457810207))))), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.string.call(null, ":"), instaparse.combinators_source.string.call(null, ":\x3d"), instaparse.combinators_source.string.call(null, 
"::\x3d"), instaparse.combinators_source.string.call(null, "\x3d")), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "cat", "cat", -1457810207)), instaparse.combinators_source.star.call(null, instaparse.combinators_source.cat.call(null, instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "|")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, 
new cljs.core.Keyword(null, "cat", "cat", -1457810207))))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "\x26")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "factor", "factor", -2103172748))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.alt.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, 
"nt", "nt", -835425781)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "hide-nt", "hide-nt", -228813845))), instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "rule-separator", "rule-separator", 1539322213))), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "alt-or-ord", "alt-or-ord", 310249425)), instaparse.combinators_source.hide.call(null, 
instaparse.combinators_source.alt.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "opt-whitespace", "opt-whitespace", 1115207927)), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "opt-whitespace", "opt-whitespace", 1115207927)), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.string.call(null, ";"), instaparse.combinators_source.string.call(null, ".")), instaparse.combinators_source.nt.call(null, 
new cljs.core.Keyword(null, "opt-whitespace", "opt-whitespace", 1115207927)))))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.neg.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "epsilon", "epsilon", -730158570))), instaparse.combinators_source.regexp.call(null, "[^, \\r\\t\\n\x3c\x3e(){}\\[\\]+*?:\x3d|'\"#\x26!;./]+")), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, 
"\x3c")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "nt", "nt", -835425781)), instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "\x3e"))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.regexp.call(null, instaparse.cfg.inside_comment), instaparse.combinators_source.star.call(null, instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, 
new cljs.core.Keyword(null, "comment", "comment", 532206069)), instaparse.combinators_source.regexp.call(null, instaparse.cfg.inside_comment)))), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.cat.call(null, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "{")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "alt-or-ord", "alt-or-ord", 310249425)), instaparse.cfg.opt_whitespace, 
instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "}"))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "factor", "factor", -2103172748)), instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "*")))), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.regexp.call(null, instaparse.cfg.single_quoted_string), 
instaparse.combinators_source.regexp.call(null, instaparse.cfg.double_quoted_string)), instaparse.combinators_source.hide_tag.call(null, instaparse.combinators_source.cat.call(null, instaparse.cfg.opt_whitespace, instaparse.combinators_source.plus.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "rule", "rule", 729973257))))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, 
"\x3c")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "alt-or-ord", "alt-or-ord", 310249425)), instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "\x3e"))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "(")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, 
new cljs.core.Keyword(null, "alt-or-ord", "alt-or-ord", 310249425)), instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, ")"))), instaparse.combinators_source.hide_tag.call(null, instaparse.combinators_source.alt.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "alt", "alt", -3214426)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "ord", "ord", 1142548323)))), instaparse.combinators_source.alt.call(null, 
instaparse.combinators_source.regexp.call(null, instaparse.cfg.single_quoted_regexp), instaparse.combinators_source.regexp.call(null, instaparse.cfg.double_quoted_regexp)), instaparse.combinators_source.hide_tag.call(null, instaparse.combinators_source.alt.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "nt", "nt", -835425781)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "string", "string", -1989541586)), instaparse.combinators_source.nt.call(null, 
new cljs.core.Keyword(null, "regexp", "regexp", -541372782)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "opt", "opt", -794706369)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "star", "star", 279424429)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "plus", "plus", 211540661)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "paren", "paren", -294107600)), instaparse.combinators_source.nt.call(null, 
new cljs.core.Keyword(null, "hide", "hide", -596913169)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "epsilon", "epsilon", -730158570)))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.string.call(null, "(*"), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "inside-comment", "inside-comment", 1258069708)), instaparse.combinators_source.string.call(null, "*)")), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, 
new cljs.core.Keyword(null, "factor", "factor", -2103172748)), instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "+"))), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.string.call(null, "Epsilon"), instaparse.combinators_source.string.call(null, "epsilon"), instaparse.combinators_source.string.call(null, "EPSILON"), instaparse.combinators_source.string.call(null, "eps"), instaparse.combinators_source.string.call(null, 
"\u03b5")), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.regexp.call(null, instaparse.cfg.ws), instaparse.combinators_source.star.call(null, instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "comment", "comment", 532206069)), instaparse.combinators_source.regexp.call(null, instaparse.cfg.ws)))), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.cat.call(null, instaparse.combinators_source.hide.call(null, 
instaparse.combinators_source.string.call(null, "[")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "alt-or-ord", "alt-or-ord", 310249425)), instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "]"))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "factor", "factor", -2103172748)), instaparse.cfg.opt_whitespace, 
instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "?"))))]));
instaparse.cfg.tag = cljs.core.first;
instaparse.cfg.contents = cljs.core.next;
instaparse.cfg.content = cljs.core.fnext;
instaparse.cfg.escape = function escape__$1(s) {
  var sq = cljs.core.seq.call(null, s);
  var v = cljs.core.PersistentVector.EMPTY;
  while (true) {
    var temp__4124__auto__ = cljs.core.first.call(null, sq);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var c = temp__4124__auto__;
      var G__32227 = c;
      switch(G__32227) {
        case "\\":
          var temp__4124__auto____$1 = cljs.core.second.call(null, sq);
          if (cljs.core.truth_(temp__4124__auto____$1)) {
            var c2 = temp__4124__auto____$1;
            if (cljs.core._EQ_.call(null, c2, "'")) {
              var G__32229 = cljs.core.drop.call(null, 2, sq);
              var G__32230 = cljs.core.conj.call(null, v, c2);
              sq = G__32229;
              v = G__32230;
              continue;
            } else {
              var G__32231 = cljs.core.drop.call(null, 2, sq);
              var G__32232 = cljs.core.conj.call(null, v, c, c2);
              sq = G__32231;
              v = G__32232;
              continue;
            }
          } else {
            throw "Encountered backslash character at end of string:" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s);
          }
          break;
        case '"':
          var G__32233 = cljs.core.next.call(null, sq);
          var G__32234 = cljs.core.conj.call(null, v, "\\", '"');
          sq = G__32233;
          v = G__32234;
          continue;
          break;
        default:
          var G__32235 = cljs.core.next.call(null, sq);
          var G__32236 = cljs.core.conj.call(null, v, c);
          sq = G__32235;
          v = G__32236;
          continue;
      }
    } else {
      return cljs.core.apply.call(null, cljs.core.str, v);
    }
    break;
  }
};
instaparse.cfg.safe_read_string = function safe_read_string(s) {
  return cljs.reader.read_string_STAR_.call(null, cljs.reader.push_back_reader.call(null, s), null);
};
instaparse.cfg.process_string = function process_string(s) {
  var stripped = cljs.core.subs.call(null, s, 1, cljs.core.count.call(null, s) - 1);
  var remove_escaped_single_quotes = instaparse.cfg.escape.call(null, stripped);
  var final_string = instaparse.cfg.safe_read_string.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(remove_escaped_single_quotes) + '"');
  return final_string;
};
instaparse.cfg.process_regexp = function process_regexp(s) {
  var stripped = cljs.core.subs.call(null, s, 2, cljs.core.count.call(null, s) - 1);
  var remove_escaped_single_quotes = instaparse.cfg.escape.call(null, stripped);
  var final_string = cljs.core.re_pattern.call(null, remove_escaped_single_quotes);
  return final_string;
};
instaparse.cfg.build_rule = function build_rule(tree) {
  while (true) {
    var G__32239 = instaparse.cfg.tag.call(null, tree) instanceof cljs.core.Keyword ? instaparse.cfg.tag.call(null, tree).fqn : null;
    switch(G__32239) {
      case "neg":
        return instaparse.combinators_source.neg.call(null, build_rule.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "cat":
        return cljs.core.apply.call(null, instaparse.combinators_source.cat, cljs.core.map.call(null, build_rule, instaparse.cfg.contents.call(null, tree)));
        break;
      case "ord":
        return cljs.core.apply.call(null, instaparse.combinators_source.ord, cljs.core.map.call(null, build_rule, instaparse.cfg.contents.call(null, tree)));
        break;
      case "alt":
        return cljs.core.apply.call(null, instaparse.combinators_source.alt, cljs.core.map.call(null, build_rule, instaparse.cfg.contents.call(null, tree)));
        break;
      case "look":
        return instaparse.combinators_source.look.call(null, build_rule.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "rule":
        var vec__32240 = instaparse.cfg.contents.call(null, tree);
        var nt = cljs.core.nth.call(null, vec__32240, 0, null);
        var alt_or_ord = cljs.core.nth.call(null, vec__32240, 1, null);
        if (cljs.core._EQ_.call(null, instaparse.cfg.tag.call(null, nt), new cljs.core.Keyword(null, "hide-nt", "hide-nt", -228813845))) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, instaparse.cfg.content.call(null, instaparse.cfg.content.call(null, nt))), instaparse.combinators_source.hide_tag.call(null, build_rule.call(null, alt_or_ord))], null);
        } else {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, instaparse.cfg.content.call(null, nt)), build_rule.call(null, alt_or_ord)], null);
        }
        break;
      case "nt":
        return instaparse.combinators_source.nt.call(null, cljs.core.keyword.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "star":
        return instaparse.combinators_source.star.call(null, build_rule.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "string":
        return(cljs.core.truth_(instaparse.cfg._STAR_case_insensitive_literals_STAR_) ? instaparse.combinators_source.string_ci : instaparse.combinators_source.string).call(null, instaparse.cfg.process_string.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "hide":
        return instaparse.combinators_source.hide.call(null, build_rule.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "paren":
        var G__32242 = instaparse.cfg.content.call(null, tree);
        tree = G__32242;
        continue;
        break;
      case "regexp":
        return instaparse.combinators_source.regexp.call(null, instaparse.cfg.process_regexp.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "plus":
        return instaparse.combinators_source.plus.call(null, build_rule.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "epsilon":
        return instaparse.combinators_source.Epsilon;
        break;
      case "opt":
        return instaparse.combinators_source.opt.call(null, build_rule.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      default:
        throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.cfg.tag.call(null, tree)));;
    }
    break;
  }
};
instaparse.cfg.seq_nt = function seq_nt(parser) {
  while (true) {
    var G__32244 = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser).fqn : null;
    switch(G__32244) {
      case "neg":
        var G__32246 = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser);
        parser = G__32246;
        continue;
        break;
      case "cat":
        return cljs.core.mapcat.call(null, seq_nt, (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(parser));
        break;
      case "ord":
        return cljs.core.mapcat.call(null, seq_nt, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "parser1", "parser1", -439601422)).cljs$core$IFn$_invoke$arity$1(parser), (new cljs.core.Keyword(null, "parser2", "parser2", 1013754688)).cljs$core$IFn$_invoke$arity$1(parser)], null));
        break;
      case "alt":
        return cljs.core.mapcat.call(null, seq_nt, (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(parser));
        break;
      case "look":
        var G__32247 = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser);
        parser = G__32247;
        continue;
        break;
      case "nt":
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "keyword", "keyword", 811389747)).cljs$core$IFn$_invoke$arity$1(parser)], null);
        break;
      case "rep":
        var G__32248 = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser);
        parser = G__32248;
        continue;
        break;
      case "star":
        var G__32249 = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser);
        parser = G__32249;
        continue;
        break;
      case "string":
        return cljs.core.PersistentVector.EMPTY;
        break;
      case "regexp":
        return cljs.core.PersistentVector.EMPTY;
        break;
      case "plus":
        var G__32250 = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser);
        parser = G__32250;
        continue;
        break;
      case "epsilon":
        return cljs.core.PersistentVector.EMPTY;
        break;
      case "string-ci":
        return cljs.core.PersistentVector.EMPTY;
        break;
      case "opt":
        var G__32251 = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser);
        parser = G__32251;
        continue;
        break;
      default:
        throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser)));;
    }
    break;
  }
};
instaparse.cfg.check_grammar = function check_grammar(grammar_map) {
  var valid_nts_32260 = cljs.core.set.call(null, cljs.core.keys.call(null, grammar_map));
  var seq__32256_32261 = cljs.core.seq.call(null, cljs.core.distinct.call(null, cljs.core.mapcat.call(null, instaparse.cfg.seq_nt, cljs.core.vals.call(null, grammar_map))));
  var chunk__32257_32262 = null;
  var count__32258_32263 = 0;
  var i__32259_32264 = 0;
  while (true) {
    if (i__32259_32264 < count__32258_32263) {
      var nt_32265 = cljs.core._nth.call(null, chunk__32257_32262, i__32259_32264);
      if (cljs.core.truth_(valid_nts_32260.call(null, nt_32265))) {
      } else {
        throw "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.subs.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(nt_32265), 1)) + "occurs on the right-hand side of your grammar, but not on the left";
      }
      var G__32266 = seq__32256_32261;
      var G__32267 = chunk__32257_32262;
      var G__32268 = count__32258_32263;
      var G__32269 = i__32259_32264 + 1;
      seq__32256_32261 = G__32266;
      chunk__32257_32262 = G__32267;
      count__32258_32263 = G__32268;
      i__32259_32264 = G__32269;
      continue;
    } else {
      var temp__4126__auto___32270 = cljs.core.seq.call(null, seq__32256_32261);
      if (temp__4126__auto___32270) {
        var seq__32256_32271__$1 = temp__4126__auto___32270;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__32256_32271__$1)) {
          var c__4410__auto___32272 = cljs.core.chunk_first.call(null, seq__32256_32271__$1);
          var G__32273 = cljs.core.chunk_rest.call(null, seq__32256_32271__$1);
          var G__32274 = c__4410__auto___32272;
          var G__32275 = cljs.core.count.call(null, c__4410__auto___32272);
          var G__32276 = 0;
          seq__32256_32261 = G__32273;
          chunk__32257_32262 = G__32274;
          count__32258_32263 = G__32275;
          i__32259_32264 = G__32276;
          continue;
        } else {
          var nt_32277 = cljs.core.first.call(null, seq__32256_32271__$1);
          if (cljs.core.truth_(valid_nts_32260.call(null, nt_32277))) {
          } else {
            throw "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.subs.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(nt_32277), 1)) + "occurs on the right-hand side of your grammar, but not on the left";
          }
          var G__32278 = cljs.core.next.call(null, seq__32256_32271__$1);
          var G__32279 = null;
          var G__32280 = 0;
          var G__32281 = 0;
          seq__32256_32261 = G__32278;
          chunk__32257_32262 = G__32279;
          count__32258_32263 = G__32280;
          i__32259_32264 = G__32281;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return grammar_map;
};
instaparse.cfg.build_parser = function build_parser(spec, output_format) {
  var rules = instaparse.gll.parse.call(null, instaparse.cfg.cfg, new cljs.core.Keyword(null, "rules", "rules", 1198912366), spec, false);
  if (rules instanceof instaparse.gll.Failure) {
    throw "Error parsing grammar specification:\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
      var sb__4581__auto__ = new goog.string.StringBuffer;
      var _STAR_print_fn_STAR_32283_32284 = cljs.core._STAR_print_fn_STAR_;
      try {
        cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_fn_STAR_32283_32284, sb__4581__auto__, rules) {
          return function(x__4582__auto__) {
            return sb__4581__auto__.append(x__4582__auto__);
          };
        }(_STAR_print_fn_STAR_32283_32284, sb__4581__auto__, rules);
        cljs.core.println.call(null, rules);
      } finally {
        cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_32283_32284;
      }
      return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4581__auto__);
    }());
  } else {
    var productions = cljs.core.map.call(null, instaparse.cfg.build_rule, rules);
    var start_production = cljs.core.first.call(null, cljs.core.first.call(null, productions));
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), instaparse.cfg.check_grammar.call(null, instaparse.reduction.apply_standard_reductions.call(null, output_format, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, productions))), new cljs.core.Keyword(null, "start-production", "start-production", 687546537), start_production, new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), output_format], null);
  }
};
instaparse.cfg.build_parser_from_combinators = function build_parser_from_combinators(grammar_map, output_format, start_production) {
  if (start_production == null) {
    throw "When you build a parser from a map of parser combinators, you must provide a start production using the :start keyword argument.";
  } else {
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), instaparse.cfg.check_grammar.call(null, instaparse.reduction.apply_standard_reductions.call(null, output_format, grammar_map)), new cljs.core.Keyword(null, "start-production", "start-production", 687546537), start_production, new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), output_format], null);
  }
};
instaparse.cfg.ebnf = function ebnf(spec) {
  if (cljs.core.truth_(cljs.core.re_find.call(null, /[:=]/, spec))) {
    var rules = instaparse.gll.parse.call(null, instaparse.cfg.cfg, new cljs.core.Keyword(null, "rules", "rules", 1198912366), spec, false);
    if (rules instanceof instaparse.gll.Failure) {
      throw "Error parsing grammar specification:\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
        var sb__4581__auto__ = new goog.string.StringBuffer;
        var _STAR_print_fn_STAR_32287_32289 = cljs.core._STAR_print_fn_STAR_;
        try {
          cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_fn_STAR_32287_32289, sb__4581__auto__, rules) {
            return function(x__4582__auto__) {
              return sb__4581__auto__.append(x__4582__auto__);
            };
          }(_STAR_print_fn_STAR_32287_32289, sb__4581__auto__, rules);
          cljs.core.println.call(null, rules);
        } finally {
          cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_32287_32289;
        }
        return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4581__auto__);
      }());
    } else {
      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, instaparse.cfg.build_rule, rules));
    }
  } else {
    var rhs = instaparse.gll.parse.call(null, instaparse.cfg.cfg, new cljs.core.Keyword(null, "alt-or-ord", "alt-or-ord", 310249425), spec, false);
    if (rhs instanceof instaparse.gll.Failure) {
      throw "Error parsing grammar specification:\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
        var sb__4581__auto__ = new goog.string.StringBuffer;
        var _STAR_print_fn_STAR_32288_32290 = cljs.core._STAR_print_fn_STAR_;
        try {
          cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_fn_STAR_32288_32290, sb__4581__auto__, rhs) {
            return function(x__4582__auto__) {
              return sb__4581__auto__.append(x__4582__auto__);
            };
          }(_STAR_print_fn_STAR_32288_32290, sb__4581__auto__, rhs);
          cljs.core.println.call(null, rhs);
        } finally {
          cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_32288_32290;
        }
        return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4581__auto__);
      }());
    } else {
      return instaparse.cfg.build_rule.call(null, cljs.core.first.call(null, rhs));
    }
  }
};
goog.provide("instaparse.abnf");
goog.require("cljs.core");
goog.require("instaparse.combinators_source");
goog.require("instaparse.combinators_source");
goog.require("instaparse.reduction");
goog.require("instaparse.reduction");
goog.require("instaparse.gll");
goog.require("instaparse.gll");
goog.require("instaparse.cfg");
goog.require("instaparse.cfg");
goog.require("instaparse.transform");
goog.require("instaparse.transform");
instaparse.abnf._STAR_case_insensitive_STAR_ = false;
instaparse.abnf.abnf_core = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "CRLF", "CRLF", 11418756), new cljs.core.Keyword(null, "HTAB", "HTAB", 11392612), new cljs.core.Keyword(null, "LWSP", "LWSP", 782998598), new cljs.core.Keyword(null, "LF", "LF", 1177033158), new cljs.core.Keyword(null, "VCHAR", "VCHAR", 1962437706), new cljs.core.Keyword(null, "DIGIT", "DIGIT", 341251338), new cljs.core.Keyword(null, "SP", "SP", 124290284), new cljs.core.Keyword(null, "HEXDIG", "HEXDIG", 
-200221072), new cljs.core.Keyword(null, "CTL", "CTL", -9995632), new cljs.core.Keyword(null, "DQUOTE", "DQUOTE", -571169808), new cljs.core.Keyword(null, "WSP", "WSP", -1046948716), new cljs.core.Keyword(null, "CR", "CR", -1654295403), new cljs.core.Keyword(null, "OCTET", "OCTET", -743420682), new cljs.core.Keyword(null, "ALPHA", "ALPHA", -1463859144), new cljs.core.Keyword(null, "CHAR", "CHAR", -1280338086), new cljs.core.Keyword(null, "BIT", "BIT", -1854474115)], [instaparse.combinators_source.string.call(null, 
"\r\n"), instaparse.combinators_source.string.call(null, "\t"), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.alt.call(null, instaparse.combinators_source.string.call(null, " "), instaparse.combinators_source.string.call(null, "\t")), instaparse.combinators_source.star.call(null, instaparse.combinators_source.cat.call(null, instaparse.combinators_source.string.call(null, "\r\n"), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.string.call(null, 
" "), instaparse.combinators_source.string.call(null, "\t"))))), instaparse.combinators_source.string.call(null, "\n"), instaparse.combinators_source.regexp.call(null, "[\\u0021-\\u007E]"), instaparse.combinators_source.regexp.call(null, "[0-9]"), instaparse.combinators_source.string.call(null, " "), instaparse.combinators_source.regexp.call(null, "[0-9A-Fa-f]"), instaparse.combinators_source.regexp.call(null, "[\\u0000-\\u001F|\\u007F]"), instaparse.combinators_source.string.call(null, '"'), instaparse.combinators_source.alt.call(null, 
instaparse.combinators_source.string.call(null, " "), instaparse.combinators_source.string.call(null, "\t")), instaparse.combinators_source.string.call(null, "\r"), instaparse.combinators_source.regexp.call(null, "[\\u0000-\\u00FF]"), instaparse.combinators_source.regexp.call(null, "[a-zA-Z]"), instaparse.combinators_source.regexp.call(null, "[\\u0001-\\u007F]"), instaparse.combinators_source.regexp.call(null, "[01]")]);
instaparse.abnf.abnf_grammar = "\n\x3crulelist\x3e \x3d \x3copt-whitespace\x3e (rule | hide-tag-rule)+;\nrule \x3d rulename-left \x3cdefined-as\x3e alternation \x3copt-whitespace\x3e;\nhide-tag-rule \x3d hide-tag \x3cdefined-as\x3e alternation \x3copt-whitespace\x3e;\nrulename-left \x3d rulename;\nrulename-right \x3d rulename;\n\x3crulename\x3e \x3d #'[a-zA-Z][-a-zA-Z0-9]*';\n\x3chide-tag\x3e \x3d \x3c'\x3c' opt-whitespace\x3e rulename-left \x3copt-whitespace '\x3e'\x3e;\ndefined-as \x3d \x3copt-whitespace\x3e ('\x3d' | '\x3d/') \x3copt-whitespace\x3e;\nalternation \x3d concatenation (\x3copt-whitespace '/' opt-whitespace\x3e concatenation)*;\nconcatenation \x3d repetition (\x3cwhitespace\x3e repetition)*;\nrepetition \x3d [repeat] \x3copt-whitespace\x3e element;\nrepeat \x3d NUM | (NUM? '*' NUM?);\n\x3celement\x3e \x3d rulename-right | group | hide | option | char-val | num-val\n          | look | neg | regexp;\nlook \x3d \x3c'\x26' opt-whitespace\x3e element;\nneg \x3d \x3c'!' opt-whitespace\x3e element;\n\x3cgroup\x3e \x3d \x3c'(' opt-whitespace\x3e alternation \x3copt-whitespace ')'\x3e;\noption \x3d \x3c'[' opt-whitespace\x3e alternation \x3copt-whitespace ']'\x3e;\nhide \x3d \x3c'\x3c' opt-whitespace\x3e alternation \x3copt-whitespace '\x3e'\x3e;\nchar-val \x3d \x3c'\\u0022'\x3e #'[\\u0020-\\u0021\\u0023-\\u007E]'* \x3c'\\u0022'\x3e (* double-quoted strings *)\n         | \x3c'\\u0027'\x3e #'[\\u0020-\\u0026(-~]'* \x3c'\\u0027'\x3e;  (* single-quoted strings *)\n\x3cnum-val\x3e \x3d \x3c'%'\x3e (bin-val | dec-val | hex-val);\nbin-val \x3d \x3c'b'\x3e bin-char\n          [ (\x3c'.'\x3e bin-char)+ | ('-' bin-char) ];\nbin-char \x3d ('0' | '1')+;\ndec-val \x3d \x3c'd'\x3e dec-char\n          [ (\x3c'.'\x3e dec-char)+ | ('-' dec-char) ];\ndec-char \x3d DIGIT+;\nhex-val \x3d \x3c'x'\x3e hex-char\n          [ (\x3c'.'\x3e hex-char)+ | ('-' hex-char) ];\nhex-char \x3d HEXDIG+;\nNUM \x3d DIGIT+;\n\x3cDIGIT\x3e \x3d #'[0-9]';\n\x3cHEXDIG\x3e \x3d #'[0-9A-Fa-f]';\nopt-whitespace \x3d #'\\s*(?:;.*?(?:\\u000D?\\u000A\\s*|$))*';\nwhitespace \x3d #'\\s+(?:;.*?\\u000D?\\u000A\\s*)*';\nregexp \x3d #\"#'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\"\n       | #\"#\\\"[^\\\"\\\\]*(?:\\\\.[^\\\"\\\\]*)*\\\"\"\n";
instaparse.abnf.char_range = function char_range(char1, char2) {
  return instaparse.combinators_source.regexp.call(null, "[" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(char1) + "-" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(char2) + "]");
};
instaparse.abnf.get_char_combinator = function() {
  var get_char_combinator = null;
  var get_char_combinator__1 = function(num1) {
    return instaparse.combinators_source.string.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.char$.call(null, num1)));
  };
  var get_char_combinator__3 = function() {
    var G__32181__delegate = function(num1, num2, nums) {
      var v = cljs.core.vec.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [num1, num2], null), nums));
      if (cljs.core._EQ_.call(null, v.call(null, 1), "-")) {
        return instaparse.abnf.char_range.call(null, cljs.core.char$.call(null, v.call(null, 0)), cljs.core.char$.call(null, v.call(null, 2)));
      } else {
        return cljs.core.apply.call(null, instaparse.combinators_source.alt, function() {
          var iter__4379__auto__ = function(v) {
            return function iter__32177(s__32178) {
              return new cljs.core.LazySeq(null, function(v) {
                return function() {
                  var s__32178__$1 = s__32178;
                  while (true) {
                    var temp__4126__auto__ = cljs.core.seq.call(null, s__32178__$1);
                    if (temp__4126__auto__) {
                      var s__32178__$2 = temp__4126__auto__;
                      if (cljs.core.chunked_seq_QMARK_.call(null, s__32178__$2)) {
                        var c__4377__auto__ = cljs.core.chunk_first.call(null, s__32178__$2);
                        var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                        var b__32180 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                        if (function() {
                          var i__32179 = 0;
                          while (true) {
                            if (i__32179 < size__4378__auto__) {
                              var n = cljs.core._nth.call(null, c__4377__auto__, i__32179);
                              cljs.core.chunk_append.call(null, b__32180, instaparse.combinators_source.string.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.char$.call(null, n))));
                              var G__32182 = i__32179 + 1;
                              i__32179 = G__32182;
                              continue;
                            } else {
                              return true;
                            }
                            break;
                          }
                        }()) {
                          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__32180), iter__32177.call(null, cljs.core.chunk_rest.call(null, s__32178__$2)));
                        } else {
                          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__32180), null);
                        }
                      } else {
                        var n = cljs.core.first.call(null, s__32178__$2);
                        return cljs.core.cons.call(null, instaparse.combinators_source.string.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.char$.call(null, n))), iter__32177.call(null, cljs.core.rest.call(null, s__32178__$2)));
                      }
                    } else {
                      return null;
                    }
                    break;
                  }
                };
              }(v), null, null);
            };
          }(v);
          return iter__4379__auto__.call(null, v);
        }());
      }
    };
    var G__32181 = function(num1, num2, var_args) {
      var nums = null;
      if (arguments.length > 2) {
        nums = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__32181__delegate.call(this, num1, num2, nums);
    };
    G__32181.cljs$lang$maxFixedArity = 2;
    G__32181.cljs$lang$applyTo = function(arglist__32183) {
      var num1 = cljs.core.first(arglist__32183);
      arglist__32183 = cljs.core.next(arglist__32183);
      var num2 = cljs.core.first(arglist__32183);
      var nums = cljs.core.rest(arglist__32183);
      return G__32181__delegate(num1, num2, nums);
    };
    G__32181.cljs$core$IFn$_invoke$arity$variadic = G__32181__delegate;
    return G__32181;
  }();
  get_char_combinator = function(num1, num2, var_args) {
    var nums = var_args;
    switch(arguments.length) {
      case 1:
        return get_char_combinator__1.call(this, num1);
      default:
        return get_char_combinator__3.cljs$core$IFn$_invoke$arity$variadic(num1, num2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_char_combinator.cljs$lang$maxFixedArity = 2;
  get_char_combinator.cljs$lang$applyTo = get_char_combinator__3.cljs$lang$applyTo;
  get_char_combinator.cljs$core$IFn$_invoke$arity$1 = get_char_combinator__1;
  get_char_combinator.cljs$core$IFn$_invoke$arity$variadic = get_char_combinator__3.cljs$core$IFn$_invoke$arity$variadic;
  return get_char_combinator;
}();
instaparse.abnf.project = function project(m, ks) {
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__4379__auto__ = function iter__32188(s__32189) {
      return new cljs.core.LazySeq(null, function() {
        var s__32189__$1 = s__32189;
        while (true) {
          var temp__4126__auto__ = cljs.core.seq.call(null, s__32189__$1);
          if (temp__4126__auto__) {
            var s__32189__$2 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__32189__$2)) {
              var c__4377__auto__ = cljs.core.chunk_first.call(null, s__32189__$2);
              var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
              var b__32191 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
              if (function() {
                var i__32190 = 0;
                while (true) {
                  if (i__32190 < size__4378__auto__) {
                    var k = cljs.core._nth.call(null, c__4377__auto__, i__32190);
                    if (cljs.core.contains_QMARK_.call(null, m, k)) {
                      cljs.core.chunk_append.call(null, b__32191, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, m.call(null, k)], null));
                      var G__32192 = i__32190 + 1;
                      i__32190 = G__32192;
                      continue;
                    } else {
                      var G__32193 = i__32190 + 1;
                      i__32190 = G__32193;
                      continue;
                    }
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__32191), iter__32188.call(null, cljs.core.chunk_rest.call(null, s__32189__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__32191), null);
              }
            } else {
              var k = cljs.core.first.call(null, s__32189__$2);
              if (cljs.core.contains_QMARK_.call(null, m, k)) {
                return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, m.call(null, k)], null), iter__32188.call(null, cljs.core.rest.call(null, s__32189__$2)));
              } else {
                var G__32194 = cljs.core.rest.call(null, s__32189__$2);
                s__32189__$1 = G__32194;
                continue;
              }
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4379__auto__.call(null, ks);
  }());
};
instaparse.abnf.merge_core = function merge_core(grammar_map) {
  return cljs.core.merge.call(null, instaparse.abnf.project.call(null, instaparse.abnf.abnf_core, cljs.core.distinct.call(null, cljs.core.mapcat.call(null, instaparse.cfg.seq_nt, cljs.core.vals.call(null, grammar_map)))), grammar_map);
};
instaparse.abnf.hide_tag_QMARK_ = function hide_tag_QMARK_(p) {
  return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(p), instaparse.reduction.raw_non_terminal_reduction);
};
instaparse.abnf.alt_preserving_hide_tag = function alt_preserving_hide_tag(p1, p2) {
  var hide_tag_p1_QMARK_ = instaparse.abnf.hide_tag_QMARK_.call(null, p1);
  var hide_tag_p2_QMARK_ = instaparse.abnf.hide_tag_QMARK_.call(null, p2);
  if (hide_tag_p1_QMARK_ && hide_tag_p2_QMARK_) {
    return instaparse.combinators_source.hide_tag.call(null, instaparse.combinators_source.alt.call(null, cljs.core.dissoc.call(null, p1, new cljs.core.Keyword(null, "red", "red", -969428204)), cljs.core.dissoc.call(null, p2, new cljs.core.Keyword(null, "red", "red", -969428204))));
  } else {
    if (hide_tag_p1_QMARK_) {
      return instaparse.combinators_source.hide_tag.call(null, instaparse.combinators_source.alt.call(null, cljs.core.dissoc.call(null, p1, new cljs.core.Keyword(null, "red", "red", -969428204)), p2));
    } else {
      if (hide_tag_p2_QMARK_) {
        return instaparse.combinators_source.hide_tag.call(null, instaparse.combinators_source.alt.call(null, p1, cljs.core.dissoc.call(null, p2, new cljs.core.Keyword(null, "red", "red", -969428204))));
      } else {
        return instaparse.combinators_source.alt.call(null, p1, p2);
      }
    }
  }
};
instaparse.abnf.abnf_transformer = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "neg", "neg", 1800032960), new cljs.core.Keyword(null, "hide-tag-rule", "hide-tag-rule", 150267589), new cljs.core.Keyword(null, "look", "look", -539441433), new cljs.core.Keyword(null, "bin-char", "bin-char", -1662780697), new cljs.core.Keyword(null, "rule", "rule", 729973257), new cljs.core.Keyword(null, "rulename-right", "rulename-right", 1125609193), new cljs.core.Keyword(null, "NUM", "NUM", 
-218662260), new cljs.core.Keyword(null, "char-val", "char-val", 1408617933), new cljs.core.Keyword(null, "hide", "hide", -596913169), new cljs.core.Keyword(null, "option", "option", 65132272), new cljs.core.Keyword(null, "hex-char", "hex-char", 764443568), new cljs.core.Keyword(null, "bin-val", "bin-val", 1705209105), new cljs.core.Keyword(null, "dec-val", "dec-val", -1263870894), new cljs.core.Keyword(null, "concatenation", "concatenation", -951369614), new cljs.core.Keyword(null, "alternation", 
"alternation", -1162147630), new cljs.core.Keyword(null, "regexp", "regexp", -541372782), new cljs.core.Keyword(null, "repetition", "repetition", 1938392115), new cljs.core.Keyword(null, "rulename-left", "rulename-left", -1824251564), new cljs.core.Keyword(null, "repeat", "repeat", 832692087), new cljs.core.Keyword(null, "hex-val", "hex-val", 1267737401), new cljs.core.Keyword(null, "dec-char", "dec-char", -646625154)], [instaparse.combinators_source.neg, function(tag, rule) {
  return new cljs.core.PersistentArrayMap.fromArray([tag, instaparse.combinators_source.hide_tag.call(null, rule)], true, false);
}, instaparse.combinators_source.look, function() {
  var G__32199__delegate = function(cs) {
    return parseInt(cljs.core.apply.call(null, cljs.core.str, cs), 2);
  };
  var G__32199 = function(var_args) {
    var cs = null;
    if (arguments.length > 0) {
      cs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return G__32199__delegate.call(this, cs);
  };
  G__32199.cljs$lang$maxFixedArity = 0;
  G__32199.cljs$lang$applyTo = function(arglist__32200) {
    var cs = cljs.core.seq(arglist__32200);
    return G__32199__delegate(cs);
  };
  G__32199.cljs$core$IFn$_invoke$arity$variadic = G__32199__delegate;
  return G__32199;
}(), cljs.core.hash_map, function() {
  var G__32201__delegate = function(rest__32196_SHARP_) {
    if (cljs.core.truth_(instaparse.abnf._STAR_case_insensitive_STAR_)) {
      return instaparse.combinators_source.nt.call(null, cljs.core.keyword.call(null, clojure.string.upper_case.call(null, cljs.core.apply.call(null, cljs.core.str, rest__32196_SHARP_))));
    } else {
      return instaparse.combinators_source.nt.call(null, cljs.core.keyword.call(null, cljs.core.apply.call(null, cljs.core.str, rest__32196_SHARP_)));
    }
  };
  var G__32201 = function(var_args) {
    var rest__32196_SHARP_ = null;
    if (arguments.length > 0) {
      rest__32196_SHARP_ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return G__32201__delegate.call(this, rest__32196_SHARP_);
  };
  G__32201.cljs$lang$maxFixedArity = 0;
  G__32201.cljs$lang$applyTo = function(arglist__32202) {
    var rest__32196_SHARP_ = cljs.core.seq(arglist__32202);
    return G__32201__delegate(rest__32196_SHARP_);
  };
  G__32201.cljs$core$IFn$_invoke$arity$variadic = G__32201__delegate;
  return G__32201;
}(), function() {
  var G__32203__delegate = function(rest__32197_SHARP_) {
    return parseInt(cljs.core.apply.call(null, cljs.core.str, rest__32197_SHARP_));
  };
  var G__32203 = function(var_args) {
    var rest__32197_SHARP_ = null;
    if (arguments.length > 0) {
      rest__32197_SHARP_ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return G__32203__delegate.call(this, rest__32197_SHARP_);
  };
  G__32203.cljs$lang$maxFixedArity = 0;
  G__32203.cljs$lang$applyTo = function(arglist__32204) {
    var rest__32197_SHARP_ = cljs.core.seq(arglist__32204);
    return G__32203__delegate(rest__32197_SHARP_);
  };
  G__32203.cljs$core$IFn$_invoke$arity$variadic = G__32203__delegate;
  return G__32203;
}(), function() {
  var G__32205__delegate = function(cs) {
    return instaparse.combinators_source.string_ci.call(null, cljs.core.apply.call(null, cljs.core.str, cs));
  };
  var G__32205 = function(var_args) {
    var cs = null;
    if (arguments.length > 0) {
      cs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return G__32205__delegate.call(this, cs);
  };
  G__32205.cljs$lang$maxFixedArity = 0;
  G__32205.cljs$lang$applyTo = function(arglist__32206) {
    var cs = cljs.core.seq(arglist__32206);
    return G__32205__delegate(cs);
  };
  G__32205.cljs$core$IFn$_invoke$arity$variadic = G__32205__delegate;
  return G__32205;
}(), instaparse.combinators_source.hide, instaparse.combinators_source.opt, function() {
  var G__32207__delegate = function(cs) {
    return parseInt(cljs.core.apply.call(null, cljs.core.str, cs), 16);
  };
  var G__32207 = function(var_args) {
    var cs = null;
    if (arguments.length > 0) {
      cs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return G__32207__delegate.call(this, cs);
  };
  G__32207.cljs$lang$maxFixedArity = 0;
  G__32207.cljs$lang$applyTo = function(arglist__32208) {
    var cs = cljs.core.seq(arglist__32208);
    return G__32207__delegate(cs);
  };
  G__32207.cljs$core$IFn$_invoke$arity$variadic = G__32207__delegate;
  return G__32207;
}(), instaparse.abnf.get_char_combinator, instaparse.abnf.get_char_combinator, instaparse.combinators_source.cat, instaparse.combinators_source.alt, cljs.core.comp.call(null, instaparse.combinators_source.regexp, instaparse.cfg.process_regexp), function() {
  var G__32209 = null;
  var G__32209__1 = function(element) {
    return element;
  };
  var G__32209__2 = function(repeat, element) {
    if (cljs.core.empty_QMARK_.call(null, repeat)) {
      return instaparse.combinators_source.star.call(null, element);
    } else {
      if (cljs.core._EQ_.call(null, cljs.core.count.call(null, repeat), 2)) {
        return instaparse.combinators_source.rep.call(null, (new cljs.core.Keyword(null, "low", "low", -1601362409)).cljs$core$IFn$_invoke$arity$1(repeat), (new cljs.core.Keyword(null, "high", "high", 2027297808)).cljs$core$IFn$_invoke$arity$1(repeat), element);
      } else {
        if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "low", "low", -1601362409)).cljs$core$IFn$_invoke$arity$1(repeat), 1)) {
          return instaparse.combinators_source.plus.call(null, element);
        } else {
          if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "high", "high", 2027297808)).cljs$core$IFn$_invoke$arity$1(repeat), 1)) {
            return instaparse.combinators_source.opt.call(null, element);
          } else {
            return instaparse.combinators_source.rep.call(null, function() {
              var or__3640__auto__ = (new cljs.core.Keyword(null, "low", "low", -1601362409)).cljs$core$IFn$_invoke$arity$1(repeat);
              if (cljs.core.truth_(or__3640__auto__)) {
                return or__3640__auto__;
              } else {
                return 0;
              }
            }(), function() {
              var or__3640__auto__ = (new cljs.core.Keyword(null, "high", "high", 2027297808)).cljs$core$IFn$_invoke$arity$1(repeat);
              if (cljs.core.truth_(or__3640__auto__)) {
                return or__3640__auto__;
              } else {
                return Infinity;
              }
            }(), element);
          }
        }
      }
    }
  };
  G__32209 = function(repeat, element) {
    switch(arguments.length) {
      case 1:
        return G__32209__1.call(this, repeat);
      case 2:
        return G__32209__2.call(this, repeat, element);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__32209.cljs$core$IFn$_invoke$arity$1 = G__32209__1;
  G__32209.cljs$core$IFn$_invoke$arity$2 = G__32209__2;
  return G__32209;
}(), function() {
  var G__32210__delegate = function(rest__32195_SHARP_) {
    if (cljs.core.truth_(instaparse.abnf._STAR_case_insensitive_STAR_)) {
      return cljs.core.keyword.call(null, clojure.string.upper_case.call(null, cljs.core.apply.call(null, cljs.core.str, rest__32195_SHARP_)));
    } else {
      return cljs.core.keyword.call(null, cljs.core.apply.call(null, cljs.core.str, rest__32195_SHARP_));
    }
  };
  var G__32210 = function(var_args) {
    var rest__32195_SHARP_ = null;
    if (arguments.length > 0) {
      rest__32195_SHARP_ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return G__32210__delegate.call(this, rest__32195_SHARP_);
  };
  G__32210.cljs$lang$maxFixedArity = 0;
  G__32210.cljs$lang$applyTo = function(arglist__32211) {
    var rest__32195_SHARP_ = cljs.core.seq(arglist__32211);
    return G__32210__delegate(rest__32195_SHARP_);
  };
  G__32210.cljs$core$IFn$_invoke$arity$variadic = G__32210__delegate;
  return G__32210;
}(), function() {
  var G__32212__delegate = function(items) {
    var G__32198 = cljs.core.count.call(null, items);
    switch(G__32198) {
      case 1:
        if (cljs.core._EQ_.call(null, cljs.core.first.call(null, items), "*")) {
          return cljs.core.PersistentArrayMap.EMPTY;
        } else {
          return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "low", "low", -1601362409), cljs.core.first.call(null, items), new cljs.core.Keyword(null, "high", "high", 2027297808), cljs.core.first.call(null, items)], null);
        }
        break;
      case 2:
        if (cljs.core._EQ_.call(null, cljs.core.first.call(null, items), "*")) {
          return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "high", "high", 2027297808), cljs.core.second.call(null, items)], null);
        } else {
          return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "low", "low", -1601362409), cljs.core.first.call(null, items)], null);
        }
        break;
      case 3:
        return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "low", "low", -1601362409), cljs.core.first.call(null, items), new cljs.core.Keyword(null, "high", "high", 2027297808), cljs.core.nth.call(null, items, 2)], null);
        break;
      default:
        throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.count.call(null, items)));;
    }
  };
  var G__32212 = function(var_args) {
    var items = null;
    if (arguments.length > 0) {
      items = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return G__32212__delegate.call(this, items);
  };
  G__32212.cljs$lang$maxFixedArity = 0;
  G__32212.cljs$lang$applyTo = function(arglist__32214) {
    var items = cljs.core.seq(arglist__32214);
    return G__32212__delegate(items);
  };
  G__32212.cljs$core$IFn$_invoke$arity$variadic = G__32212__delegate;
  return G__32212;
}(), instaparse.abnf.get_char_combinator, function() {
  var G__32215__delegate = function(cs) {
    return parseInt(cljs.core.apply.call(null, cljs.core.str, cs));
  };
  var G__32215 = function(var_args) {
    var cs = null;
    if (arguments.length > 0) {
      cs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return G__32215__delegate.call(this, cs);
  };
  G__32215.cljs$lang$maxFixedArity = 0;
  G__32215.cljs$lang$applyTo = function(arglist__32216) {
    var cs = cljs.core.seq(arglist__32216);
    return G__32215__delegate(cs);
  };
  G__32215.cljs$core$IFn$_invoke$arity$variadic = G__32215__delegate;
  return G__32215;
}()]);
instaparse.abnf.abnf_parser = instaparse.reduction.apply_standard_reductions.call(null, new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), instaparse.cfg.ebnf.call(null, instaparse.abnf.abnf_grammar));
instaparse.abnf.rules__GT_grammar_map = function rules__GT_grammar_map(rules) {
  return instaparse.abnf.merge_core.call(null, cljs.core.apply.call(null, cljs.core.merge_with, instaparse.abnf.alt_preserving_hide_tag, rules));
};
instaparse.abnf.abnf = function abnf(spec) {
  if (cljs.core.truth_(cljs.core.re_find.call(null, /=/, spec))) {
    var rule_tree = instaparse.gll.parse.call(null, instaparse.abnf.abnf_parser, new cljs.core.Keyword(null, "rulelist", "rulelist", -1871218473), spec, false);
    if (rule_tree instanceof instaparse.gll.Failure) {
      throw "Error parsing grammar specification:\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
        var sb__4581__auto__ = new goog.string.StringBuffer;
        var _STAR_print_fn_STAR_32219_32221 = cljs.core._STAR_print_fn_STAR_;
        try {
          cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_fn_STAR_32219_32221, sb__4581__auto__, rule_tree) {
            return function(x__4582__auto__) {
              return sb__4581__auto__.append(x__4582__auto__);
            };
          }(_STAR_print_fn_STAR_32219_32221, sb__4581__auto__, rule_tree);
          cljs.core.println.call(null, rule_tree);
        } finally {
          cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_32219_32221;
        }
        return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4581__auto__);
      }());
    } else {
      return instaparse.abnf.rules__GT_grammar_map.call(null, instaparse.transform.transform.call(null, instaparse.abnf.abnf_transformer, rule_tree));
    }
  } else {
    var rhs_tree = instaparse.gll.parse.call(null, instaparse.abnf.abnf_parser, new cljs.core.Keyword(null, "alternation", "alternation", -1162147630), spec, false);
    if (rhs_tree instanceof instaparse.gll.Failure) {
      throw "Error parsing grammar specification:\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
        var sb__4581__auto__ = new goog.string.StringBuffer;
        var _STAR_print_fn_STAR_32220_32222 = cljs.core._STAR_print_fn_STAR_;
        try {
          cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_fn_STAR_32220_32222, sb__4581__auto__, rhs_tree) {
            return function(x__4582__auto__) {
              return sb__4581__auto__.append(x__4582__auto__);
            };
          }(_STAR_print_fn_STAR_32220_32222, sb__4581__auto__, rhs_tree);
          cljs.core.println.call(null, rhs_tree);
        } finally {
          cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_32220_32222;
        }
        return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4581__auto__);
      }());
    } else {
      return instaparse.transform.transform.call(null, instaparse.abnf.abnf_transformer, rhs_tree);
    }
  }
};
instaparse.abnf.build_parser = function build_parser(spec, output_format) {
  var rule_tree = instaparse.gll.parse.call(null, instaparse.abnf.abnf_parser, new cljs.core.Keyword(null, "rulelist", "rulelist", -1871218473), spec, false);
  if (rule_tree instanceof instaparse.gll.Failure) {
    throw "Error parsing grammar specification:\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
      var sb__4581__auto__ = new goog.string.StringBuffer;
      var _STAR_print_fn_STAR_32224_32225 = cljs.core._STAR_print_fn_STAR_;
      try {
        cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_fn_STAR_32224_32225, sb__4581__auto__, rule_tree) {
          return function(x__4582__auto__) {
            return sb__4581__auto__.append(x__4582__auto__);
          };
        }(_STAR_print_fn_STAR_32224_32225, sb__4581__auto__, rule_tree);
        cljs.core.println.call(null, rule_tree);
      } finally {
        cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_32224_32225;
      }
      return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4581__auto__);
    }());
  } else {
    var rules = instaparse.transform.transform.call(null, instaparse.abnf.abnf_transformer, rule_tree);
    var grammar_map = instaparse.abnf.rules__GT_grammar_map.call(null, rules);
    var start_production = cljs.core.first.call(null, cljs.core.first.call(null, cljs.core.first.call(null, rules)));
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), instaparse.cfg.check_grammar.call(null, instaparse.reduction.apply_standard_reductions.call(null, output_format, grammar_map)), new cljs.core.Keyword(null, "start-production", "start-production", 687546537), start_production, new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), output_format], null);
  }
};
goog.provide("instaparse.viz");
goog.require("cljs.core");
instaparse.viz.span = function span(tree) {
  var m = cljs.core.meta.call(null, tree);
  var s = (new cljs.core.Keyword("instaparse.gll", "start-index", "instaparse.gll/start-index", 404653620)).cljs$core$IFn$_invoke$arity$1(m);
  var e = (new cljs.core.Keyword("instaparse.gll", "end-index", "instaparse.gll/end-index", -1851404441)).cljs$core$IFn$_invoke$arity$1(m);
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = s;
    if (cljs.core.truth_(and__3628__auto__)) {
      return e;
    } else {
      return and__3628__auto__;
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [s, e], null);
  } else {
    return null;
  }
};
goog.provide("instaparse.repeat");
goog.require("cljs.core");
goog.require("instaparse.combinators_source");
goog.require("instaparse.auto_flatten_seq");
goog.require("instaparse.viz");
goog.require("instaparse.gll");
goog.require("instaparse.reduction");
goog.require("instaparse.auto_flatten_seq");
goog.require("instaparse.failure");
goog.require("instaparse.combinators_source");
goog.require("instaparse.gll");
goog.require("instaparse.failure");
goog.require("instaparse.reduction");
goog.require("instaparse.viz");
instaparse.repeat.empty_result_QMARK_ = function empty_result_QMARK_(result) {
  return cljs.core.vector_QMARK_.call(null, result) && cljs.core._EQ_.call(null, cljs.core.count.call(null, result), 1) || cljs.core.map_QMARK_.call(null, result) && cljs.core.contains_QMARK_.call(null, result, new cljs.core.Keyword(null, "tag", "tag", -1290361223)) && cljs.core.empty_QMARK_.call(null, cljs.core.get.call(null, result, new cljs.core.Keyword(null, "content", "content", 15833224))) || cljs.core.empty_QMARK_.call(null, result);
};
instaparse.repeat.failure_signal = instaparse.gll.__GT_Failure.call(null, null, null);
instaparse.repeat.get_end = function() {
  var get_end = null;
  var get_end__1 = function(parse) {
    var vec__31819 = instaparse.viz.span.call(null, parse);
    var start = cljs.core.nth.call(null, vec__31819, 0, null);
    var end = cljs.core.nth.call(null, vec__31819, 1, null);
    if (cljs.core.truth_(end)) {
      return cljs.core.long$.call(null, end);
    } else {
      return cljs.core.count.call(null, parse);
    }
  };
  var get_end__2 = function(parse, index) {
    var vec__31820 = instaparse.viz.span.call(null, parse);
    var start = cljs.core.nth.call(null, vec__31820, 0, null);
    var end = cljs.core.nth.call(null, vec__31820, 1, null);
    if (cljs.core.truth_(end)) {
      return cljs.core.long$.call(null, end);
    } else {
      return index + cljs.core.count.call(null, parse);
    }
  };
  get_end = function(parse, index) {
    switch(arguments.length) {
      case 1:
        return get_end__1.call(this, parse);
      case 2:
        return get_end__2.call(this, parse, index);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_end.cljs$core$IFn$_invoke$arity$1 = get_end__1;
  get_end.cljs$core$IFn$_invoke$arity$2 = get_end__2;
  return get_end;
}();
instaparse.repeat.parse_from_index = function parse_from_index(grammar, initial_parser, text, segment, index) {
  var tramp = instaparse.gll.make_tramp.call(null, grammar, text, segment);
  instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, initial_parser], null), instaparse.gll.TopListener.call(null, tramp));
  return instaparse.gll.run.call(null, tramp);
};
instaparse.repeat.select_parse = function select_parse(grammar, initial_parser, text, segment, index, parses) {
  var length = cljs.core.count.call(null, text);
  var parses__$1 = cljs.core.seq.call(null, parses);
  while (true) {
    if (parses__$1) {
      var parse = cljs.core.first.call(null, parses__$1);
      var vec__31822 = instaparse.viz.span.call(null, parse);
      var start = cljs.core.nth.call(null, vec__31822, 0, null);
      var end = cljs.core.nth.call(null, vec__31822, 1, null);
      var end__$1 = cljs.core.truth_(end) ? end : index + cljs.core.count.call(null, parse);
      if (cljs.core._EQ_.call(null, end__$1, length)) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [parse, end__$1, null], null);
      } else {
        var temp__4124__auto__ = cljs.core.seq.call(null, instaparse.repeat.parse_from_index.call(null, grammar, initial_parser, text, segment, end__$1));
        if (temp__4124__auto__) {
          var follow_ups = temp__4124__auto__;
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [parse, end__$1, follow_ups], null);
        } else {
          var G__31823 = cljs.core.next.call(null, parses__$1);
          parses__$1 = G__31823;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
instaparse.repeat.repeat_parse_hiccup = function() {
  var repeat_parse_hiccup = null;
  var repeat_parse_hiccup__5 = function(grammar, initial_parser, root_tag, text, segment) {
    return repeat_parse_hiccup.call(null, grammar, initial_parser, root_tag, text, segment, 0);
  };
  var repeat_parse_hiccup__6 = function(grammar, initial_parser, root_tag, text, segment, index) {
    var length = cljs.core.count.call(null, text);
    var first_result = instaparse.repeat.parse_from_index.call(null, grammar, initial_parser, text, segment, index);
    var index__$1 = cljs.core.long$.call(null, index);
    var parses = instaparse.auto_flatten_seq.auto_flatten_seq.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [root_tag], null));
    var G__31829 = instaparse.repeat.select_parse.call(null, grammar, initial_parser, text, segment, index__$1, first_result);
    var vec__31830 = G__31829;
    var parse = cljs.core.nth.call(null, vec__31830, 0, null);
    var end = cljs.core.nth.call(null, vec__31830, 1, null);
    var follow_ups = cljs.core.nth.call(null, vec__31830, 2, null);
    var selection = vec__31830;
    var index__$2 = index__$1;
    var parses__$1 = parses;
    var G__31829__$1 = G__31829;
    while (true) {
      var index__$3 = index__$2;
      var parses__$2 = parses__$1;
      var vec__31831 = G__31829__$1;
      var parse__$1 = cljs.core.nth.call(null, vec__31831, 0, null);
      var end__$1 = cljs.core.nth.call(null, vec__31831, 1, null);
      var follow_ups__$1 = cljs.core.nth.call(null, vec__31831, 2, null);
      var selection__$1 = vec__31831;
      if (selection__$1 == null) {
        return instaparse.repeat.failure_signal;
      } else {
        if (cljs.core._EQ_.call(null, index__$3, end__$1)) {
          return instaparse.repeat.failure_signal;
        } else {
          if (follow_ups__$1 == null) {
            return instaparse.gll.safe_with_meta.call(null, instaparse.auto_flatten_seq.convert_afs_to_vec.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, parses__$2, parse__$1)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optimize", "optimize", -1912349448), new cljs.core.Keyword(null, "memory", "memory", -1449401430), new cljs.core.Keyword("instaparse.gll", "start-index", "instaparse.gll/start-index", 404653620), 0, new cljs.core.Keyword("instaparse.gll", 
            "end-index", "instaparse.gll/end-index", -1851404441), length], null));
          } else {
            var G__31832 = cljs.core.long$.call(null, end__$1);
            var G__31833 = instaparse.auto_flatten_seq.conj_flat.call(null, parses__$2, parse__$1);
            var G__31834 = instaparse.repeat.select_parse.call(null, grammar, initial_parser, text, segment, end__$1, follow_ups__$1);
            index__$2 = G__31832;
            parses__$1 = G__31833;
            G__31829__$1 = G__31834;
            continue;
          }
        }
      }
      break;
    }
  };
  repeat_parse_hiccup = function(grammar, initial_parser, root_tag, text, segment, index) {
    switch(arguments.length) {
      case 5:
        return repeat_parse_hiccup__5.call(this, grammar, initial_parser, root_tag, text, segment);
      case 6:
        return repeat_parse_hiccup__6.call(this, grammar, initial_parser, root_tag, text, segment, index);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat_parse_hiccup.cljs$core$IFn$_invoke$arity$5 = repeat_parse_hiccup__5;
  repeat_parse_hiccup.cljs$core$IFn$_invoke$arity$6 = repeat_parse_hiccup__6;
  return repeat_parse_hiccup;
}();
instaparse.repeat.repeat_parse_enlive = function() {
  var repeat_parse_enlive = null;
  var repeat_parse_enlive__5 = function(grammar, initial_parser, root_tag, text, segment) {
    return repeat_parse_enlive.call(null, grammar, initial_parser, root_tag, text, segment, 0);
  };
  var repeat_parse_enlive__6 = function(grammar, initial_parser, root_tag, text, segment, index) {
    var length = cljs.core.count.call(null, text);
    var first_result = instaparse.repeat.parse_from_index.call(null, grammar, initial_parser, text, segment, index);
    var index__$1 = cljs.core.long$.call(null, index);
    var parses = instaparse.auto_flatten_seq.EMPTY;
    var G__31840 = instaparse.repeat.select_parse.call(null, grammar, initial_parser, text, segment, index__$1, first_result);
    var vec__31841 = G__31840;
    var parse = cljs.core.nth.call(null, vec__31841, 0, null);
    var end = cljs.core.nth.call(null, vec__31841, 1, null);
    var follow_ups = cljs.core.nth.call(null, vec__31841, 2, null);
    var selection = vec__31841;
    var index__$2 = index__$1;
    var parses__$1 = parses;
    var G__31840__$1 = G__31840;
    while (true) {
      var index__$3 = index__$2;
      var parses__$2 = parses__$1;
      var vec__31842 = G__31840__$1;
      var parse__$1 = cljs.core.nth.call(null, vec__31842, 0, null);
      var end__$1 = cljs.core.nth.call(null, vec__31842, 1, null);
      var follow_ups__$1 = cljs.core.nth.call(null, vec__31842, 2, null);
      var selection__$1 = vec__31842;
      if (selection__$1 == null) {
        return instaparse.repeat.failure_signal;
      } else {
        if (cljs.core._EQ_.call(null, index__$3, end__$1)) {
          return instaparse.repeat.failure_signal;
        } else {
          if (follow_ups__$1 == null) {
            return instaparse.gll.safe_with_meta.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), root_tag, new cljs.core.Keyword(null, "content", "content", 15833224), cljs.core.seq.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, parses__$2, parse__$1))], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optimize", "optimize", -1912349448), new cljs.core.Keyword(null, "memory", "memory", -1449401430), 
            new cljs.core.Keyword("instaparse.gll", "start-index", "instaparse.gll/start-index", 404653620), 0, new cljs.core.Keyword("instaparse.gll", "end-index", "instaparse.gll/end-index", -1851404441), length], null));
          } else {
            var G__31843 = cljs.core.long$.call(null, end__$1);
            var G__31844 = instaparse.auto_flatten_seq.conj_flat.call(null, parses__$2, parse__$1);
            var G__31845 = instaparse.repeat.select_parse.call(null, grammar, initial_parser, text, segment, end__$1, follow_ups__$1);
            index__$2 = G__31843;
            parses__$1 = G__31844;
            G__31840__$1 = G__31845;
            continue;
          }
        }
      }
      break;
    }
  };
  repeat_parse_enlive = function(grammar, initial_parser, root_tag, text, segment, index) {
    switch(arguments.length) {
      case 5:
        return repeat_parse_enlive__5.call(this, grammar, initial_parser, root_tag, text, segment);
      case 6:
        return repeat_parse_enlive__6.call(this, grammar, initial_parser, root_tag, text, segment, index);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat_parse_enlive.cljs$core$IFn$_invoke$arity$5 = repeat_parse_enlive__5;
  repeat_parse_enlive.cljs$core$IFn$_invoke$arity$6 = repeat_parse_enlive__6;
  return repeat_parse_enlive;
}();
instaparse.repeat.repeat_parse_no_tag = function() {
  var repeat_parse_no_tag = null;
  var repeat_parse_no_tag__4 = function(grammar, initial_parser, text, segment) {
    return repeat_parse_no_tag.call(null, grammar, initial_parser, text, segment, 0);
  };
  var repeat_parse_no_tag__5 = function(grammar, initial_parser, text, segment, index) {
    var length = cljs.core.count.call(null, text);
    var first_result = instaparse.repeat.parse_from_index.call(null, grammar, initial_parser, text, segment, index);
    var index__$1 = cljs.core.long$.call(null, index);
    var parses = instaparse.auto_flatten_seq.EMPTY;
    var G__31851 = instaparse.repeat.select_parse.call(null, grammar, initial_parser, text, segment, index__$1, first_result);
    var vec__31852 = G__31851;
    var parse = cljs.core.nth.call(null, vec__31852, 0, null);
    var end = cljs.core.nth.call(null, vec__31852, 1, null);
    var follow_ups = cljs.core.nth.call(null, vec__31852, 2, null);
    var selection = vec__31852;
    var index__$2 = index__$1;
    var parses__$1 = parses;
    var G__31851__$1 = G__31851;
    while (true) {
      var index__$3 = index__$2;
      var parses__$2 = parses__$1;
      var vec__31853 = G__31851__$1;
      var parse__$1 = cljs.core.nth.call(null, vec__31853, 0, null);
      var end__$1 = cljs.core.nth.call(null, vec__31853, 1, null);
      var follow_ups__$1 = cljs.core.nth.call(null, vec__31853, 2, null);
      var selection__$1 = vec__31853;
      if (selection__$1 == null) {
        return instaparse.repeat.failure_signal;
      } else {
        if (cljs.core._EQ_.call(null, index__$3, end__$1)) {
          return instaparse.repeat.failure_signal;
        } else {
          if (follow_ups__$1 == null) {
            return instaparse.gll.safe_with_meta.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, parses__$2, parse__$1), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optimize", "optimize", -1912349448), new cljs.core.Keyword(null, "memory", "memory", -1449401430), new cljs.core.Keyword("instaparse.gll", "start-index", "instaparse.gll/start-index", 404653620), 0, new cljs.core.Keyword("instaparse.gll", "end-index", "instaparse.gll/end-index", -1851404441), length], 
            null));
          } else {
            var G__31854 = cljs.core.long$.call(null, end__$1);
            var G__31855 = instaparse.auto_flatten_seq.conj_flat.call(null, parses__$2, parse__$1);
            var G__31856 = instaparse.repeat.select_parse.call(null, grammar, initial_parser, text, segment, end__$1, follow_ups__$1);
            index__$2 = G__31854;
            parses__$1 = G__31855;
            G__31851__$1 = G__31856;
            continue;
          }
        }
      }
      break;
    }
  };
  repeat_parse_no_tag = function(grammar, initial_parser, text, segment, index) {
    switch(arguments.length) {
      case 4:
        return repeat_parse_no_tag__4.call(this, grammar, initial_parser, text, segment);
      case 5:
        return repeat_parse_no_tag__5.call(this, grammar, initial_parser, text, segment, index);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat_parse_no_tag.cljs$core$IFn$_invoke$arity$4 = repeat_parse_no_tag__4;
  repeat_parse_no_tag.cljs$core$IFn$_invoke$arity$5 = repeat_parse_no_tag__5;
  return repeat_parse_no_tag;
}();
instaparse.repeat.repeat_parse = function() {
  var repeat_parse = null;
  var repeat_parse__4 = function(grammar, initial_parser, output_format, text) {
    return instaparse.repeat.repeat_parse_no_tag.call(null, grammar, initial_parser, text, instaparse.gll.string__GT_segment.call(null, text));
  };
  var repeat_parse__5 = function(grammar, initial_parser, output_format, root_tag, text) {
    if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), null, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), null], null), null)).call(null, output_format))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), null, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), null], null), null), new cljs.core.Symbol(null, "output-format", "output-format", -185851149, null)))));
    }
    if (cljs.core._EQ_.call(null, output_format, new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238))) {
      return instaparse.repeat.repeat_parse_hiccup.call(null, grammar, initial_parser, root_tag, text, instaparse.gll.string__GT_segment.call(null, text));
    } else {
      if (cljs.core._EQ_.call(null, output_format, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921))) {
        return instaparse.repeat.repeat_parse_enlive.call(null, grammar, initial_parser, root_tag, text, instaparse.gll.string__GT_segment.call(null, text));
      } else {
        return null;
      }
    }
  };
  repeat_parse = function(grammar, initial_parser, output_format, root_tag, text) {
    switch(arguments.length) {
      case 4:
        return repeat_parse__4.call(this, grammar, initial_parser, output_format, root_tag);
      case 5:
        return repeat_parse__5.call(this, grammar, initial_parser, output_format, root_tag, text);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat_parse.cljs$core$IFn$_invoke$arity$4 = repeat_parse__4;
  repeat_parse.cljs$core$IFn$_invoke$arity$5 = repeat_parse__5;
  return repeat_parse;
}();
instaparse.repeat.repeat_parse_with_header = function repeat_parse_with_header(grammar, header_parser, repeating_parser, output_format, root_tag, text) {
  var segment = instaparse.gll.string__GT_segment.call(null, text);
  var length = cljs.core.count.call(null, text);
  var header_results = instaparse.repeat.parse_from_index.call(null, grammar, header_parser, text, segment, 0);
  if (cljs.core.truth_(function() {
    var or__3640__auto__ = cljs.core.empty_QMARK_.call(null, header_results);
    if (or__3640__auto__) {
      return or__3640__auto__;
    } else {
      return(new cljs.core.Keyword(null, "hide", "hide", -596913169)).cljs$core$IFn$_invoke$arity$1(header_parser);
    }
  }())) {
    return instaparse.repeat.failure_signal;
  } else {
    var header_result = cljs.core.apply.call(null, cljs.core.max_key, instaparse.repeat.get_end, header_results);
    var end = instaparse.repeat.get_end.call(null, header_result);
    var repeat_result = instaparse.repeat.repeat_parse_no_tag.call(null, grammar, (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(repeating_parser), text, segment, end);
    var span_meta = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optimize", "optimize", -1912349448), new cljs.core.Keyword(null, "memory", "memory", -1449401430), new cljs.core.Keyword("instaparse.gll", "start-index", "instaparse.gll/start-index", 404653620), 0, new cljs.core.Keyword("instaparse.gll", "end-index", "instaparse.gll/end-index", -1851404441), length], null);
    if (repeat_result instanceof instaparse.gll.Failure || cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(repeating_parser), new cljs.core.Keyword(null, "star", "star", 279424429)) && instaparse.repeat.empty_result_QMARK_.call(null, repeat_result)) {
      return instaparse.repeat.failure_signal;
    } else {
      var G__31858 = output_format instanceof cljs.core.Keyword ? output_format.fqn : null;
      switch(G__31858) {
        case "hiccup":
          return instaparse.gll.safe_with_meta.call(null, instaparse.auto_flatten_seq.convert_afs_to_vec.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.auto_flatten_seq.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [root_tag], null)), header_result), repeat_result)), span_meta);
          break;
        case "enlive":
          return instaparse.gll.safe_with_meta.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), root_tag, new cljs.core.Keyword(null, "content", "content", 15833224), instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.EMPTY, header_result), repeat_result)], null), span_meta);
          break;
        default:
          return instaparse.gll.safe_with_meta.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.EMPTY, header_result), repeat_result), span_meta);
      }
    }
  }
};
instaparse.repeat.try_repeating_parse_strategy_with_header = function try_repeating_parse_strategy_with_header(grammar, text, start_production, start_rule, output_format) {
  var parsers = (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(start_rule);
  var repeating_parser = cljs.core.last.call(null, parsers);
  if (cljs.core.not.call(null, function() {
    var and__3628__auto__ = cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(start_rule), new cljs.core.Keyword(null, "cat", "cat", -1457810207));
    if (and__3628__auto__) {
      var and__3628__auto____$1 = (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "star", "star", 279424429), null, new cljs.core.Keyword(null, "plus", "plus", 211540661), null], null), null)).call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(repeating_parser));
      if (cljs.core.truth_(and__3628__auto____$1)) {
        return cljs.core.not.call(null, (new cljs.core.Keyword(null, "hide", "hide", -596913169)).cljs$core$IFn$_invoke$arity$1(repeating_parser)) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "hide", "hide", -596913169)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(repeating_parser)));
      } else {
        return and__3628__auto____$1;
      }
    } else {
      return and__3628__auto__;
    }
  }())) {
    return instaparse.repeat.failure_signal;
  } else {
    var header_parser = cljs.core.apply.call(null, instaparse.combinators_source.cat, cljs.core.butlast.call(null, parsers));
    if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(start_rule), instaparse.reduction.raw_non_terminal_reduction)) {
      return instaparse.repeat.repeat_parse_with_header.call(null, grammar, header_parser, repeating_parser, null, start_production, text);
    } else {
      return instaparse.repeat.repeat_parse_with_header.call(null, grammar, header_parser, repeating_parser, output_format, start_production, text);
    }
  }
};
instaparse.repeat.try_repeating_parse_strategy = function try_repeating_parse_strategy(parser, text, start_production) {
  var grammar = (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser);
  var output_format = (new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)).cljs$core$IFn$_invoke$arity$1(parser);
  var start_rule = cljs.core.get.call(null, grammar, start_production);
  if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "hide", "hide", -596913169)).cljs$core$IFn$_invoke$arity$1(start_rule), true)) {
    return instaparse.repeat.failure_signal;
  } else {
    if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(start_rule), instaparse.reduction.raw_non_terminal_reduction)) {
      if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(start_rule), new cljs.core.Keyword(null, "star", "star", 279424429))) {
        return instaparse.repeat.repeat_parse.call(null, grammar, (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(start_rule), output_format, text);
      } else {
        if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(start_rule), new cljs.core.Keyword(null, "plus", "plus", 211540661))) {
          var result = instaparse.repeat.repeat_parse.call(null, grammar, (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(start_rule), output_format, text);
          if (instaparse.repeat.empty_result_QMARK_.call(null, result)) {
            return instaparse.repeat.failure_signal;
          } else {
            return result;
          }
        } else {
          return instaparse.repeat.try_repeating_parse_strategy_with_header.call(null, grammar, text, start_production, start_rule, output_format);
        }
      }
    } else {
      if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(start_rule), new cljs.core.Keyword(null, "star", "star", 279424429))) {
        return instaparse.repeat.repeat_parse.call(null, grammar, (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(start_rule), output_format, start_production, text);
      } else {
        if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(start_rule), new cljs.core.Keyword(null, "plus", "plus", 211540661))) {
          var result = instaparse.repeat.repeat_parse.call(null, grammar, (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(start_rule), output_format, start_production, text);
          if (instaparse.repeat.empty_result_QMARK_.call(null, result)) {
            return instaparse.repeat.failure_signal;
          } else {
            return result;
          }
        } else {
          return instaparse.repeat.try_repeating_parse_strategy_with_header.call(null, grammar, text, start_production, start_rule, output_format);
        }
      }
    }
  }
};
instaparse.repeat.used_memory_optimization_QMARK_ = function used_memory_optimization_QMARK_(tree) {
  return cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "memory", "memory", -1449401430), (new cljs.core.Keyword(null, "optimize", "optimize", -1912349448)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, tree)));
};
goog.provide("instaparse.core");
goog.require("cljs.core");
goog.require("instaparse.transform");
goog.require("instaparse.combinators_source");
goog.require("instaparse.abnf");
goog.require("instaparse.gll");
goog.require("instaparse.print");
goog.require("instaparse.cfg");
goog.require("instaparse.reduction");
goog.require("instaparse.transform");
goog.require("instaparse.cfg");
goog.require("instaparse.abnf");
goog.require("instaparse.failure");
goog.require("instaparse.print");
goog.require("instaparse.combinators_source");
goog.require("instaparse.gll");
goog.require("instaparse.failure");
goog.require("instaparse.reduction");
goog.require("instaparse.repeat");
goog.require("instaparse.repeat");
instaparse.core._STAR_default_output_format_STAR_ = new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238);
instaparse.core.set_default_output_format_BANG_ = function set_default_output_format_BANG_(type) {
  if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), null, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), null], null), null)).call(null, type))) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), null, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), null], null), null), new cljs.core.Symbol(null, "type", "type", -1480165421, null)))));
  }
  return instaparse.core._STAR_default_output_format_STAR_ = type;
};
instaparse.core._STAR_default_input_format_STAR_ = new cljs.core.Keyword(null, "ebnf", "ebnf", 31967825);
instaparse.core.set_default_input_format_BANG_ = function set_default_input_format_BANG_(type) {
  if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ebnf", "ebnf", 31967825), null, new cljs.core.Keyword(null, "abnf", "abnf", -152462052), null], null), null)).call(null, type))) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ebnf", "ebnf", 31967825), null, new cljs.core.Keyword(null, "abnf", "abnf", -152462052), null], null), null), new cljs.core.Symbol(null, "type", "type", -1480165421, null)))));
  }
  return instaparse.core._STAR_default_input_format_STAR_ = type;
};
instaparse.core.unhide_parser = function unhide_parser(parser, unhide) {
  var G__31787 = unhide;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "all", "all", 892129742), G__31787)) {
    return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), instaparse.combinators_source.unhide_all.call(null, (new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)).cljs$core$IFn$_invoke$arity$1(parser), (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser)));
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "tags", "tags", 1771418977), G__31787)) {
      return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), instaparse.combinators_source.unhide_tags.call(null, (new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)).cljs$core$IFn$_invoke$arity$1(parser), (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser)));
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "content", "content", 15833224), G__31787)) {
        return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), instaparse.combinators_source.unhide_all_content.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser)));
      } else {
        if (cljs.core._EQ_.call(null, null, G__31787)) {
          return parser;
        } else {
          throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(unhide));
        }
      }
    }
  }
};
instaparse.core.parse = function() {
  var parse__delegate = function(parser, text, p__31788) {
    var map__31790 = p__31788;
    var map__31790__$1 = cljs.core.seq_QMARK_.call(null, map__31790) ? cljs.core.apply.call(null, cljs.core.hash_map, map__31790) : map__31790;
    var options = map__31790__$1;
    if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [null, null, new cljs.core.Keyword(null, "tags", "tags", 1771418977), null, new cljs.core.Keyword(null, "content", "content", 15833224), null, new cljs.core.Keyword(null, "all", "all", 892129742), null], null), null), cljs.core.get.call(null, options, new cljs.core.Keyword(null, "unhide", "unhide", -413983695)))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [null, null, new cljs.core.Keyword(null, "tags", "tags", 1771418977), null, new cljs.core.Keyword(null, "content", "content", 15833224), null, new cljs.core.Keyword(null, "all", "all", 892129742), null], null), null), cljs.core.list(new cljs.core.Symbol(null, 
      "get", "get", -971253014, null), new cljs.core.Symbol(null, "options", "options", 1740170016, null), new cljs.core.Keyword(null, "unhide", "unhide", -413983695))))));
    }
    if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [null, null, new cljs.core.Keyword(null, "memory", "memory", -1449401430), null], null), null), cljs.core.get.call(null, options, new cljs.core.Keyword(null, "optimize", "optimize", -1912349448)))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [null, null, new cljs.core.Keyword(null, "memory", "memory", -1449401430), null], null), null), cljs.core.list(new cljs.core.Symbol(null, "get", "get", -971253014, null), new cljs.core.Symbol(null, "options", "options", 
      1740170016, null), new cljs.core.Keyword(null, "optimize", "optimize", -1912349448))))));
    }
    var start_production = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "start", "start", -355208981), (new cljs.core.Keyword(null, "start-production", "start-production", 687546537)).cljs$core$IFn$_invoke$arity$1(parser));
    var partial_QMARK_ = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "partial", "partial", 241141745), false);
    var optimize_QMARK_ = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "optimize", "optimize", -1912349448), false);
    var unhide = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "unhide", "unhide", -413983695));
    var parser__$1 = instaparse.core.unhide_parser.call(null, parser, unhide);
    if (cljs.core.truth_((new cljs.core.Keyword(null, "total", "total", 1916810418)).cljs$core$IFn$_invoke$arity$1(options))) {
      return instaparse.gll.parse_total.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser__$1), start_production, text, partial_QMARK_, instaparse.reduction.node_builders.call(null, (new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)).cljs$core$IFn$_invoke$arity$1(parser__$1)));
    } else {
      if (cljs.core.truth_(function() {
        var and__3628__auto__ = optimize_QMARK_;
        if (cljs.core.truth_(and__3628__auto__)) {
          return cljs.core.not.call(null, partial_QMARK_);
        } else {
          return and__3628__auto__;
        }
      }())) {
        var result = instaparse.repeat.try_repeating_parse_strategy.call(null, parser__$1, text, start_production);
        if (cljs.core.truth_(instaparse.core.failure_QMARK_.call(null, result))) {
          return instaparse.gll.parse.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser__$1), start_production, text, partial_QMARK_);
        } else {
          return result;
        }
      } else {
        return instaparse.gll.parse.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser__$1), start_production, text, partial_QMARK_);
      }
    }
  };
  var parse = function(parser, text, var_args) {
    var p__31788 = null;
    if (arguments.length > 2) {
      p__31788 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return parse__delegate.call(this, parser, text, p__31788);
  };
  parse.cljs$lang$maxFixedArity = 2;
  parse.cljs$lang$applyTo = function(arglist__31791) {
    var parser = cljs.core.first(arglist__31791);
    arglist__31791 = cljs.core.next(arglist__31791);
    var text = cljs.core.first(arglist__31791);
    var p__31788 = cljs.core.rest(arglist__31791);
    return parse__delegate(parser, text, p__31788);
  };
  parse.cljs$core$IFn$_invoke$arity$variadic = parse__delegate;
  return parse;
}();
instaparse.core.parses = function() {
  var parses__delegate = function(parser, text, p__31792) {
    var map__31794 = p__31792;
    var map__31794__$1 = cljs.core.seq_QMARK_.call(null, map__31794) ? cljs.core.apply.call(null, cljs.core.hash_map, map__31794) : map__31794;
    var options = map__31794__$1;
    if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [null, null, new cljs.core.Keyword(null, "tags", "tags", 1771418977), null, new cljs.core.Keyword(null, "content", "content", 15833224), null, new cljs.core.Keyword(null, "all", "all", 892129742), null], null), null), cljs.core.get.call(null, options, new cljs.core.Keyword(null, "unhide", "unhide", -413983695)))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [null, null, new cljs.core.Keyword(null, "tags", "tags", 1771418977), null, new cljs.core.Keyword(null, "content", "content", 15833224), null, new cljs.core.Keyword(null, "all", "all", 892129742), null], null), null), cljs.core.list(new cljs.core.Symbol(null, 
      "get", "get", -971253014, null), new cljs.core.Symbol(null, "options", "options", 1740170016, null), new cljs.core.Keyword(null, "unhide", "unhide", -413983695))))));
    }
    var start_production = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "start", "start", -355208981), (new cljs.core.Keyword(null, "start-production", "start-production", 687546537)).cljs$core$IFn$_invoke$arity$1(parser));
    var partial_QMARK_ = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "partial", "partial", 241141745), false);
    var unhide = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "unhide", "unhide", -413983695));
    var parser__$1 = instaparse.core.unhide_parser.call(null, parser, unhide);
    if (cljs.core.truth_((new cljs.core.Keyword(null, "total", "total", 1916810418)).cljs$core$IFn$_invoke$arity$1(options))) {
      return instaparse.gll.parses_total.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser__$1), start_production, text, partial_QMARK_, instaparse.reduction.node_builders.call(null, (new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)).cljs$core$IFn$_invoke$arity$1(parser__$1)));
    } else {
      return instaparse.gll.parses.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser__$1), start_production, text, partial_QMARK_);
    }
  };
  var parses = function(parser, text, var_args) {
    var p__31792 = null;
    if (arguments.length > 2) {
      p__31792 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return parses__delegate.call(this, parser, text, p__31792);
  };
  parses.cljs$lang$maxFixedArity = 2;
  parses.cljs$lang$applyTo = function(arglist__31795) {
    var parser = cljs.core.first(arglist__31795);
    arglist__31795 = cljs.core.next(arglist__31795);
    var text = cljs.core.first(arglist__31795);
    var p__31792 = cljs.core.rest(arglist__31795);
    return parses__delegate(parser, text, p__31792);
  };
  parses.cljs$core$IFn$_invoke$arity$variadic = parses__delegate;
  return parses;
}();
instaparse.core.Parser = function(grammar, start_production, output_format, __meta, __extmap) {
  this.grammar = grammar;
  this.start_production = start_production;
  this.output_format = output_format;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667595;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 3) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
instaparse.core.Parser.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4236__auto__, k__4237__auto__) {
  var self__ = this;
  var this__4236__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4236__auto____$1, k__4237__auto__, null);
};
instaparse.core.Parser.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4238__auto__, k31797, else__4239__auto__) {
  var self__ = this;
  var this__4238__auto____$1 = this;
  var G__31800 = k31797 instanceof cljs.core.Keyword ? k31797.fqn : null;
  switch(G__31800) {
    case "output-format":
      return self__.output_format;
      break;
    case "start-production":
      return self__.start_production;
      break;
    case "grammar":
      return self__.grammar;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k31797, else__4239__auto__);
  }
};
instaparse.core.Parser.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4250__auto__, writer__4251__auto__, opts__4252__auto__) {
  var self__ = this;
  var this__4250__auto____$1 = this;
  var pr_pair__4253__auto__ = function(this__4250__auto____$1) {
    return function(keyval__4254__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4251__auto__, cljs.core.pr_writer, "", " ", "", opts__4252__auto__, keyval__4254__auto__);
    };
  }(this__4250__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4251__auto__, pr_pair__4253__auto__, "#instaparse.core.Parser{", ", ", "}", opts__4252__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), self__.grammar], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "start-production", "start-production", 687546537), self__.start_production], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), self__.output_format], null)], null), self__.__extmap));
};
instaparse.core.Parser.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4234__auto__) {
  var self__ = this;
  var this__4234__auto____$1 = this;
  return self__.__meta;
};
instaparse.core.Parser.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4230__auto__) {
  var self__ = this;
  var this__4230__auto____$1 = this;
  return new instaparse.core.Parser(self__.grammar, self__.start_production, self__.output_format, self__.__meta, self__.__extmap, self__.__hash);
};
instaparse.core.Parser.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4240__auto__) {
  var self__ = this;
  var this__4240__auto____$1 = this;
  return 3 + cljs.core.count.call(null, self__.__extmap);
};
instaparse.core.Parser.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4231__auto__) {
  var self__ = this;
  var this__4231__auto____$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_imap.call(null, this__4231__auto____$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
instaparse.core.Parser.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4232__auto__, other__4233__auto__) {
  var self__ = this;
  var this__4232__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = other__4233__auto__;
    if (cljs.core.truth_(and__3628__auto__)) {
      return this__4232__auto____$1.constructor === other__4233__auto__.constructor && cljs.core.equiv_map.call(null, this__4232__auto____$1, other__4233__auto__);
    } else {
      return and__3628__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
instaparse.core.Parser.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4245__auto__, k__4246__auto__) {
  var self__ = this;
  var this__4245__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "start-production", "start-production", 687546537), null, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), null, new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), null], null), null), k__4246__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4245__auto____$1), self__.__meta), k__4246__auto__);
  } else {
    return new instaparse.core.Parser(self__.grammar, self__.start_production, self__.output_format, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4246__auto__)), null);
  }
};
instaparse.core.Parser.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4243__auto__, k__4244__auto__, G__31796) {
  var self__ = this;
  var this__4243__auto____$1 = this;
  var pred__31801 = cljs.core.keyword_identical_QMARK_;
  var expr__31802 = k__4244__auto__;
  if (cljs.core.truth_(pred__31801.call(null, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), expr__31802))) {
    return new instaparse.core.Parser(G__31796, self__.start_production, self__.output_format, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__31801.call(null, new cljs.core.Keyword(null, "start-production", "start-production", 687546537), expr__31802))) {
      return new instaparse.core.Parser(self__.grammar, G__31796, self__.output_format, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__31801.call(null, new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), expr__31802))) {
        return new instaparse.core.Parser(self__.grammar, self__.start_production, G__31796, self__.__meta, self__.__extmap, null);
      } else {
        return new instaparse.core.Parser(self__.grammar, self__.start_production, self__.output_format, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4244__auto__, G__31796), null);
      }
    }
  }
};
instaparse.core.Parser.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4248__auto__) {
  var self__ = this;
  var this__4248__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), self__.grammar], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start-production", "start-production", 687546537), self__.start_production], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), self__.output_format], null)], null), self__.__extmap));
};
instaparse.core.Parser.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4235__auto__, G__31796) {
  var self__ = this;
  var this__4235__auto____$1 = this;
  return new instaparse.core.Parser(self__.grammar, self__.start_production, self__.output_format, G__31796, self__.__extmap, self__.__hash);
};
instaparse.core.Parser.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4241__auto__, entry__4242__auto__) {
  var self__ = this;
  var this__4241__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4242__auto__)) {
    return cljs.core._assoc.call(null, this__4241__auto____$1, cljs.core._nth.call(null, entry__4242__auto__, 0), cljs.core._nth.call(null, entry__4242__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4241__auto____$1, entry__4242__auto__);
  }
};
instaparse.core.Parser.prototype.call = function() {
  var G__31805 = null;
  var G__31805__2 = function(self__, text) {
    var self__ = this;
    var self____$1 = this;
    var parser = self____$1;
    return instaparse.core.parse.call(null, parser, text);
  };
  var G__31805__4 = function(self__, text, key1, val1) {
    var self__ = this;
    var self____$1 = this;
    var parser = self____$1;
    return instaparse.core.parse.call(null, parser, text, key1, val1);
  };
  var G__31805__6 = function(self__, text, key1, val1, key2, val2) {
    var self__ = this;
    var self____$1 = this;
    var parser = self____$1;
    return instaparse.core.parse.call(null, parser, text, key1, val1, key2, val2);
  };
  var G__31805__8 = function(self__, text, key1, val1, key2, val2, key3, val3) {
    var self__ = this;
    var self____$1 = this;
    var parser = self____$1;
    return instaparse.core.parse.call(null, parser, text, key1, val1, key2, val2, key3, val3);
  };
  G__31805 = function(self__, text, key1, val1, key2, val2, key3, val3) {
    switch(arguments.length) {
      case 2:
        return G__31805__2.call(this, self__, text);
      case 4:
        return G__31805__4.call(this, self__, text, key1, val1);
      case 6:
        return G__31805__6.call(this, self__, text, key1, val1, key2, val2);
      case 8:
        return G__31805__8.call(this, self__, text, key1, val1, key2, val2, key3, val3);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__31805.cljs$core$IFn$_invoke$arity$2 = G__31805__2;
  G__31805.cljs$core$IFn$_invoke$arity$4 = G__31805__4;
  G__31805.cljs$core$IFn$_invoke$arity$6 = G__31805__6;
  G__31805.cljs$core$IFn$_invoke$arity$8 = G__31805__8;
  return G__31805;
}();
instaparse.core.Parser.prototype.apply = function(self__, args31799) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args31799)));
};
instaparse.core.Parser.prototype.cljs$core$IFn$_invoke$arity$1 = function(text) {
  var self__ = this;
  var parser = this;
  return instaparse.core.parse.call(null, parser, text);
};
instaparse.core.Parser.prototype.cljs$core$IFn$_invoke$arity$3 = function(text, key1, val1) {
  var self__ = this;
  var parser = this;
  return instaparse.core.parse.call(null, parser, text, key1, val1);
};
instaparse.core.Parser.prototype.cljs$core$IFn$_invoke$arity$5 = function(text, key1, val1, key2, val2) {
  var self__ = this;
  var parser = this;
  return instaparse.core.parse.call(null, parser, text, key1, val1, key2, val2);
};
instaparse.core.Parser.prototype.cljs$core$IFn$_invoke$arity$7 = function(text, key1, val1, key2, val2, key3, val3) {
  var self__ = this;
  var parser = this;
  return instaparse.core.parse.call(null, parser, text, key1, val1, key2, val2, key3, val3);
};
instaparse.core.Parser.cljs$lang$type = true;
instaparse.core.Parser.cljs$lang$ctorPrSeq = function(this__4270__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "instaparse.core/Parser");
};
instaparse.core.Parser.cljs$lang$ctorPrWriter = function(this__4270__auto__, writer__4271__auto__) {
  return cljs.core._write.call(null, writer__4271__auto__, "instaparse.core/Parser");
};
instaparse.core.__GT_Parser = function __GT_Parser(grammar, start_production, output_format) {
  return new instaparse.core.Parser(grammar, start_production, output_format);
};
instaparse.core.map__GT_Parser = function map__GT_Parser(G__31798) {
  return new instaparse.core.Parser((new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(G__31798), (new cljs.core.Keyword(null, "start-production", "start-production", 687546537)).cljs$core$IFn$_invoke$arity$1(G__31798), (new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)).cljs$core$IFn$_invoke$arity$1(G__31798), null, cljs.core.dissoc.call(null, G__31798, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), new cljs.core.Keyword(null, 
  "start-production", "start-production", 687546537), new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)));
};
instaparse.core.Parser.prototype.cljs$core$IPrintWithWriter$ = true;
instaparse.core.Parser.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(parser, writer, _) {
  var parser__$1 = this;
  return cljs.core._write.call(null, writer, instaparse.print.Parser__GT_str.call(null, parser__$1));
};
instaparse.core.parser = function() {
  var parser__delegate = function(grammar_specification, p__31806) {
    var map__31811 = p__31806;
    var map__31811__$1 = cljs.core.seq_QMARK_.call(null, map__31811) ? cljs.core.apply.call(null, cljs.core.hash_map, map__31811) : map__31811;
    var options = map__31811__$1;
    if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [null, null, new cljs.core.Keyword(null, "ebnf", "ebnf", 31967825), null, new cljs.core.Keyword(null, "abnf", "abnf", -152462052), null], null), null), cljs.core.get.call(null, options, new cljs.core.Keyword(null, "input-format", "input-format", -422703481)))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [null, null, new cljs.core.Keyword(null, "ebnf", "ebnf", 31967825), null, new cljs.core.Keyword(null, "abnf", "abnf", -152462052), null], null), null), cljs.core.list(new cljs.core.Symbol(null, "get", "get", -971253014, 
      null), new cljs.core.Symbol(null, "options", "options", 1740170016, null), new cljs.core.Keyword(null, "input-format", "input-format", -422703481))))));
    }
    if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [null, null, new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), null, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), null], null), null), cljs.core.get.call(null, options, new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [null, null, new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), null, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), null], null), null), cljs.core.list(new cljs.core.Symbol(null, "get", "get", -971253014, 
      null), new cljs.core.Symbol(null, "options", "options", 1740170016, null), new cljs.core.Keyword(null, "output-format", "output-format", -1826382676))))));
    }
    if (function() {
      var ws_parser = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "auto-whitespace", "auto-whitespace", 741152317));
      return ws_parser == null || cljs.core.contains_QMARK_.call(null, instaparse.core.standard_whitespace_parsers, ws_parser) || cljs.core.map_QMARK_.call(null, ws_parser) && cljs.core.contains_QMARK_.call(null, ws_parser, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)) && cljs.core.contains_QMARK_.call(null, ws_parser, new cljs.core.Keyword(null, "start-production", "start-production", 687546537));
    }()) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "let", "let", 358118826, null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ws-parser", "ws-parser", 937152647, null), cljs.core.list(new cljs.core.Symbol(null, "get", "get", -971253014, null), new cljs.core.Symbol(null, "options", "options", 1740170016, null), new cljs.core.Keyword(null, 
      "auto-whitespace", "auto-whitespace", 741152317))], null), cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "ws-parser", "ws-parser", 937152647, null)), cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.Symbol(null, "standard-whitespace-parsers", "standard-whitespace-parsers", -1387573457, null), new cljs.core.Symbol(null, 
      "ws-parser", "ws-parser", 937152647, null)), cljs.core.list(new cljs.core.Symbol(null, "and", "and", 668631710, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "ws-parser", "ws-parser", 937152647, null)), cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.Symbol(null, "ws-parser", "ws-parser", 937152647, null), new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)), cljs.core.list(new cljs.core.Symbol(null, 
      "contains?", "contains?", -1676812576, null), new cljs.core.Symbol(null, "ws-parser", "ws-parser", 937152647, null), new cljs.core.Keyword(null, "start-production", "start-production", 687546537))))))));
    }
    var input_format = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "input-format", "input-format", -422703481), instaparse.core._STAR_default_input_format_STAR_);
    var build_parser = function() {
      var G__31812 = input_format instanceof cljs.core.Keyword ? input_format.fqn : null;
      switch(G__31812) {
        case "ebnf":
          if (cljs.core.truth_(cljs.core.get.call(null, options, new cljs.core.Keyword(null, "string-ci", "string-ci", 374631805)))) {
            return function(G__31812, input_format, map__31811, map__31811__$1, options) {
              return function(spec, output_format) {
                var _STAR_case_insensitive_literals_STAR_31813 = instaparse.cfg._STAR_case_insensitive_literals_STAR_;
                try {
                  instaparse.cfg._STAR_case_insensitive_literals_STAR_ = true;
                  return instaparse.cfg.build_parser.call(null, spec, output_format);
                } finally {
                  instaparse.cfg._STAR_case_insensitive_literals_STAR_ = _STAR_case_insensitive_literals_STAR_31813;
                }
              };
            }(G__31812, input_format, map__31811, map__31811__$1, options);
          } else {
            return instaparse.cfg.build_parser;
          }
          break;
        case "abnf":
          return instaparse.abnf.build_parser;
          break;
        default:
          throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(input_format));;
      }
    }();
    var output_format = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), instaparse.core._STAR_default_output_format_STAR_);
    var start = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "start", "start", -355208981), null);
    var built_parser = typeof grammar_specification === "string" ? function() {
      var parser__$1 = build_parser.call(null, grammar_specification, output_format);
      if (cljs.core.truth_(start)) {
        return instaparse.core.map__GT_Parser.call(null, cljs.core.assoc.call(null, parser__$1, new cljs.core.Keyword(null, "start-production", "start-production", 687546537), start));
      } else {
        return instaparse.core.map__GT_Parser.call(null, parser__$1);
      }
    }() : cljs.core.map_QMARK_.call(null, grammar_specification) ? function() {
      var parser__$1 = instaparse.cfg.build_parser_from_combinators.call(null, grammar_specification, output_format, start);
      return instaparse.core.map__GT_Parser.call(null, parser__$1);
    }() : cljs.core.vector_QMARK_.call(null, grammar_specification) ? function() {
      var start__$1 = cljs.core.truth_(start) ? start : grammar_specification.call(null, 0);
      var parser__$1 = instaparse.cfg.build_parser_from_combinators.call(null, cljs.core.apply.call(null, cljs.core.hash_map, grammar_specification), output_format, start__$1);
      return instaparse.core.map__GT_Parser.call(null, parser__$1);
    }() : null;
    var auto_whitespace = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "auto-whitespace", "auto-whitespace", 741152317));
    var whitespace_parser = auto_whitespace instanceof cljs.core.Keyword ? cljs.core.get.call(null, instaparse.core.standard_whitespace_parsers, auto_whitespace) : auto_whitespace;
    var temp__4124__auto__ = whitespace_parser;
    if (cljs.core.truth_(temp__4124__auto__)) {
      var map__31814 = temp__4124__auto__;
      var map__31814__$1 = cljs.core.seq_QMARK_.call(null, map__31814) ? cljs.core.apply.call(null, cljs.core.hash_map, map__31814) : map__31814;
      var ws_grammar = cljs.core.get.call(null, map__31814__$1, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267));
      var ws_start = cljs.core.get.call(null, map__31814__$1, new cljs.core.Keyword(null, "start-production", "start-production", 687546537));
      return cljs.core.assoc.call(null, built_parser, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), instaparse.combinators_source.auto_whitespace.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(built_parser), (new cljs.core.Keyword(null, "start-production", "start-production", 687546537)).cljs$core$IFn$_invoke$arity$1(built_parser), ws_grammar, ws_start));
    } else {
      return built_parser;
    }
  };
  var parser = function(grammar_specification, var_args) {
    var p__31806 = null;
    if (arguments.length > 1) {
      p__31806 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return parser__delegate.call(this, grammar_specification, p__31806);
  };
  parser.cljs$lang$maxFixedArity = 1;
  parser.cljs$lang$applyTo = function(arglist__31816) {
    var grammar_specification = cljs.core.first(arglist__31816);
    var p__31806 = cljs.core.rest(arglist__31816);
    return parser__delegate(grammar_specification, p__31806);
  };
  parser.cljs$core$IFn$_invoke$arity$variadic = parser__delegate;
  return parser;
}();
instaparse.core.failure_QMARK_ = function failure_QMARK_(result) {
  return result instanceof instaparse.gll.Failure || cljs.core.meta.call(null, result) instanceof instaparse.gll.Failure;
};
instaparse.core.get_failure = function get_failure(result) {
  if (result instanceof instaparse.gll.Failure) {
    return result;
  } else {
    if (cljs.core.meta.call(null, result) instanceof instaparse.gll.Failure) {
      return cljs.core.meta.call(null, result);
    } else {
      return null;
    }
  }
};
instaparse.core.transform = instaparse.transform.transform;
instaparse.core.standard_whitespace_parsers = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "standard", "standard", -1769206695), instaparse.core.parser.call(null, "whitespace \x3d #'\\s+'"), new cljs.core.Keyword(null, "comma", "comma", 1699024745), instaparse.core.parser.call(null, "whitespace \x3d #'[,\\s]+'")], null);
goog.provide("cljs.looperscript.interpret");
goog.require("cljs.core");
goog.require("cljs.looperscript.vector_fns");
goog.require("cljs.reader");
goog.require("cljs.looperscript.vector_fns");
goog.require("cljs.looperscript.vector_fns");
goog.require("instaparse.core");
goog.require("instaparse.core");
goog.require("cljs.reader");
cljs.looperscript.interpret.log = function() {
  var log__delegate = function(args) {
    return console.log(cljs.core.apply.call(null, cljs.core.str, args));
  };
  var log = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return log__delegate.call(this, args);
  };
  log.cljs$lang$maxFixedArity = 0;
  log.cljs$lang$applyTo = function(arglist__29795) {
    var args = cljs.core.seq(arglist__29795);
    return log__delegate(args);
  };
  log.cljs$core$IFn$_invoke$arity$variadic = log__delegate;
  return log;
}();
cljs.looperscript.interpret.remove_comments = function remove_comments(s) {
  return clojure.string.join.call(null, "\n", cljs.core.map.call(null, function(p1__29796_SHARP_) {
    return cljs.core.first.call(null, cljs.core.first.call(null, cljs.core.re_seq.call(null, /^([^;]+)/, p1__29796_SHARP_)));
  }, clojure.string.split_lines.call(null, s)));
};
cljs.looperscript.interpret.string__GT_number = function string__GT_number(s) {
  return cljs.reader.read_string.call(null, function() {
    var temp__4124__auto__ = cljs.core.re_find.call(null, /-0*(\.[0-9]+)/, s);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var n = temp__4124__auto__;
      return "-0" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.second.call(null, n));
    } else {
      var temp__4124__auto____$1 = cljs.core.re_find.call(null, /(^\.[0-9]+)/, s);
      if (cljs.core.truth_(temp__4124__auto____$1)) {
        var n = temp__4124__auto____$1;
        return "0" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.second.call(null, n));
      } else {
        var temp__4124__auto____$2 = cljs.core.re_find.call(null, /^0+([0-9][0-9.]+)/, s);
        if (cljs.core.truth_(temp__4124__auto____$2)) {
          var n = temp__4124__auto____$2;
          return cljs.core.last.call(null, n);
        } else {
          var temp__4124__auto____$3 = cljs.core.re_find.call(null, /^-0+([0-9.]+)/, s);
          if (cljs.core.truth_(temp__4124__auto____$3)) {
            var n = temp__4124__auto____$3;
            return "-" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.last.call(null, n));
          } else {
            return s;
          }
        }
      }
    }
  }());
};
cljs.looperscript.interpret.ratio__GT_note = function ratio__GT_note(r) {
  return Math.log.call(null, r) / Math.log.call(null, 2) * 12;
};
cljs.looperscript.interpret.splice = function splice(v) {
  return cljs.core.with_meta.call(null, function() {
    var accum = cljs.core.PersistentVector.EMPTY;
    var rem = v;
    while (true) {
      if (cljs.core.empty_QMARK_.call(null, rem)) {
        return accum;
      } else {
        var n = cljs.core.first.call(null, rem);
        if (cljs.core.vector_QMARK_.call(null, n)) {
          if (cljs.core.truth_((new cljs.core.Keyword(null, "splice", "splice", 449588165)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, n)))) {
            var G__29797 = cljs.core.into.call(null, accum, splice.call(null, n));
            var G__29798 = cljs.core.rest.call(null, rem);
            accum = G__29797;
            rem = G__29798;
            continue;
          } else {
            var G__29799 = cljs.core.conj.call(null, accum, splice.call(null, n));
            var G__29800 = cljs.core.rest.call(null, rem);
            accum = G__29799;
            rem = G__29800;
            continue;
          }
        } else {
          var G__29801 = cljs.core.conj.call(null, accum, n);
          var G__29802 = cljs.core.rest.call(null, rem);
          accum = G__29801;
          rem = G__29802;
          continue;
        }
      }
      break;
    }
  }(), cljs.core.meta.call(null, v));
};
cljs.looperscript.interpret.mark_for_splice = function mark_for_splice(col) {
  return cljs.core.with_meta.call(null, cljs.core.vec.call(null, col), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "splice", "splice", 449588165), true], null));
};
cljs.looperscript.interpret.maybe_process_vec = function maybe_process_vec(x, invade_carots_QMARK_) {
  if (cljs.core.vector_QMARK_.call(null, x)) {
    return cljs.looperscript.interpret._process_vec.call(null, x, invade_carots_QMARK_);
  } else {
    return x;
  }
};
cljs.looperscript.interpret._process_vec = function _process_vec(v, invade_carots_QMARK_) {
  var caroted_QMARK_ = cljs.core._EQ_.call(null, cljs.core.first.call(null, v), "^");
  var v__$1 = caroted_QMARK_ ? cljs.core.rest.call(null, v) : v;
  var vec__29808 = v__$1;
  var a = cljs.core.nth.call(null, vec__29808, 0, null);
  var b = cljs.core.nth.call(null, vec__29808, 1, null);
  var r = cljs.core.vec.call(null, cljs.core.rest.call(null, v__$1));
  var r2 = cljs.core.vec.call(null, cljs.core.drop.call(null, 2, v__$1));
  var vec__29809 = cljs.core.map.call(null, function(caroted_QMARK_, v__$1, vec__29808, a, b, r, r2) {
    return function(p1__29803_SHARP_) {
      return cljs.core.get.call(null, cljs.looperscript.vector_fns.vec_fns, p1__29803_SHARP_);
    };
  }(caroted_QMARK_, v__$1, vec__29808, a, b, r, r2), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [a, b], null));
  var afn = cljs.core.nth.call(null, vec__29809, 0, null);
  var bfn = cljs.core.nth.call(null, vec__29809, 1, null);
  var delve = function(caroted_QMARK_, v__$1, vec__29808, a, b, r, r2, vec__29809, afn, bfn) {
    return function(p1__29804_SHARP_) {
      return cljs.looperscript.interpret.splice.call(null, cljs.core.map.call(null, function(caroted_QMARK_, v__$1, vec__29808, a, b, r, r2, vec__29809, afn, bfn) {
        return function(x) {
          return cljs.looperscript.interpret.maybe_process_vec.call(null, x, invade_carots_QMARK_);
        };
      }(caroted_QMARK_, v__$1, vec__29808, a, b, r, r2, vec__29809, afn, bfn), p1__29804_SHARP_));
    };
  }(caroted_QMARK_, v__$1, vec__29808, a, b, r, r2, vec__29809, afn, bfn);
  return function(caroted_QMARK_, v__$1, vec__29808, a, b, r, r2, vec__29809, afn, bfn, delve) {
    return function(p1__29805_SHARP_) {
      if (caroted_QMARK_) {
        return cljs.core.with_meta.call(null, p1__29805_SHARP_, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "intact-for-sub-time", "intact-for-sub-time", 1903796476), new cljs.core.Keyword(null, "true", "true", -1114210334)], null));
      } else {
        return p1__29805_SHARP_;
      }
    };
  }(caroted_QMARK_, v__$1, vec__29808, a, b, r, r2, vec__29809, afn, bfn, delve).call(null, cljs.core.truth_(afn) ? cljs.core.apply.call(null, afn, delve.call(null, r)) : cljs.core.truth_(function() {
    var and__3628__auto__ = cljs.core._EQ_.call(null, a, "#");
    if (and__3628__auto__) {
      return bfn;
    } else {
      return and__3628__auto__;
    }
  }()) ? function(caroted_QMARK_, v__$1, vec__29808, a, b, r, r2, vec__29809, afn, bfn, delve) {
    return function() {
      return cljs.core.apply.call(null, bfn, delve.call(null, r2));
    };
  }(caroted_QMARK_, v__$1, vec__29808, a, b, r, r2, vec__29809, afn, bfn, delve) : cljs.core.sequential_QMARK_.call(null, v__$1) ? delve.call(null, v__$1) : v__$1);
};
cljs.looperscript.interpret.pre_process_to_eval__BANG_s = function pre_process_to_eval__BANG_s(v, invade_carots_QMARK_) {
  var vec__29813 = v;
  var a = cljs.core.nth.call(null, vec__29813, 0, null);
  var b = cljs.core.nth.call(null, vec__29813, 1, null);
  var r = cljs.core.vec.call(null, cljs.core.rest.call(null, v));
  var r2 = cljs.core.vec.call(null, cljs.core.drop.call(null, 2, v));
  var delve = function(vec__29813, a, b, r, r2) {
    return function(p1__29810_SHARP_) {
      return cljs.looperscript.interpret.splice.call(null, cljs.core.map.call(null, cljs.looperscript.interpret.maybe_process_vec, p1__29810_SHARP_));
    };
  }(vec__29813, a, b, r, r2);
  if (cljs.core._EQ_.call(null, a, "!")) {
    return cljs.looperscript.interpret.process_vec.call(null, r, invade_carots_QMARK_);
  } else {
    if (cljs.core.sequential_QMARK_.call(null, v)) {
      return cljs.core.mapv.call(null, function(vec__29813, a, b, r, r2, delve) {
        return function(p1__29811_SHARP_) {
          if (cljs.core.sequential_QMARK_.call(null, p1__29811_SHARP_)) {
            return pre_process_to_eval__BANG_s.call(null, p1__29811_SHARP_, invade_carots_QMARK_);
          } else {
            return p1__29811_SHARP_;
          }
        };
      }(vec__29813, a, b, r, r2, delve), v);
    } else {
      return v;
    }
  }
};
cljs.looperscript.interpret.process_vec = function() {
  var process_vec = null;
  var process_vec__1 = function(args) {
    return process_vec.call(null, args, false);
  };
  var process_vec__2 = function(args, invade_carots_QMARK_) {
    if (!cljs.core.sequential_QMARK_.call(null, args)) {
      return args;
    } else {
      return cljs.looperscript.interpret._process_vec.call(null, cljs.looperscript.interpret.pre_process_to_eval__BANG_s.call(null, args, invade_carots_QMARK_), invade_carots_QMARK_);
    }
  };
  process_vec = function(args, invade_carots_QMARK_) {
    switch(arguments.length) {
      case 1:
        return process_vec__1.call(this, args);
      case 2:
        return process_vec__2.call(this, args, invade_carots_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  process_vec.cljs$core$IFn$_invoke$arity$1 = process_vec__1;
  process_vec.cljs$core$IFn$_invoke$arity$2 = process_vec__2;
  return process_vec;
}();
cljs.looperscript.interpret.walk_map_applying_fn_to_vals = function walk_map_applying_fn_to_vals(f, m) {
  return cljs.core.reduce.call(null, function(m__$1, p__29816) {
    var vec__29817 = p__29816;
    var k = cljs.core.nth.call(null, vec__29817, 0, null);
    var v = cljs.core.nth.call(null, vec__29817, 1, null);
    var res = cljs.core.map_QMARK_.call(null, v) ? walk_map_applying_fn_to_vals.call(null, f, v) : f.call(null, v);
    return cljs.core.assoc.call(null, m__$1, k, res);
  }, cljs.core.PersistentArrayMap.EMPTY, m);
};
cljs.looperscript.interpret.grammar = "s \x3d \x3csp*\x3e params init? \x3csp*\x3e parts\n  params \x3d param*\n  parts \x3d part*\n  \x3cparam\x3e \x3d (bpm | version) \x3csp*\x3e\n  bpm \x3d \x3c'bpm'\x3e \x3csp?\x3e (number | fraction | vec)\n  version \x3d \x3c'version'\x3e \x3csp?\x3e #'[a-zA-Z0-9.]+'\n  vec \x3d '^'? ('#' | '!')? \x3c('[' | '(')\x3e vec-code? (data-element | vec | sp |\n                                                    string | vec-code)* \x3c(']' | ')')\x3e\n  part \x3d part-title \x3csp\x3e* aspect*\n  init \x3d \x3c'init'\x3e (\x3csp*\x3e vec)*\n  \x3cpart-title\x3e \x3d \x3c'part'\x3e sp (!aspect-keyword #'[a-zA-Z0-9_.-]+')\n  aspect \x3d aspect-header data\n  aspect-header \x3d full-aspect-name (sp* \x3c'\x26'\x3e sp* full-aspect-name)*\n  full-aspect-name \x3d aspect-keyword (':' sub-aspect-keyword)*\n  aspect-keyword \x3d ('time' | 'sound' | 'volume' | 'filter' | 'pan' | 'rate' | 'offset' |                              'synth' | 'overtones' | 'time+' | 'mute' | 'skip')\n  sub-aspect-keyword \x3d ('time')\n  data \x3d data-element+\n  \x3cdata-element\x3e \x3d (ratio | hz | modifier | number | sp | vec | drum-code |\n  data-shorthand | synth-code)\n  \x3csynth-code\x3e \x3d ('sawtooth' | 'sine' | 'square' | 'triangle')\n  \x3cdata-shorthand\x3e \x3d v\n  v \x3d number \x3c'v'\x3e number\n  drum-code \x3d !vec-code #'[bcdhkrs]'\n  modifier \x3d (plus-mod | fraction | mod-code)\n  mod-code \x3d 'just'\n  plus-mod \x3d \x3c'+'\x3e sp* (number | ratio | vec)\n  fraction \x3d number \x3c'/'\x3e number\n  hz \x3d (number | vec) sp* 'hz'\n  ratio \x3d number \x3c':'\x3e number\n\n  vec-code \x3d (" + 
cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.join.call(null, " | ", cljs.core.mapv.call(null, cljs.core.comp.call(null, function(p1__29818_SHARP_) {
  return cljs.core.apply.call(null, cljs.core.str, "'", p1__29818_SHARP_, "'");
}, cljs.core.partial.call(null, cljs.core.apply, cljs.core.str), cljs.core.rest, cljs.core.str), cljs.core.keys.call(null, cljs.looperscript.vector_fns.vec_fns)))) + ") \x3csp\x3e\n\n\n  string \x3d \x3c'\"'\x3e #'([^\"]*)' \x3c'\"'\x3e\n  number \x3d #'-?([0-9]*\\.[0-9]*|[0-9]+)'\n      \x3csp\x3e \x3d \x3c#'[\\s,]+'\x3e";
cljs.looperscript.interpret.looper_parse = instaparse.core.parser.call(null, cljs.looperscript.interpret.grammar);
cljs.looperscript.interpret.looper_transform = function looper_transform(parse_tree) {
  return cljs.looperscript.interpret.walk_map_applying_fn_to_vals.call(null, cljs.looperscript.interpret.process_vec, instaparse.core.transform.call(null, cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "v", "v", 21465059), new cljs.core.Keyword(null, "vec", "vec", -657847931), new cljs.core.Keyword(null, "init", "init", -1875481434), new cljs.core.Keyword(null, "number", "number", 1570378438), new cljs.core.Keyword(null, "fraction", "fraction", 107940680), new cljs.core.Keyword(null, 
  "part", "part", 77757738), new cljs.core.Keyword(null, "aspect-header", "aspect-header", -1942088854), new cljs.core.Keyword(null, "parts", "parts", 849007691), new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.Keyword(null, "string", "string", -1989541586), new cljs.core.Keyword(null, "s", "s", 1705939918), new cljs.core.Keyword(null, "ratio", "ratio", -926560044), new cljs.core.Keyword(null, "mod-code", "mod-code", -1364300459), new cljs.core.Keyword(null, "aspect-keyword", 
  "aspect-keyword", 1878628821), new cljs.core.Keyword(null, "bpm", "bpm", -1042376389), new cljs.core.Keyword(null, "vec-code", "vec-code", 652666651), new cljs.core.Keyword(null, "sub-aspect-keyword", "sub-aspect-keyword", 1179720699), new cljs.core.Keyword(null, "full-aspect-name", "full-aspect-name", -1425455074), new cljs.core.Keyword(null, "data", "data", -232669377)], [cljs.looperscript.vector_fns.handle_v_keyword, cljs.core.vector, function() {
    var G__29828__delegate = function(args) {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "init", "init", -1875481434), cljs.core.vec.call(null, args)], null);
    };
    var G__29828 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__29828__delegate.call(this, args);
    };
    G__29828.cljs$lang$maxFixedArity = 0;
    G__29828.cljs$lang$applyTo = function(arglist__29829) {
      var args = cljs.core.seq(arglist__29829);
      return G__29828__delegate(args);
    };
    G__29828.cljs$core$IFn$_invoke$arity$variadic = G__29828__delegate;
    return G__29828;
  }(), cljs.looperscript.interpret.string__GT_number, function(n, d) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "fraction", "fraction", 107940680), n / d], null);
  }, function() {
    var G__29830__delegate = function(part_name, aspects) {
      return cljs.core.reduce.call(null, function(m, p__29824) {
        var vec__29825 = p__29824;
        var _ = cljs.core.nth.call(null, vec__29825, 0, null);
        var k = cljs.core.nth.call(null, vec__29825, 1, null);
        var v = cljs.core.nth.call(null, vec__29825, 2, null);
        return cljs.core.assoc.call(null, m, k, v);
      }, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), part_name], null), aspects);
    };
    var G__29830 = function(part_name, var_args) {
      var aspects = null;
      if (arguments.length > 1) {
        aspects = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__29830__delegate.call(this, part_name, aspects);
    };
    G__29830.cljs$lang$maxFixedArity = 1;
    G__29830.cljs$lang$applyTo = function(arglist__29831) {
      var part_name = cljs.core.first(arglist__29831);
      var aspects = cljs.core.rest(arglist__29831);
      return G__29830__delegate(part_name, aspects);
    };
    G__29830.cljs$core$IFn$_invoke$arity$variadic = G__29830__delegate;
    return G__29830;
  }(), cljs.core.vector, function() {
    var G__29832__delegate = function(args) {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "parts", "parts", 849007691), cljs.core.reduce.call(null, function(m, p) {
        return cljs.core.assoc.call(null, m, (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(p), p);
      }, cljs.core.PersistentArrayMap.EMPTY, args)], null);
    };
    var G__29832 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__29832__delegate.call(this, args);
    };
    G__29832.cljs$lang$maxFixedArity = 0;
    G__29832.cljs$lang$applyTo = function(arglist__29833) {
      var args = cljs.core.seq(arglist__29833);
      return G__29832__delegate(args);
    };
    G__29832.cljs$core$IFn$_invoke$arity$variadic = G__29832__delegate;
    return G__29832;
  }(), function() {
    var G__29834__delegate = function(p) {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "params", "params", 710516235), cljs.core.reduce.call(null, function(m, p__29826) {
        var vec__29827 = p__29826;
        var k = cljs.core.nth.call(null, vec__29827, 0, null);
        var v = cljs.core.nth.call(null, vec__29827, 1, null);
        return cljs.core.assoc.call(null, m, k, v);
      }, cljs.core.PersistentArrayMap.EMPTY, p)], null);
    };
    var G__29834 = function(var_args) {
      var p = null;
      if (arguments.length > 0) {
        p = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__29834__delegate.call(this, p);
    };
    G__29834.cljs$lang$maxFixedArity = 0;
    G__29834.cljs$lang$applyTo = function(arglist__29835) {
      var p = cljs.core.seq(arglist__29835);
      return G__29834__delegate(p);
    };
    G__29834.cljs$core$IFn$_invoke$arity$variadic = G__29834__delegate;
    return G__29834;
  }(), cljs.core.str, function() {
    var G__29836__delegate = function(args) {
      return cljs.core.reduce.call(null, function(m, x) {
        return cljs.core.into.call(null, m, x);
      }, cljs.core.PersistentArrayMap.EMPTY, args);
    };
    var G__29836 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__29836__delegate.call(this, args);
    };
    G__29836.cljs$lang$maxFixedArity = 0;
    G__29836.cljs$lang$applyTo = function(arglist__29837) {
      var args = cljs.core.seq(arglist__29837);
      return G__29836__delegate(args);
    };
    G__29836.cljs$core$IFn$_invoke$arity$variadic = G__29836__delegate;
    return G__29836;
  }(), function(n, d) {
    return cljs.looperscript.interpret.ratio__GT_note.call(null, n / d);
  }, cljs.core.comp.call(null, cljs.core.vector, cljs.core.keyword), cljs.core.keyword, function(x) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "bpm", "bpm", -1042376389), 60 / (cljs.core.vector_QMARK_.call(null, x) && cljs.core._EQ_.call(null, cljs.core.first.call(null, x), new cljs.core.Keyword(null, "fraction", "fraction", 107940680)) ? cljs.core.second.call(null, x) : cljs.core.vector_QMARK_.call(null, x) ? cljs.looperscript.interpret.process_vec.call(null, x) : x)], null);
  }, cljs.core.keyword, cljs.core.keyword, function() {
    var G__29838__delegate = function(args) {
      if (cljs.core._EQ_.call(null, cljs.core.count.call(null, args), 1)) {
        return cljs.core.first.call(null, args);
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, args), cljs.core.nth.call(null, args, 2)], null);
      }
    };
    var G__29838 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__29838__delegate.call(this, args);
    };
    G__29838.cljs$lang$maxFixedArity = 0;
    G__29838.cljs$lang$applyTo = function(arglist__29839) {
      var args = cljs.core.seq(arglist__29839);
      return G__29838__delegate(args);
    };
    G__29838.cljs$core$IFn$_invoke$arity$variadic = G__29838__delegate;
    return G__29838;
  }(), function() {
    var G__29840__delegate = function(rest__29819_SHARP_) {
      return cljs.looperscript.interpret.splice.call(null, rest__29819_SHARP_);
    };
    var G__29840 = function(var_args) {
      var rest__29819_SHARP_ = null;
      if (arguments.length > 0) {
        rest__29819_SHARP_ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__29840__delegate.call(this, rest__29819_SHARP_);
    };
    G__29840.cljs$lang$maxFixedArity = 0;
    G__29840.cljs$lang$applyTo = function(arglist__29841) {
      var rest__29819_SHARP_ = cljs.core.seq(arglist__29841);
      return G__29840__delegate(rest__29819_SHARP_);
    };
    G__29840.cljs$core$IFn$_invoke$arity$variadic = G__29840__delegate;
    return G__29840;
  }()]), parse_tree));
};
goog.provide("domina.events");
goog.require("cljs.core");
goog.require("goog.events");
goog.require("goog.events");
goog.require("goog.object");
goog.require("goog.object");
goog.require("domina");
domina.events.Event = function() {
  var obj32538 = {};
  return obj32538;
}();
domina.events.prevent_default = function prevent_default(evt) {
  if (function() {
    var and__3628__auto__ = evt;
    if (and__3628__auto__) {
      return evt.domina$events$Event$prevent_default$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return evt.domina$events$Event$prevent_default$arity$1(evt);
  } else {
    var x__4277__auto__ = evt == null ? null : evt;
    return function() {
      var or__3640__auto__ = domina.events.prevent_default[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = domina.events.prevent_default["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Event.prevent-default", evt);
        }
      }
    }().call(null, evt);
  }
};
domina.events.stop_propagation = function stop_propagation(evt) {
  if (function() {
    var and__3628__auto__ = evt;
    if (and__3628__auto__) {
      return evt.domina$events$Event$stop_propagation$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return evt.domina$events$Event$stop_propagation$arity$1(evt);
  } else {
    var x__4277__auto__ = evt == null ? null : evt;
    return function() {
      var or__3640__auto__ = domina.events.stop_propagation[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = domina.events.stop_propagation["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Event.stop-propagation", evt);
        }
      }
    }().call(null, evt);
  }
};
domina.events.target = function target(evt) {
  if (function() {
    var and__3628__auto__ = evt;
    if (and__3628__auto__) {
      return evt.domina$events$Event$target$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return evt.domina$events$Event$target$arity$1(evt);
  } else {
    var x__4277__auto__ = evt == null ? null : evt;
    return function() {
      var or__3640__auto__ = domina.events.target[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = domina.events.target["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Event.target", evt);
        }
      }
    }().call(null, evt);
  }
};
domina.events.current_target = function current_target(evt) {
  if (function() {
    var and__3628__auto__ = evt;
    if (and__3628__auto__) {
      return evt.domina$events$Event$current_target$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return evt.domina$events$Event$current_target$arity$1(evt);
  } else {
    var x__4277__auto__ = evt == null ? null : evt;
    return function() {
      var or__3640__auto__ = domina.events.current_target[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = domina.events.current_target["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Event.current-target", evt);
        }
      }
    }().call(null, evt);
  }
};
domina.events.event_type = function event_type(evt) {
  if (function() {
    var and__3628__auto__ = evt;
    if (and__3628__auto__) {
      return evt.domina$events$Event$event_type$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return evt.domina$events$Event$event_type$arity$1(evt);
  } else {
    var x__4277__auto__ = evt == null ? null : evt;
    return function() {
      var or__3640__auto__ = domina.events.event_type[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = domina.events.event_type["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Event.event-type", evt);
        }
      }
    }().call(null, evt);
  }
};
domina.events.raw_event = function raw_event(evt) {
  if (function() {
    var and__3628__auto__ = evt;
    if (and__3628__auto__) {
      return evt.domina$events$Event$raw_event$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return evt.domina$events$Event$raw_event$arity$1(evt);
  } else {
    var x__4277__auto__ = evt == null ? null : evt;
    return function() {
      var or__3640__auto__ = domina.events.raw_event[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = domina.events.raw_event["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Event.raw-event", evt);
        }
      }
    }().call(null, evt);
  }
};
domina.events.root_element = window.document.documentElement;
domina.events.create_listener_function = function create_listener_function(f) {
  return function(evt) {
    f.call(null, function() {
      if (typeof domina.events.t32542 !== "undefined") {
      } else {
        domina.events.t32542 = function(evt, f, create_listener_function, meta32543) {
          this.evt = evt;
          this.f = f;
          this.create_listener_function = create_listener_function;
          this.meta32543 = meta32543;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393472;
        };
        domina.events.t32542.cljs$lang$type = true;
        domina.events.t32542.cljs$lang$ctorStr = "domina.events/t32542";
        domina.events.t32542.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
          return cljs.core._write.call(null, writer__4218__auto__, "domina.events/t32542");
        };
        domina.events.t32542.prototype.cljs$core$ILookup$_lookup$arity$2 = function(o, k) {
          var self__ = this;
          var o__$1 = this;
          var temp__4124__auto__ = self__.evt[k];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var val = temp__4124__auto__;
            return val;
          } else {
            return self__.evt[cljs.core.name.call(null, k)];
          }
        };
        domina.events.t32542.prototype.cljs$core$ILookup$_lookup$arity$3 = function(o, k, not_found) {
          var self__ = this;
          var o__$1 = this;
          var or__3640__auto__ = cljs.core._lookup.call(null, o__$1, k);
          if (cljs.core.truth_(or__3640__auto__)) {
            return or__3640__auto__;
          } else {
            return not_found;
          }
        };
        domina.events.t32542.prototype.domina$events$Event$ = true;
        domina.events.t32542.prototype.domina$events$Event$prevent_default$arity$1 = function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.evt.preventDefault();
        };
        domina.events.t32542.prototype.domina$events$Event$stop_propagation$arity$1 = function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.evt.stopPropagation();
        };
        domina.events.t32542.prototype.domina$events$Event$target$arity$1 = function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.evt.target;
        };
        domina.events.t32542.prototype.domina$events$Event$current_target$arity$1 = function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.evt.currentTarget;
        };
        domina.events.t32542.prototype.domina$events$Event$event_type$arity$1 = function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.evt.type;
        };
        domina.events.t32542.prototype.domina$events$Event$raw_event$arity$1 = function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.evt;
        };
        domina.events.t32542.prototype.cljs$core$IMeta$_meta$arity$1 = function(_32544) {
          var self__ = this;
          var _32544__$1 = this;
          return self__.meta32543;
        };
        domina.events.t32542.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_32544, meta32543__$1) {
          var self__ = this;
          var _32544__$1 = this;
          return new domina.events.t32542(self__.evt, self__.f, self__.create_listener_function, meta32543__$1);
        };
        domina.events.__GT_t32542 = function __GT_t32542(evt__$1, f__$1, create_listener_function__$1, meta32543) {
          return new domina.events.t32542(evt__$1, f__$1, create_listener_function__$1, meta32543);
        };
      }
      return new domina.events.t32542(evt, f, create_listener_function, null);
    }());
    return true;
  };
};
domina.events.listen_internal_BANG_ = function listen_internal_BANG_(content, type, listener, capture, once) {
  var f = domina.events.create_listener_function.call(null, listener);
  var t = cljs.core.name.call(null, type);
  return cljs.core.doall.call(null, function() {
    var iter__4379__auto__ = function(f, t) {
      return function iter__32549(s__32550) {
        return new cljs.core.LazySeq(null, function(f, t) {
          return function() {
            var s__32550__$1 = s__32550;
            while (true) {
              var temp__4126__auto__ = cljs.core.seq.call(null, s__32550__$1);
              if (temp__4126__auto__) {
                var s__32550__$2 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__32550__$2)) {
                  var c__4377__auto__ = cljs.core.chunk_first.call(null, s__32550__$2);
                  var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                  var b__32552 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                  if (function() {
                    var i__32551 = 0;
                    while (true) {
                      if (i__32551 < size__4378__auto__) {
                        var node = cljs.core._nth.call(null, c__4377__auto__, i__32551);
                        cljs.core.chunk_append.call(null, b__32552, cljs.core.truth_(once) ? goog.events.listenOnce(node, t, f, capture) : goog.events.listen(node, t, f, capture));
                        var G__32553 = i__32551 + 1;
                        i__32551 = G__32553;
                        continue;
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__32552), iter__32549.call(null, cljs.core.chunk_rest.call(null, s__32550__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__32552), null);
                  }
                } else {
                  var node = cljs.core.first.call(null, s__32550__$2);
                  return cljs.core.cons.call(null, cljs.core.truth_(once) ? goog.events.listenOnce(node, t, f, capture) : goog.events.listen(node, t, f, capture), iter__32549.call(null, cljs.core.rest.call(null, s__32550__$2)));
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(f, t), null, null);
      };
    }(f, t);
    return iter__4379__auto__.call(null, domina.nodes.call(null, content));
  }());
};
domina.events.listen_BANG_ = function() {
  var listen_BANG_ = null;
  var listen_BANG___2 = function(type, listener) {
    return listen_BANG_.call(null, domina.events.root_element, type, listener);
  };
  var listen_BANG___3 = function(content, type, listener) {
    return domina.events.listen_internal_BANG_.call(null, content, type, listener, false, false);
  };
  listen_BANG_ = function(content, type, listener) {
    switch(arguments.length) {
      case 2:
        return listen_BANG___2.call(this, content, type);
      case 3:
        return listen_BANG___3.call(this, content, type, listener);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  listen_BANG_.cljs$core$IFn$_invoke$arity$2 = listen_BANG___2;
  listen_BANG_.cljs$core$IFn$_invoke$arity$3 = listen_BANG___3;
  return listen_BANG_;
}();
domina.events.capture_BANG_ = function() {
  var capture_BANG_ = null;
  var capture_BANG___2 = function(type, listener) {
    return capture_BANG_.call(null, domina.events.root_element, type, listener);
  };
  var capture_BANG___3 = function(content, type, listener) {
    return domina.events.listen_internal_BANG_.call(null, content, type, listener, true, false);
  };
  capture_BANG_ = function(content, type, listener) {
    switch(arguments.length) {
      case 2:
        return capture_BANG___2.call(this, content, type);
      case 3:
        return capture_BANG___3.call(this, content, type, listener);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  capture_BANG_.cljs$core$IFn$_invoke$arity$2 = capture_BANG___2;
  capture_BANG_.cljs$core$IFn$_invoke$arity$3 = capture_BANG___3;
  return capture_BANG_;
}();
domina.events.listen_once_BANG_ = function() {
  var listen_once_BANG_ = null;
  var listen_once_BANG___2 = function(type, listener) {
    return listen_once_BANG_.call(null, domina.events.root_element, type, listener);
  };
  var listen_once_BANG___3 = function(content, type, listener) {
    return domina.events.listen_internal_BANG_.call(null, content, type, listener, false, true);
  };
  listen_once_BANG_ = function(content, type, listener) {
    switch(arguments.length) {
      case 2:
        return listen_once_BANG___2.call(this, content, type);
      case 3:
        return listen_once_BANG___3.call(this, content, type, listener);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  listen_once_BANG_.cljs$core$IFn$_invoke$arity$2 = listen_once_BANG___2;
  listen_once_BANG_.cljs$core$IFn$_invoke$arity$3 = listen_once_BANG___3;
  return listen_once_BANG_;
}();
domina.events.capture_once_BANG_ = function() {
  var capture_once_BANG_ = null;
  var capture_once_BANG___2 = function(type, listener) {
    return capture_once_BANG_.call(null, domina.events.root_element, type, listener);
  };
  var capture_once_BANG___3 = function(content, type, listener) {
    return domina.events.listen_internal_BANG_.call(null, content, type, listener, true, true);
  };
  capture_once_BANG_ = function(content, type, listener) {
    switch(arguments.length) {
      case 2:
        return capture_once_BANG___2.call(this, content, type);
      case 3:
        return capture_once_BANG___3.call(this, content, type, listener);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  capture_once_BANG_.cljs$core$IFn$_invoke$arity$2 = capture_once_BANG___2;
  capture_once_BANG_.cljs$core$IFn$_invoke$arity$3 = capture_once_BANG___3;
  return capture_once_BANG_;
}();
domina.events.unlisten_BANG_ = function() {
  var unlisten_BANG_ = null;
  var unlisten_BANG___0 = function() {
    return unlisten_BANG_.call(null, domina.events.root_element);
  };
  var unlisten_BANG___1 = function(content) {
    var seq__32562 = cljs.core.seq.call(null, domina.nodes.call(null, content));
    var chunk__32563 = null;
    var count__32564 = 0;
    var i__32565 = 0;
    while (true) {
      if (i__32565 < count__32564) {
        var node = cljs.core._nth.call(null, chunk__32563, i__32565);
        goog.events.removeAll(node);
        var G__32570 = seq__32562;
        var G__32571 = chunk__32563;
        var G__32572 = count__32564;
        var G__32573 = i__32565 + 1;
        seq__32562 = G__32570;
        chunk__32563 = G__32571;
        count__32564 = G__32572;
        i__32565 = G__32573;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__32562);
        if (temp__4126__auto__) {
          var seq__32562__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__32562__$1)) {
            var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__32562__$1);
            var G__32574 = cljs.core.chunk_rest.call(null, seq__32562__$1);
            var G__32575 = c__4410__auto__;
            var G__32576 = cljs.core.count.call(null, c__4410__auto__);
            var G__32577 = 0;
            seq__32562 = G__32574;
            chunk__32563 = G__32575;
            count__32564 = G__32576;
            i__32565 = G__32577;
            continue;
          } else {
            var node = cljs.core.first.call(null, seq__32562__$1);
            goog.events.removeAll(node);
            var G__32578 = cljs.core.next.call(null, seq__32562__$1);
            var G__32579 = null;
            var G__32580 = 0;
            var G__32581 = 0;
            seq__32562 = G__32578;
            chunk__32563 = G__32579;
            count__32564 = G__32580;
            i__32565 = G__32581;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var unlisten_BANG___2 = function(content, type) {
    var type__$1 = cljs.core.name.call(null, type);
    var seq__32566 = cljs.core.seq.call(null, domina.nodes.call(null, content));
    var chunk__32567 = null;
    var count__32568 = 0;
    var i__32569 = 0;
    while (true) {
      if (i__32569 < count__32568) {
        var node = cljs.core._nth.call(null, chunk__32567, i__32569);
        goog.events.removeAll(node, type__$1);
        var G__32582 = seq__32566;
        var G__32583 = chunk__32567;
        var G__32584 = count__32568;
        var G__32585 = i__32569 + 1;
        seq__32566 = G__32582;
        chunk__32567 = G__32583;
        count__32568 = G__32584;
        i__32569 = G__32585;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__32566);
        if (temp__4126__auto__) {
          var seq__32566__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__32566__$1)) {
            var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__32566__$1);
            var G__32586 = cljs.core.chunk_rest.call(null, seq__32566__$1);
            var G__32587 = c__4410__auto__;
            var G__32588 = cljs.core.count.call(null, c__4410__auto__);
            var G__32589 = 0;
            seq__32566 = G__32586;
            chunk__32567 = G__32587;
            count__32568 = G__32588;
            i__32569 = G__32589;
            continue;
          } else {
            var node = cljs.core.first.call(null, seq__32566__$1);
            goog.events.removeAll(node, type__$1);
            var G__32590 = cljs.core.next.call(null, seq__32566__$1);
            var G__32591 = null;
            var G__32592 = 0;
            var G__32593 = 0;
            seq__32566 = G__32590;
            chunk__32567 = G__32591;
            count__32568 = G__32592;
            i__32569 = G__32593;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  unlisten_BANG_ = function(content, type) {
    switch(arguments.length) {
      case 0:
        return unlisten_BANG___0.call(this);
      case 1:
        return unlisten_BANG___1.call(this, content);
      case 2:
        return unlisten_BANG___2.call(this, content, type);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unlisten_BANG_.cljs$core$IFn$_invoke$arity$0 = unlisten_BANG___0;
  unlisten_BANG_.cljs$core$IFn$_invoke$arity$1 = unlisten_BANG___1;
  unlisten_BANG_.cljs$core$IFn$_invoke$arity$2 = unlisten_BANG___2;
  return unlisten_BANG_;
}();
domina.events.ancestor_nodes = function() {
  var ancestor_nodes = null;
  var ancestor_nodes__1 = function(n) {
    return ancestor_nodes.call(null, n, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [n], null));
  };
  var ancestor_nodes__2 = function(n, so_far) {
    while (true) {
      var temp__4124__auto__ = n.parentNode;
      if (cljs.core.truth_(temp__4124__auto__)) {
        var parent = temp__4124__auto__;
        var G__32594 = parent;
        var G__32595 = cljs.core.cons.call(null, parent, so_far);
        n = G__32594;
        so_far = G__32595;
        continue;
      } else {
        return so_far;
      }
      break;
    }
  };
  ancestor_nodes = function(n, so_far) {
    switch(arguments.length) {
      case 1:
        return ancestor_nodes__1.call(this, n);
      case 2:
        return ancestor_nodes__2.call(this, n, so_far);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestor_nodes.cljs$core$IFn$_invoke$arity$1 = ancestor_nodes__1;
  ancestor_nodes.cljs$core$IFn$_invoke$arity$2 = ancestor_nodes__2;
  return ancestor_nodes;
}();
domina.events.dispatch_browser_BANG_ = function dispatch_browser_BANG_(source, evt) {
  evt.target = domina.single_node.call(null, source);
  var ancestors = domina.events.ancestor_nodes.call(null, domina.single_node.call(null, source));
  var seq__32604_32612 = cljs.core.seq.call(null, ancestors);
  var chunk__32605_32613 = null;
  var count__32606_32614 = 0;
  var i__32607_32615 = 0;
  while (true) {
    if (i__32607_32615 < count__32606_32614) {
      var n_32616 = cljs.core._nth.call(null, chunk__32605_32613, i__32607_32615);
      if (cljs.core.truth_(evt.propagationStopped_)) {
      } else {
        evt.currentTarget = n_32616;
        goog.events.fireListeners(n_32616, evt.type, true, evt);
      }
      var G__32617 = seq__32604_32612;
      var G__32618 = chunk__32605_32613;
      var G__32619 = count__32606_32614;
      var G__32620 = i__32607_32615 + 1;
      seq__32604_32612 = G__32617;
      chunk__32605_32613 = G__32618;
      count__32606_32614 = G__32619;
      i__32607_32615 = G__32620;
      continue;
    } else {
      var temp__4126__auto___32621 = cljs.core.seq.call(null, seq__32604_32612);
      if (temp__4126__auto___32621) {
        var seq__32604_32622__$1 = temp__4126__auto___32621;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__32604_32622__$1)) {
          var c__4410__auto___32623 = cljs.core.chunk_first.call(null, seq__32604_32622__$1);
          var G__32624 = cljs.core.chunk_rest.call(null, seq__32604_32622__$1);
          var G__32625 = c__4410__auto___32623;
          var G__32626 = cljs.core.count.call(null, c__4410__auto___32623);
          var G__32627 = 0;
          seq__32604_32612 = G__32624;
          chunk__32605_32613 = G__32625;
          count__32606_32614 = G__32626;
          i__32607_32615 = G__32627;
          continue;
        } else {
          var n_32628 = cljs.core.first.call(null, seq__32604_32622__$1);
          if (cljs.core.truth_(evt.propagationStopped_)) {
          } else {
            evt.currentTarget = n_32628;
            goog.events.fireListeners(n_32628, evt.type, true, evt);
          }
          var G__32629 = cljs.core.next.call(null, seq__32604_32622__$1);
          var G__32630 = null;
          var G__32631 = 0;
          var G__32632 = 0;
          seq__32604_32612 = G__32629;
          chunk__32605_32613 = G__32630;
          count__32606_32614 = G__32631;
          i__32607_32615 = G__32632;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var seq__32608_32633 = cljs.core.seq.call(null, cljs.core.reverse.call(null, ancestors));
  var chunk__32609_32634 = null;
  var count__32610_32635 = 0;
  var i__32611_32636 = 0;
  while (true) {
    if (i__32611_32636 < count__32610_32635) {
      var n_32637 = cljs.core._nth.call(null, chunk__32609_32634, i__32611_32636);
      if (cljs.core.truth_(evt.propagationStopped_)) {
      } else {
        evt.currentTarget = n_32637;
        goog.events.fireListeners(n_32637, evt.type, false, evt);
      }
      var G__32638 = seq__32608_32633;
      var G__32639 = chunk__32609_32634;
      var G__32640 = count__32610_32635;
      var G__32641 = i__32611_32636 + 1;
      seq__32608_32633 = G__32638;
      chunk__32609_32634 = G__32639;
      count__32610_32635 = G__32640;
      i__32611_32636 = G__32641;
      continue;
    } else {
      var temp__4126__auto___32642 = cljs.core.seq.call(null, seq__32608_32633);
      if (temp__4126__auto___32642) {
        var seq__32608_32643__$1 = temp__4126__auto___32642;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__32608_32643__$1)) {
          var c__4410__auto___32644 = cljs.core.chunk_first.call(null, seq__32608_32643__$1);
          var G__32645 = cljs.core.chunk_rest.call(null, seq__32608_32643__$1);
          var G__32646 = c__4410__auto___32644;
          var G__32647 = cljs.core.count.call(null, c__4410__auto___32644);
          var G__32648 = 0;
          seq__32608_32633 = G__32645;
          chunk__32609_32634 = G__32646;
          count__32610_32635 = G__32647;
          i__32611_32636 = G__32648;
          continue;
        } else {
          var n_32649 = cljs.core.first.call(null, seq__32608_32643__$1);
          if (cljs.core.truth_(evt.propagationStopped_)) {
          } else {
            evt.currentTarget = n_32649;
            goog.events.fireListeners(n_32649, evt.type, false, evt);
          }
          var G__32650 = cljs.core.next.call(null, seq__32608_32643__$1);
          var G__32651 = null;
          var G__32652 = 0;
          var G__32653 = 0;
          seq__32608_32633 = G__32650;
          chunk__32609_32634 = G__32651;
          count__32610_32635 = G__32652;
          i__32611_32636 = G__32653;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return evt.returnValue_;
};
domina.events.dispatch_event_target_BANG_ = function dispatch_event_target_BANG_(source, evt) {
  return goog.events.dispatchEvent(source, evt);
};
domina.events.is_event_target_QMARK_ = function is_event_target_QMARK_(o) {
  var and__3628__auto__ = o.getParentEventTarget;
  if (cljs.core.truth_(and__3628__auto__)) {
    return o.dispatchEvent;
  } else {
    return and__3628__auto__;
  }
};
domina.events.dispatch_BANG_ = function() {
  var dispatch_BANG_ = null;
  var dispatch_BANG___2 = function(type, evt_map) {
    return dispatch_BANG_.call(null, domina.events.root_element, type, evt_map);
  };
  var dispatch_BANG___3 = function(source, type, evt_map) {
    var evt = new goog.events.Event(cljs.core.name.call(null, type));
    var seq__32660_32666 = cljs.core.seq.call(null, evt_map);
    var chunk__32661_32667 = null;
    var count__32662_32668 = 0;
    var i__32663_32669 = 0;
    while (true) {
      if (i__32663_32669 < count__32662_32668) {
        var vec__32664_32670 = cljs.core._nth.call(null, chunk__32661_32667, i__32663_32669);
        var k_32671 = cljs.core.nth.call(null, vec__32664_32670, 0, null);
        var v_32672 = cljs.core.nth.call(null, vec__32664_32670, 1, null);
        evt[k_32671] = v_32672;
        var G__32673 = seq__32660_32666;
        var G__32674 = chunk__32661_32667;
        var G__32675 = count__32662_32668;
        var G__32676 = i__32663_32669 + 1;
        seq__32660_32666 = G__32673;
        chunk__32661_32667 = G__32674;
        count__32662_32668 = G__32675;
        i__32663_32669 = G__32676;
        continue;
      } else {
        var temp__4126__auto___32677 = cljs.core.seq.call(null, seq__32660_32666);
        if (temp__4126__auto___32677) {
          var seq__32660_32678__$1 = temp__4126__auto___32677;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__32660_32678__$1)) {
            var c__4410__auto___32679 = cljs.core.chunk_first.call(null, seq__32660_32678__$1);
            var G__32680 = cljs.core.chunk_rest.call(null, seq__32660_32678__$1);
            var G__32681 = c__4410__auto___32679;
            var G__32682 = cljs.core.count.call(null, c__4410__auto___32679);
            var G__32683 = 0;
            seq__32660_32666 = G__32680;
            chunk__32661_32667 = G__32681;
            count__32662_32668 = G__32682;
            i__32663_32669 = G__32683;
            continue;
          } else {
            var vec__32665_32684 = cljs.core.first.call(null, seq__32660_32678__$1);
            var k_32685 = cljs.core.nth.call(null, vec__32665_32684, 0, null);
            var v_32686 = cljs.core.nth.call(null, vec__32665_32684, 1, null);
            evt[k_32685] = v_32686;
            var G__32687 = cljs.core.next.call(null, seq__32660_32678__$1);
            var G__32688 = null;
            var G__32689 = 0;
            var G__32690 = 0;
            seq__32660_32666 = G__32687;
            chunk__32661_32667 = G__32688;
            count__32662_32668 = G__32689;
            i__32663_32669 = G__32690;
            continue;
          }
        } else {
        }
      }
      break;
    }
    if (cljs.core.truth_(domina.events.is_event_target_QMARK_.call(null, source))) {
      return domina.events.dispatch_event_target_BANG_.call(null, source, evt);
    } else {
      return domina.events.dispatch_browser_BANG_.call(null, source, evt);
    }
  };
  dispatch_BANG_ = function(source, type, evt_map) {
    switch(arguments.length) {
      case 2:
        return dispatch_BANG___2.call(this, source, type);
      case 3:
        return dispatch_BANG___3.call(this, source, type, evt_map);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dispatch_BANG_.cljs$core$IFn$_invoke$arity$2 = dispatch_BANG___2;
  dispatch_BANG_.cljs$core$IFn$_invoke$arity$3 = dispatch_BANG___3;
  return dispatch_BANG_;
}();
domina.events.unlisten_by_key_BANG_ = function unlisten_by_key_BANG_(key) {
  return goog.events.unlistenByKey(key);
};
domina.events.get_listeners = function get_listeners(content, type) {
  var type__$1 = cljs.core.name.call(null, type);
  return cljs.core.mapcat.call(null, function(type__$1) {
    return function(p1__32691_SHARP_) {
      return goog.events.getListeners(p1__32691_SHARP_, type__$1, false);
    };
  }(type__$1), domina.nodes.call(null, content));
};
goog.provide("cljs.looperscript.looperscript");
goog.require("cljs.core");
goog.require("cljs.reader");
goog.require("cljs.looperscript.logging");
goog.require("cljs.looperscript.start_time");
goog.require("cljs.looperscript.audio");
goog.require("cljs.looperscript.start_time");
goog.require("cljs.looperscript.iterator");
goog.require("cljs.looperscript.address_bar");
goog.require("domina");
goog.require("cljs.looperscript.interpret");
goog.require("cljs.looperscript.iterator");
goog.require("cljs.looperscript.logging");
goog.require("cljs.looperscript.address_bar");
goog.require("domina.events");
goog.require("domina");
goog.require("domina.events");
goog.require("instaparse.core");
goog.require("instaparse.core");
goog.require("cljs.looperscript.audio");
goog.require("cljs.looperscript.interpret");
goog.require("cljs.reader");
var L = cljs.looperscript.looperscript;
cljs.looperscript.looperscript.ctx = cljs.looperscript.audio.ctx;
cljs.looperscript.looperscript.playing = cljs.core.atom.call(null, false);
cljs.looperscript.looperscript.playing_interval = cljs.core.atom.call(null, null);
cljs.looperscript.looperscript.current_next_note_fns = cljs.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
cljs.looperscript.looperscript.queue_time_interval = 1;
cljs.looperscript.looperscript.queue_time_extra = .5;
cljs.looperscript.looperscript.last_queue_time = cljs.core.atom.call(null, null);
cljs.looperscript.looperscript.params = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cljs.looperscript.looperscript.sounding_notes = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cljs.looperscript.looperscript.aspects = new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "time", "time", 1385887882), new cljs.core.Keyword(null, "sound", "sound", -2127407070), new cljs.core.Keyword(null, "volume", "volume", 1900330799), new cljs.core.Keyword(null, "filter", "filter", -948537934), new cljs.core.Keyword(null, "pan", "pan", -307712792), new cljs.core.Keyword(null, "rate", "rate", -1428659698), new cljs.core.Keyword(null, 
"synth", "synth", -862700847), new cljs.core.Keyword(null, "overtones", "overtones", -2065460921), new cljs.core.Keyword(null, "time+", "time+", 2008858809), new cljs.core.Keyword(null, "mute", "mute", 1151223646), new cljs.core.Keyword(null, "skip", "skip", 602715391)], null);
cljs.looperscript.looperscript.aspect_defaults = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "sound", "sound", -2127407070), new cljs.core.Keyword(null, "offset", "offset", 296498311), new cljs.core.Keyword(null, "overtones", "overtones", -2065460921), new cljs.core.Keyword(null, "pan", "pan", -307712792), new cljs.core.Keyword(null, "time", "time", 1385887882), new cljs.core.Keyword(null, "rate", "rate", -1428659698), new cljs.core.Keyword(null, "volume", "volume", 1900330799), 
new cljs.core.Keyword(null, "synth", "synth", -862700847), new cljs.core.Keyword(null, "filter", "filter", -948537934), new cljs.core.Keyword(null, "time+", "time+", 2008858809), new cljs.core.Keyword(null, "mute", "mute", 1151223646), new cljs.core.Keyword(null, "skip", "skip", 602715391)], [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "drum-code", 
"drum-code", 2081814302), "r"], null)], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [0], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [1], null)], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [0], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, 
[1], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [1], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [1], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["sawtooth"], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [2500], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [0], null), new cljs.core.PersistentVector(null, 
1, 5, cljs.core.PersistentVector.EMPTY_NODE, [1], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [1], null)]);
cljs.looperscript.looperscript.log_time = function() {
  var log_time__delegate = function(f, args) {
    var start_time = cljs.looperscript.start_time.now.call(null);
    var res = f.call(null);
    var run_time = cljs.looperscript.start_time.now.call(null) - start_time;
    cljs.looperscript.logging.log.call(null, run_time, args);
    return res;
  };
  var log_time = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return log_time__delegate.call(this, f, args);
  };
  log_time.cljs$lang$maxFixedArity = 1;
  log_time.cljs$lang$applyTo = function(arglist__29904) {
    var f = cljs.core.first(arglist__29904);
    var args = cljs.core.rest(arglist__29904);
    return log_time__delegate(f, args);
  };
  log_time.cljs$core$IFn$_invoke$arity$variadic = log_time__delegate;
  return log_time;
}();
cljs.looperscript.looperscript.note__GT_freq = function note__GT_freq(n) {
  return 261.625565 * Math.pow.call(null, 2, n / 12);
};
cljs.looperscript.looperscript.ratio__GT_freq = function ratio__GT_freq(r) {
  return 261.625565 * r;
};
cljs.looperscript.looperscript.get_bpm = function get_bpm() {
  var temp__4124__auto__ = (new cljs.core.Keyword(null, "bpm", "bpm", -1042376389)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.looperscript.looperscript.params));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var bpm = temp__4124__auto__;
    return bpm;
  } else {
    return 1;
  }
};
cljs.looperscript.looperscript.dethunk = function dethunk(x) {
  if (cljs.core.fn_QMARK_.call(null, x)) {
    return x.call(null);
  } else {
    return x;
  }
};
cljs.looperscript.looperscript.get_looper_text = function get_looper_text() {
  return cljs.looperscript.interpret.remove_comments.call(null, editor.getValue());
};
cljs.looperscript.looperscript.get_parts = function get_parts() {
  var text = cljs.looperscript.looperscript.get_looper_text.call(null);
  var start_time = cljs.looperscript.start_time.now.call(null);
  var parse_tree = cljs.looperscript.interpret.looper_parse.call(null, text);
  if (instaparse.core.failure_QMARK_.call(null, parse_tree)) {
    return parse_tree;
  } else {
    var _ = cljs.looperscript.logging.log.call(null, new cljs.core.Keyword(null, "tree", "tree", -196312028), parse_tree, "\n");
    var parse_time = cljs.looperscript.start_time.now.call(null) - start_time;
    var transformed_tree = cljs.looperscript.interpret.looper_transform.call(null, parse_tree);
    var ___$1 = cljs.looperscript.logging.log.call(null, new cljs.core.Keyword(null, "transformed", "transformed", 1969289512), transformed_tree, "\n");
    var transform_time = cljs.looperscript.start_time.now.call(null) - start_time;
    var new_params = (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(transformed_tree);
    var parts = (new cljs.core.Keyword(null, "parts", "parts", 849007691)).cljs$core$IFn$_invoke$arity$1(transformed_tree);
    cljs.looperscript.logging.log.call(null, "Parse time: (", parse_time, ") ", transform_time);
    cljs.core.reset_BANG_.call(null, cljs.looperscript.looperscript.params, new_params);
    return parts;
  }
};
cljs.looperscript.looperscript.add_note_to_sounding_notes = function() {
  var sounding_counter = cljs.core.atom.call(null, 0);
  return function(sounding_counter) {
    return function(n, node) {
      var id = cljs.core.swap_BANG_.call(null, sounding_counter, cljs.core.inc);
      cljs.core.swap_BANG_.call(null, cljs.looperscript.looperscript.sounding_notes, cljs.core.assoc, id, node);
      return node["onended"] = function(id, sounding_counter) {
        return function() {
          return cljs.core.swap_BANG_.call(null, cljs.looperscript.looperscript.sounding_notes, cljs.core.dissoc, id);
        };
      }(id, sounding_counter);
    };
  }(sounding_counter);
}();
cljs.looperscript.looperscript.separate_multi_aspects = function separate_multi_aspects(part) {
  return cljs.core.assoc.call(null, cljs.core.reduce.call(null, function(m, p__29911) {
    var vec__29912 = p__29911;
    var k = cljs.core.nth.call(null, vec__29912, 0, null);
    var v = cljs.core.nth.call(null, vec__29912, 1, null);
    if (cljs.core._EQ_.call(null, 1, cljs.core.count.call(null, k))) {
      return cljs.core.assoc.call(null, m, cljs.core.first.call(null, k), v);
    } else {
      return cljs.core.reduce.call(null, cljs.core.into, m, function() {
        var iter__4379__auto__ = function(vec__29912, k, v) {
          return function iter__29913(s__29914) {
            return new cljs.core.LazySeq(null, function(vec__29912, k, v) {
              return function() {
                var s__29914__$1 = s__29914;
                while (true) {
                  var temp__4126__auto__ = cljs.core.seq.call(null, s__29914__$1);
                  if (temp__4126__auto__) {
                    var s__29914__$2 = temp__4126__auto__;
                    if (cljs.core.chunked_seq_QMARK_.call(null, s__29914__$2)) {
                      var c__4377__auto__ = cljs.core.chunk_first.call(null, s__29914__$2);
                      var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                      var b__29916 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                      if (function() {
                        var i__29915 = 0;
                        while (true) {
                          if (i__29915 < size__4378__auto__) {
                            var i = cljs.core._nth.call(null, c__4377__auto__, i__29915);
                            cljs.core.chunk_append.call(null, b__29916, new cljs.core.PersistentArrayMap.fromArray([cljs.core.nth.call(null, k, i), cljs.core.vec.call(null, cljs.core.apply.call(null, cljs.core.concat, cljs.core.partition.call(null, 1, cljs.core.count.call(null, k), cljs.core.drop.call(null, i, v))))], true, false));
                            var G__29917 = i__29915 + 1;
                            i__29915 = G__29917;
                            continue;
                          } else {
                            return true;
                          }
                          break;
                        }
                      }()) {
                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__29916), iter__29913.call(null, cljs.core.chunk_rest.call(null, s__29914__$2)));
                      } else {
                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__29916), null);
                      }
                    } else {
                      var i = cljs.core.first.call(null, s__29914__$2);
                      return cljs.core.cons.call(null, new cljs.core.PersistentArrayMap.fromArray([cljs.core.nth.call(null, k, i), cljs.core.vec.call(null, cljs.core.apply.call(null, cljs.core.concat, cljs.core.partition.call(null, 1, cljs.core.count.call(null, k), cljs.core.drop.call(null, i, v))))], true, false), iter__29913.call(null, cljs.core.rest.call(null, s__29914__$2)));
                    }
                  } else {
                    return null;
                  }
                  break;
                }
              };
            }(vec__29912, k, v), null, null);
          };
        }(vec__29912, k, v);
        return iter__4379__auto__.call(null, cljs.core.range.call(null, cljs.core.count.call(null, k)));
      }());
    }
  }, cljs.core.PersistentArrayMap.EMPTY, cljs.core.vec.call(null, cljs.core.dissoc.call(null, part, new cljs.core.Keyword(null, "name", "name", 1843675177)))), new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.get.call(null, part, new cljs.core.Keyword(null, "name", "name", 1843675177)));
};
cljs.looperscript.looperscript.make_iterators = function make_iterators(part) {
  var part__$1 = cljs.looperscript.looperscript.separate_multi_aspects.call(null, part);
  var part_keys = cljs.core.filter.call(null, cljs.core.keyword_QMARK_, cljs.core.remove.call(null, function(part__$1) {
    return function(p1__29918_SHARP_) {
      return cljs.core._EQ_.call(null, p1__29918_SHARP_, new cljs.core.Keyword(null, "name", "name", 1843675177));
    };
  }(part__$1), cljs.core.keys.call(null, part__$1)));
  var specified_aspects = cljs.core.set.call(null, part_keys);
  var sub_aspects = cljs.core.set.call(null, cljs.core.filter.call(null, cljs.core.vector_QMARK_, cljs.core.keys.call(null, part__$1)));
  var non_specified_aspects = cljs.core.remove.call(null, function(part__$1, part_keys, specified_aspects, sub_aspects) {
    return function(p1__29919_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, specified_aspects, p1__29919_SHARP_);
    };
  }(part__$1, part_keys, specified_aspects, sub_aspects), cljs.looperscript.looperscript.aspects);
  return cljs.core.into.call(null, cljs.core.zipmap.call(null, part_keys, cljs.core.map.call(null, function(part__$1, part_keys, specified_aspects, sub_aspects, non_specified_aspects) {
    return function(p1__29920_SHARP_) {
      if (cljs.core.contains_QMARK_.call(null, sub_aspects, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__29920_SHARP_, new cljs.core.Keyword(null, "time", "time", 1385887882)], null))) {
        return cljs.looperscript.iterator.timed_iterator.call(null, cljs.core.get.call(null, part__$1, p1__29920_SHARP_), cljs.core.get.call(null, part__$1, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__29920_SHARP_, new cljs.core.Keyword(null, "time", "time", 1385887882)], null)));
      } else {
        return cljs.looperscript.iterator.iterator.call(null, cljs.core.get.call(null, part__$1, p1__29920_SHARP_));
      }
    };
  }(part__$1, part_keys, specified_aspects, sub_aspects, non_specified_aspects), part_keys)), cljs.core.zipmap.call(null, non_specified_aspects, cljs.core.map.call(null, function(part__$1, part_keys, specified_aspects, sub_aspects, non_specified_aspects) {
    return function(p1__29921_SHARP_) {
      return cljs.looperscript.iterator.iterator.call(null, cljs.core.get.call(null, cljs.looperscript.looperscript.aspect_defaults, p1__29921_SHARP_));
    };
  }(part__$1, part_keys, specified_aspects, sub_aspects, non_specified_aspects), non_specified_aspects)));
};
cljs.looperscript.looperscript.next_note_fn = function next_note_fn(part, start_time) {
  var iterators = cljs.looperscript.looperscript.make_iterators.call(null, part);
  var time_pos = cljs.core.atom.call(null, start_time + cljs.looperscript.looperscript.get_bpm.call(null) * cljs.core.first.call(null, cljs.core.get.call(null, part, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "offset", "offset", 296498311)], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [0], null))));
  return function(iterators, time_pos) {
    return function() {
      var G__29938 = null;
      var G__29938__0 = function() {
        while (true) {
          var adjusted_time_pos = 1E-7 + (cljs.core.deref.call(null, time_pos) - start_time) / cljs.looperscript.looperscript.get_bpm.call(null);
          var res_v = function() {
            var iter__4379__auto__ = function(adjusted_time_pos, iterators, time_pos) {
              return function iter__29930(s__29931) {
                return new cljs.core.LazySeq(null, function(adjusted_time_pos, iterators, time_pos) {
                  return function() {
                    var s__29931__$1 = s__29931;
                    while (true) {
                      var temp__4126__auto__ = cljs.core.seq.call(null, s__29931__$1);
                      if (temp__4126__auto__) {
                        var s__29931__$2 = temp__4126__auto__;
                        if (cljs.core.chunked_seq_QMARK_.call(null, s__29931__$2)) {
                          var c__4377__auto__ = cljs.core.chunk_first.call(null, s__29931__$2);
                          var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                          var b__29933 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                          if (function() {
                            var i__29932 = 0;
                            while (true) {
                              if (i__29932 < size__4378__auto__) {
                                var vec__29936 = cljs.core._nth.call(null, c__4377__auto__, i__29932);
                                var aspect = cljs.core.nth.call(null, vec__29936, 0, null);
                                var iter = cljs.core.nth.call(null, vec__29936, 1, null);
                                cljs.core.chunk_append.call(null, b__29933, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [aspect, iter.call(null, adjusted_time_pos)], null));
                                var G__29939 = i__29932 + 1;
                                i__29932 = G__29939;
                                continue;
                              } else {
                                return true;
                              }
                              break;
                            }
                          }()) {
                            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__29933), iter__29930.call(null, cljs.core.chunk_rest.call(null, s__29931__$2)));
                          } else {
                            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__29933), null);
                          }
                        } else {
                          var vec__29937 = cljs.core.first.call(null, s__29931__$2);
                          var aspect = cljs.core.nth.call(null, vec__29937, 0, null);
                          var iter = cljs.core.nth.call(null, vec__29937, 1, null);
                          return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [aspect, iter.call(null, adjusted_time_pos)], null), iter__29930.call(null, cljs.core.rest.call(null, s__29931__$2)));
                        }
                      } else {
                        return null;
                      }
                      break;
                    }
                  };
                }(adjusted_time_pos, iterators, time_pos), null, null);
              };
            }(adjusted_time_pos, iterators, time_pos);
            return iter__4379__auto__.call(null, iterators);
          }();
          var res = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, res_v);
          var res__$1 = cljs.core.update_in.call(null, cljs.core.update_in.call(null, cljs.core.assoc.call(null, cljs.core.assoc.call(null, res, new cljs.core.Keyword(null, "start-time", "start-time", 814801386), cljs.core.deref.call(null, time_pos)), new cljs.core.Keyword(null, "overtones", "overtones", -2065460921), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [1], null)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
          "time", "time", 1385887882)], null), cljs.core._STAR_, cljs.looperscript.looperscript.get_bpm.call(null)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "time+", "time+", 2008858809)], null), cljs.core._STAR_, cljs.looperscript.looperscript.get_bpm.call(null));
          if (0 >= res__$1.call(null, new cljs.core.Keyword(null, "skip", "skip", 602715391))) {
            continue;
          } else {
            cljs.core.swap_BANG_.call(null, time_pos, cljs.core._PLUS_, res__$1.call(null, new cljs.core.Keyword(null, "time", "time", 1385887882)));
            return res__$1;
          }
          break;
        }
      };
      var G__29938__1 = function(command) {
        if (cljs.core._EQ_.call(null, command, new cljs.core.Keyword(null, "time-pos", "time-pos", -106363383))) {
          return cljs.core.deref.call(null, time_pos);
        } else {
          return null;
        }
      };
      G__29938 = function(command) {
        switch(arguments.length) {
          case 0:
            return G__29938__0.call(this);
          case 1:
            return G__29938__1.call(this, command);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__29938.cljs$core$IFn$_invoke$arity$0 = G__29938__0;
      G__29938.cljs$core$IFn$_invoke$arity$1 = G__29938__1;
      return G__29938;
    }();
  }(iterators, time_pos);
};
cljs.looperscript.looperscript.schedule_note = function schedule_note(n) {
  var sound = (new cljs.core.Keyword(null, "sound", "sound", -2127407070)).cljs$core$IFn$_invoke$arity$1(n);
  var rate = (new cljs.core.Keyword(null, "rate", "rate", -1428659698)).cljs$core$IFn$_invoke$arity$1(n);
  var start_time = (new cljs.core.Keyword(null, "start-time", "start-time", 814801386)).cljs$core$IFn$_invoke$arity$1(n) + (new cljs.core.Keyword(null, "time+", "time+", 2008858809)).cljs$core$IFn$_invoke$arity$1(n);
  var start_time__$1 = cljs.core.vector_QMARK_.call(null, sound) && cljs.core._EQ_.call(null, cljs.core.first.call(null, sound), new cljs.core.Keyword(null, "drum-code", "drum-code", 2081814302)) ? function() {
    var temp__4124__auto__ = cljs.core.get.call(null, cljs.looperscript.audio.sample_lags, cljs.core.get.call(null, cljs.looperscript.audio.drum_codes, cljs.core.second.call(null, sound)));
    if (cljs.core.truth_(temp__4124__auto__)) {
      var l = temp__4124__auto__;
      return start_time - l / rate;
    } else {
      return start_time;
    }
  }() : start_time;
  if (start_time__$1 >= cljs.looperscript.start_time.now.call(null)) {
    var sound__$1 = typeof sound === "number" ? cljs.looperscript.looperscript.note__GT_freq.call(null, sound) : cljs.core.vector_QMARK_.call(null, sound) && cljs.core._EQ_.call(null, cljs.core.first.call(null, sound), new cljs.core.Keyword(null, "ratio", "ratio", -926560044)) ? cljs.looperscript.looperscript.ratio__GT_freq.call(null, cljs.core.second.call(null, sound)) : cljs.core.vector_QMARK_.call(null, sound) && cljs.core._EQ_.call(null, cljs.core.first.call(null, sound), new cljs.core.Keyword(null, 
    "hz", "hz", -1450739349)) ? cljs.core.second.call(null, sound) : cljs.core.vector_QMARK_.call(null, sound) && cljs.core._EQ_.call(null, cljs.core.first.call(null, sound), new cljs.core.Keyword(null, "drum-code", "drum-code", 2081814302)) ? cljs.looperscript.audio.drum_codes.call(null, cljs.core.second.call(null, sound)) : sound;
    var dur = (new cljs.core.Keyword(null, "time", "time", 1385887882)).cljs$core$IFn$_invoke$arity$1(n) - (new cljs.core.Keyword(null, "time+", "time+", 2008858809)).cljs$core$IFn$_invoke$arity$1(n);
    var vol = (new cljs.core.Keyword(null, "volume", "volume", 1900330799)).cljs$core$IFn$_invoke$arity$1(n);
    var filter = (new cljs.core.Keyword(null, "filter", "filter", -948537934)).cljs$core$IFn$_invoke$arity$1(n);
    var pan = (new cljs.core.Keyword(null, "pan", "pan", -307712792)).cljs$core$IFn$_invoke$arity$1(n);
    var synth = (new cljs.core.Keyword(null, "synth", "synth", -862700847)).cljs$core$IFn$_invoke$arity$1(n);
    var overtones = (new cljs.core.Keyword(null, "overtones", "overtones", -2065460921)).cljs$core$IFn$_invoke$arity$1(n);
    var node = typeof sound__$1 === "number" ? cljs.core.truth_(filter) ? cljs.looperscript.audio.play_filtered_tone.call(null, sound__$1, start_time__$1, dur, vol, pan, filter, synth, overtones) : cljs.looperscript.audio.play_tone.call(null, sound__$1, start_time__$1, dur, vol, pan, synth, overtones) : cljs.looperscript.audio.play_sound.call(null, sound__$1, start_time__$1, vol, rate);
    var seq__29944 = cljs.core.seq.call(null, cljs.core.coll_QMARK_.call(null, node) ? node : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [node], null));
    var chunk__29945 = null;
    var count__29946 = 0;
    var i__29947 = 0;
    while (true) {
      if (i__29947 < count__29946) {
        var i = cljs.core._nth.call(null, chunk__29945, i__29947);
        cljs.looperscript.looperscript.add_note_to_sounding_notes.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [n, cljs.core.rand.call(null)], null), i);
        var G__29948 = seq__29944;
        var G__29949 = chunk__29945;
        var G__29950 = count__29946;
        var G__29951 = i__29947 + 1;
        seq__29944 = G__29948;
        chunk__29945 = G__29949;
        count__29946 = G__29950;
        i__29947 = G__29951;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__29944);
        if (temp__4126__auto__) {
          var seq__29944__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__29944__$1)) {
            var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__29944__$1);
            var G__29952 = cljs.core.chunk_rest.call(null, seq__29944__$1);
            var G__29953 = c__4410__auto__;
            var G__29954 = cljs.core.count.call(null, c__4410__auto__);
            var G__29955 = 0;
            seq__29944 = G__29952;
            chunk__29945 = G__29953;
            count__29946 = G__29954;
            i__29947 = G__29955;
            continue;
          } else {
            var i = cljs.core.first.call(null, seq__29944__$1);
            cljs.looperscript.looperscript.add_note_to_sounding_notes.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [n, cljs.core.rand.call(null)], null), i);
            var G__29956 = cljs.core.next.call(null, seq__29944__$1);
            var G__29957 = null;
            var G__29958 = 0;
            var G__29959 = 0;
            seq__29944 = G__29956;
            chunk__29945 = G__29957;
            count__29946 = G__29958;
            i__29947 = G__29959;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.looperscript.looperscript.queue_notes = function queue_notes() {
  cljs.core.reset_BANG_.call(null, cljs.looperscript.looperscript.last_queue_time, cljs.looperscript.start_time.now.call(null));
  var end_time = cljs.looperscript.start_time.now.call(null) + cljs.looperscript.looperscript.queue_time_extra + cljs.looperscript.looperscript.queue_time_interval;
  var seq__29964 = cljs.core.seq.call(null, cljs.core.deref.call(null, cljs.looperscript.looperscript.current_next_note_fns));
  var chunk__29965 = null;
  var count__29966 = 0;
  var i__29967 = 0;
  while (true) {
    if (i__29967 < count__29966) {
      var n_n_fn = cljs.core._nth.call(null, chunk__29965, i__29967);
      if (n_n_fn.call(null, new cljs.core.Keyword(null, "time-pos", "time-pos", -106363383)) < end_time) {
        while (true) {
          var next_note_29968 = n_n_fn.call(null);
          if (0 < (new cljs.core.Keyword(null, "mute", "mute", 1151223646)).cljs$core$IFn$_invoke$arity$1(next_note_29968)) {
            cljs.looperscript.looperscript.schedule_note.call(null, next_note_29968);
          } else {
          }
          if ((new cljs.core.Keyword(null, "start-time", "start-time", 814801386)).cljs$core$IFn$_invoke$arity$1(next_note_29968) < end_time) {
            continue;
          } else {
          }
          break;
        }
      } else {
      }
      var G__29969 = seq__29964;
      var G__29970 = chunk__29965;
      var G__29971 = count__29966;
      var G__29972 = i__29967 + 1;
      seq__29964 = G__29969;
      chunk__29965 = G__29970;
      count__29966 = G__29971;
      i__29967 = G__29972;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__29964);
      if (temp__4126__auto__) {
        var seq__29964__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__29964__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__29964__$1);
          var G__29973 = cljs.core.chunk_rest.call(null, seq__29964__$1);
          var G__29974 = c__4410__auto__;
          var G__29975 = cljs.core.count.call(null, c__4410__auto__);
          var G__29976 = 0;
          seq__29964 = G__29973;
          chunk__29965 = G__29974;
          count__29966 = G__29975;
          i__29967 = G__29976;
          continue;
        } else {
          var n_n_fn = cljs.core.first.call(null, seq__29964__$1);
          if (n_n_fn.call(null, new cljs.core.Keyword(null, "time-pos", "time-pos", -106363383)) < end_time) {
            while (true) {
              var next_note_29977 = n_n_fn.call(null);
              if (0 < (new cljs.core.Keyword(null, "mute", "mute", 1151223646)).cljs$core$IFn$_invoke$arity$1(next_note_29977)) {
                cljs.looperscript.looperscript.schedule_note.call(null, next_note_29977);
              } else {
              }
              if ((new cljs.core.Keyword(null, "start-time", "start-time", 814801386)).cljs$core$IFn$_invoke$arity$1(next_note_29977) < end_time) {
                continue;
              } else {
              }
              break;
            }
          } else {
          }
          var G__29978 = cljs.core.next.call(null, seq__29964__$1);
          var G__29979 = null;
          var G__29980 = 0;
          var G__29981 = 0;
          seq__29964 = G__29978;
          chunk__29965 = G__29979;
          count__29966 = G__29980;
          i__29967 = G__29981;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.looperscript.looperscript.reset_button = function reset_button() {
  cljs.looperscript.looperscript.stop.call(null);
  return cljs.looperscript.start_time.reset_clock_BANG_.call(null);
};
cljs.looperscript.looperscript.update = function() {
  var update = null;
  var update__0 = function() {
    return update.call(null, cljs.looperscript.looperscript.get_parts.call(null));
  };
  var update__1 = function(parts) {
    if (instaparse.core.failure_QMARK_.call(null, parts)) {
      return cljs.looperscript.logging.log.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.vec.call(null, parts)));
    } else {
      var new_nnfns = cljs.core.vec.call(null, function() {
        var iter__4379__auto__ = function iter__29990(s__29991) {
          return new cljs.core.LazySeq(null, function() {
            var s__29991__$1 = s__29991;
            while (true) {
              var temp__4126__auto__ = cljs.core.seq.call(null, s__29991__$1);
              if (temp__4126__auto__) {
                var s__29991__$2 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__29991__$2)) {
                  var c__4377__auto__ = cljs.core.chunk_first.call(null, s__29991__$2);
                  var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                  var b__29993 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                  if (function() {
                    var i__29992 = 0;
                    while (true) {
                      if (i__29992 < size__4378__auto__) {
                        var p = cljs.core._nth.call(null, c__4377__auto__, i__29992);
                        cljs.core.chunk_append.call(null, b__29993, cljs.looperscript.looperscript.next_note_fn.call(null, p, cljs.looperscript.start_time.get_current_start_time.call(null)));
                        var G__29998 = i__29992 + 1;
                        i__29992 = G__29998;
                        continue;
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__29993), iter__29990.call(null, cljs.core.chunk_rest.call(null, s__29991__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__29993), null);
                  }
                } else {
                  var p = cljs.core.first.call(null, s__29991__$2);
                  return cljs.core.cons.call(null, cljs.looperscript.looperscript.next_note_fn.call(null, p, cljs.looperscript.start_time.get_current_start_time.call(null)), iter__29990.call(null, cljs.core.rest.call(null, s__29991__$2)));
                }
              } else {
                return null;
              }
              break;
            }
          }, null, null);
        };
        return iter__4379__auto__.call(null, cljs.core.vals.call(null, parts));
      }());
      var seq__29994_29999 = cljs.core.seq.call(null, new_nnfns);
      var chunk__29995_30000 = null;
      var count__29996_30001 = 0;
      var i__29997_30002 = 0;
      while (true) {
        if (i__29997_30002 < count__29996_30001) {
          var nnfn_30003 = cljs.core._nth.call(null, chunk__29995_30000, i__29997_30002);
          while (true) {
            if (cljs.core.truth_(function() {
              var and__3628__auto__ = cljs.core.deref.call(null, cljs.looperscript.looperscript.last_queue_time);
              if (cljs.core.truth_(and__3628__auto__)) {
                var and__3628__auto____$1 = cljs.core.deref.call(null, cljs.looperscript.looperscript.playing);
                if (cljs.core.truth_(and__3628__auto____$1)) {
                  var and__3628__auto____$2 = true;
                  if (and__3628__auto____$2) {
                    return cljs.looperscript.start_time.now.call(null) - cljs.core.deref.call(null, cljs.looperscript.looperscript.last_queue_time);
                  } else {
                    return and__3628__auto____$2;
                  }
                } else {
                  return and__3628__auto____$1;
                }
              } else {
                return and__3628__auto__;
              }
            }())) {
              cljs.looperscript.looperscript.queue_notes.call(null);
            } else {
            }
            if (cljs.looperscript.start_time.now.call(null) > nnfn_30003.call(null, new cljs.core.Keyword(null, "time-pos", "time-pos", -106363383))) {
              nnfn_30003.call(null);
              continue;
            } else {
            }
            break;
          }
          var G__30004 = seq__29994_29999;
          var G__30005 = chunk__29995_30000;
          var G__30006 = count__29996_30001;
          var G__30007 = i__29997_30002 + 1;
          seq__29994_29999 = G__30004;
          chunk__29995_30000 = G__30005;
          count__29996_30001 = G__30006;
          i__29997_30002 = G__30007;
          continue;
        } else {
          var temp__4126__auto___30008 = cljs.core.seq.call(null, seq__29994_29999);
          if (temp__4126__auto___30008) {
            var seq__29994_30009__$1 = temp__4126__auto___30008;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__29994_30009__$1)) {
              var c__4410__auto___30010 = cljs.core.chunk_first.call(null, seq__29994_30009__$1);
              var G__30011 = cljs.core.chunk_rest.call(null, seq__29994_30009__$1);
              var G__30012 = c__4410__auto___30010;
              var G__30013 = cljs.core.count.call(null, c__4410__auto___30010);
              var G__30014 = 0;
              seq__29994_29999 = G__30011;
              chunk__29995_30000 = G__30012;
              count__29996_30001 = G__30013;
              i__29997_30002 = G__30014;
              continue;
            } else {
              var nnfn_30015 = cljs.core.first.call(null, seq__29994_30009__$1);
              while (true) {
                if (cljs.core.truth_(function() {
                  var and__3628__auto__ = cljs.core.deref.call(null, cljs.looperscript.looperscript.last_queue_time);
                  if (cljs.core.truth_(and__3628__auto__)) {
                    var and__3628__auto____$1 = cljs.core.deref.call(null, cljs.looperscript.looperscript.playing);
                    if (cljs.core.truth_(and__3628__auto____$1)) {
                      var and__3628__auto____$2 = true;
                      if (and__3628__auto____$2) {
                        return cljs.looperscript.start_time.now.call(null) - cljs.core.deref.call(null, cljs.looperscript.looperscript.last_queue_time);
                      } else {
                        return and__3628__auto____$2;
                      }
                    } else {
                      return and__3628__auto____$1;
                    }
                  } else {
                    return and__3628__auto__;
                  }
                }())) {
                  cljs.looperscript.looperscript.queue_notes.call(null);
                } else {
                }
                if (cljs.looperscript.start_time.now.call(null) > nnfn_30015.call(null, new cljs.core.Keyword(null, "time-pos", "time-pos", -106363383))) {
                  nnfn_30015.call(null);
                  continue;
                } else {
                }
                break;
              }
              var G__30016 = cljs.core.next.call(null, seq__29994_30009__$1);
              var G__30017 = null;
              var G__30018 = 0;
              var G__30019 = 0;
              seq__29994_29999 = G__30016;
              chunk__29995_30000 = G__30017;
              count__29996_30001 = G__30018;
              i__29997_30002 = G__30019;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return cljs.core.reset_BANG_.call(null, cljs.looperscript.looperscript.current_next_note_fns, new_nnfns);
    }
  };
  update = function(parts) {
    switch(arguments.length) {
      case 0:
        return update__0.call(this);
      case 1:
        return update__1.call(this, parts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update.cljs$core$IFn$_invoke$arity$0 = update__0;
  update.cljs$core$IFn$_invoke$arity$1 = update__1;
  return update;
}();
cljs.looperscript.looperscript.kill_playing_interval = function kill_playing_interval() {
  if (cljs.core.truth_(cljs.core.deref.call(null, cljs.looperscript.looperscript.playing_interval))) {
    clearInterval(cljs.core.deref.call(null, cljs.looperscript.looperscript.playing_interval));
    return cljs.core.reset_BANG_.call(null, cljs.looperscript.looperscript.playing_interval, null);
  } else {
    return null;
  }
};
cljs.looperscript.looperscript.play = function play() {
  var parts = cljs.looperscript.looperscript.get_parts.call(null);
  if (cljs.looperscript.start_time.get_current_start_time.call(null) == null) {
    cljs.looperscript.start_time.reset_clock_BANG_.call(null, cljs.looperscript.start_time.now.call(null) + .5);
  } else {
  }
  cljs.looperscript.looperscript.update.call(null, parts);
  cljs.looperscript.looperscript.queue_notes.call(null);
  cljs.looperscript.looperscript.kill_playing_interval.call(null);
  cljs.core.reset_BANG_.call(null, cljs.looperscript.looperscript.playing_interval, setInterval(cljs.looperscript.looperscript.queue_notes, cljs.looperscript.looperscript.queue_time_interval * 1E3));
  return cljs.core.reset_BANG_.call(null, cljs.looperscript.looperscript.playing, true);
};
cljs.looperscript.looperscript.kill_sounds = function kill_sounds() {
  var seq__30024_30028 = cljs.core.seq.call(null, cljs.core.vals.call(null, cljs.core.deref.call(null, cljs.looperscript.looperscript.sounding_notes)));
  var chunk__30025_30029 = null;
  var count__30026_30030 = 0;
  var i__30027_30031 = 0;
  while (true) {
    if (i__30027_30031 < count__30026_30030) {
      var n_30032 = cljs.core._nth.call(null, chunk__30025_30029, i__30027_30031);
      n_30032.stop();
      var G__30033 = seq__30024_30028;
      var G__30034 = chunk__30025_30029;
      var G__30035 = count__30026_30030;
      var G__30036 = i__30027_30031 + 1;
      seq__30024_30028 = G__30033;
      chunk__30025_30029 = G__30034;
      count__30026_30030 = G__30035;
      i__30027_30031 = G__30036;
      continue;
    } else {
      var temp__4126__auto___30037 = cljs.core.seq.call(null, seq__30024_30028);
      if (temp__4126__auto___30037) {
        var seq__30024_30038__$1 = temp__4126__auto___30037;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__30024_30038__$1)) {
          var c__4410__auto___30039 = cljs.core.chunk_first.call(null, seq__30024_30038__$1);
          var G__30040 = cljs.core.chunk_rest.call(null, seq__30024_30038__$1);
          var G__30041 = c__4410__auto___30039;
          var G__30042 = cljs.core.count.call(null, c__4410__auto___30039);
          var G__30043 = 0;
          seq__30024_30028 = G__30040;
          chunk__30025_30029 = G__30041;
          count__30026_30030 = G__30042;
          i__30027_30031 = G__30043;
          continue;
        } else {
          var n_30044 = cljs.core.first.call(null, seq__30024_30038__$1);
          n_30044.stop();
          var G__30045 = cljs.core.next.call(null, seq__30024_30038__$1);
          var G__30046 = null;
          var G__30047 = 0;
          var G__30048 = 0;
          seq__30024_30028 = G__30045;
          chunk__30025_30029 = G__30046;
          count__30026_30030 = G__30047;
          i__30027_30031 = G__30048;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return cljs.core.reset_BANG_.call(null, cljs.looperscript.looperscript.sounding_notes, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.looperscript.looperscript.stop = function stop() {
  cljs.core.reset_BANG_.call(null, cljs.looperscript.looperscript.playing, false);
  cljs.looperscript.looperscript.kill_playing_interval.call(null);
  return cljs.looperscript.looperscript.kill_sounds.call(null);
};
domina.events.listen_BANG_.call(null, domina.by_id.call(null, "play"), new cljs.core.Keyword(null, "click", "click", 1912301393), function(e) {
  return cljs.looperscript.looperscript.play.call(null);
});
domina.events.listen_BANG_.call(null, domina.by_id.call(null, "pause"), new cljs.core.Keyword(null, "click", "click", 1912301393), function(e) {
  return cljs.looperscript.looperscript.stop.call(null);
});
domina.events.listen_BANG_.call(null, domina.by_id.call(null, "update"), new cljs.core.Keyword(null, "click", "click", 1912301393), function(e) {
  return cljs.looperscript.looperscript.update.call(null);
});
domina.events.listen_BANG_.call(null, domina.by_id.call(null, "link"), new cljs.core.Keyword(null, "click", "click", 1912301393), function(e) {
  return cljs.looperscript.address_bar.text__GT_link.call(null);
});
domina.events.listen_BANG_.call(null, domina.by_id.call(null, "stop"), new cljs.core.Keyword(null, "click", "click", 1912301393), function(e) {
  return cljs.looperscript.looperscript.reset_button.call(null);
});
cljs.looperscript.looperscript.bind_key = function bind_key(name, windows_key, mac_key, f) {
  return editor["commands"].addCommand(function() {
    var obj30054 = {"name":name, "bindKey":function() {
      var obj30056 = {"win":windows_key, "mac":mac_key};
      return obj30056;
    }(), "exec":f};
    return obj30054;
  }());
};
cljs.looperscript.looperscript.bind_key.call(null, "update", "Ctrl-Shift-u", "Command-Shift-U", function() {
  var G__30057__delegate = function(args) {
    return cljs.looperscript.looperscript.update.call(null);
  };
  var G__30057 = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return G__30057__delegate.call(this, args);
  };
  G__30057.cljs$lang$maxFixedArity = 0;
  G__30057.cljs$lang$applyTo = function(arglist__30058) {
    var args = cljs.core.seq(arglist__30058);
    return G__30057__delegate(args);
  };
  G__30057.cljs$core$IFn$_invoke$arity$variadic = G__30057__delegate;
  return G__30057;
}());
cljs.looperscript.looperscript.bind_key.call(null, "link", "Ctrl-Shift-l", "Command-Shift-L", function(e) {
  return cljs.looperscript.address_bar.text__GT_link.call(null);
});
cljs.looperscript.looperscript.bind_key.call(null, "stop", "Ctrl-Shift-S", "Command-Shift-S", cljs.looperscript.looperscript.reset_button);
cljs.looperscript.looperscript.bind_key.call(null, "play", "Ctrol-Shift-P", "Command-Shift-P", cljs.looperscript.looperscript.play);
cljs.looperscript.audio.load_some_drums.call(null);
