if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}

var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2371";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__13317__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__13317 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__13317__delegate.call(this, args);
    };
    G__13317.cljs$lang$maxFixedArity = 0;
    G__13317.cljs$lang$applyTo = function(arglist__13318) {
      var args = cljs.core.seq(arglist__13318);
      return G__13317__delegate(args);
    };
    G__13317.cljs$core$IFn$_invoke$arity$variadic = G__13317__delegate;
    return G__13317;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function some_QMARK_(x) {
  return!(x == null);
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3628__auto__ = ty;
    if (cljs.core.truth_(and__3628__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3628__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4124__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var s = temp__4124__auto__;
    return s;
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ty);
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4510__auto___13319 = len;
  var i_13320 = 0;
  while (true) {
    if (i_13320 < n__4510__auto___13319) {
      new_arr[i_13320] = arr[i_13320];
      var G__13321 = i_13320 + 1;
      i_13320 = G__13321;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__13322__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__13322 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13322__delegate.call(this, array, i, idxs);
    };
    G__13322.cljs$lang$maxFixedArity = 2;
    G__13322.cljs$lang$applyTo = function(arglist__13323) {
      var array = cljs.core.first(arglist__13323);
      arglist__13323 = cljs.core.next(arglist__13323);
      var i = cljs.core.first(arglist__13323);
      var idxs = cljs.core.rest(arglist__13323);
      return G__13322__delegate(array, i, idxs);
    };
    G__13322.cljs$core$IFn$_invoke$arity$variadic = G__13322__delegate;
    return G__13322;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__13324__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__13324 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__13324__delegate.call(this, array, idx, idx2, idxv);
    };
    G__13324.cljs$lang$maxFixedArity = 3;
    G__13324.cljs$lang$applyTo = function(arglist__13325) {
      var array = cljs.core.first(arglist__13325);
      arglist__13325 = cljs.core.next(arglist__13325);
      var idx = cljs.core.first(arglist__13325);
      arglist__13325 = cljs.core.next(arglist__13325);
      var idx2 = cljs.core.first(arglist__13325);
      var idxv = cljs.core.rest(arglist__13325);
      return G__13324__delegate(array, idx, idx2, idxv);
    };
    G__13324.cljs$core$IFn$_invoke$arity$variadic = G__13324__delegate;
    return G__13324;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj13327 = {};
  return obj13327;
}();
cljs.core.IFn = function() {
  var obj13329 = {};
  return obj13329;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    }
  };
  var _invoke__22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    if (function() {
      var and__3628__auto__ = this$;
      if (and__3628__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$22;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var x__4277__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3640__auto__ = cljs.core._invoke[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._invoke["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return _invoke__22.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  _invoke.cljs$core$IFn$_invoke$arity$22 = _invoke__22;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj13331 = {};
  return obj13331;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3628__auto__ = value;
    if (and__3628__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4277__auto__ = value == null ? null : value;
    return function() {
      var or__3640__auto__ = cljs.core._clone[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._clone["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj13333 = {};
  return obj13333;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._count[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._count["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj13335 = {};
  return obj13335;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._empty[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._empty["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj13337 = {};
  return obj13337;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._conj[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._conj["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj13339 = {};
  return obj13339;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3628__auto__ = coll;
      if (and__3628__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4277__auto__ = coll == null ? null : coll;
      return function() {
        var or__3640__auto__ = cljs.core._nth[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._nth["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3628__auto__ = coll;
      if (and__3628__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4277__auto__ = coll == null ? null : coll;
      return function() {
        var or__3640__auto__ = cljs.core._nth[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._nth["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj13341 = {};
  return obj13341;
}();
cljs.core.ISeq = function() {
  var obj13343 = {};
  return obj13343;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._first[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._first["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._rest[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._rest["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj13345 = {};
  return obj13345;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._next[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._next["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj13347 = {};
  return obj13347;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3628__auto__ = o;
      if (and__3628__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4277__auto__ = o == null ? null : o;
      return function() {
        var or__3640__auto__ = cljs.core._lookup[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._lookup["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3628__auto__ = o;
      if (and__3628__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4277__auto__ = o == null ? null : o;
      return function() {
        var or__3640__auto__ = cljs.core._lookup[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._lookup["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj13349 = {};
  return obj13349;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._assoc[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._assoc["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj13351 = {};
  return obj13351;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._dissoc[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._dissoc["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj13353 = {};
  return obj13353;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._key[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._key["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._val[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._val["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj13355 = {};
  return obj13355;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._disjoin[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._disjoin["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj13357 = {};
  return obj13357;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._peek[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._peek["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._pop[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._pop["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj13359 = {};
  return obj13359;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._assoc_n[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj13361 = {};
  return obj13361;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3628__auto__ = o;
    if (and__3628__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4277__auto__ = o == null ? null : o;
    return function() {
      var or__3640__auto__ = cljs.core._deref[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._deref["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj13363 = {};
  return obj13363;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3628__auto__ = o;
    if (and__3628__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4277__auto__ = o == null ? null : o;
    return function() {
      var or__3640__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj13365 = {};
  return obj13365;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3628__auto__ = o;
    if (and__3628__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4277__auto__ = o == null ? null : o;
    return function() {
      var or__3640__auto__ = cljs.core._meta[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._meta["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj13367 = {};
  return obj13367;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3628__auto__ = o;
    if (and__3628__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4277__auto__ = o == null ? null : o;
    return function() {
      var or__3640__auto__ = cljs.core._with_meta[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._with_meta["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj13369 = {};
  return obj13369;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3628__auto__ = coll;
      if (and__3628__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4277__auto__ = coll == null ? null : coll;
      return function() {
        var or__3640__auto__ = cljs.core._reduce[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._reduce["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3628__auto__ = coll;
      if (and__3628__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4277__auto__ = coll == null ? null : coll;
      return function() {
        var or__3640__auto__ = cljs.core._reduce[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._reduce["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj13371 = {};
  return obj13371;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._kv_reduce[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj13373 = {};
  return obj13373;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3628__auto__ = o;
    if (and__3628__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4277__auto__ = o == null ? null : o;
    return function() {
      var or__3640__auto__ = cljs.core._equiv[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._equiv["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj13375 = {};
  return obj13375;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3628__auto__ = o;
    if (and__3628__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4277__auto__ = o == null ? null : o;
    return function() {
      var or__3640__auto__ = cljs.core._hash[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._hash["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj13377 = {};
  return obj13377;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3628__auto__ = o;
    if (and__3628__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4277__auto__ = o == null ? null : o;
    return function() {
      var or__3640__auto__ = cljs.core._seq[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._seq["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj13379 = {};
  return obj13379;
}();
cljs.core.IList = function() {
  var obj13381 = {};
  return obj13381;
}();
cljs.core.IRecord = function() {
  var obj13383 = {};
  return obj13383;
}();
cljs.core.IReversible = function() {
  var obj13385 = {};
  return obj13385;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._rseq[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._rseq["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj13387 = {};
  return obj13387;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._sorted_seq[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._entry_key[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._entry_key["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._comparator[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._comparator["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj13389 = {};
  return obj13389;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3628__auto__ = writer;
    if (and__3628__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4277__auto__ = writer == null ? null : writer;
    return function() {
      var or__3640__auto__ = cljs.core._write[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._write["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3628__auto__ = writer;
    if (and__3628__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4277__auto__ = writer == null ? null : writer;
    return function() {
      var or__3640__auto__ = cljs.core._flush[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._flush["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj13391 = {};
  return obj13391;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3628__auto__ = o;
    if (and__3628__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4277__auto__ = o == null ? null : o;
    return function() {
      var or__3640__auto__ = cljs.core._pr_writer[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj13393 = {};
  return obj13393;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3628__auto__ = d;
    if (and__3628__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4277__auto__ = d == null ? null : d;
    return function() {
      var or__3640__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj13395 = {};
  return obj13395;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3628__auto__ = this$;
    if (and__3628__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4277__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3640__auto__ = cljs.core._notify_watches[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3628__auto__ = this$;
    if (and__3628__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4277__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3640__auto__ = cljs.core._add_watch[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._add_watch["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3628__auto__ = this$;
    if (and__3628__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4277__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3640__auto__ = cljs.core._remove_watch[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj13397 = {};
  return obj13397;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._as_transient[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._as_transient["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj13399 = {};
  return obj13399;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3628__auto__ = tcoll;
    if (and__3628__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4277__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3640__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3628__auto__ = tcoll;
    if (and__3628__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4277__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3640__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj13401 = {};
  return obj13401;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3628__auto__ = tcoll;
    if (and__3628__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4277__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3640__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj13403 = {};
  return obj13403;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3628__auto__ = tcoll;
    if (and__3628__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4277__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3640__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj13405 = {};
  return obj13405;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3628__auto__ = tcoll;
    if (and__3628__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4277__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3640__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3628__auto__ = tcoll;
    if (and__3628__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4277__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3640__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj13407 = {};
  return obj13407;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3628__auto__ = tcoll;
    if (and__3628__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4277__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3640__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj13409 = {};
  return obj13409;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3628__auto__ = x;
    if (and__3628__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4277__auto__ = x == null ? null : x;
    return function() {
      var or__3640__auto__ = cljs.core._compare[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._compare["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj13411 = {};
  return obj13411;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._drop_first[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._drop_first["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj13413 = {};
  return obj13413;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._chunked_first[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._chunked_rest[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj13415 = {};
  return obj13415;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._chunked_next[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj13417 = {};
  return obj13417;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3628__auto__ = x;
    if (and__3628__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4277__auto__ = x == null ? null : x;
    return function() {
      var or__3640__auto__ = cljs.core._name[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._name["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3628__auto__ = x;
    if (and__3628__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4277__auto__ = x == null ? null : x;
    return function() {
      var or__3640__auto__ = cljs.core._namespace[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._namespace["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.IAtom = function() {
  var obj13419 = {};
  return obj13419;
}();
cljs.core.IReset = function() {
  var obj13421 = {};
  return obj13421;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__3628__auto__ = o;
    if (and__3628__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4277__auto__ = o == null ? null : o;
    return function() {
      var or__3640__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj13423 = {};
  return obj13423;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__3628__auto__ = o;
      if (and__3628__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__4277__auto__ = o == null ? null : o;
      return function() {
        var or__3640__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__3628__auto__ = o;
      if (and__3628__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__4277__auto__ = o == null ? null : o;
      return function() {
        var or__3640__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__3628__auto__ = o;
      if (and__3628__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__4277__auto__ = o == null ? null : o;
      return function() {
        var or__3640__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__3628__auto__ = o;
      if (and__3628__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__3628__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__4277__auto__ = o == null ? null : o;
      return function() {
        var or__3640__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4277__auto__)];
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3640__auto____$1) {
            return or__3640__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.IIterable = function() {
  var obj13425 = {};
  return obj13425;
}();
cljs.core._iterator = function _iterator(coll) {
  if (function() {
    var and__3628__auto__ = coll;
    if (and__3628__auto__) {
      return coll.cljs$core$IIterable$_iterator$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__4277__auto__ = coll == null ? null : coll;
    return function() {
      var or__3640__auto__ = cljs.core._iterator[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._iterator["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IIterable.-iterator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
};
cljs.core.int_rotate_left = function int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(Math.imul.call(null, 4294967295, 5) === 0)) {
  cljs.core.imul = function imul(a, b) {
    return Math.imul.call(null, a, b);
  };
} else {
  cljs.core.imul = function imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353;
cljs.core.m3_C2 = 461845907;
cljs.core.m3_mix_K1 = function m3_mix_K1(k1) {
  return cljs.core.imul.call(null, cljs.core.int_rotate_left.call(null, cljs.core.imul.call(null, k1, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function m3_mix_H1(h1, k1) {
  return cljs.core.imul.call(null, cljs.core.int_rotate_left.call(null, h1 ^ k1, 13), 5) + 3864292196;
};
cljs.core.m3_fmix = function m3_fmix(h1, len) {
  var h1__$1 = h1;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul.call(null, h1__$3, 2246822507);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul.call(null, h1__$5, 3266489909);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1.call(null, in$);
    var h1 = cljs.core.m3_mix_H1.call(null, cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix.call(null, h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__13426 = i + 2;
        var G__13427 = cljs.core.m3_mix_H1.call(null, h1, cljs.core.m3_mix_K1.call(null, in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__13426;
        h1 = G__13427;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1.call(null, in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix.call(null, h1__$1, cljs.core.imul.call(null, 2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj13429 = {};
  return obj13429;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__13430 = i + 1;
          var G__13431 = cljs.core.imul.call(null, 31, hash) + s.charCodeAt(i);
          i = G__13430;
          hash = G__13431;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_.call(null, k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj13435 = {};
      return obj13435;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__13437 = o;
    if (G__13437) {
      var bit__4297__auto__ = G__13437.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4297__auto__ || G__13437.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor.call(null, o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int.call(null, cljs.core.hash_string.call(null, o));
          } else {
            if (o == null) {
              return 0;
            } else {
              return cljs.core._hash.call(null, o);
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.m3_hash_unencoded_chars.call(null, sym.name), cljs.core.hash_string.call(null, sym.ns));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3628__auto__ = cljs.core.not.call(null, a.ns);
      if (and__3628__auto__) {
        return b.ns;
      } else {
        return and__3628__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        return cljs.core.compare.call(null, a.name, b.name);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__4051__auto__ = self__._hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__13439 = null;
  var G__13439__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__13439__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__13439 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__13439__2.call(this, self__, coll);
      case 3:
        return G__13439__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__13439.cljs$core$IFn$_invoke$arity$2 = G__13439__2;
  G__13439.cljs$core$IFn$_invoke$arity$3 = G__13439__3;
  return G__13439;
}();
cljs.core.Symbol.prototype.apply = function(self__, args13438) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args13438)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.iterable_QMARK_ = function iterable_QMARK_(x) {
  var G__13441 = x;
  if (G__13441) {
    var bit__4304__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3640__auto__ = bit__4304__auto__;
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return G__13441.cljs$core$IIterable$;
      }
    }())) {
      return true;
    } else {
      if (!G__13441.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIterable, G__13441);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIterable, G__13441);
  }
};
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__13443 = value;
  if (G__13443) {
    var bit__4304__auto__ = G__13443.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4304__auto__ || G__13443.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__13443.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__13443);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__13443);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__13445 = coll;
      if (G__13445) {
        var bit__4297__auto__ = G__13445.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4297__auto__ || G__13445.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll) + " is not ISeqable");
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__13447 = coll;
      if (G__13447) {
        var bit__4297__auto__ = G__13447.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4297__auto__ || G__13447.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__13449 = coll;
      if (G__13449) {
        var bit__4297__auto__ = G__13449.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4297__auto__ || G__13449.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__13451 = coll;
      if (G__13451) {
        var bit__4297__auto__ = G__13451.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4297__auto__ || G__13451.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__13452__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__13453 = y;
            var G__13454 = cljs.core.first.call(null, more);
            var G__13455 = cljs.core.next.call(null, more);
            x = G__13453;
            y = G__13454;
            more = G__13455;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__13452 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13452__delegate.call(this, x, y, more);
    };
    G__13452.cljs$lang$maxFixedArity = 2;
    G__13452.cljs$lang$applyTo = function(arglist__13456) {
      var x = cljs.core.first(arglist__13456);
      arglist__13456 = cljs.core.next(arglist__13456);
      var y = cljs.core.first(arglist__13456);
      var more = cljs.core.rest(arglist__13456);
      return G__13452__delegate(x, y, more);
    };
    G__13452.cljs$core$IFn$_invoke$arity$variadic = G__13452__delegate;
    return G__13452;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.mix_collection_hash = function mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1.call(null, hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1.call(null, h1, k1);
  return cljs.core.m3_fmix.call(null, h1__$1, count);
};
cljs.core.hash_ordered_coll = function hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__13457 = n + 1;
      var G__13458 = cljs.core.imul.call(null, 31, hash_code) + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__13459 = cljs.core.next.call(null, coll__$1);
      n = G__13457;
      hash_code = G__13458;
      coll__$1 = G__13459;
      continue;
    } else {
      return cljs.core.mix_collection_hash.call(null, hash_code, n);
    }
    break;
  }
};
cljs.core.hash_unordered_coll = function hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__13460 = n + 1;
      var G__13461 = hash_code + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__13462 = cljs.core.next.call(null, coll__$1);
      n = G__13460;
      hash_code = G__13461;
      coll__$1 = G__13462;
      continue;
    } else {
      return cljs.core.mix_collection_hash.call(null, hash_code, n);
    }
    break;
  }
};
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__13463 = nval;
            var G__13464 = n + 1;
            val = G__13463;
            n = G__13464;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__13465 = nval;
          var G__13466 = n + 1;
          val__$1 = G__13465;
          n = G__13466;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__13467 = nval;
          var G__13468 = n + 1;
          val__$1 = G__13467;
          n = G__13468;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__13469 = nval;
            var G__13470 = n + 1;
            val = G__13469;
            n = G__13470;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__13471 = nval;
          var G__13472 = n + 1;
          val__$1 = G__13471;
          n = G__13472;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__13473 = nval;
          var G__13474 = n + 1;
          val__$1 = G__13473;
          n = G__13474;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__13476 = x;
  if (G__13476) {
    var bit__4304__auto__ = G__13476.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4304__auto__ || G__13476.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__13476.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__13476);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__13476);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__13478 = x;
  if (G__13478) {
    var bit__4304__auto__ = G__13478.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4304__auto__ || G__13478.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__13478.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__13478);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__13478);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.__GT_IndexedSeqIterator = function __GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__13479 = sn;
      s = G__13479;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__0 = function() {
    return cljs.core.PersistentVector.EMPTY;
  };
  var conj__1 = function(coll) {
    return coll;
  };
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__13480__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__13481 = conj.call(null, coll, x);
          var G__13482 = cljs.core.first.call(null, xs);
          var G__13483 = cljs.core.next.call(null, xs);
          coll = G__13481;
          x = G__13482;
          xs = G__13483;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__13480 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13480__delegate.call(this, coll, x, xs);
    };
    G__13480.cljs$lang$maxFixedArity = 2;
    G__13480.cljs$lang$applyTo = function(arglist__13484) {
      var coll = cljs.core.first(arglist__13484);
      arglist__13484 = cljs.core.next(arglist__13484);
      var x = cljs.core.first(arglist__13484);
      var xs = cljs.core.rest(arglist__13484);
      return G__13480__delegate(coll, x, xs);
    };
    G__13480.cljs$core$IFn$_invoke$arity$variadic = G__13480__delegate;
    return G__13480;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 0:
        return conj__0.call(this);
      case 1:
        return conj__1.call(this, coll);
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$0 = conj__0;
  conj.cljs$core$IFn$_invoke$arity$1 = conj__1;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__13485 = cljs.core.next.call(null, s);
      var G__13486 = acc + 1;
      s = G__13485;
      acc = G__13486;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__13488 = coll;
      if (G__13488) {
        var bit__4297__auto__ = G__13488.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4297__auto__ || G__13488.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            return cljs.core.accumulating_seq_count.call(null, coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__13489 = cljs.core.next.call(null, coll);
              var G__13490 = n - 1;
              coll = G__13489;
              n = G__13490;
              continue;
            } else {
              throw new Error("Index out of bounds");
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__13491 = cljs.core.next.call(null, coll);
              var G__13492 = n - 1;
              var G__13493 = not_found;
              coll = G__13491;
              n = G__13492;
              not_found = G__13493;
              continue;
            } else {
              return not_found;
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number");
    } else {
      if (coll == null) {
        return coll;
      } else {
        if (function() {
          var G__13498 = coll;
          if (G__13498) {
            var bit__4297__auto__ = G__13498.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4297__auto__ || G__13498.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return null;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__13499 = coll;
                  if (G__13499) {
                    var bit__4304__auto__ = G__13499.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4304__auto__ || G__13499.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__13499.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__13499);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__13499);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                }
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number.");
    } else {
      if (coll == null) {
        return not_found;
      } else {
        if (function() {
          var G__13500 = coll;
          if (G__13500) {
            var bit__4297__auto__ = G__13500.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4297__auto__ || G__13500.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n, not_found);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return not_found;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__13501 = coll;
                  if (G__13501) {
                    var bit__4304__auto__ = G__13501.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4304__auto__ || G__13501.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__13501.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__13501);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__13501);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                }
              }
            }
          }
        }
      }
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__13504 = o;
        if (G__13504) {
          var bit__4297__auto__ = G__13504.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4297__auto__ || G__13504.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__13505 = o;
        if (G__13505) {
          var bit__4297__auto__ = G__13505.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4297__auto__ || G__13505.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              return not_found;
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays([k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__13506__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__13507 = ret;
          var G__13508 = cljs.core.first.call(null, kvs);
          var G__13509 = cljs.core.second.call(null, kvs);
          var G__13510 = cljs.core.nnext.call(null, kvs);
          coll = G__13507;
          k = G__13508;
          v = G__13509;
          kvs = G__13510;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__13506 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__13506__delegate.call(this, coll, k, v, kvs);
    };
    G__13506.cljs$lang$maxFixedArity = 3;
    G__13506.cljs$lang$applyTo = function(arglist__13511) {
      var coll = cljs.core.first(arglist__13511);
      arglist__13511 = cljs.core.next(arglist__13511);
      var k = cljs.core.first(arglist__13511);
      arglist__13511 = cljs.core.next(arglist__13511);
      var v = cljs.core.first(arglist__13511);
      var kvs = cljs.core.rest(arglist__13511);
      return G__13506__delegate(coll, k, v, kvs);
    };
    G__13506.cljs$core$IFn$_invoke$arity$variadic = G__13506__delegate;
    return G__13506;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__13512__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__13513 = ret;
            var G__13514 = cljs.core.first.call(null, ks);
            var G__13515 = cljs.core.next.call(null, ks);
            coll = G__13513;
            k = G__13514;
            ks = G__13515;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__13512 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13512__delegate.call(this, coll, k, ks);
    };
    G__13512.cljs$lang$maxFixedArity = 2;
    G__13512.cljs$lang$applyTo = function(arglist__13516) {
      var coll = cljs.core.first(arglist__13516);
      arglist__13516 = cljs.core.next(arglist__13516);
      var k = cljs.core.first(arglist__13516);
      var ks = cljs.core.rest(arglist__13516);
      return G__13512__delegate(coll, k, ks);
    };
    G__13512.cljs$core$IFn$_invoke$arity$variadic = G__13512__delegate;
    return G__13512;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3640__auto__ = goog.isFunction(f);
  if (or__3640__auto__) {
    return or__3640__auto__;
  } else {
    var G__13520 = f;
    if (G__13520) {
      var bit__4304__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3640__auto____$1 = bit__4304__auto__;
        if (cljs.core.truth_(or__3640__auto____$1)) {
          return or__3640__auto____$1;
        } else {
          return G__13520.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__13520.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__13520);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__13520);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/MetaFn");
};
cljs.core.MetaFn.prototype.call = function() {
  var G__13522 = null;
  var G__13522__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null);
  };
  var G__13522__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a);
  };
  var G__13522__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b);
  };
  var G__13522__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c);
  };
  var G__13522__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d);
  };
  var G__13522__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e);
  };
  var G__13522__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f);
  };
  var G__13522__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g);
  };
  var G__13522__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__13522__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__13522__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__13522__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__13522__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__13522__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__13522__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__13522__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__13522__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__13522__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__13522__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__13522__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__13522__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__13522__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__13522 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__13522__1.call(this, self__);
      case 2:
        return G__13522__2.call(this, self__, a);
      case 3:
        return G__13522__3.call(this, self__, a, b);
      case 4:
        return G__13522__4.call(this, self__, a, b, c);
      case 5:
        return G__13522__5.call(this, self__, a, b, c, d);
      case 6:
        return G__13522__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__13522__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__13522__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__13522__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__13522__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__13522__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__13522__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__13522__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__13522__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__13522__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__13522__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__13522__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__13522__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__13522__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__13522__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__13522__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__13522__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__13522.cljs$core$IFn$_invoke$arity$1 = G__13522__1;
  G__13522.cljs$core$IFn$_invoke$arity$2 = G__13522__2;
  G__13522.cljs$core$IFn$_invoke$arity$3 = G__13522__3;
  G__13522.cljs$core$IFn$_invoke$arity$4 = G__13522__4;
  G__13522.cljs$core$IFn$_invoke$arity$5 = G__13522__5;
  G__13522.cljs$core$IFn$_invoke$arity$6 = G__13522__6;
  G__13522.cljs$core$IFn$_invoke$arity$7 = G__13522__7;
  G__13522.cljs$core$IFn$_invoke$arity$8 = G__13522__8;
  G__13522.cljs$core$IFn$_invoke$arity$9 = G__13522__9;
  G__13522.cljs$core$IFn$_invoke$arity$10 = G__13522__10;
  G__13522.cljs$core$IFn$_invoke$arity$11 = G__13522__11;
  G__13522.cljs$core$IFn$_invoke$arity$12 = G__13522__12;
  G__13522.cljs$core$IFn$_invoke$arity$13 = G__13522__13;
  G__13522.cljs$core$IFn$_invoke$arity$14 = G__13522__14;
  G__13522.cljs$core$IFn$_invoke$arity$15 = G__13522__15;
  G__13522.cljs$core$IFn$_invoke$arity$16 = G__13522__16;
  G__13522.cljs$core$IFn$_invoke$arity$17 = G__13522__17;
  G__13522.cljs$core$IFn$_invoke$arity$18 = G__13522__18;
  G__13522.cljs$core$IFn$_invoke$arity$19 = G__13522__19;
  G__13522.cljs$core$IFn$_invoke$arity$20 = G__13522__20;
  G__13522.cljs$core$IFn$_invoke$arity$21 = G__13522__21;
  G__13522.cljs$core$IFn$_invoke$arity$22 = G__13522__22;
  return G__13522;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args13521) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args13521)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.__GT_MetaFn = function __GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__13526 = o;
    if (G__13526) {
      var bit__4304__auto__ = G__13526.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4304__auto__ || G__13526.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__13526.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__13526);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__13526);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3628__auto__ = !(o == null);
    if (and__3628__auto__) {
      var G__13530 = o;
      if (G__13530) {
        var bit__4304__auto__ = G__13530.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4304__auto__ || G__13530.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__13530.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__13530);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__13530);
      }
    } else {
      return and__3628__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__13531__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__13532 = ret;
            var G__13533 = cljs.core.first.call(null, ks);
            var G__13534 = cljs.core.next.call(null, ks);
            coll = G__13532;
            k = G__13533;
            ks = G__13534;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__13531 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13531__delegate.call(this, coll, k, ks);
    };
    G__13531.cljs$lang$maxFixedArity = 2;
    G__13531.cljs$lang$applyTo = function(arglist__13535) {
      var coll = cljs.core.first(arglist__13535);
      arglist__13535 = cljs.core.next(arglist__13535);
      var k = cljs.core.first(arglist__13535);
      var ks = cljs.core.rest(arglist__13535);
      return G__13531__delegate(coll, k, ks);
    };
    G__13531.cljs$core$IFn$_invoke$arity$variadic = G__13531__delegate;
    return G__13531;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__13537 = x;
    if (G__13537) {
      var bit__4304__auto__ = G__13537.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4304__auto__ || G__13537.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__13537.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__13537);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__13537);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__13539 = x;
    if (G__13539) {
      var bit__4304__auto__ = G__13539.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4304__auto__ || G__13539.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__13539.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__13539);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__13539);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__13541 = x;
  if (G__13541) {
    var bit__4304__auto__ = G__13541.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4304__auto__ || G__13541.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__13541.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__13541);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__13541);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__13543 = x;
  if (G__13543) {
    var bit__4304__auto__ = G__13543.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4304__auto__ || G__13543.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__13543.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__13543);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__13543);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__13545 = x;
  if (G__13545) {
    var bit__4304__auto__ = G__13545.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4304__auto__ || G__13545.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__13545.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__13545);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__13545);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__13547 = x;
  if (G__13547) {
    var bit__4304__auto__ = G__13547.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4304__auto__ || G__13547.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__13547.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__13547);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__13547);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__13549 = x;
    if (G__13549) {
      var bit__4304__auto__ = G__13549.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4304__auto__ || G__13549.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__13549.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__13549);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__13549);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__13551 = x;
  if (G__13551) {
    var bit__4304__auto__ = G__13551.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4304__auto__ || G__13551.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__13551.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__13551);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__13551);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__13553 = x;
  if (G__13553) {
    var bit__4297__auto__ = G__13553.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4297__auto__ || G__13553.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj13557 = {};
    return obj13557;
  };
  var js_obj__1 = function() {
    var G__13558__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__13558 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__13558__delegate.call(this, keyvals);
    };
    G__13558.cljs$lang$maxFixedArity = 0;
    G__13558.cljs$lang$applyTo = function(arglist__13559) {
      var keyvals = cljs.core.seq(arglist__13559);
      return G__13558__delegate(keyvals);
    };
    G__13558.cljs$core$IFn$_invoke$arity$variadic = G__13558__delegate;
    return G__13558;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(keys));
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__13560 = i__$1 + 1;
      var G__13561 = j__$1 + 1;
      var G__13562 = len__$1 - 1;
      i__$1 = G__13560;
      j__$1 = G__13561;
      len__$1 = G__13562;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__13563 = i__$1 - 1;
      var G__13564 = j__$1 - 1;
      var G__13565 = len__$1 - 1;
      i__$1 = G__13563;
      j__$1 = G__13564;
      len__$1 = G__13565;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj13567 = {};
  return obj13567;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__13569 = s;
    if (G__13569) {
      var bit__4304__auto__ = G__13569.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4304__auto__ || G__13569.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__13569.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__13569);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__13569);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__13571 = s;
  if (G__13571) {
    var bit__4304__auto__ = G__13571.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4304__auto__ || G__13571.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__13571.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__13571);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__13571);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3640__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__3640__auto__) {
    return or__3640__auto__;
  } else {
    var G__13575 = f;
    if (G__13575) {
      var bit__4304__auto__ = G__13575.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4304__auto__ || G__13575.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__13575.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__13575);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__13575);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && !isNaN(n) && !(n === Infinity) && parseFloat(n) === parseInt(n, 10);
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__13576__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__13577 = cljs.core.conj.call(null, s, x__$1);
              var G__13578 = etc;
              s = G__13577;
              xs = G__13578;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__13576 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13576__delegate.call(this, x, y, more);
    };
    G__13576.cljs$lang$maxFixedArity = 2;
    G__13576.cljs$lang$applyTo = function(arglist__13579) {
      var x = cljs.core.first(arglist__13579);
      arglist__13579 = cljs.core.next(arglist__13579);
      var y = cljs.core.first(arglist__13579);
      var more = cljs.core.rest(arglist__13579);
      return G__13576__delegate(x, y, more);
    };
    G__13576.cljs$core$IFn$_invoke$arity$variadic = G__13576__delegate;
    return G__13576;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__3640__auto__ = cljs.core.seq.call(null, coll);
    if (or__3640__auto__) {
      return or__3640__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__13581 = x;
            if (G__13581) {
              var bit__4297__auto__ = G__13581.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4297__auto__ || G__13581.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          throw new Error("compare on non-nil objects of different types");
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        return compare_indexed.call(null, xs, ys, xl, 0);
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__13582 = xs;
        var G__13583 = ys;
        var G__13584 = len;
        var G__13585 = n + 1;
        xs = G__13582;
        ys = G__13583;
        len = G__13584;
        n = G__13585;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4124__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__13586 = nval;
          var G__13587 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__13586;
          coll__$1 = G__13587;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__13590 = coll;
      if (G__13590) {
        var bit__4297__auto__ = G__13590.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4297__auto__ || G__13590.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            return cljs.core.seq_reduce.call(null, f, coll);
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__13591 = coll;
      if (G__13591) {
        var bit__4297__auto__ = G__13591.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4297__auto__ || G__13591.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            return cljs.core.seq_reduce.call(null, f, val, coll);
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.completing = function() {
  var completing = null;
  var completing__1 = function(f) {
    return completing.call(null, f, cljs.core.identity);
  };
  var completing__2 = function(f, cf) {
    return function() {
      var G__13592 = null;
      var G__13592__0 = function() {
        return f.call(null);
      };
      var G__13592__1 = function(x) {
        return cf.call(null, x);
      };
      var G__13592__2 = function(x, y) {
        return f.call(null, x, y);
      };
      G__13592 = function(x, y) {
        switch(arguments.length) {
          case 0:
            return G__13592__0.call(this);
          case 1:
            return G__13592__1.call(this, x);
          case 2:
            return G__13592__2.call(this, x, y);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__13592.cljs$core$IFn$_invoke$arity$0 = G__13592__0;
      G__13592.cljs$core$IFn$_invoke$arity$1 = G__13592__1;
      G__13592.cljs$core$IFn$_invoke$arity$2 = G__13592__2;
      return G__13592;
    }();
  };
  completing = function(f, cf) {
    switch(arguments.length) {
      case 1:
        return completing__1.call(this, f);
      case 2:
        return completing__2.call(this, f, cf);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  completing.cljs$core$IFn$_invoke$arity$1 = completing__1;
  completing.cljs$core$IFn$_invoke$arity$2 = completing__2;
  return completing;
}();
cljs.core.transduce = function() {
  var transduce = null;
  var transduce__3 = function(xform, f, coll) {
    return transduce.call(null, xform, f, f.call(null), coll);
  };
  var transduce__4 = function(xform, f, init, coll) {
    var f__$1 = xform.call(null, f);
    var ret = cljs.core.reduce.call(null, f__$1, init, coll);
    return f__$1.call(null, ret);
  };
  transduce = function(xform, f, init, coll) {
    switch(arguments.length) {
      case 3:
        return transduce__3.call(this, xform, f, init);
      case 4:
        return transduce__4.call(this, xform, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transduce.cljs$core$IFn$_invoke$arity$3 = transduce__3;
  transduce.cljs$core$IFn$_invoke$arity$4 = transduce__4;
  return transduce;
}();
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__13593__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__13593 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13593__delegate.call(this, x, y, more);
    };
    G__13593.cljs$lang$maxFixedArity = 2;
    G__13593.cljs$lang$applyTo = function(arglist__13594) {
      var x = cljs.core.first(arglist__13594);
      arglist__13594 = cljs.core.next(arglist__13594);
      var y = cljs.core.first(arglist__13594);
      var more = cljs.core.rest(arglist__13594);
      return G__13593__delegate(x, y, more);
    };
    G__13593.cljs$core$IFn$_invoke$arity$variadic = G__13593__delegate;
    return G__13593;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__13595__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__13595 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13595__delegate.call(this, x, y, more);
    };
    G__13595.cljs$lang$maxFixedArity = 2;
    G__13595.cljs$lang$applyTo = function(arglist__13596) {
      var x = cljs.core.first(arglist__13596);
      arglist__13596 = cljs.core.next(arglist__13596);
      var y = cljs.core.first(arglist__13596);
      var more = cljs.core.rest(arglist__13596);
      return G__13595__delegate(x, y, more);
    };
    G__13595.cljs$core$IFn$_invoke$arity$variadic = G__13595__delegate;
    return G__13595;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__13597__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__13597 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13597__delegate.call(this, x, y, more);
    };
    G__13597.cljs$lang$maxFixedArity = 2;
    G__13597.cljs$lang$applyTo = function(arglist__13598) {
      var x = cljs.core.first(arglist__13598);
      arglist__13598 = cljs.core.next(arglist__13598);
      var y = cljs.core.first(arglist__13598);
      var more = cljs.core.rest(arglist__13598);
      return G__13597__delegate(x, y, more);
    };
    G__13597.cljs$core$IFn$_invoke$arity$variadic = G__13597__delegate;
    return G__13597;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__13599__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__13599 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13599__delegate.call(this, x, y, more);
    };
    G__13599.cljs$lang$maxFixedArity = 2;
    G__13599.cljs$lang$applyTo = function(arglist__13600) {
      var x = cljs.core.first(arglist__13600);
      arglist__13600 = cljs.core.next(arglist__13600);
      var y = cljs.core.first(arglist__13600);
      var more = cljs.core.rest(arglist__13600);
      return G__13599__delegate(x, y, more);
    };
    G__13599.cljs$core$IFn$_invoke$arity$variadic = G__13599__delegate;
    return G__13599;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__13601__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__13602 = y;
            var G__13603 = cljs.core.first.call(null, more);
            var G__13604 = cljs.core.next.call(null, more);
            x = G__13602;
            y = G__13603;
            more = G__13604;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__13601 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13601__delegate.call(this, x, y, more);
    };
    G__13601.cljs$lang$maxFixedArity = 2;
    G__13601.cljs$lang$applyTo = function(arglist__13605) {
      var x = cljs.core.first(arglist__13605);
      arglist__13605 = cljs.core.next(arglist__13605);
      var y = cljs.core.first(arglist__13605);
      var more = cljs.core.rest(arglist__13605);
      return G__13601__delegate(x, y, more);
    };
    G__13601.cljs$core$IFn$_invoke$arity$variadic = G__13601__delegate;
    return G__13601;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__13606__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__13607 = y;
            var G__13608 = cljs.core.first.call(null, more);
            var G__13609 = cljs.core.next.call(null, more);
            x = G__13607;
            y = G__13608;
            more = G__13609;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__13606 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13606__delegate.call(this, x, y, more);
    };
    G__13606.cljs$lang$maxFixedArity = 2;
    G__13606.cljs$lang$applyTo = function(arglist__13610) {
      var x = cljs.core.first(arglist__13610);
      arglist__13610 = cljs.core.next(arglist__13610);
      var y = cljs.core.first(arglist__13610);
      var more = cljs.core.rest(arglist__13610);
      return G__13606__delegate(x, y, more);
    };
    G__13606.cljs$core$IFn$_invoke$arity$variadic = G__13606__delegate;
    return G__13606;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__13611__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__13612 = y;
            var G__13613 = cljs.core.first.call(null, more);
            var G__13614 = cljs.core.next.call(null, more);
            x = G__13612;
            y = G__13613;
            more = G__13614;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__13611 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13611__delegate.call(this, x, y, more);
    };
    G__13611.cljs$lang$maxFixedArity = 2;
    G__13611.cljs$lang$applyTo = function(arglist__13615) {
      var x = cljs.core.first(arglist__13615);
      arglist__13615 = cljs.core.next(arglist__13615);
      var y = cljs.core.first(arglist__13615);
      var more = cljs.core.rest(arglist__13615);
      return G__13611__delegate(x, y, more);
    };
    G__13611.cljs$core$IFn$_invoke$arity$variadic = G__13611__delegate;
    return G__13611;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__13616__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__13617 = y;
            var G__13618 = cljs.core.first.call(null, more);
            var G__13619 = cljs.core.next.call(null, more);
            x = G__13617;
            y = G__13618;
            more = G__13619;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__13616 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13616__delegate.call(this, x, y, more);
    };
    G__13616.cljs$lang$maxFixedArity = 2;
    G__13616.cljs$lang$applyTo = function(arglist__13620) {
      var x = cljs.core.first(arglist__13620);
      arglist__13620 = cljs.core.next(arglist__13620);
      var y = cljs.core.first(arglist__13620);
      var more = cljs.core.rest(arglist__13620);
      return G__13616__delegate(x, y, more);
    };
    G__13616.cljs$core$IFn$_invoke$arity$variadic = G__13616__delegate;
    return G__13616;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__3947__auto__ = x;
    var y__3948__auto__ = y;
    return x__3947__auto__ > y__3948__auto__ ? x__3947__auto__ : y__3948__auto__;
  };
  var max__3 = function() {
    var G__13621__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3947__auto__ = x;
        var y__3948__auto__ = y;
        return x__3947__auto__ > y__3948__auto__ ? x__3947__auto__ : y__3948__auto__;
      }(), more);
    };
    var G__13621 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13621__delegate.call(this, x, y, more);
    };
    G__13621.cljs$lang$maxFixedArity = 2;
    G__13621.cljs$lang$applyTo = function(arglist__13622) {
      var x = cljs.core.first(arglist__13622);
      arglist__13622 = cljs.core.next(arglist__13622);
      var y = cljs.core.first(arglist__13622);
      var more = cljs.core.rest(arglist__13622);
      return G__13621__delegate(x, y, more);
    };
    G__13621.cljs$core$IFn$_invoke$arity$variadic = G__13621__delegate;
    return G__13621;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__3954__auto__ = x;
    var y__3955__auto__ = y;
    return x__3954__auto__ < y__3955__auto__ ? x__3954__auto__ : y__3955__auto__;
  };
  var min__3 = function() {
    var G__13623__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3954__auto__ = x;
        var y__3955__auto__ = y;
        return x__3954__auto__ < y__3955__auto__ ? x__3954__auto__ : y__3955__auto__;
      }(), more);
    };
    var G__13623 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13623__delegate.call(this, x, y, more);
    };
    G__13623.cljs$lang$maxFixedArity = 2;
    G__13623.cljs$lang$applyTo = function(arglist__13624) {
      var x = cljs.core.first(arglist__13624);
      arglist__13624 = cljs.core.next(arglist__13624);
      var y = cljs.core.first(arglist__13624);
      var more = cljs.core.rest(arglist__13624);
      return G__13623__delegate(x, y, more);
    };
    G__13623.cljs$core$IFn$_invoke$arity$variadic = G__13623__delegate;
    return G__13623;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__13625__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__13625 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13625__delegate.call(this, x, y, more);
    };
    G__13625.cljs$lang$maxFixedArity = 2;
    G__13625.cljs$lang$applyTo = function(arglist__13626) {
      var x = cljs.core.first(arglist__13626);
      arglist__13626 = cljs.core.next(arglist__13626);
      var y = cljs.core.first(arglist__13626);
      var more = cljs.core.rest(arglist__13626);
      return G__13625__delegate(x, y, more);
    };
    G__13625.cljs$core$IFn$_invoke$arity$variadic = G__13625__delegate;
    return G__13625;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__13627__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__13627 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13627__delegate.call(this, x, y, more);
    };
    G__13627.cljs$lang$maxFixedArity = 2;
    G__13627.cljs$lang$applyTo = function(arglist__13628) {
      var x = cljs.core.first(arglist__13628);
      arglist__13628 = cljs.core.next(arglist__13628);
      var y = cljs.core.first(arglist__13628);
      var more = cljs.core.rest(arglist__13628);
      return G__13627__delegate(x, y, more);
    };
    G__13627.cljs$core$IFn$_invoke$arity$variadic = G__13627__delegate;
    return G__13627;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__13629__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__13629 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13629__delegate.call(this, x, y, more);
    };
    G__13629.cljs$lang$maxFixedArity = 2;
    G__13629.cljs$lang$applyTo = function(arglist__13630) {
      var x = cljs.core.first(arglist__13630);
      arglist__13630 = cljs.core.next(arglist__13630);
      var y = cljs.core.first(arglist__13630);
      var more = cljs.core.rest(arglist__13630);
      return G__13629__delegate(x, y, more);
    };
    G__13629.cljs$core$IFn$_invoke$arity$variadic = G__13629__delegate;
    return G__13629;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__13631__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__13631 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13631__delegate.call(this, x, y, more);
    };
    G__13631.cljs$lang$maxFixedArity = 2;
    G__13631.cljs$lang$applyTo = function(arglist__13632) {
      var x = cljs.core.first(arglist__13632);
      arglist__13632 = cljs.core.next(arglist__13632);
      var y = cljs.core.first(arglist__13632);
      var more = cljs.core.rest(arglist__13632);
      return G__13631__delegate(x, y, more);
    };
    G__13631.cljs$core$IFn$_invoke$arity$variadic = G__13631__delegate;
    return G__13631;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__13633__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__13633 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13633__delegate.call(this, x, y, more);
    };
    G__13633.cljs$lang$maxFixedArity = 2;
    G__13633.cljs$lang$applyTo = function(arglist__13634) {
      var x = cljs.core.first(arglist__13634);
      arglist__13634 = cljs.core.next(arglist__13634);
      var y = cljs.core.first(arglist__13634);
      var more = cljs.core.rest(arglist__13634);
      return G__13633__delegate(x, y, more);
    };
    G__13633.cljs$core$IFn$_invoke$arity$variadic = G__13633__delegate;
    return G__13633;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_subtract = function() {
  var unchecked_subtract = null;
  var unchecked_subtract__1 = function(x) {
    return-x;
  };
  var unchecked_subtract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract__3 = function() {
    var G__13635__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_subtract, x - y, more);
    };
    var G__13635 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13635__delegate.call(this, x, y, more);
    };
    G__13635.cljs$lang$maxFixedArity = 2;
    G__13635.cljs$lang$applyTo = function(arglist__13636) {
      var x = cljs.core.first(arglist__13636);
      arglist__13636 = cljs.core.next(arglist__13636);
      var y = cljs.core.first(arglist__13636);
      var more = cljs.core.rest(arglist__13636);
      return G__13635__delegate(x, y, more);
    };
    G__13635.cljs$core$IFn$_invoke$arity$variadic = G__13635__delegate;
    return G__13635;
  }();
  unchecked_subtract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract__1.call(this, x);
      case 2:
        return unchecked_subtract__2.call(this, x, y);
      default:
        return unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract.cljs$lang$maxFixedArity = 2;
  unchecked_subtract.cljs$lang$applyTo = unchecked_subtract__3.cljs$lang$applyTo;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract__1;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract__2;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract;
}();
cljs.core.unchecked_subtract_int = function() {
  var unchecked_subtract_int = null;
  var unchecked_subtract_int__1 = function(x) {
    return-x;
  };
  var unchecked_subtract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract_int__3 = function() {
    var G__13637__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_subtract_int, x - y, more);
    };
    var G__13637 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13637__delegate.call(this, x, y, more);
    };
    G__13637.cljs$lang$maxFixedArity = 2;
    G__13637.cljs$lang$applyTo = function(arglist__13638) {
      var x = cljs.core.first(arglist__13638);
      arglist__13638 = cljs.core.next(arglist__13638);
      var y = cljs.core.first(arglist__13638);
      var more = cljs.core.rest(arglist__13638);
      return G__13637__delegate(x, y, more);
    };
    G__13637.cljs$core$IFn$_invoke$arity$variadic = G__13637__delegate;
    return G__13637;
  }();
  unchecked_subtract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract_int__1.call(this, x);
      case 2:
        return unchecked_subtract_int__2.call(this, x, y);
      default:
        return unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
  unchecked_subtract_int.cljs$lang$applyTo = unchecked_subtract_int__3.cljs$lang$applyTo;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract_int__1;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract_int__2;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__13639__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__13640 = y;
            var G__13641 = cljs.core.first.call(null, more);
            var G__13642 = cljs.core.next.call(null, more);
            x = G__13640;
            y = G__13641;
            more = G__13642;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__13639 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13639__delegate.call(this, x, y, more);
    };
    G__13639.cljs$lang$maxFixedArity = 2;
    G__13639.cljs$lang$applyTo = function(arglist__13643) {
      var x = cljs.core.first(arglist__13643);
      arglist__13643 = cljs.core.next(arglist__13643);
      var y = cljs.core.first(arglist__13643);
      var more = cljs.core.rest(arglist__13643);
      return G__13639__delegate(x, y, more);
    };
    G__13639.cljs$core$IFn$_invoke$arity$variadic = G__13639__delegate;
    return G__13639;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__13644 = n__$1 - 1;
      var G__13645 = cljs.core.next.call(null, xs);
      n__$1 = G__13644;
      xs = G__13645;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return "" + x;
    }
  };
  var str__2 = function() {
    var G__13646__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__13647 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__13648 = cljs.core.next.call(null, more);
          sb = G__13647;
          more = G__13648;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__13646 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__13646__delegate.call(this, x, ys);
    };
    G__13646.cljs$lang$maxFixedArity = 1;
    G__13646.cljs$lang$applyTo = function(arglist__13649) {
      var x = cljs.core.first(arglist__13649);
      var ys = cljs.core.rest(arglist__13649);
      return G__13646__delegate(x, ys);
    };
    G__13646.cljs$core$IFn$_invoke$arity$variadic = G__13646__delegate;
    return G__13646;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? cljs.core.counted_QMARK_.call(null, x) && cljs.core.counted_QMARK_.call(null, y) && !(cljs.core.count.call(null, x) === cljs.core.count.call(null, y)) ? false : function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__13650 = cljs.core.next.call(null, xs);
            var G__13651 = cljs.core.next.call(null, ys);
            xs = G__13650;
            ys = G__13651;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__13652 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__13653 = cljs.core.next.call(null, s);
        res = G__13652;
        s = G__13653;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__13654 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__13655 = cljs.core.next.call(null, s);
      h = G__13654;
      s = G__13655;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__13656 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__13657 = cljs.core.next.call(null, s__$1);
      h = G__13656;
      s__$1 = G__13657;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__13664_13670 = cljs.core.seq.call(null, fn_map);
  var chunk__13665_13671 = null;
  var count__13666_13672 = 0;
  var i__13667_13673 = 0;
  while (true) {
    if (i__13667_13673 < count__13666_13672) {
      var vec__13668_13674 = cljs.core._nth.call(null, chunk__13665_13671, i__13667_13673);
      var key_name_13675 = cljs.core.nth.call(null, vec__13668_13674, 0, null);
      var f_13676 = cljs.core.nth.call(null, vec__13668_13674, 1, null);
      var str_name_13677 = cljs.core.name.call(null, key_name_13675);
      obj[str_name_13677] = f_13676;
      var G__13678 = seq__13664_13670;
      var G__13679 = chunk__13665_13671;
      var G__13680 = count__13666_13672;
      var G__13681 = i__13667_13673 + 1;
      seq__13664_13670 = G__13678;
      chunk__13665_13671 = G__13679;
      count__13666_13672 = G__13680;
      i__13667_13673 = G__13681;
      continue;
    } else {
      var temp__4126__auto___13682 = cljs.core.seq.call(null, seq__13664_13670);
      if (temp__4126__auto___13682) {
        var seq__13664_13683__$1 = temp__4126__auto___13682;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13664_13683__$1)) {
          var c__4410__auto___13684 = cljs.core.chunk_first.call(null, seq__13664_13683__$1);
          var G__13685 = cljs.core.chunk_rest.call(null, seq__13664_13683__$1);
          var G__13686 = c__4410__auto___13684;
          var G__13687 = cljs.core.count.call(null, c__4410__auto___13684);
          var G__13688 = 0;
          seq__13664_13670 = G__13685;
          chunk__13665_13671 = G__13686;
          count__13666_13672 = G__13687;
          i__13667_13673 = G__13688;
          continue;
        } else {
          var vec__13669_13689 = cljs.core.first.call(null, seq__13664_13683__$1);
          var key_name_13690 = cljs.core.nth.call(null, vec__13669_13689, 0, null);
          var f_13691 = cljs.core.nth.call(null, vec__13669_13689, 1, null);
          var str_name_13692 = cljs.core.name.call(null, key_name_13690);
          obj[str_name_13692] = f_13691;
          var G__13693 = cljs.core.next.call(null, seq__13664_13683__$1);
          var G__13694 = null;
          var G__13695 = 0;
          var G__13696 = 0;
          seq__13664_13670 = G__13693;
          chunk__13665_13671 = G__13694;
          count__13666_13672 = G__13695;
          i__13667_13673 = G__13696;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/List");
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__13698 = coll;
  if (G__13698) {
    var bit__4304__auto__ = G__13698.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4304__auto__ || G__13698.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__13698.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__13698);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__13698);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__13699 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__13699;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__13700 = i - 1;
        var G__13701 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__13700;
        r = G__13701;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__13702) {
    var xs = cljs.core.seq(arglist__13702);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3640__auto__ = coll == null;
    if (or__3640__auto__) {
      return or__3640__auto__;
    } else {
      var G__13706 = coll;
      if (G__13706) {
        var bit__4297__auto__ = G__13706.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4297__auto__ || G__13706.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__13708 = x;
  if (G__13708) {
    var bit__4304__auto__ = G__13708.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4304__auto__ || G__13708.cljs$core$IList$) {
      return true;
    } else {
      if (!G__13708.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__13708);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__13708);
  }
};
cljs.core.hash_keyword = function hash_keyword(k) {
  return cljs.core.hash_symbol.call(null, k) + 2654435769 | 0;
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4051__auto__ = self__._hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_keyword.call(null, this$__$1);
    self__._hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__13710 = null;
  var G__13710__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__13710__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__13710 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__13710__2.call(this, self__, coll);
      case 3:
        return G__13710__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__13710.cljs$core$IFn$_invoke$arity$2 = G__13710__2;
  G__13710.cljs$core$IFn$_invoke$arity$3 = G__13710__3;
  return G__13710;
}();
cljs.core.Keyword.prototype.apply = function(self__, args13709) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args13709)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn);
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__13712 = x;
    if (G__13712) {
      var bit__4297__auto__ = G__13712.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4297__auto__ || G__13712.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error("Doesn't support namespace: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(ns) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" : null) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__13713 = ls.sval();
        ls = G__13713;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__13715 = s;
    if (G__13715) {
      var bit__4297__auto__ = G__13715.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4297__auto__ || G__13715.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__13716 = cljs.core.next.call(null, s__$1);
      s__$1 = G__13716;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_13717 = 0;
  var xs_13718 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_13718) {
      ret[i_13717] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_13718));
      var G__13719 = i_13717 + 1;
      var G__13720 = cljs.core.next.call(null, xs_13718);
      i_13717 = G__13719;
      xs_13718 = G__13720;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__13721 = i + 1;
          var G__13722 = cljs.core.next.call(null, s__$1);
          i = G__13721;
          s__$1 = G__13722;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4510__auto___13723 = size;
      var i_13724 = 0;
      while (true) {
        if (i_13724 < n__4510__auto___13723) {
          a[i_13724] = init_val_or_seq;
          var G__13725 = i_13724 + 1;
          i_13724 = G__13725;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__13726 = i + 1;
          var G__13727 = cljs.core.next.call(null, s__$1);
          i = G__13726;
          s__$1 = G__13727;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4510__auto___13728 = size;
      var i_13729 = 0;
      while (true) {
        if (i_13729 < n__4510__auto___13728) {
          a[i_13729] = init_val_or_seq;
          var G__13730 = i_13729 + 1;
          i_13729 = G__13730;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__13731 = i + 1;
          var G__13732 = cljs.core.next.call(null, s__$1);
          i = G__13731;
          s__$1 = G__13732;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4510__auto___13733 = size;
      var i_13734 = 0;
      while (true) {
        if (i_13734 < n__4510__auto___13733) {
          a[i_13734] = init_val_or_seq;
          var G__13735 = i_13734 + 1;
          i_13734 = G__13735;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__13736 = i + 1;
          var G__13737 = cljs.core.next.call(null, s__$1);
          i = G__13736;
          s__$1 = G__13737;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4510__auto___13738 = size;
      var i_13739 = 0;
      while (true) {
        if (i_13739 < n__4510__auto___13738) {
          a[i_13739] = init_val_or_seq;
          var G__13740 = i_13739 + 1;
          i_13739 = G__13740;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__13741 = cljs.core.next.call(null, s__$1);
        var G__13742 = i - 1;
        var G__13743 = sum + 1;
        s__$1 = G__13741;
        i = G__13742;
        sum = G__13743;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__13744__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__13744 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13744__delegate.call(this, x, y, zs);
    };
    G__13744.cljs$lang$maxFixedArity = 2;
    G__13744.cljs$lang$applyTo = function(arglist__13745) {
      var x = cljs.core.first(arglist__13745);
      arglist__13745 = cljs.core.next(arglist__13745);
      var y = cljs.core.first(arglist__13745);
      var zs = cljs.core.rest(arglist__13745);
      return G__13744__delegate(x, y, zs);
    };
    G__13744.cljs$core$IFn$_invoke$arity$variadic = G__13744__delegate;
    return G__13744;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__13746__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__13746 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__13746__delegate.call(this, a, b, c, d, more);
    };
    G__13746.cljs$lang$maxFixedArity = 4;
    G__13746.cljs$lang$applyTo = function(arglist__13747) {
      var a = cljs.core.first(arglist__13747);
      arglist__13747 = cljs.core.next(arglist__13747);
      var b = cljs.core.first(arglist__13747);
      arglist__13747 = cljs.core.next(arglist__13747);
      var c = cljs.core.first(arglist__13747);
      arglist__13747 = cljs.core.next(arglist__13747);
      var d = cljs.core.first(arglist__13747);
      var more = cljs.core.rest(arglist__13747);
      return G__13746__delegate(a, b, c, d, more);
    };
    G__13746.cljs$core$IFn$_invoke$arity$variadic = G__13746__delegate;
    return G__13746;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___0 = function() {
    return cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  };
  var conj_BANG___1 = function(coll) {
    return coll;
  };
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_.call(null, tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__13748__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__13749 = ntcoll;
          var G__13750 = cljs.core.first.call(null, vals);
          var G__13751 = cljs.core.next.call(null, vals);
          tcoll = G__13749;
          val = G__13750;
          vals = G__13751;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__13748 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13748__delegate.call(this, tcoll, val, vals);
    };
    G__13748.cljs$lang$maxFixedArity = 2;
    G__13748.cljs$lang$applyTo = function(arglist__13752) {
      var tcoll = cljs.core.first(arglist__13752);
      arglist__13752 = cljs.core.next(arglist__13752);
      var val = cljs.core.first(arglist__13752);
      var vals = cljs.core.rest(arglist__13752);
      return G__13748__delegate(tcoll, val, vals);
    };
    G__13748.cljs$core$IFn$_invoke$arity$variadic = G__13748__delegate;
    return G__13748;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 0:
        return conj_BANG___0.call(this);
      case 1:
        return conj_BANG___1.call(this, tcoll);
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$0 = conj_BANG___0;
  conj_BANG_.cljs$core$IFn$_invoke$arity$1 = conj_BANG___1;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__13753__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_.call(null, tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__13754 = ntcoll;
          var G__13755 = cljs.core.first.call(null, kvs);
          var G__13756 = cljs.core.second.call(null, kvs);
          var G__13757 = cljs.core.nnext.call(null, kvs);
          tcoll = G__13754;
          key = G__13755;
          val = G__13756;
          kvs = G__13757;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__13753 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__13753__delegate.call(this, tcoll, key, val, kvs);
    };
    G__13753.cljs$lang$maxFixedArity = 3;
    G__13753.cljs$lang$applyTo = function(arglist__13758) {
      var tcoll = cljs.core.first(arglist__13758);
      arglist__13758 = cljs.core.next(arglist__13758);
      var key = cljs.core.first(arglist__13758);
      arglist__13758 = cljs.core.next(arglist__13758);
      var val = cljs.core.first(arglist__13758);
      var kvs = cljs.core.rest(arglist__13758);
      return G__13753__delegate(tcoll, key, val, kvs);
    };
    G__13753.cljs$core$IFn$_invoke$arity$variadic = G__13753__delegate;
    return G__13753;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_.call(null, tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__13759__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_.call(null, tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__13760 = ntcoll;
          var G__13761 = cljs.core.first.call(null, ks);
          var G__13762 = cljs.core.next.call(null, ks);
          tcoll = G__13760;
          key = G__13761;
          ks = G__13762;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__13759 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13759__delegate.call(this, tcoll, key, ks);
    };
    G__13759.cljs$lang$maxFixedArity = 2;
    G__13759.cljs$lang$applyTo = function(arglist__13763) {
      var tcoll = cljs.core.first(arglist__13763);
      arglist__13763 = cljs.core.next(arglist__13763);
      var key = cljs.core.first(arglist__13763);
      var ks = cljs.core.rest(arglist__13763);
      return G__13759__delegate(tcoll, key, ks);
    };
    G__13759.cljs$core$IFn$_invoke$arity$variadic = G__13759__delegate;
    return G__13759;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_.call(null, tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__13764__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__13765 = ntcoll;
          var G__13766 = cljs.core.first.call(null, vals);
          var G__13767 = cljs.core.next.call(null, vals);
          tcoll = G__13765;
          val = G__13766;
          vals = G__13767;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__13764 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13764__delegate.call(this, tcoll, val, vals);
    };
    G__13764.cljs$lang$maxFixedArity = 2;
    G__13764.cljs$lang$applyTo = function(arglist__13768) {
      var tcoll = cljs.core.first(arglist__13768);
      arglist__13768 = cljs.core.next(arglist__13768);
      var val = cljs.core.first(arglist__13768);
      var vals = cljs.core.rest(arglist__13768);
      return G__13764__delegate(tcoll, val, vals);
    };
    G__13764.cljs$core$IFn$_invoke$arity$variadic = G__13764__delegate;
    return G__13764;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a4554 = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a4554);
      } else {
        return f.call(null, a4554);
      }
    } else {
      var b4555 = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a4554, b4555);
        } else {
          return f.call(null, a4554, b4555);
        }
      } else {
        var c4556 = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a4554, b4555, c4556);
          } else {
            return f.call(null, a4554, b4555, c4556);
          }
        } else {
          var d4557 = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a4554, b4555, c4556, d4557);
            } else {
              return f.call(null, a4554, b4555, c4556, d4557);
            }
          } else {
            var e4558 = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a4554, b4555, c4556, d4557, e4558);
              } else {
                return f.call(null, a4554, b4555, c4556, d4557, e4558);
              }
            } else {
              var f4559 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a4554, b4555, c4556, d4557, e4558, f4559);
                } else {
                  return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559);
                }
              } else {
                var g4560 = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a4554, b4555, c4556, d4557, e4558, f4559, g4560);
                  } else {
                    return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560);
                  }
                } else {
                  var h4561 = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561);
                    } else {
                      return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561);
                    }
                  } else {
                    var i4562 = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562);
                      } else {
                        return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562);
                      }
                    } else {
                      var j4563 = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563);
                        } else {
                          return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563);
                        }
                      } else {
                        var k4564 = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564);
                          } else {
                            return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564);
                          }
                        } else {
                          var l4565 = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565);
                            } else {
                              return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565);
                            }
                          } else {
                            var m4566 = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566);
                              } else {
                                return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566);
                              }
                            } else {
                              var n4567 = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567);
                                } else {
                                  return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567);
                                }
                              } else {
                                var o4568 = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568);
                                  } else {
                                    return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568);
                                  }
                                } else {
                                  var p4569 = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568, p4569);
                                    } else {
                                      return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568, p4569);
                                    }
                                  } else {
                                    var q4570 = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568, p4569, q4570);
                                      } else {
                                        return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568, p4569, q4570);
                                      }
                                    } else {
                                      var r4571 = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568, p4569, q4570, r4571);
                                        } else {
                                          return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568, p4569, q4570, r4571);
                                        }
                                      } else {
                                        var s4572 = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568, p4569, q4570, r4571, s4572);
                                          } else {
                                            return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568, p4569, q4570, r4571, s4572);
                                          }
                                        } else {
                                          var t4573 = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568, p4569, q4570, r4571, s4572, t4573);
                                            } else {
                                              return f.call(null, a4554, b4555, c4556, d4557, e4558, f4559, g4560, h4561, i4562, j4563, k4564, l4565, m4566, n4567, o4568, p4569, q4570, r4571, s4572, t4573);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__13769__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__13769 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__13769__delegate.call(this, f, a, b, c, d, args);
    };
    G__13769.cljs$lang$maxFixedArity = 5;
    G__13769.cljs$lang$applyTo = function(arglist__13770) {
      var f = cljs.core.first(arglist__13770);
      arglist__13770 = cljs.core.next(arglist__13770);
      var a = cljs.core.first(arglist__13770);
      arglist__13770 = cljs.core.next(arglist__13770);
      var b = cljs.core.first(arglist__13770);
      arglist__13770 = cljs.core.next(arglist__13770);
      var c = cljs.core.first(arglist__13770);
      arglist__13770 = cljs.core.next(arglist__13770);
      var d = cljs.core.first(arglist__13770);
      var args = cljs.core.rest(arglist__13770);
      return G__13769__delegate(f, a, b, c, d, args);
    };
    G__13769.cljs$core$IFn$_invoke$arity$variadic = G__13769__delegate;
    return G__13769;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__13771__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__13771 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__13771__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__13771.cljs$lang$maxFixedArity = 6;
    G__13771.cljs$lang$applyTo = function(arglist__13772) {
      var obj = cljs.core.first(arglist__13772);
      arglist__13772 = cljs.core.next(arglist__13772);
      var f = cljs.core.first(arglist__13772);
      arglist__13772 = cljs.core.next(arglist__13772);
      var a = cljs.core.first(arglist__13772);
      arglist__13772 = cljs.core.next(arglist__13772);
      var b = cljs.core.first(arglist__13772);
      arglist__13772 = cljs.core.next(arglist__13772);
      var c = cljs.core.first(arglist__13772);
      arglist__13772 = cljs.core.next(arglist__13772);
      var d = cljs.core.first(arglist__13772);
      var args = cljs.core.rest(arglist__13772);
      return G__13771__delegate(obj, f, a, b, c, d, args);
    };
    G__13771.cljs$core$IFn$_invoke$arity$variadic = G__13771__delegate;
    return G__13771;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__13773__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__13773 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13773__delegate.call(this, x, y, more);
    };
    G__13773.cljs$lang$maxFixedArity = 2;
    G__13773.cljs$lang$applyTo = function(arglist__13774) {
      var x = cljs.core.first(arglist__13774);
      arglist__13774 = cljs.core.next(arglist__13774);
      var y = cljs.core.first(arglist__13774);
      var more = cljs.core.rest(arglist__13774);
      return G__13773__delegate(x, y, more);
    };
    G__13773.cljs$core$IFn$_invoke$arity$variadic = G__13773__delegate;
    return G__13773;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function nil_iter() {
  if (typeof cljs.core.t13778 !== "undefined") {
  } else {
    cljs.core.t13778 = function(nil_iter, meta13779) {
      this.nil_iter = nil_iter;
      this.meta13779 = meta13779;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.t13778.cljs$lang$type = true;
    cljs.core.t13778.cljs$lang$ctorStr = "cljs.core/t13778";
    cljs.core.t13778.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
      return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/t13778");
    };
    cljs.core.t13778.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t13778.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t13778.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t13778.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13780) {
      var self__ = this;
      var _13780__$1 = this;
      return self__.meta13779;
    };
    cljs.core.t13778.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13780, meta13779__$1) {
      var self__ = this;
      var _13780__$1 = this;
      return new cljs.core.t13778(self__.nil_iter, meta13779__$1);
    };
    cljs.core.__GT_t13778 = function __GT_t13778(nil_iter__$1, meta13779) {
      return new cljs.core.t13778(nil_iter__$1, meta13779);
    };
  }
  return new cljs.core.t13778(nil_iter, null);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/StringIter");
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.__GT_StringIter = function __GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ArrayIter");
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.__GT_ArrayIter = function __GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/SeqIter");
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq.call(null, self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next.call(null, self__._seq);
    } else {
    }
  }
  return!(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not.call(null, this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first.call(null, self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.__GT_SeqIter = function __GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter.call(null);
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_iter.call(null, coll);
      } else {
        if (cljs.core.iterable_QMARK_.call(null, coll)) {
          return cljs.core._iterator.call(null, coll);
        } else {
          if (cljs.core.seqable_QMARK_.call(null, coll)) {
            return cljs.core.seq_iter.call(null, coll);
          } else {
            throw new Error("Cannot create iterator from " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/Stepper");
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3628__auto__ = !(lt.stepper == null);
      if (and__3628__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__3628__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_.call(null, self__.xform.call(null, lt, self__.iter.next()))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.call(null, lt);
  }
};
cljs.core.__GT_Stepper = function __GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function stepper(xform, iter) {
  var stepfn = function() {
    var stepfn = null;
    var stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_.call(null, result) ? cljs.core.deref.call(null, result) : result;
      lt.stepper = null;
      return result;
    };
    var stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer.call(null, lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return stepfn__1.call(this, result);
        case 2:
          return stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
    stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
    return stepfn;
  }();
  return new cljs.core.Stepper(xform.call(null, stepfn), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/MultiStepper");
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq.call(null, self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first.call(null, iters__$1);
      if (cljs.core.not.call(null, iter.hasNext())) {
        return false;
      } else {
        var G__13781 = cljs.core.next.call(null, iters__$1);
        iters__$1 = G__13781;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__4510__auto___13782 = self__.iters.length;
  var i_13783 = 0;
  while (true) {
    if (i_13783 < n__4510__auto___13782) {
      self__.nexts[i_13783] = self__.iters[i_13783].next();
      var G__13784 = i_13783 + 1;
      i_13783 = G__13784;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.call(null, self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3628__auto__ = !(lt.stepper == null);
      if (and__3628__auto__) {
        return this$.hasNext();
      } else {
        return and__3628__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_.call(null, cljs.core.apply.call(null, self__.xform, cljs.core.cons.call(null, lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.call(null, lt);
  }
};
cljs.core.__GT_MultiStepper = function __GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function() {
  var multi_stepper = null;
  var multi_stepper__2 = function(xform, iters) {
    return multi_stepper.call(null, xform, iters, new Array(iters.length));
  };
  var multi_stepper__3 = function(xform, iters, nexts) {
    var stepfn = function() {
      var stepfn = null;
      var stepfn__1 = function(result) {
        var lt = cljs.core.reduced_QMARK_.call(null, result) ? cljs.core.deref.call(null, result) : result;
        lt.stepper = null;
        return lt;
      };
      var stepfn__2 = function(result, input) {
        var lt = result;
        lt.first = input;
        lt.rest = cljs.core.lazy_transformer.call(null, lt.stepper);
        lt.stepper = null;
        return lt.rest;
      };
      stepfn = function(result, input) {
        switch(arguments.length) {
          case 1:
            return stepfn__1.call(this, result);
          case 2:
            return stepfn__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
      stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
      return stepfn;
    }();
    return new cljs.core.MultiStepper(xform.call(null, stepfn), iters, nexts);
  };
  multi_stepper = function(xform, iters, nexts) {
    switch(arguments.length) {
      case 2:
        return multi_stepper__2.call(this, xform, iters);
      case 3:
        return multi_stepper__3.call(this, xform, iters, nexts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  multi_stepper.cljs$core$IFn$_invoke$arity$2 = multi_stepper__2;
  multi_stepper.cljs$core$IFn$_invoke$arity$3 = multi_stepper__3;
  return multi_stepper;
}();
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/LazyTransformer");
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq.call(null, self__.rest);
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq.call(null, this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential.call(null, this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_.call(null, other) && cljs.core.seq.call(null, other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, cljs.core._seq.call(null, this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.__GT_LazyTransformer = function __GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper.call(null, xform, cljs.core.iter.call(null, coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__13785_13789 = cljs.core.seq.call(null, colls);
  var chunk__13786_13790 = null;
  var count__13787_13791 = 0;
  var i__13788_13792 = 0;
  while (true) {
    if (i__13788_13792 < count__13787_13791) {
      var coll_13793 = cljs.core._nth.call(null, chunk__13786_13790, i__13788_13792);
      iters.push(cljs.core.iter.call(null, coll_13793));
      var G__13794 = seq__13785_13789;
      var G__13795 = chunk__13786_13790;
      var G__13796 = count__13787_13791;
      var G__13797 = i__13788_13792 + 1;
      seq__13785_13789 = G__13794;
      chunk__13786_13790 = G__13795;
      count__13787_13791 = G__13796;
      i__13788_13792 = G__13797;
      continue;
    } else {
      var temp__4126__auto___13798 = cljs.core.seq.call(null, seq__13785_13789);
      if (temp__4126__auto___13798) {
        var seq__13785_13799__$1 = temp__4126__auto___13798;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13785_13799__$1)) {
          var c__4410__auto___13800 = cljs.core.chunk_first.call(null, seq__13785_13799__$1);
          var G__13801 = cljs.core.chunk_rest.call(null, seq__13785_13799__$1);
          var G__13802 = c__4410__auto___13800;
          var G__13803 = cljs.core.count.call(null, c__4410__auto___13800);
          var G__13804 = 0;
          seq__13785_13789 = G__13801;
          chunk__13786_13790 = G__13802;
          count__13787_13791 = G__13803;
          i__13788_13792 = G__13804;
          continue;
        } else {
          var coll_13805 = cljs.core.first.call(null, seq__13785_13799__$1);
          iters.push(cljs.core.iter.call(null, coll_13805));
          var G__13806 = cljs.core.next.call(null, seq__13785_13799__$1);
          var G__13807 = null;
          var G__13808 = 0;
          var G__13809 = 0;
          seq__13785_13789 = G__13806;
          chunk__13786_13790 = G__13807;
          count__13787_13791 = G__13808;
          i__13788_13792 = G__13809;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.call(null, xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function() {
  var sequence = null;
  var sequence__1 = function(coll) {
    if (cljs.core.seq_QMARK_.call(null, coll)) {
      return coll;
    } else {
      var or__3640__auto__ = cljs.core.seq.call(null, coll);
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  };
  var sequence__2 = function(xform, coll) {
    return cljs.core.LazyTransformer.create(xform, coll);
  };
  var sequence__3 = function() {
    var G__13810__delegate = function(xform, coll, colls) {
      return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array.call(null, cljs.core.cons.call(null, coll, colls)));
    };
    var G__13810 = function(xform, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13810__delegate.call(this, xform, coll, colls);
    };
    G__13810.cljs$lang$maxFixedArity = 2;
    G__13810.cljs$lang$applyTo = function(arglist__13811) {
      var xform = cljs.core.first(arglist__13811);
      arglist__13811 = cljs.core.next(arglist__13811);
      var coll = cljs.core.first(arglist__13811);
      var colls = cljs.core.rest(arglist__13811);
      return G__13810__delegate(xform, coll, colls);
    };
    G__13810.cljs$core$IFn$_invoke$arity$variadic = G__13810__delegate;
    return G__13810;
  }();
  sequence = function(xform, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return sequence__1.call(this, xform);
      case 2:
        return sequence__2.call(this, xform, coll);
      default:
        return sequence__3.cljs$core$IFn$_invoke$arity$variadic(xform, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sequence.cljs$lang$maxFixedArity = 2;
  sequence.cljs$lang$applyTo = sequence__3.cljs$lang$applyTo;
  sequence.cljs$core$IFn$_invoke$arity$1 = sequence__1;
  sequence.cljs$core$IFn$_invoke$arity$2 = sequence__2;
  sequence.cljs$core$IFn$_invoke$arity$variadic = sequence__3.cljs$core$IFn$_invoke$arity$variadic;
  return sequence;
}();
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__13812 = pred;
        var G__13813 = cljs.core.next.call(null, coll);
        pred = G__13812;
        coll = G__13813;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__3640__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        var G__13814 = pred;
        var G__13815 = cljs.core.next.call(null, coll);
        pred = G__13814;
        coll = G__13815;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error("Argument must be an integer: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__13816 = null;
    var G__13816__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__13816__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__13816__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__13816__3 = function() {
      var G__13817__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__13817 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__13817__delegate.call(this, x, y, zs);
      };
      G__13817.cljs$lang$maxFixedArity = 2;
      G__13817.cljs$lang$applyTo = function(arglist__13818) {
        var x = cljs.core.first(arglist__13818);
        arglist__13818 = cljs.core.next(arglist__13818);
        var y = cljs.core.first(arglist__13818);
        var zs = cljs.core.rest(arglist__13818);
        return G__13817__delegate(x, y, zs);
      };
      G__13817.cljs$core$IFn$_invoke$arity$variadic = G__13817__delegate;
      return G__13817;
    }();
    G__13816 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__13816__0.call(this);
        case 1:
          return G__13816__1.call(this, x);
        case 2:
          return G__13816__2.call(this, x, y);
        default:
          return G__13816__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__13816.cljs$lang$maxFixedArity = 2;
    G__13816.cljs$lang$applyTo = G__13816__3.cljs$lang$applyTo;
    G__13816.cljs$core$IFn$_invoke$arity$0 = G__13816__0;
    G__13816.cljs$core$IFn$_invoke$arity$1 = G__13816__1;
    G__13816.cljs$core$IFn$_invoke$arity$2 = G__13816__2;
    G__13816.cljs$core$IFn$_invoke$arity$variadic = G__13816__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__13816;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__13819__delegate = function(args) {
      return x;
    };
    var G__13819 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__13819__delegate.call(this, args);
    };
    G__13819.cljs$lang$maxFixedArity = 0;
    G__13819.cljs$lang$applyTo = function(arglist__13820) {
      var args = cljs.core.seq(arglist__13820);
      return G__13819__delegate(args);
    };
    G__13819.cljs$core$IFn$_invoke$arity$variadic = G__13819__delegate;
    return G__13819;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__13821 = null;
      var G__13821__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__13821__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__13821__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__13821__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__13821__4 = function() {
        var G__13822__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__13822 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__13822__delegate.call(this, x, y, z, args);
        };
        G__13822.cljs$lang$maxFixedArity = 3;
        G__13822.cljs$lang$applyTo = function(arglist__13823) {
          var x = cljs.core.first(arglist__13823);
          arglist__13823 = cljs.core.next(arglist__13823);
          var y = cljs.core.first(arglist__13823);
          arglist__13823 = cljs.core.next(arglist__13823);
          var z = cljs.core.first(arglist__13823);
          var args = cljs.core.rest(arglist__13823);
          return G__13822__delegate(x, y, z, args);
        };
        G__13822.cljs$core$IFn$_invoke$arity$variadic = G__13822__delegate;
        return G__13822;
      }();
      G__13821 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__13821__0.call(this);
          case 1:
            return G__13821__1.call(this, x);
          case 2:
            return G__13821__2.call(this, x, y);
          case 3:
            return G__13821__3.call(this, x, y, z);
          default:
            return G__13821__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__13821.cljs$lang$maxFixedArity = 3;
      G__13821.cljs$lang$applyTo = G__13821__4.cljs$lang$applyTo;
      G__13821.cljs$core$IFn$_invoke$arity$0 = G__13821__0;
      G__13821.cljs$core$IFn$_invoke$arity$1 = G__13821__1;
      G__13821.cljs$core$IFn$_invoke$arity$2 = G__13821__2;
      G__13821.cljs$core$IFn$_invoke$arity$3 = G__13821__3;
      G__13821.cljs$core$IFn$_invoke$arity$variadic = G__13821__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__13821;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__13824 = null;
      var G__13824__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__13824__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__13824__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__13824__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__13824__4 = function() {
        var G__13825__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__13825 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__13825__delegate.call(this, x, y, z, args);
        };
        G__13825.cljs$lang$maxFixedArity = 3;
        G__13825.cljs$lang$applyTo = function(arglist__13826) {
          var x = cljs.core.first(arglist__13826);
          arglist__13826 = cljs.core.next(arglist__13826);
          var y = cljs.core.first(arglist__13826);
          arglist__13826 = cljs.core.next(arglist__13826);
          var z = cljs.core.first(arglist__13826);
          var args = cljs.core.rest(arglist__13826);
          return G__13825__delegate(x, y, z, args);
        };
        G__13825.cljs$core$IFn$_invoke$arity$variadic = G__13825__delegate;
        return G__13825;
      }();
      G__13824 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__13824__0.call(this);
          case 1:
            return G__13824__1.call(this, x);
          case 2:
            return G__13824__2.call(this, x, y);
          case 3:
            return G__13824__3.call(this, x, y, z);
          default:
            return G__13824__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__13824.cljs$lang$maxFixedArity = 3;
      G__13824.cljs$lang$applyTo = G__13824__4.cljs$lang$applyTo;
      G__13824.cljs$core$IFn$_invoke$arity$0 = G__13824__0;
      G__13824.cljs$core$IFn$_invoke$arity$1 = G__13824__1;
      G__13824.cljs$core$IFn$_invoke$arity$2 = G__13824__2;
      G__13824.cljs$core$IFn$_invoke$arity$3 = G__13824__3;
      G__13824.cljs$core$IFn$_invoke$arity$variadic = G__13824__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__13824;
    }();
  };
  var comp__4 = function() {
    var G__13827__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function(fs__$1) {
        return function() {
          var G__13828__delegate = function(args) {
            var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
            var fs__$2 = cljs.core.next.call(null, fs__$1);
            while (true) {
              if (fs__$2) {
                var G__13829 = cljs.core.first.call(null, fs__$2).call(null, ret);
                var G__13830 = cljs.core.next.call(null, fs__$2);
                ret = G__13829;
                fs__$2 = G__13830;
                continue;
              } else {
                return ret;
              }
              break;
            }
          };
          var G__13828 = function(var_args) {
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__13828__delegate.call(this, args);
          };
          G__13828.cljs$lang$maxFixedArity = 0;
          G__13828.cljs$lang$applyTo = function(arglist__13831) {
            var args = cljs.core.seq(arglist__13831);
            return G__13828__delegate(args);
          };
          G__13828.cljs$core$IFn$_invoke$arity$variadic = G__13828__delegate;
          return G__13828;
        }();
      }(fs__$1);
    };
    var G__13827 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__13827__delegate.call(this, f1, f2, f3, fs);
    };
    G__13827.cljs$lang$maxFixedArity = 3;
    G__13827.cljs$lang$applyTo = function(arglist__13832) {
      var f1 = cljs.core.first(arglist__13832);
      arglist__13832 = cljs.core.next(arglist__13832);
      var f2 = cljs.core.first(arglist__13832);
      arglist__13832 = cljs.core.next(arglist__13832);
      var f3 = cljs.core.first(arglist__13832);
      var fs = cljs.core.rest(arglist__13832);
      return G__13827__delegate(f1, f2, f3, fs);
    };
    G__13827.cljs$core$IFn$_invoke$arity$variadic = G__13827__delegate;
    return G__13827;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__13833__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__13833 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__13833__delegate.call(this, args);
      };
      G__13833.cljs$lang$maxFixedArity = 0;
      G__13833.cljs$lang$applyTo = function(arglist__13834) {
        var args = cljs.core.seq(arglist__13834);
        return G__13833__delegate(args);
      };
      G__13833.cljs$core$IFn$_invoke$arity$variadic = G__13833__delegate;
      return G__13833;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__13835__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__13835 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__13835__delegate.call(this, args);
      };
      G__13835.cljs$lang$maxFixedArity = 0;
      G__13835.cljs$lang$applyTo = function(arglist__13836) {
        var args = cljs.core.seq(arglist__13836);
        return G__13835__delegate(args);
      };
      G__13835.cljs$core$IFn$_invoke$arity$variadic = G__13835__delegate;
      return G__13835;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__13837__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__13837 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__13837__delegate.call(this, args);
      };
      G__13837.cljs$lang$maxFixedArity = 0;
      G__13837.cljs$lang$applyTo = function(arglist__13838) {
        var args = cljs.core.seq(arglist__13838);
        return G__13837__delegate(args);
      };
      G__13837.cljs$core$IFn$_invoke$arity$variadic = G__13837__delegate;
      return G__13837;
    }();
  };
  var partial__5 = function() {
    var G__13839__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__13840__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__13840 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__13840__delegate.call(this, args);
        };
        G__13840.cljs$lang$maxFixedArity = 0;
        G__13840.cljs$lang$applyTo = function(arglist__13841) {
          var args = cljs.core.seq(arglist__13841);
          return G__13840__delegate(args);
        };
        G__13840.cljs$core$IFn$_invoke$arity$variadic = G__13840__delegate;
        return G__13840;
      }();
    };
    var G__13839 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__13839__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__13839.cljs$lang$maxFixedArity = 4;
    G__13839.cljs$lang$applyTo = function(arglist__13842) {
      var f = cljs.core.first(arglist__13842);
      arglist__13842 = cljs.core.next(arglist__13842);
      var arg1 = cljs.core.first(arglist__13842);
      arglist__13842 = cljs.core.next(arglist__13842);
      var arg2 = cljs.core.first(arglist__13842);
      arglist__13842 = cljs.core.next(arglist__13842);
      var arg3 = cljs.core.first(arglist__13842);
      var more = cljs.core.rest(arglist__13842);
      return G__13839__delegate(f, arg1, arg2, arg3, more);
    };
    G__13839.cljs$core$IFn$_invoke$arity$variadic = G__13839__delegate;
    return G__13839;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__13843 = null;
      var G__13843__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__13843__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__13843__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__13843__4 = function() {
        var G__13844__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__13844 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__13844__delegate.call(this, a, b, c, ds);
        };
        G__13844.cljs$lang$maxFixedArity = 3;
        G__13844.cljs$lang$applyTo = function(arglist__13845) {
          var a = cljs.core.first(arglist__13845);
          arglist__13845 = cljs.core.next(arglist__13845);
          var b = cljs.core.first(arglist__13845);
          arglist__13845 = cljs.core.next(arglist__13845);
          var c = cljs.core.first(arglist__13845);
          var ds = cljs.core.rest(arglist__13845);
          return G__13844__delegate(a, b, c, ds);
        };
        G__13844.cljs$core$IFn$_invoke$arity$variadic = G__13844__delegate;
        return G__13844;
      }();
      G__13843 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__13843__1.call(this, a);
          case 2:
            return G__13843__2.call(this, a, b);
          case 3:
            return G__13843__3.call(this, a, b, c);
          default:
            return G__13843__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__13843.cljs$lang$maxFixedArity = 3;
      G__13843.cljs$lang$applyTo = G__13843__4.cljs$lang$applyTo;
      G__13843.cljs$core$IFn$_invoke$arity$1 = G__13843__1;
      G__13843.cljs$core$IFn$_invoke$arity$2 = G__13843__2;
      G__13843.cljs$core$IFn$_invoke$arity$3 = G__13843__3;
      G__13843.cljs$core$IFn$_invoke$arity$variadic = G__13843__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__13843;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__13846 = null;
      var G__13846__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__13846__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__13846__4 = function() {
        var G__13847__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__13847 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__13847__delegate.call(this, a, b, c, ds);
        };
        G__13847.cljs$lang$maxFixedArity = 3;
        G__13847.cljs$lang$applyTo = function(arglist__13848) {
          var a = cljs.core.first(arglist__13848);
          arglist__13848 = cljs.core.next(arglist__13848);
          var b = cljs.core.first(arglist__13848);
          arglist__13848 = cljs.core.next(arglist__13848);
          var c = cljs.core.first(arglist__13848);
          var ds = cljs.core.rest(arglist__13848);
          return G__13847__delegate(a, b, c, ds);
        };
        G__13847.cljs$core$IFn$_invoke$arity$variadic = G__13847__delegate;
        return G__13847;
      }();
      G__13846 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__13846__2.call(this, a, b);
          case 3:
            return G__13846__3.call(this, a, b, c);
          default:
            return G__13846__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__13846.cljs$lang$maxFixedArity = 3;
      G__13846.cljs$lang$applyTo = G__13846__4.cljs$lang$applyTo;
      G__13846.cljs$core$IFn$_invoke$arity$2 = G__13846__2;
      G__13846.cljs$core$IFn$_invoke$arity$3 = G__13846__3;
      G__13846.cljs$core$IFn$_invoke$arity$variadic = G__13846__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__13846;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__13849 = null;
      var G__13849__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__13849__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__13849__4 = function() {
        var G__13850__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__13850 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__13850__delegate.call(this, a, b, c, ds);
        };
        G__13850.cljs$lang$maxFixedArity = 3;
        G__13850.cljs$lang$applyTo = function(arglist__13851) {
          var a = cljs.core.first(arglist__13851);
          arglist__13851 = cljs.core.next(arglist__13851);
          var b = cljs.core.first(arglist__13851);
          arglist__13851 = cljs.core.next(arglist__13851);
          var c = cljs.core.first(arglist__13851);
          var ds = cljs.core.rest(arglist__13851);
          return G__13850__delegate(a, b, c, ds);
        };
        G__13850.cljs$core$IFn$_invoke$arity$variadic = G__13850__delegate;
        return G__13850;
      }();
      G__13849 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__13849__2.call(this, a, b);
          case 3:
            return G__13849__3.call(this, a, b, c);
          default:
            return G__13849__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__13849.cljs$lang$maxFixedArity = 3;
      G__13849.cljs$lang$applyTo = G__13849__4.cljs$lang$applyTo;
      G__13849.cljs$core$IFn$_invoke$arity$2 = G__13849__2;
      G__13849.cljs$core$IFn$_invoke$arity$3 = G__13849__3;
      G__13849.cljs$core$IFn$_invoke$arity$variadic = G__13849__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__13849;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4510__auto___13852 = size;
          var i_13853 = 0;
          while (true) {
            if (i_13853 < n__4510__auto___13852) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_13853, cljs.core._nth.call(null, c, i_13853)));
              var G__13854 = i_13853 + 1;
              i_13853 = G__13854;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function() {
  var keep = null;
  var keep__1 = function(f) {
    return function(rf) {
      return function() {
        var G__13855 = null;
        var G__13855__0 = function() {
          return rf.call(null);
        };
        var G__13855__1 = function(result) {
          return rf.call(null, result);
        };
        var G__13855__2 = function(result, input) {
          var v = f.call(null, input);
          if (v == null) {
            return result;
          } else {
            return rf.call(null, result, v);
          }
        };
        G__13855 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__13855__0.call(this);
            case 1:
              return G__13855__1.call(this, result);
            case 2:
              return G__13855__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__13855.cljs$core$IFn$_invoke$arity$0 = G__13855__0;
        G__13855.cljs$core$IFn$_invoke$arity$1 = G__13855__1;
        G__13855.cljs$core$IFn$_invoke$arity$2 = G__13855__2;
        return G__13855;
      }();
    };
  };
  var keep__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4510__auto___13856 = size;
          var i_13857 = 0;
          while (true) {
            if (i_13857 < n__4510__auto___13856) {
              var x_13858 = f.call(null, cljs.core._nth.call(null, c, i_13857));
              if (x_13858 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_13858);
              }
              var G__13859 = i_13857 + 1;
              i_13857 = G__13859;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, cljs.core.first.call(null, s));
          if (x == null) {
            return keep.call(null, f, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  keep = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep__1.call(this, f);
      case 2:
        return keep__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep.cljs$core$IFn$_invoke$arity$1 = keep__1;
  keep.cljs$core$IFn$_invoke$arity$2 = keep__2;
  return keep;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__13860 = cljs.core.seq.call(null, self__.watches);
  var chunk__13861 = null;
  var count__13862 = 0;
  var i__13863 = 0;
  while (true) {
    if (i__13863 < count__13862) {
      var vec__13864 = cljs.core._nth.call(null, chunk__13861, i__13863);
      var key = cljs.core.nth.call(null, vec__13864, 0, null);
      var f = cljs.core.nth.call(null, vec__13864, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__13866 = seq__13860;
      var G__13867 = chunk__13861;
      var G__13868 = count__13862;
      var G__13869 = i__13863 + 1;
      seq__13860 = G__13866;
      chunk__13861 = G__13867;
      count__13862 = G__13868;
      i__13863 = G__13869;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__13860);
      if (temp__4126__auto__) {
        var seq__13860__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13860__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__13860__$1);
          var G__13870 = cljs.core.chunk_rest.call(null, seq__13860__$1);
          var G__13871 = c__4410__auto__;
          var G__13872 = cljs.core.count.call(null, c__4410__auto__);
          var G__13873 = 0;
          seq__13860 = G__13870;
          chunk__13861 = G__13871;
          count__13862 = G__13872;
          i__13863 = G__13873;
          continue;
        } else {
          var vec__13865 = cljs.core.first.call(null, seq__13860__$1);
          var key = cljs.core.nth.call(null, vec__13865, 0, null);
          var f = cljs.core.nth.call(null, vec__13865, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__13874 = cljs.core.next.call(null, seq__13860__$1);
          var G__13875 = null;
          var G__13876 = 0;
          var G__13877 = 0;
          seq__13860 = G__13874;
          chunk__13861 = G__13875;
          count__13862 = G__13876;
          i__13863 = G__13877;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__13881__delegate = function(x, p__13878) {
      var map__13880 = p__13878;
      var map__13880__$1 = cljs.core.seq_QMARK_.call(null, map__13880) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13880) : map__13880;
      var validator = cljs.core.get.call(null, map__13880__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.call(null, map__13880__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__13881 = function(x, var_args) {
      var p__13878 = null;
      if (arguments.length > 1) {
        p__13878 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__13881__delegate.call(this, x, p__13878);
    };
    G__13881.cljs$lang$maxFixedArity = 1;
    G__13881.cljs$lang$applyTo = function(arglist__13882) {
      var x = cljs.core.first(arglist__13882);
      var p__13878 = cljs.core.rest(arglist__13882);
      return G__13881__delegate(x, p__13878);
    };
    G__13881.cljs$core$IFn$_invoke$arity$variadic = G__13881__delegate;
    return G__13881;
  }();
  atom = function(x, var_args) {
    var p__13878 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.call(null, new_value))) {
      } else {
        throw new Error("Assert failed: Validator rejected reference state\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null)))));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches.call(null, a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_.call(null, a, new_value);
  }
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__13883__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.call(null, a, f, x, y, more);
      }
    };
    var G__13883 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__13883__delegate.call(this, a, f, x, y, more);
    };
    G__13883.cljs$lang$maxFixedArity = 4;
    G__13883.cljs$lang$applyTo = function(arglist__13884) {
      var a = cljs.core.first(arglist__13884);
      arglist__13884 = cljs.core.next(arglist__13884);
      var f = cljs.core.first(arglist__13884);
      arglist__13884 = cljs.core.next(arglist__13884);
      var x = cljs.core.first(arglist__13884);
      arglist__13884 = cljs.core.next(arglist__13884);
      var y = cljs.core.first(arglist__13884);
      var more = cljs.core.rest(arglist__13884);
      return G__13883__delegate(a, f, x, y, more);
    };
    G__13883.cljs$core$IFn$_invoke$arity$variadic = G__13883__delegate;
    return G__13883;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.keep_indexed = function() {
  var keep_indexed = null;
  var keep_indexed__1 = function(f) {
    return function(rf) {
      var ia = cljs.core.atom.call(null, -1);
      return function(ia) {
        return function() {
          var G__13885 = null;
          var G__13885__0 = function() {
            return rf.call(null);
          };
          var G__13885__1 = function(result) {
            return rf.call(null, result);
          };
          var G__13885__2 = function(result, input) {
            var i = cljs.core.swap_BANG_.call(null, ia, cljs.core.inc);
            var v = f.call(null, i, input);
            if (v == null) {
              return result;
            } else {
              return rf.call(null, result, v);
            }
          };
          G__13885 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__13885__0.call(this);
              case 1:
                return G__13885__1.call(this, result);
              case 2:
                return G__13885__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__13885.cljs$core$IFn$_invoke$arity$0 = G__13885__0;
          G__13885.cljs$core$IFn$_invoke$arity$1 = G__13885__1;
          G__13885.cljs$core$IFn$_invoke$arity$2 = G__13885__2;
          return G__13885;
        }();
      }(ia);
    };
  };
  var keep_indexed__2 = function(f, coll) {
    var keepi = function keepi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
            var c = cljs.core.chunk_first.call(null, s);
            var size = cljs.core.count.call(null, c);
            var b = cljs.core.chunk_buffer.call(null, size);
            var n__4510__auto___13886 = size;
            var i_13887 = 0;
            while (true) {
              if (i_13887 < n__4510__auto___13886) {
                var x_13888 = f.call(null, idx + i_13887, cljs.core._nth.call(null, c, i_13887));
                if (x_13888 == null) {
                } else {
                  cljs.core.chunk_append.call(null, b, x_13888);
                }
                var G__13889 = i_13887 + 1;
                i_13887 = G__13889;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
          } else {
            var x = f.call(null, idx, cljs.core.first.call(null, s));
            if (x == null) {
              return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
            } else {
              return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
            }
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return keepi.call(null, 0, coll);
  };
  keep_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep_indexed__1.call(this, f);
      case 2:
        return keep_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep_indexed.cljs$core$IFn$_invoke$arity$1 = keep_indexed__1;
  keep_indexed.cljs$core$IFn$_invoke$arity$2 = keep_indexed__2;
  return keep_indexed;
}();
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3628__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3628__auto__)) {
            return p.call(null, y);
          } else {
            return and__3628__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3628__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3628__auto__)) {
            var and__3628__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__3628__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__3628__auto____$1;
            }
          } else {
            return and__3628__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__13896__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__13896 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__13896__delegate.call(this, x, y, z, args);
        };
        G__13896.cljs$lang$maxFixedArity = 3;
        G__13896.cljs$lang$applyTo = function(arglist__13897) {
          var x = cljs.core.first(arglist__13897);
          arglist__13897 = cljs.core.next(arglist__13897);
          var y = cljs.core.first(arglist__13897);
          arglist__13897 = cljs.core.next(arglist__13897);
          var z = cljs.core.first(arglist__13897);
          var args = cljs.core.rest(arglist__13897);
          return G__13896__delegate(x, y, z, args);
        };
        G__13896.cljs$core$IFn$_invoke$arity$variadic = G__13896__delegate;
        return G__13896;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3628__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3628__auto__)) {
            return p2.call(null, x);
          } else {
            return and__3628__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3628__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3628__auto__)) {
            var and__3628__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3628__auto____$1)) {
              var and__3628__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__3628__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__3628__auto____$2;
              }
            } else {
              return and__3628__auto____$1;
            }
          } else {
            return and__3628__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3628__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3628__auto__)) {
            var and__3628__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3628__auto____$1)) {
              var and__3628__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__3628__auto____$2)) {
                var and__3628__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__3628__auto____$3)) {
                  var and__3628__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3628__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__3628__auto____$4;
                  }
                } else {
                  return and__3628__auto____$3;
                }
              } else {
                return and__3628__auto____$2;
              }
            } else {
              return and__3628__auto____$1;
            }
          } else {
            return and__3628__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__13898__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__13890_SHARP_) {
            var and__3628__auto__ = p1.call(null, p1__13890_SHARP_);
            if (cljs.core.truth_(and__3628__auto__)) {
              return p2.call(null, p1__13890_SHARP_);
            } else {
              return and__3628__auto__;
            }
          }, args));
        };
        var G__13898 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__13898__delegate.call(this, x, y, z, args);
        };
        G__13898.cljs$lang$maxFixedArity = 3;
        G__13898.cljs$lang$applyTo = function(arglist__13899) {
          var x = cljs.core.first(arglist__13899);
          arglist__13899 = cljs.core.next(arglist__13899);
          var y = cljs.core.first(arglist__13899);
          arglist__13899 = cljs.core.next(arglist__13899);
          var z = cljs.core.first(arglist__13899);
          var args = cljs.core.rest(arglist__13899);
          return G__13898__delegate(x, y, z, args);
        };
        G__13898.cljs$core$IFn$_invoke$arity$variadic = G__13898__delegate;
        return G__13898;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3628__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3628__auto__)) {
            var and__3628__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3628__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__3628__auto____$1;
            }
          } else {
            return and__3628__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3628__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3628__auto__)) {
            var and__3628__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3628__auto____$1)) {
              var and__3628__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3628__auto____$2)) {
                var and__3628__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3628__auto____$3)) {
                  var and__3628__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3628__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__3628__auto____$4;
                  }
                } else {
                  return and__3628__auto____$3;
                }
              } else {
                return and__3628__auto____$2;
              }
            } else {
              return and__3628__auto____$1;
            }
          } else {
            return and__3628__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3628__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3628__auto__)) {
            var and__3628__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3628__auto____$1)) {
              var and__3628__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3628__auto____$2)) {
                var and__3628__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3628__auto____$3)) {
                  var and__3628__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3628__auto____$4)) {
                    var and__3628__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__3628__auto____$5)) {
                      var and__3628__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__3628__auto____$6)) {
                        var and__3628__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__3628__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__3628__auto____$7;
                        }
                      } else {
                        return and__3628__auto____$6;
                      }
                    } else {
                      return and__3628__auto____$5;
                    }
                  } else {
                    return and__3628__auto____$4;
                  }
                } else {
                  return and__3628__auto____$3;
                }
              } else {
                return and__3628__auto____$2;
              }
            } else {
              return and__3628__auto____$1;
            }
          } else {
            return and__3628__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__13900__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__13891_SHARP_) {
            var and__3628__auto__ = p1.call(null, p1__13891_SHARP_);
            if (cljs.core.truth_(and__3628__auto__)) {
              var and__3628__auto____$1 = p2.call(null, p1__13891_SHARP_);
              if (cljs.core.truth_(and__3628__auto____$1)) {
                return p3.call(null, p1__13891_SHARP_);
              } else {
                return and__3628__auto____$1;
              }
            } else {
              return and__3628__auto__;
            }
          }, args));
        };
        var G__13900 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__13900__delegate.call(this, x, y, z, args);
        };
        G__13900.cljs$lang$maxFixedArity = 3;
        G__13900.cljs$lang$applyTo = function(arglist__13901) {
          var x = cljs.core.first(arglist__13901);
          arglist__13901 = cljs.core.next(arglist__13901);
          var y = cljs.core.first(arglist__13901);
          arglist__13901 = cljs.core.next(arglist__13901);
          var z = cljs.core.first(arglist__13901);
          var args = cljs.core.rest(arglist__13901);
          return G__13900__delegate(x, y, z, args);
        };
        G__13900.cljs$core$IFn$_invoke$arity$variadic = G__13900__delegate;
        return G__13900;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__13902__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var epn = null;
          var epn__0 = function() {
            return true;
          };
          var epn__1 = function(x) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__13892_SHARP_) {
                return p1__13892_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var epn__2 = function(x, y) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__13893_SHARP_) {
                var and__3628__auto__ = p1__13893_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3628__auto__)) {
                  return p1__13893_SHARP_.call(null, y);
                } else {
                  return and__3628__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__3 = function(x, y, z) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__13894_SHARP_) {
                var and__3628__auto__ = p1__13894_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3628__auto__)) {
                  var and__3628__auto____$1 = p1__13894_SHARP_.call(null, y);
                  if (cljs.core.truth_(and__3628__auto____$1)) {
                    return p1__13894_SHARP_.call(null, z);
                  } else {
                    return and__3628__auto____$1;
                  }
                } else {
                  return and__3628__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__4 = function() {
            var G__13903__delegate = function(x, y, z, args) {
              return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(ps__$1) {
                return function(p1__13895_SHARP_) {
                  return cljs.core.every_QMARK_.call(null, p1__13895_SHARP_, args);
                };
              }(ps__$1), ps__$1));
            };
            var G__13903 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__13903__delegate.call(this, x, y, z, args);
            };
            G__13903.cljs$lang$maxFixedArity = 3;
            G__13903.cljs$lang$applyTo = function(arglist__13904) {
              var x = cljs.core.first(arglist__13904);
              arglist__13904 = cljs.core.next(arglist__13904);
              var y = cljs.core.first(arglist__13904);
              arglist__13904 = cljs.core.next(arglist__13904);
              var z = cljs.core.first(arglist__13904);
              var args = cljs.core.rest(arglist__13904);
              return G__13903__delegate(x, y, z, args);
            };
            G__13903.cljs$core$IFn$_invoke$arity$variadic = G__13903__delegate;
            return G__13903;
          }();
          epn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return epn__0.call(this);
              case 1:
                return epn__1.call(this, x);
              case 2:
                return epn__2.call(this, x, y);
              case 3:
                return epn__3.call(this, x, y, z);
              default:
                return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          epn.cljs$lang$maxFixedArity = 3;
          epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
          epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
          epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
          epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
          epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
          epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
          return epn;
        }();
      }(ps__$1);
    };
    var G__13902 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__13902__delegate.call(this, p1, p2, p3, ps);
    };
    G__13902.cljs$lang$maxFixedArity = 3;
    G__13902.cljs$lang$applyTo = function(arglist__13905) {
      var p1 = cljs.core.first(arglist__13905);
      arglist__13905 = cljs.core.next(arglist__13905);
      var p2 = cljs.core.first(arglist__13905);
      arglist__13905 = cljs.core.next(arglist__13905);
      var p3 = cljs.core.first(arglist__13905);
      var ps = cljs.core.rest(arglist__13905);
      return G__13902__delegate(p1, p2, p3, ps);
    };
    G__13902.cljs$core$IFn$_invoke$arity$variadic = G__13902__delegate;
    return G__13902;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__3640__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3640__auto__)) {
          return or__3640__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3640__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3640__auto__)) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__3640__auto____$1)) {
            return or__3640__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__13912__delegate = function(x, y, z, args) {
          var or__3640__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__3640__auto__)) {
            return or__3640__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__13912 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__13912__delegate.call(this, x, y, z, args);
        };
        G__13912.cljs$lang$maxFixedArity = 3;
        G__13912.cljs$lang$applyTo = function(arglist__13913) {
          var x = cljs.core.first(arglist__13913);
          arglist__13913 = cljs.core.next(arglist__13913);
          var y = cljs.core.first(arglist__13913);
          arglist__13913 = cljs.core.next(arglist__13913);
          var z = cljs.core.first(arglist__13913);
          var args = cljs.core.rest(arglist__13913);
          return G__13912__delegate(x, y, z, args);
        };
        G__13912.cljs$core$IFn$_invoke$arity$variadic = G__13912__delegate;
        return G__13912;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3640__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3640__auto__)) {
          return or__3640__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3640__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3640__auto__)) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3640__auto____$1)) {
            return or__3640__auto____$1;
          } else {
            var or__3640__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__3640__auto____$2)) {
              return or__3640__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3640__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3640__auto__)) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3640__auto____$1)) {
            return or__3640__auto____$1;
          } else {
            var or__3640__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__3640__auto____$2)) {
              return or__3640__auto____$2;
            } else {
              var or__3640__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__3640__auto____$3)) {
                return or__3640__auto____$3;
              } else {
                var or__3640__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3640__auto____$4)) {
                  return or__3640__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__13914__delegate = function(x, y, z, args) {
          var or__3640__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__3640__auto__)) {
            return or__3640__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3640__auto__) {
              return function(p1__13906_SHARP_) {
                var or__3640__auto____$1 = p1.call(null, p1__13906_SHARP_);
                if (cljs.core.truth_(or__3640__auto____$1)) {
                  return or__3640__auto____$1;
                } else {
                  return p2.call(null, p1__13906_SHARP_);
                }
              };
            }(or__3640__auto__), args);
          }
        };
        var G__13914 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__13914__delegate.call(this, x, y, z, args);
        };
        G__13914.cljs$lang$maxFixedArity = 3;
        G__13914.cljs$lang$applyTo = function(arglist__13915) {
          var x = cljs.core.first(arglist__13915);
          arglist__13915 = cljs.core.next(arglist__13915);
          var y = cljs.core.first(arglist__13915);
          arglist__13915 = cljs.core.next(arglist__13915);
          var z = cljs.core.first(arglist__13915);
          var args = cljs.core.rest(arglist__13915);
          return G__13914__delegate(x, y, z, args);
        };
        G__13914.cljs$core$IFn$_invoke$arity$variadic = G__13914__delegate;
        return G__13914;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3640__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3640__auto__)) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3640__auto____$1)) {
            return or__3640__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3640__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3640__auto__)) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3640__auto____$1)) {
            return or__3640__auto____$1;
          } else {
            var or__3640__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3640__auto____$2)) {
              return or__3640__auto____$2;
            } else {
              var or__3640__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3640__auto____$3)) {
                return or__3640__auto____$3;
              } else {
                var or__3640__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3640__auto____$4)) {
                  return or__3640__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3640__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3640__auto__)) {
          return or__3640__auto__;
        } else {
          var or__3640__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3640__auto____$1)) {
            return or__3640__auto____$1;
          } else {
            var or__3640__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3640__auto____$2)) {
              return or__3640__auto____$2;
            } else {
              var or__3640__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3640__auto____$3)) {
                return or__3640__auto____$3;
              } else {
                var or__3640__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3640__auto____$4)) {
                  return or__3640__auto____$4;
                } else {
                  var or__3640__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__3640__auto____$5)) {
                    return or__3640__auto____$5;
                  } else {
                    var or__3640__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__3640__auto____$6)) {
                      return or__3640__auto____$6;
                    } else {
                      var or__3640__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__3640__auto____$7)) {
                        return or__3640__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__13916__delegate = function(x, y, z, args) {
          var or__3640__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__3640__auto__)) {
            return or__3640__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3640__auto__) {
              return function(p1__13907_SHARP_) {
                var or__3640__auto____$1 = p1.call(null, p1__13907_SHARP_);
                if (cljs.core.truth_(or__3640__auto____$1)) {
                  return or__3640__auto____$1;
                } else {
                  var or__3640__auto____$2 = p2.call(null, p1__13907_SHARP_);
                  if (cljs.core.truth_(or__3640__auto____$2)) {
                    return or__3640__auto____$2;
                  } else {
                    return p3.call(null, p1__13907_SHARP_);
                  }
                }
              };
            }(or__3640__auto__), args);
          }
        };
        var G__13916 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__13916__delegate.call(this, x, y, z, args);
        };
        G__13916.cljs$lang$maxFixedArity = 3;
        G__13916.cljs$lang$applyTo = function(arglist__13917) {
          var x = cljs.core.first(arglist__13917);
          arglist__13917 = cljs.core.next(arglist__13917);
          var y = cljs.core.first(arglist__13917);
          arglist__13917 = cljs.core.next(arglist__13917);
          var z = cljs.core.first(arglist__13917);
          var args = cljs.core.rest(arglist__13917);
          return G__13916__delegate(x, y, z, args);
        };
        G__13916.cljs$core$IFn$_invoke$arity$variadic = G__13916__delegate;
        return G__13916;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__13918__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var spn = null;
          var spn__0 = function() {
            return null;
          };
          var spn__1 = function(x) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__13908_SHARP_) {
                return p1__13908_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var spn__2 = function(x, y) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__13909_SHARP_) {
                var or__3640__auto__ = p1__13909_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3640__auto__)) {
                  return or__3640__auto__;
                } else {
                  return p1__13909_SHARP_.call(null, y);
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__3 = function(x, y, z) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__13910_SHARP_) {
                var or__3640__auto__ = p1__13910_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3640__auto__)) {
                  return or__3640__auto__;
                } else {
                  var or__3640__auto____$1 = p1__13910_SHARP_.call(null, y);
                  if (cljs.core.truth_(or__3640__auto____$1)) {
                    return or__3640__auto____$1;
                  } else {
                    return p1__13910_SHARP_.call(null, z);
                  }
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__4 = function() {
            var G__13919__delegate = function(x, y, z, args) {
              var or__3640__auto__ = spn.call(null, x, y, z);
              if (cljs.core.truth_(or__3640__auto__)) {
                return or__3640__auto__;
              } else {
                return cljs.core.some.call(null, function(or__3640__auto__, ps__$1) {
                  return function(p1__13911_SHARP_) {
                    return cljs.core.some.call(null, p1__13911_SHARP_, args);
                  };
                }(or__3640__auto__, ps__$1), ps__$1);
              }
            };
            var G__13919 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__13919__delegate.call(this, x, y, z, args);
            };
            G__13919.cljs$lang$maxFixedArity = 3;
            G__13919.cljs$lang$applyTo = function(arglist__13920) {
              var x = cljs.core.first(arglist__13920);
              arglist__13920 = cljs.core.next(arglist__13920);
              var y = cljs.core.first(arglist__13920);
              arglist__13920 = cljs.core.next(arglist__13920);
              var z = cljs.core.first(arglist__13920);
              var args = cljs.core.rest(arglist__13920);
              return G__13919__delegate(x, y, z, args);
            };
            G__13919.cljs$core$IFn$_invoke$arity$variadic = G__13919__delegate;
            return G__13919;
          }();
          spn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return spn__0.call(this);
              case 1:
                return spn__1.call(this, x);
              case 2:
                return spn__2.call(this, x, y);
              case 3:
                return spn__3.call(this, x, y, z);
              default:
                return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          spn.cljs$lang$maxFixedArity = 3;
          spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
          spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
          spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
          spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
          spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
          spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
          return spn;
        }();
      }(ps__$1);
    };
    var G__13918 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__13918__delegate.call(this, p1, p2, p3, ps);
    };
    G__13918.cljs$lang$maxFixedArity = 3;
    G__13918.cljs$lang$applyTo = function(arglist__13921) {
      var p1 = cljs.core.first(arglist__13921);
      arglist__13921 = cljs.core.next(arglist__13921);
      var p2 = cljs.core.first(arglist__13921);
      arglist__13921 = cljs.core.next(arglist__13921);
      var p3 = cljs.core.first(arglist__13921);
      var ps = cljs.core.rest(arglist__13921);
      return G__13918__delegate(p1, p2, p3, ps);
    };
    G__13918.cljs$core$IFn$_invoke$arity$variadic = G__13918__delegate;
    return G__13918;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__1 = function(f) {
    return function(rf) {
      return function() {
        var G__13923 = null;
        var G__13923__0 = function() {
          return rf.call(null);
        };
        var G__13923__1 = function(result) {
          return rf.call(null, result);
        };
        var G__13923__2 = function(result, input) {
          return rf.call(null, result, f.call(null, input));
        };
        var G__13923__3 = function() {
          var G__13924__delegate = function(result, input, inputs) {
            return rf.call(null, result, cljs.core.apply.call(null, f, input, inputs));
          };
          var G__13924 = function(result, input, var_args) {
            var inputs = null;
            if (arguments.length > 2) {
              inputs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
            }
            return G__13924__delegate.call(this, result, input, inputs);
          };
          G__13924.cljs$lang$maxFixedArity = 2;
          G__13924.cljs$lang$applyTo = function(arglist__13925) {
            var result = cljs.core.first(arglist__13925);
            arglist__13925 = cljs.core.next(arglist__13925);
            var input = cljs.core.first(arglist__13925);
            var inputs = cljs.core.rest(arglist__13925);
            return G__13924__delegate(result, input, inputs);
          };
          G__13924.cljs$core$IFn$_invoke$arity$variadic = G__13924__delegate;
          return G__13924;
        }();
        G__13923 = function(result, input, var_args) {
          var inputs = var_args;
          switch(arguments.length) {
            case 0:
              return G__13923__0.call(this);
            case 1:
              return G__13923__1.call(this, result);
            case 2:
              return G__13923__2.call(this, result, input);
            default:
              return G__13923__3.cljs$core$IFn$_invoke$arity$variadic(result, input, cljs.core.array_seq(arguments, 2));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__13923.cljs$lang$maxFixedArity = 2;
        G__13923.cljs$lang$applyTo = G__13923__3.cljs$lang$applyTo;
        G__13923.cljs$core$IFn$_invoke$arity$0 = G__13923__0;
        G__13923.cljs$core$IFn$_invoke$arity$1 = G__13923__1;
        G__13923.cljs$core$IFn$_invoke$arity$2 = G__13923__2;
        G__13923.cljs$core$IFn$_invoke$arity$variadic = G__13923__3.cljs$core$IFn$_invoke$arity$variadic;
        return G__13923;
      }();
    };
  };
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4510__auto___13926 = size;
          var i_13927 = 0;
          while (true) {
            if (i_13927 < n__4510__auto___13926) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_13927)));
              var G__13928 = i_13927 + 1;
              i_13927 = G__13928;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && s2 && s3) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__13929__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(step) {
        return function(p1__13922_SHARP_) {
          return cljs.core.apply.call(null, f, p1__13922_SHARP_);
        };
      }(step), step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__13929 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__13929__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__13929.cljs$lang$maxFixedArity = 4;
    G__13929.cljs$lang$applyTo = function(arglist__13930) {
      var f = cljs.core.first(arglist__13930);
      arglist__13930 = cljs.core.next(arglist__13930);
      var c1 = cljs.core.first(arglist__13930);
      arglist__13930 = cljs.core.next(arglist__13930);
      var c2 = cljs.core.first(arglist__13930);
      arglist__13930 = cljs.core.next(arglist__13930);
      var c3 = cljs.core.first(arglist__13930);
      var colls = cljs.core.rest(arglist__13930);
      return G__13929__delegate(f, c1, c2, c3, colls);
    };
    G__13929.cljs$core$IFn$_invoke$arity$variadic = G__13929__delegate;
    return G__13929;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return map__1.call(this, f);
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$1 = map__1;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function() {
  var take = null;
  var take__1 = function(n) {
    return function(rf) {
      var na = cljs.core.atom.call(null, n);
      return function(na) {
        return function() {
          var G__13931 = null;
          var G__13931__0 = function() {
            return rf.call(null);
          };
          var G__13931__1 = function(result) {
            return rf.call(null, result);
          };
          var G__13931__2 = function(result, input) {
            var n__$1 = cljs.core.deref.call(null, na);
            var nn = cljs.core.swap_BANG_.call(null, na, cljs.core.dec);
            var result__$1 = n__$1 > 0 ? rf.call(null, result, input) : result;
            if (!(nn > 0)) {
              return cljs.core.reduced.call(null, result__$1);
            } else {
              return result__$1;
            }
          };
          G__13931 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__13931__0.call(this);
              case 1:
                return G__13931__1.call(this, result);
              case 2:
                return G__13931__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__13931.cljs$core$IFn$_invoke$arity$0 = G__13931__0;
          G__13931.cljs$core$IFn$_invoke$arity$1 = G__13931__1;
          G__13931.cljs$core$IFn$_invoke$arity$2 = G__13931__2;
          return G__13931;
        }();
      }(na);
    };
  };
  var take__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      if (n > 0) {
        var temp__4126__auto__ = cljs.core.seq.call(null, coll);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take__1.call(this, n);
      case 2:
        return take__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$1 = take__1;
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  return take;
}();
cljs.core.drop = function() {
  var drop = null;
  var drop__1 = function(n) {
    return function(rf) {
      var na = cljs.core.atom.call(null, n);
      return function(na) {
        return function() {
          var G__13932 = null;
          var G__13932__0 = function() {
            return rf.call(null);
          };
          var G__13932__1 = function(result) {
            return rf.call(null, result);
          };
          var G__13932__2 = function(result, input) {
            var n__$1 = cljs.core.deref.call(null, na);
            cljs.core.swap_BANG_.call(null, na, cljs.core.dec);
            if (n__$1 > 0) {
              return result;
            } else {
              return rf.call(null, result, input);
            }
          };
          G__13932 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__13932__0.call(this);
              case 1:
                return G__13932__1.call(this, result);
              case 2:
                return G__13932__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__13932.cljs$core$IFn$_invoke$arity$0 = G__13932__0;
          G__13932.cljs$core$IFn$_invoke$arity$1 = G__13932__1;
          G__13932.cljs$core$IFn$_invoke$arity$2 = G__13932__2;
          return G__13932;
        }();
      }(na);
    };
  };
  var drop__2 = function(n, coll) {
    var step = function(n__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq.call(null, coll__$1);
        if (n__$1 > 0 && s) {
          var G__13933 = n__$1 - 1;
          var G__13934 = cljs.core.rest.call(null, s);
          n__$1 = G__13933;
          coll__$1 = G__13934;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step.call(null, n, coll);
      };
    }(step), null, null);
  };
  drop = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return drop__1.call(this, n);
      case 2:
        return drop__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop.cljs$core$IFn$_invoke$arity$1 = drop__1;
  drop.cljs$core$IFn$_invoke$arity$2 = drop__2;
  return drop;
}();
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__13935 = cljs.core.next.call(null, s);
      var G__13936 = cljs.core.next.call(null, lead);
      s = G__13935;
      lead = G__13936;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function() {
  var drop_while = null;
  var drop_while__1 = function(pred) {
    return function(rf) {
      var da = cljs.core.atom.call(null, true);
      return function(da) {
        return function() {
          var G__13937 = null;
          var G__13937__0 = function() {
            return rf.call(null);
          };
          var G__13937__1 = function(result) {
            return rf.call(null, result);
          };
          var G__13937__2 = function(result, input) {
            var drop_QMARK_ = cljs.core.deref.call(null, da);
            if (cljs.core.truth_(function() {
              var and__3628__auto__ = drop_QMARK_;
              if (cljs.core.truth_(and__3628__auto__)) {
                return pred.call(null, input);
              } else {
                return and__3628__auto__;
              }
            }())) {
              return result;
            } else {
              cljs.core.reset_BANG_.call(null, da, null);
              return rf.call(null, result, input);
            }
          };
          G__13937 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__13937__0.call(this);
              case 1:
                return G__13937__1.call(this, result);
              case 2:
                return G__13937__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__13937.cljs$core$IFn$_invoke$arity$0 = G__13937__0;
          G__13937.cljs$core$IFn$_invoke$arity$1 = G__13937__1;
          G__13937.cljs$core$IFn$_invoke$arity$2 = G__13937__2;
          return G__13937;
        }();
      }(da);
    };
  };
  var drop_while__2 = function(pred, coll) {
    var step = function(pred__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq.call(null, coll__$1);
        if (cljs.core.truth_(function() {
          var and__3628__auto__ = s;
          if (and__3628__auto__) {
            return pred__$1.call(null, cljs.core.first.call(null, s));
          } else {
            return and__3628__auto__;
          }
        }())) {
          var G__13938 = pred__$1;
          var G__13939 = cljs.core.rest.call(null, s);
          pred__$1 = G__13938;
          coll__$1 = G__13939;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step.call(null, pred, coll);
      };
    }(step), null, null);
  };
  drop_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return drop_while__1.call(this, pred);
      case 2:
        return drop_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_while.cljs$core$IFn$_invoke$arity$1 = drop_while__1;
  drop_while.cljs$core$IFn$_invoke$arity$2 = drop_while__2;
  return drop_while;
}();
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__13940__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__13940 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13940__delegate.call(this, c1, c2, colls);
    };
    G__13940.cljs$lang$maxFixedArity = 2;
    G__13940.cljs$lang$applyTo = function(arglist__13941) {
      var c1 = cljs.core.first(arglist__13941);
      arglist__13941 = cljs.core.next(arglist__13941);
      var c2 = cljs.core.first(arglist__13941);
      var colls = cljs.core.rest(arglist__13941);
      return G__13940__delegate(c1, c2, colls);
    };
    G__13940.cljs$core$IFn$_invoke$arity$variadic = G__13940__delegate;
    return G__13940;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var coll__$1 = temp__4124__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__1 = function(f) {
    return cljs.core.comp.call(null, cljs.core.map.call(null, f), cljs.core.cat);
  };
  var mapcat__2 = function() {
    var G__13942__delegate = function(f, colls) {
      return cljs.core.apply.call(null, cljs.core.concat, cljs.core.apply.call(null, cljs.core.map, f, colls));
    };
    var G__13942 = function(f, var_args) {
      var colls = null;
      if (arguments.length > 1) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__13942__delegate.call(this, f, colls);
    };
    G__13942.cljs$lang$maxFixedArity = 1;
    G__13942.cljs$lang$applyTo = function(arglist__13943) {
      var f = cljs.core.first(arglist__13943);
      var colls = cljs.core.rest(arglist__13943);
      return G__13942__delegate(f, colls);
    };
    G__13942.cljs$core$IFn$_invoke$arity$variadic = G__13942__delegate;
    return G__13942;
  }();
  mapcat = function(f, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return mapcat__1.call(this, f);
      default:
        return mapcat__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 1;
  mapcat.cljs$lang$applyTo = mapcat__2.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$1 = mapcat__1;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__2.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function() {
  var filter = null;
  var filter__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__13944 = null;
        var G__13944__0 = function() {
          return rf.call(null);
        };
        var G__13944__1 = function(result) {
          return rf.call(null, result);
        };
        var G__13944__2 = function(result, input) {
          if (cljs.core.truth_(pred.call(null, input))) {
            return rf.call(null, result, input);
          } else {
            return result;
          }
        };
        G__13944 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__13944__0.call(this);
            case 1:
              return G__13944__1.call(this, result);
            case 2:
              return G__13944__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__13944.cljs$core$IFn$_invoke$arity$0 = G__13944__0;
        G__13944.cljs$core$IFn$_invoke$arity$1 = G__13944__1;
        G__13944.cljs$core$IFn$_invoke$arity$2 = G__13944__2;
        return G__13944;
      }();
    };
  };
  var filter__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4510__auto___13945 = size;
          var i_13946 = 0;
          while (true) {
            if (i_13946 < n__4510__auto___13945) {
              if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_13946)))) {
                cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_13946));
              } else {
              }
              var G__13947 = i_13946 + 1;
              i_13946 = G__13947;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
        } else {
          var f = cljs.core.first.call(null, s);
          var r = cljs.core.rest.call(null, s);
          if (cljs.core.truth_(pred.call(null, f))) {
            return cljs.core.cons.call(null, f, filter.call(null, pred, r));
          } else {
            return filter.call(null, pred, r);
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  filter = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return filter__1.call(this, pred);
      case 2:
        return filter__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter.cljs$core$IFn$_invoke$arity$1 = filter__1;
  filter.cljs$core$IFn$_invoke$arity$2 = filter__2;
  return filter;
}();
cljs.core.remove = function() {
  var remove = null;
  var remove__1 = function(pred) {
    return cljs.core.filter.call(null, cljs.core.complement.call(null, pred));
  };
  var remove__2 = function(pred, coll) {
    return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
  };
  remove = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return remove__1.call(this, pred);
      case 2:
        return remove__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove.cljs$core$IFn$_invoke$arity$1 = remove__1;
  remove.cljs$core$IFn$_invoke$arity$2 = remove__2;
  return remove;
}();
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__13948_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__13948_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function() {
  var into = null;
  var into__2 = function(to, from) {
    if (!(to == null)) {
      if (function() {
        var G__13951 = to;
        if (G__13951) {
          var bit__4297__auto__ = G__13951.cljs$lang$protocol_mask$partition1$ & 4;
          if (bit__4297__auto__ || G__13951.cljs$core$IEditableCollection$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from)), cljs.core.meta.call(null, to));
      } else {
        return cljs.core.reduce.call(null, cljs.core._conj, to, from);
      }
    } else {
      return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
    }
  };
  var into__3 = function(to, xform, from) {
    if (function() {
      var G__13952 = to;
      if (G__13952) {
        var bit__4297__auto__ = G__13952.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4297__auto__ || G__13952.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.transduce.call(null, xform, cljs.core.conj_BANG_, cljs.core.transient$.call(null, to), from)), cljs.core.meta.call(null, to));
    } else {
      return cljs.core.transduce.call(null, xform, cljs.core.conj, to, from);
    }
  };
  into = function(to, xform, from) {
    switch(arguments.length) {
      case 2:
        return into__2.call(this, to, xform);
      case 3:
        return into__3.call(this, to, xform, from);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into.cljs$core$IFn$_invoke$arity$2 = into__2;
  into.cljs$core$IFn$_invoke$arity$3 = into__3;
  return into;
}();
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__13953__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__13953 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__13953__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__13953.cljs$lang$maxFixedArity = 4;
    G__13953.cljs$lang$applyTo = function(arglist__13954) {
      var f = cljs.core.first(arglist__13954);
      arglist__13954 = cljs.core.next(arglist__13954);
      var c1 = cljs.core.first(arglist__13954);
      arglist__13954 = cljs.core.next(arglist__13954);
      var c2 = cljs.core.first(arglist__13954);
      arglist__13954 = cljs.core.next(arglist__13954);
      var c3 = cljs.core.first(arglist__13954);
      var colls = cljs.core.rest(arglist__13954);
      return G__13953__delegate(f, c1, c2, c3, colls);
    };
    G__13953.cljs$core$IFn$_invoke$arity$variadic = G__13953__delegate;
    return G__13953;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__13956 = m__$1;
          if (G__13956) {
            var bit__4304__auto__ = G__13956.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4304__auto__ || G__13956.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__13956.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__13956);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__13956);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__13957 = sentinel;
            var G__13958 = m__$2;
            var G__13959 = cljs.core.next.call(null, ks__$1);
            sentinel = G__13957;
            m__$1 = G__13958;
            ks__$1 = G__13959;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__13960, v) {
  var vec__13962 = p__13960;
  var k = cljs.core.nth.call(null, vec__13962, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__13962, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__13963, f) {
    var vec__13973 = p__13963;
    var k = cljs.core.nth.call(null, vec__13973, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__13973, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__13964, f, a) {
    var vec__13974 = p__13964;
    var k = cljs.core.nth.call(null, vec__13974, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__13974, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__13965, f, a, b) {
    var vec__13975 = p__13965;
    var k = cljs.core.nth.call(null, vec__13975, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__13975, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__13966, f, a, b, c) {
    var vec__13976 = p__13966;
    var k = cljs.core.nth.call(null, vec__13976, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__13976, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__13978__delegate = function(m, p__13967, f, a, b, c, args) {
      var vec__13977 = p__13967;
      var k = cljs.core.nth.call(null, vec__13977, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__13977, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__13978 = function(m, p__13967, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__13978__delegate.call(this, m, p__13967, f, a, b, c, args);
    };
    G__13978.cljs$lang$maxFixedArity = 6;
    G__13978.cljs$lang$applyTo = function(arglist__13979) {
      var m = cljs.core.first(arglist__13979);
      arglist__13979 = cljs.core.next(arglist__13979);
      var p__13967 = cljs.core.first(arglist__13979);
      arglist__13979 = cljs.core.next(arglist__13979);
      var f = cljs.core.first(arglist__13979);
      arglist__13979 = cljs.core.next(arglist__13979);
      var a = cljs.core.first(arglist__13979);
      arglist__13979 = cljs.core.next(arglist__13979);
      var b = cljs.core.first(arglist__13979);
      arglist__13979 = cljs.core.next(arglist__13979);
      var c = cljs.core.first(arglist__13979);
      var args = cljs.core.rest(arglist__13979);
      return G__13978__delegate(m, p__13967, f, a, b, c, args);
    };
    G__13978.cljs$core$IFn$_invoke$arity$variadic = G__13978__delegate;
    return G__13978;
  }();
  update_in = function(m, p__13967, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__13967, f);
      case 4:
        return update_in__4.call(this, m, p__13967, f, a);
      case 5:
        return update_in__5.call(this, m, p__13967, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__13967, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__13967, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4220__auto__, writer__4221__auto__, opts__4222__auto__) {
  return cljs.core._write.call(null, writer__4221__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__13980 = ll - 5;
      var G__13981 = r;
      ll = G__13980;
      ret = G__13981;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error("No item " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(i) + " in vector of length " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cnt));
};
cljs.core.first_array_for_longvec = function first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__13982 = cljs.core.pv_aget.call(null, node, 0);
      var G__13983 = level - 5;
      node = G__13982;
      level = G__13983;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off.call(null, pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__13984 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
        var G__13985 = level - 5;
        node = G__13984;
        level = G__13985;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for.call(null, pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/RangedIterator");
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for.call(null, self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.__GT_RangedIterator = function __GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count.call(null, v) ? cljs.core.unchecked_array_for.call(null, v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = f.call(null, init__$2, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
              return init__$3;
            } else {
              var G__13987 = j + 1;
              var G__13988 = init__$3;
              j = G__13987;
              init__$2 = G__13988;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__13989 = i + len;
        var G__13990 = init__$2;
        i = G__13989;
        init__$1 = G__13990;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for.call(null, coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= n) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, val);
    } else {
      throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds  [0," + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt) + "]");
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator.call(null, this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for.call(null, coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count.call(null, other)) {
      var me_iter = cljs.core._iterator.call(null, coll__$1);
      var you_iter = cljs.core._iterator.call(null, other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.call(null, x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential.call(null, coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = f.call(null, init__$2, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
              return init__$3;
            } else {
              var G__13991 = j + 1;
              var G__13992 = init__$3;
              j = G__13991;
              init__$2 = G__13992;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__13993 = i + len;
        var G__13994 = init__$2;
        i = G__13993;
        init__$1 = G__13994;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      return cljs.core.chunked_seq.call(null, coll__$1, cljs.core.first_array_for_longvec.call(null, coll__$1), 0, 0);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4510__auto___13995 = len;
    var i_13996 = 0;
    while (true) {
      if (i_13996 < n__4510__auto___13995) {
        new_tail[i_13996] = self__.tail[i_13996];
        var G__13997 = i_13996 + 1;
        i_13996 = G__13997;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__13998 = null;
  var G__13998__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__13998__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__13998 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__13998__2.call(this, self__, k);
      case 3:
        return G__13998__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__13998.cljs$core$IFn$_invoke$arity$2 = G__13998__2;
  G__13998.cljs$core$IFn$_invoke$arity$3 = G__13998__3;
  return G__13998;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args13986) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args13986)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__13999 = i + 1;
        var G__14000 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__13999;
        out = G__14000;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray(args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__14001) {
    var args = cljs.core.seq(arglist__14001);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return null;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3947__auto__ = self__.end;
    var y__3948__auto__ = v_pos + 1;
    return x__3947__auto__ > y__3948__auto__ ? x__3947__auto__ : y__3948__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return subvec_seq.call(null, i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.call = function() {
  var G__14003 = null;
  var G__14003__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__14003__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__14003 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14003__2.call(this, self__, k);
      case 3:
        return G__14003__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14003.cljs$core$IFn$_invoke$arity$2 = G__14003__2;
  G__14003.cljs$core$IFn$_invoke$arity$3 = G__14003__3;
  return G__14003;
}();
cljs.core.Subvec.prototype.apply = function(self__, args14002) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14002)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__14004 = meta;
      var G__14005 = v.v;
      var G__14006 = v.start + start;
      var G__14007 = v.start + end;
      var G__14008 = __hash;
      meta = G__14004;
      v = G__14005;
      start = G__14006;
      end = G__14007;
      __hash = G__14008;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj14012 = {};
    return obj14012;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off.call(null, tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__14013 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
        var G__14014 = level - 5;
        node = G__14013;
        level = G__14014;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__14016 = null;
  var G__14016__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__14016__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__14016 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14016__2.call(this, self__, k);
      case 3:
        return G__14016__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14016.cljs$core$IFn$_invoke$arity$2 = G__14016__2;
  G__14016.cljs$core$IFn$_invoke$arity$3 = G__14016__3;
  return G__14016;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args14015) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14015)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset.call(null, node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds for TransientVector of length" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4124__auto__) {
    var f1 = temp__4124__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4124__auto__) {
      var f1 = temp__4124__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__3640__auto__ = self__.front;
    if (cljs.core.truth_(or__3640__auto__)) {
      return or__3640__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3640__auto__ = self__.rear;
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__14017 = i + incr;
        i = G__14017;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__14018 = i + 1;
      var G__14019 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__14018;
      out = G__14019;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj14023 = {};
    return obj14023;
  }();
  var l = ks.length;
  var i_14024 = 0;
  while (true) {
    if (i_14024 < l) {
      var k_14025 = ks[i_14024];
      new_obj[k_14025] = obj[k_14025];
      var G__14026 = i_14024 + 1;
      i_14024 = G__14026;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__14029 = cljs.core.rest.call(null, keys__$1);
        var G__14030 = init__$2;
        keys__$1 = G__14029;
        init__$1 = G__14030;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(coll__$1) {
      return function(p1__14027_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__14027_SHARP_, self__.strobj[p1__14027_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__14031 = null;
  var G__14031__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__14031__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__14031 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14031__2.call(this, self__, k);
      case 3:
        return G__14031__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14031.cljs$core$IFn$_invoke$arity$2 = G__14031__2;
  G__14031.cljs$core$IFn$_invoke$arity$3 = G__14031__3;
  return G__14031;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args14028) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14028)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj14033 = {};
  return obj14033;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ES6Iterator");
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first.call(null, self__.s);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":x};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_ES6Iterator = function __GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq.call(null, coll));
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__14034 = cljs.core.first.call(null, self__.s);
    var k = cljs.core.nth.call(null, vec__14034, 0, null);
    var v = cljs.core.nth.call(null, vec__14034, 1, null);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":[k, v]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_ES6EntriesIterator = function __GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq.call(null, coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first.call(null, self__.s);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":[x, x]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_ES6SetEntriesIterator = function __GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq.call(null, coll));
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__14035 = i + 2;
        i = G__14035;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        var G__14036 = i + 2;
        i = G__14036;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        var G__14037 = i + 2;
        i = G__14037;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__14038 = i + 2;
        i = G__14038;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        var G__14039 = i + 2;
        i = G__14039;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_14040 = 0;
  while (true) {
    if (i_14040 < l) {
      narr[i_14040] = arr[i_14040];
      var G__14041 = i_14040 + 1;
      i_14040 = G__14041;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.__GT_PersistentArrayMapIterator = function __GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__14043 = cljs.core.seq.call(null, coll);
  var chunk__14044 = null;
  var count__14045 = 0;
  var i__14046 = 0;
  while (true) {
    if (i__14046 < count__14045) {
      var vec__14047 = cljs.core._nth.call(null, chunk__14044, i__14046);
      var k = cljs.core.nth.call(null, vec__14047, 0, null);
      var v = cljs.core.nth.call(null, vec__14047, 1, null);
      f.call(null, v, k);
      var G__14053 = seq__14043;
      var G__14054 = chunk__14044;
      var G__14055 = count__14045;
      var G__14056 = i__14046 + 1;
      seq__14043 = G__14053;
      chunk__14044 = G__14054;
      count__14045 = G__14055;
      i__14046 = G__14056;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__14043);
      if (temp__4126__auto__) {
        var seq__14043__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14043__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__14043__$1);
          var G__14057 = cljs.core.chunk_rest.call(null, seq__14043__$1);
          var G__14058 = c__4410__auto__;
          var G__14059 = cljs.core.count.call(null, c__4410__auto__);
          var G__14060 = 0;
          seq__14043 = G__14057;
          chunk__14044 = G__14058;
          count__14045 = G__14059;
          i__14046 = G__14060;
          continue;
        } else {
          var vec__14048 = cljs.core.first.call(null, seq__14043__$1);
          var k = cljs.core.nth.call(null, vec__14048, 0, null);
          var v = cljs.core.nth.call(null, vec__14048, 1, null);
          f.call(null, v, k);
          var G__14061 = cljs.core.next.call(null, seq__14043__$1);
          var G__14062 = null;
          var G__14063 = 0;
          var G__14064 = 0;
          seq__14043 = G__14061;
          chunk__14044 = G__14062;
          count__14045 = G__14063;
          i__14046 = G__14064;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__14065 = i + 2;
        var G__14066 = init__$2;
        i = G__14065;
        init__$1 = G__14066;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (function() {
    var G__14049 = other;
    if (G__14049) {
      var bit__4297__auto__ = G__14049.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4297__auto__ || G__14049.cljs$core$IMap$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === cljs.core._count.call(null, other__$1)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = cljs.core._lookup.call(null, other__$1, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.call(null, self__.arr[i + 1], v)) {
              var G__14067 = i + 2;
              i = G__14067;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map.call(null, coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj14051 = {};
    return obj14051;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__14068 = s + 2;
            var G__14069 = d;
            s = G__14068;
            d = G__14069;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__14070 = s + 2;
            var G__14071 = d + 2;
            s = G__14070;
            d = G__14071;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__14052 = cljs.core.aclone.call(null, self__.arr);
        G__14052[idx + 1] = v;
        return G__14052;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__14072 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__14073 = cljs.core.next.call(null, es);
          ret = G__14072;
          es = G__14073;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__14074 = null;
  var G__14074__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__14074__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__14074 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14074__2.call(this, self__, k);
      case 3:
        return G__14074__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14074.cljs$core$IFn$_invoke$arity$2 = G__14074__2;
  G__14074.cljs$core$IFn$_invoke$arity$3 = G__14074__3;
  return G__14074;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args14042) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14042)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__14075 = i + 2;
        var G__14076 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__14075;
        ret = G__14076;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__14077_14079 = self__.arr;
      G__14077_14079.pop();
      G__14077_14079.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__14078 = o;
      if (G__14078) {
        var bit__4304__auto__ = G__14078.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4304__auto__ || G__14078.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__14078.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__14078);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__14078);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__14080 = cljs.core.next.call(null, es);
          var G__14081 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__14080;
          tcoll__$2 = G__14081;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__14082 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__14083 = i + 2;
      out = G__14082;
      i = G__14083;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4220__auto__, writer__4221__auto__, opts__4222__auto__) {
  return cljs.core._write.call(null, writer__4221__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.call(null, key, other);
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__14086 = cljs.core.aclone.call(null, arr);
    G__14086[i] = a;
    return G__14086;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__14087 = cljs.core.aclone.call(null, arr);
    G__14087[i] = a;
    G__14087[j] = b;
    return G__14087;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__14088 = i + 2;
        var G__14089 = init__$2;
        i = G__14088;
        init__$1 = G__14089;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_14090 = 0;
        var j_14091 = 0;
        while (true) {
          if (i_14090 < 32) {
            if ((self__.bitmap >>> i_14090 & 1) === 0) {
              var G__14092 = i_14090 + 1;
              var G__14093 = j_14091;
              i_14090 = G__14092;
              j_14091 = G__14093;
              continue;
            } else {
              nodes[i_14090] = !(self__.arr[j_14091] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_14091]), self__.arr[j_14091], self__.arr[j_14091 + 1], added_leaf_QMARK_) : self__.arr[j_14091 + 1];
              var G__14094 = i_14090 + 1;
              var G__14095 = j_14091 + 2;
              i_14090 = G__14094;
              j_14091 = G__14095;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_14096 = 0;
      var j_14097 = 0;
      while (true) {
        if (i_14096 < 32) {
          if ((self__.bitmap >>> i_14096 & 1) === 0) {
            var G__14098 = i_14096 + 1;
            var G__14099 = j_14097;
            i_14096 = G__14098;
            j_14097 = G__14099;
            continue;
          } else {
            nodes[i_14096] = !(self__.arr[j_14097] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_14097]), self__.arr[j_14097], self__.arr[j_14097 + 1], added_leaf_QMARK_) : self__.arr[j_14097 + 1];
            var G__14100 = i_14096 + 1;
            var G__14101 = j_14097 + 2;
            i_14096 = G__14100;
            j_14097 = G__14101;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__14102 = i + 1;
        var G__14103 = j + 2;
        var G__14104 = bitmap | 1 << i;
        i = G__14102;
        j = G__14103;
        bitmap = G__14104;
        continue;
      } else {
        var G__14105 = i + 1;
        var G__14106 = j;
        var G__14107 = bitmap;
        i = G__14105;
        j = G__14106;
        bitmap = G__14107;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__14108 = i + 1;
          var G__14109 = init__$2;
          i = G__14108;
          init__$1 = G__14109;
          continue;
        }
      } else {
        var G__14110 = i + 1;
        var G__14111 = init__$1;
        i = G__14110;
        init__$1 = G__14111;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__14112 = i + 2;
        i = G__14112;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
    }
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4124__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var node = temp__4124__auto__;
              var temp__4124__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4124__auto____$1)) {
                var node_seq = temp__4124__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__14113 = j + 2;
                j = G__14113;
                continue;
              }
            } else {
              var G__14114 = j + 2;
              j = G__14114;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4124__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var nj = temp__4124__auto__;
            var temp__4124__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4124__auto____$1)) {
              var ns = temp__4124__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__14115 = j + 1;
              j = G__14115;
              continue;
            }
          } else {
            var G__14116 = j + 1;
            j = G__14116;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__14118 = cljs.core.seq.call(null, coll);
  var chunk__14119 = null;
  var count__14120 = 0;
  var i__14121 = 0;
  while (true) {
    if (i__14121 < count__14120) {
      var vec__14122 = cljs.core._nth.call(null, chunk__14119, i__14121);
      var k = cljs.core.nth.call(null, vec__14122, 0, null);
      var v = cljs.core.nth.call(null, vec__14122, 1, null);
      f.call(null, v, k);
      var G__14126 = seq__14118;
      var G__14127 = chunk__14119;
      var G__14128 = count__14120;
      var G__14129 = i__14121 + 1;
      seq__14118 = G__14126;
      chunk__14119 = G__14127;
      count__14120 = G__14128;
      i__14121 = G__14129;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__14118);
      if (temp__4126__auto__) {
        var seq__14118__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14118__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__14118__$1);
          var G__14130 = cljs.core.chunk_rest.call(null, seq__14118__$1);
          var G__14131 = c__4410__auto__;
          var G__14132 = cljs.core.count.call(null, c__4410__auto__);
          var G__14133 = 0;
          seq__14118 = G__14130;
          chunk__14119 = G__14131;
          count__14120 = G__14132;
          i__14121 = G__14133;
          continue;
        } else {
          var vec__14123 = cljs.core.first.call(null, seq__14118__$1);
          var k = cljs.core.nth.call(null, vec__14123, 0, null);
          var v = cljs.core.nth.call(null, vec__14123, 1, null);
          f.call(null, v, k);
          var G__14134 = cljs.core.next.call(null, seq__14118__$1);
          var G__14135 = null;
          var G__14136 = 0;
          var G__14137 = 0;
          seq__14118 = G__14134;
          chunk__14119 = G__14135;
          count__14120 = G__14136;
          i__14121 = G__14137;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj14125 = {};
    return obj14125;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__14138 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__14139 = cljs.core.next.call(null, es);
          ret = G__14138;
          es = G__14139;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__14140 = null;
  var G__14140__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__14140__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__14140 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14140__2.call(this, self__, k);
      case 3:
        return G__14140__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14140.cljs$core$IFn$_invoke$arity$2 = G__14140__2;
  G__14140.cljs$core$IFn$_invoke$arity$3 = G__14140__3;
  return G__14140;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args14117) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14117)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__14141 = i + 1;
      var G__14142 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__14141;
      out = G__14142;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__14143 = o;
      if (G__14143) {
        var bit__4304__auto__ = G__14143.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4304__auto__ || G__14143.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__14143.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__14143);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__14143);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__14144 = cljs.core.next.call(null, es);
          var G__14145 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__14144;
          tcoll__$1 = G__14145;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__14146 = ascending_QMARK_ ? t.left : t.right;
      var G__14147 = cljs.core.conj.call(null, stack__$1, t);
      t = G__14146;
      stack__$1 = G__14147;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__14149 = null;
  var G__14149__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__14149__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__14149 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14149__2.call(this, self__, k);
      case 3:
        return G__14149__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14149.cljs$core$IFn$_invoke$arity$2 = G__14149__2;
  G__14149.cljs$core$IFn$_invoke$arity$3 = G__14149__3;
  return G__14149;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args14148) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14148)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__14151 = null;
  var G__14151__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__14151__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__14151 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14151__2.call(this, self__, k);
      case 3:
        return G__14151__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14151.cljs$core$IFn$_invoke$arity$2 = G__14151__2;
  G__14151.cljs$core$IFn$_invoke$arity$3 = G__14151__3;
  return G__14151;
}();
cljs.core.RedNode.prototype.apply = function(self__, args14150) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14150)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = tree_map_remove.call(null, comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__14153 = cljs.core.seq.call(null, coll);
  var chunk__14154 = null;
  var count__14155 = 0;
  var i__14156 = 0;
  while (true) {
    if (i__14156 < count__14155) {
      var vec__14157 = cljs.core._nth.call(null, chunk__14154, i__14156);
      var k = cljs.core.nth.call(null, vec__14157, 0, null);
      var v = cljs.core.nth.call(null, vec__14157, 1, null);
      f.call(null, v, k);
      var G__14159 = seq__14153;
      var G__14160 = chunk__14154;
      var G__14161 = count__14155;
      var G__14162 = i__14156 + 1;
      seq__14153 = G__14159;
      chunk__14154 = G__14160;
      count__14155 = G__14161;
      i__14156 = G__14162;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__14153);
      if (temp__4126__auto__) {
        var seq__14153__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14153__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__14153__$1);
          var G__14163 = cljs.core.chunk_rest.call(null, seq__14153__$1);
          var G__14164 = c__4410__auto__;
          var G__14165 = cljs.core.count.call(null, c__4410__auto__);
          var G__14166 = 0;
          seq__14153 = G__14163;
          chunk__14154 = G__14164;
          count__14155 = G__14165;
          i__14156 = G__14166;
          continue;
        } else {
          var vec__14158 = cljs.core.first.call(null, seq__14153__$1);
          var k = cljs.core.nth.call(null, vec__14158, 0, null);
          var v = cljs.core.nth.call(null, vec__14158, 1, null);
          f.call(null, v, k);
          var G__14167 = cljs.core.next.call(null, seq__14153__$1);
          var G__14168 = null;
          var G__14169 = 0;
          var G__14170 = 0;
          seq__14153 = G__14167;
          chunk__14154 = G__14168;
          count__14155 = G__14169;
          i__14156 = G__14170;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__14171 = t.left;
          t = G__14171;
          continue;
        } else {
          var G__14172 = t.right;
          t = G__14172;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__14173 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__14174 = cljs.core.next.call(null, es);
          ret = G__14173;
          es = G__14174;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__14175 = null;
  var G__14175__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__14175__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__14175 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14175__2.call(this, self__, k);
      case 3:
        return G__14175__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14175.cljs$core$IFn$_invoke$arity$2 = G__14175__2;
  G__14175.cljs$core$IFn$_invoke$arity$3 = G__14175__3;
  return G__14175;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args14152) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14152)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__14176 = cljs.core.conj.call(null, stack, t);
              var G__14177 = t.left;
              stack = G__14176;
              t = G__14177;
              continue;
            } else {
              var G__14178 = stack;
              var G__14179 = t.right;
              stack = G__14178;
              t = G__14179;
              continue;
            }
          } else {
            if (c > 0) {
              var G__14180 = cljs.core.conj.call(null, stack, t);
              var G__14181 = t.right;
              stack = G__14180;
              t = G__14181;
              continue;
            } else {
              var G__14182 = stack;
              var G__14183 = t.left;
              stack = G__14182;
              t = G__14183;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__14184 = cljs.core.nnext.call(null, in$);
        var G__14185 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__14184;
        out = G__14185;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__14186) {
    var keyvals = cljs.core.seq(arglist__14186);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__14187) {
    var keyvals = cljs.core.seq(arglist__14187);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj14191 = {};
      return obj14191;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__14192 = cljs.core.nnext.call(null, kvs);
        kvs = G__14192;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject(ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__14193) {
    var keyvals = cljs.core.seq(arglist__14193);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__14194 = cljs.core.nnext.call(null, in$);
        var G__14195 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__14194;
        out = G__14195;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__14196) {
    var keyvals = cljs.core.seq(arglist__14196);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__14197 = cljs.core.nnext.call(null, in$);
        var G__14198 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__14197;
        out = G__14198;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__14199) {
    var comparator = cljs.core.first(arglist__14199);
    var keyvals = cljs.core.rest(arglist__14199);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__14200 = self__.mseq;
    if (G__14200) {
      var bit__4304__auto__ = G__14200.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4304__auto__ || G__14200.cljs$core$INext$) {
        return true;
      } else {
        if (!G__14200.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__14200);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__14200);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__14201 = self__.mseq;
    if (G__14201) {
      var bit__4304__auto__ = G__14201.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4304__auto__ || G__14201.cljs$core$INext$) {
        return true;
      } else {
        if (!G__14201.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__14201);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__14201);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__14202 = self__.mseq;
    if (G__14202) {
      var bit__4304__auto__ = G__14202.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4304__auto__ || G__14202.cljs$core$INext$) {
        return true;
      } else {
        if (!G__14202.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__14202);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__14202);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__14203 = self__.mseq;
    if (G__14203) {
      var bit__4304__auto__ = G__14203.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4304__auto__ || G__14203.cljs$core$INext$) {
        return true;
      } else {
        if (!G__14203.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__14203);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__14203);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__14204_SHARP_, p2__14205_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3640__auto__ = p1__14204_SHARP_;
          if (cljs.core.truth_(or__3640__auto__)) {
            return or__3640__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__14205_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__14206) {
    var maps = cljs.core.seq(arglist__14206);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3640__auto__ = m1;
            if (cljs.core.truth_(or__3640__auto__)) {
              return or__3640__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__14207) {
    var f = cljs.core.first(arglist__14207);
    var maps = cljs.core.rest(arglist__14207);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__14208 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__14209 = cljs.core.next.call(null, keys);
      ret = G__14208;
      keys = G__14209;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__14212 = cljs.core.seq.call(null, coll);
  var chunk__14213 = null;
  var count__14214 = 0;
  var i__14215 = 0;
  while (true) {
    if (i__14215 < count__14214) {
      var vec__14216 = cljs.core._nth.call(null, chunk__14213, i__14215);
      var k = cljs.core.nth.call(null, vec__14216, 0, null);
      var v = cljs.core.nth.call(null, vec__14216, 1, null);
      f.call(null, v, k);
      var G__14218 = seq__14212;
      var G__14219 = chunk__14213;
      var G__14220 = count__14214;
      var G__14221 = i__14215 + 1;
      seq__14212 = G__14218;
      chunk__14213 = G__14219;
      count__14214 = G__14220;
      i__14215 = G__14221;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__14212);
      if (temp__4126__auto__) {
        var seq__14212__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14212__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__14212__$1);
          var G__14222 = cljs.core.chunk_rest.call(null, seq__14212__$1);
          var G__14223 = c__4410__auto__;
          var G__14224 = cljs.core.count.call(null, c__4410__auto__);
          var G__14225 = 0;
          seq__14212 = G__14222;
          chunk__14213 = G__14223;
          count__14214 = G__14224;
          i__14215 = G__14225;
          continue;
        } else {
          var vec__14217 = cljs.core.first.call(null, seq__14212__$1);
          var k = cljs.core.nth.call(null, vec__14217, 0, null);
          var v = cljs.core.nth.call(null, vec__14217, 1, null);
          f.call(null, v, k);
          var G__14226 = cljs.core.next.call(null, seq__14212__$1);
          var G__14227 = null;
          var G__14228 = 0;
          var G__14229 = 0;
          seq__14212 = G__14226;
          chunk__14213 = G__14227;
          count__14214 = G__14228;
          i__14215 = G__14229;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__14210_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__14210_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__14230 = null;
  var G__14230__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__14230__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__14230 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14230__2.call(this, self__, k);
      case 3:
        return G__14230__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14230.cljs$core$IFn$_invoke$arity$2 = G__14230__2;
  G__14230.cljs$core$IFn$_invoke$arity$3 = G__14230__3;
  return G__14230;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args14211) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14211)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__14231 = i + 1;
        var G__14232 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__14231;
        out = G__14232;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__14233 = i + 1;
        var G__14234 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__14233;
        out = G__14234;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__14236 = null;
  var G__14236__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__14236__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__14236 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14236__2.call(this, self__, k);
      case 3:
        return G__14236__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14236.cljs$core$IFn$_invoke$arity$2 = G__14236__2;
  G__14236.cljs$core$IFn$_invoke$arity$3 = G__14236__3;
  return G__14236;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args14235) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14235)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__14239 = cljs.core.seq.call(null, coll);
  var chunk__14240 = null;
  var count__14241 = 0;
  var i__14242 = 0;
  while (true) {
    if (i__14242 < count__14241) {
      var vec__14243 = cljs.core._nth.call(null, chunk__14240, i__14242);
      var k = cljs.core.nth.call(null, vec__14243, 0, null);
      var v = cljs.core.nth.call(null, vec__14243, 1, null);
      f.call(null, v, k);
      var G__14245 = seq__14239;
      var G__14246 = chunk__14240;
      var G__14247 = count__14241;
      var G__14248 = i__14242 + 1;
      seq__14239 = G__14245;
      chunk__14240 = G__14246;
      count__14241 = G__14247;
      i__14242 = G__14248;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__14239);
      if (temp__4126__auto__) {
        var seq__14239__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14239__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__14239__$1);
          var G__14249 = cljs.core.chunk_rest.call(null, seq__14239__$1);
          var G__14250 = c__4410__auto__;
          var G__14251 = cljs.core.count.call(null, c__4410__auto__);
          var G__14252 = 0;
          seq__14239 = G__14249;
          chunk__14240 = G__14250;
          count__14241 = G__14251;
          i__14242 = G__14252;
          continue;
        } else {
          var vec__14244 = cljs.core.first.call(null, seq__14239__$1);
          var k = cljs.core.nth.call(null, vec__14244, 0, null);
          var v = cljs.core.nth.call(null, vec__14244, 1, null);
          f.call(null, v, k);
          var G__14253 = cljs.core.next.call(null, seq__14239__$1);
          var G__14254 = null;
          var G__14255 = 0;
          var G__14256 = 0;
          seq__14239 = G__14253;
          chunk__14240 = G__14254;
          count__14241 = G__14255;
          i__14242 = G__14256;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__14237_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__14237_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__14257 = null;
  var G__14257__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__14257__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__14257 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14257__2.call(this, self__, k);
      case 3:
        return G__14257__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14257.cljs$core$IFn$_invoke$arity$2 = G__14257__2;
  G__14257.cljs$core$IFn$_invoke$arity$3 = G__14257__3;
  return G__14257;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args14238) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14238)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4504__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4504__auto__.length) {
        var G__14258 = i + 1;
        var G__14259 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__14258;
        res = G__14259;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__14260 = cljs.core._next.call(null, in$__$1);
          var G__14261 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
          in$__$1 = G__14260;
          out = G__14261;
          continue;
        } else {
          return cljs.core._persistent_BANG_.call(null, out);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__14262__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__14262 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__14262__delegate.call(this, keys);
    };
    G__14262.cljs$lang$maxFixedArity = 0;
    G__14262.cljs$lang$applyTo = function(arglist__14263) {
      var keys = cljs.core.seq(arglist__14263);
      return G__14262__delegate(keys);
    };
    G__14262.cljs$core$IFn$_invoke$arity$variadic = G__14262__delegate;
    return G__14262;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__14264) {
    var keys = cljs.core.seq(arglist__14264);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__14265) {
    var comparator = cljs.core.first(arglist__14265);
    var keys = cljs.core.rest(arglist__14265);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function() {
  var replace = null;
  var replace__1 = function(smap) {
    return cljs.core.map.call(null, function(p1__14266_SHARP_) {
      var temp__4124__auto__ = cljs.core.find.call(null, smap, p1__14266_SHARP_);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var e = temp__4124__auto__;
        return cljs.core.val.call(null, e);
      } else {
        return p1__14266_SHARP_;
      }
    });
  };
  var replace__2 = function(smap, coll) {
    if (cljs.core.vector_QMARK_.call(null, coll)) {
      var n = cljs.core.count.call(null, coll);
      return cljs.core.reduce.call(null, function(n) {
        return function(v, i) {
          var temp__4124__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
          if (cljs.core.truth_(temp__4124__auto__)) {
            var e = temp__4124__auto__;
            return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
          } else {
            return v;
          }
        };
      }(n), coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
    } else {
      return cljs.core.map.call(null, function(p1__14267_SHARP_) {
        var temp__4124__auto__ = cljs.core.find.call(null, smap, p1__14267_SHARP_);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          return cljs.core.second.call(null, e);
        } else {
          return p1__14267_SHARP_;
        }
      }, coll);
    }
  };
  replace = function(smap, coll) {
    switch(arguments.length) {
      case 1:
        return replace__1.call(this, smap);
      case 2:
        return replace__2.call(this, smap, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  replace.cljs$core$IFn$_invoke$arity$1 = replace__1;
  replace.cljs$core$IFn$_invoke$arity$2 = replace__2;
  return replace;
}();
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__14274, seen__$1) {
        while (true) {
          var vec__14275 = p__14274;
          var f = cljs.core.nth.call(null, vec__14275, 0, null);
          var xs__$1 = vec__14275;
          var temp__4126__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4126__auto__) {
            var s = temp__4126__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__14276 = cljs.core.rest.call(null, s);
              var G__14277 = seen__$1;
              p__14274 = G__14276;
              seen__$1 = G__14277;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__14278 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__14279 = cljs.core.next.call(null, s__$1);
      ret = G__14278;
      s__$1 = G__14279;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__14281 = x;
    if (G__14281) {
      var bit__4297__auto__ = G__14281.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4297__auto__ || G__14281.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error("Doesn't support name: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__14282 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__14283 = cljs.core.next.call(null, ks);
      var G__14284 = cljs.core.next.call(null, vs);
      map = G__14282;
      ks = G__14283;
      vs = G__14284;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__14287__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__14285_SHARP_, p2__14286_SHARP_) {
        return max_key.call(null, k, p1__14285_SHARP_, p2__14286_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__14287 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__14287__delegate.call(this, k, x, y, more);
    };
    G__14287.cljs$lang$maxFixedArity = 3;
    G__14287.cljs$lang$applyTo = function(arglist__14288) {
      var k = cljs.core.first(arglist__14288);
      arglist__14288 = cljs.core.next(arglist__14288);
      var x = cljs.core.first(arglist__14288);
      arglist__14288 = cljs.core.next(arglist__14288);
      var y = cljs.core.first(arglist__14288);
      var more = cljs.core.rest(arglist__14288);
      return G__14287__delegate(k, x, y, more);
    };
    G__14287.cljs$core$IFn$_invoke$arity$variadic = G__14287__delegate;
    return G__14287;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__14291__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__14289_SHARP_, p2__14290_SHARP_) {
        return min_key.call(null, k, p1__14289_SHARP_, p2__14290_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__14291 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__14291__delegate.call(this, k, x, y, more);
    };
    G__14291.cljs$lang$maxFixedArity = 3;
    G__14291.cljs$lang$applyTo = function(arglist__14292) {
      var k = cljs.core.first(arglist__14292);
      arglist__14292 = cljs.core.next(arglist__14292);
      var x = cljs.core.first(arglist__14292);
      arglist__14292 = cljs.core.next(arglist__14292);
      var y = cljs.core.first(arglist__14292);
      var more = cljs.core.rest(arglist__14292);
      return G__14291__delegate(k, x, y, more);
    };
    G__14291.cljs$core$IFn$_invoke$arity$variadic = G__14291__delegate;
    return G__14291;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/ArrayList");
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.__GT_ArrayList = function __GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__1 = function(n) {
    return function(rf) {
      var a = cljs.core.array_list.call(null);
      return function(a) {
        return function() {
          var G__14293 = null;
          var G__14293__0 = function() {
            return rf.call(null);
          };
          var G__14293__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return rf.call(null, result, v);
            }();
            return rf.call(null, result__$1);
          };
          var G__14293__2 = function(result, input) {
            a.add(input);
            if (n === a.size()) {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return rf.call(null, result, v);
            } else {
              return result;
            }
          };
          G__14293 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__14293__0.call(this);
              case 1:
                return G__14293__1.call(this, result);
              case 2:
                return G__14293__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__14293.cljs$core$IFn$_invoke$arity$0 = G__14293__0;
          G__14293.cljs$core$IFn$_invoke$arity$1 = G__14293__1;
          G__14293.cljs$core$IFn$_invoke$arity$2 = G__14293__2;
          return G__14293;
        }();
      }(a);
    };
  };
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 1:
        return partition_all__1.call(this, n);
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$1 = partition_all__1;
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function() {
  var take_while = null;
  var take_while__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__14294 = null;
        var G__14294__0 = function() {
          return rf.call(null);
        };
        var G__14294__1 = function(result) {
          return rf.call(null, result);
        };
        var G__14294__2 = function(result, input) {
          if (cljs.core.truth_(pred.call(null, input))) {
            return rf.call(null, result, input);
          } else {
            return cljs.core.reduced.call(null, result);
          }
        };
        G__14294 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__14294__0.call(this);
            case 1:
              return G__14294__1.call(this, result);
            case 2:
              return G__14294__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__14294.cljs$core$IFn$_invoke$arity$0 = G__14294__0;
        G__14294.cljs$core$IFn$_invoke$arity$1 = G__14294__1;
        G__14294.cljs$core$IFn$_invoke$arity$2 = G__14294__2;
        return G__14294;
      }();
    };
  };
  var take_while__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return take_while__1.call(this, pred);
      case 2:
        return take_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_while.cljs$core$IFn$_invoke$arity$1 = take_while__1;
  take_while.cljs$core$IFn$_invoke$arity$2 = take_while__2;
  return take_while;
}();
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__14297 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__14297, 0, null);
        var s = vec__14297;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__14298 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__14298, 0, null);
      var s = vec__14298;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__14301 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__14301, 0, null);
        var s = vec__14301;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__14302 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__14302, 0, null);
      var s = vec__14302;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/RangeIterator");
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.__GT_RangeIterator = function __GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil.call(null, (self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_ordered_coll.call(null, rng__$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = f.call(null, ret, i);
      if (cljs.core.reduced_QMARK_.call(null, ret__$1)) {
        return cljs.core.deref.call(null, ret__$1);
      } else {
        var G__14303 = i + self__.step;
        var G__14304 = ret__$1;
        i = G__14303;
        ret = G__14304;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function() {
  var take_nth = null;
  var take_nth__1 = function(n) {
    return function(rf) {
      var ia = cljs.core.atom.call(null, -1);
      return function(ia) {
        return function() {
          var G__14305 = null;
          var G__14305__0 = function() {
            return rf.call(null);
          };
          var G__14305__1 = function(result) {
            return rf.call(null, result);
          };
          var G__14305__2 = function(result, input) {
            var i = cljs.core.swap_BANG_.call(null, ia, cljs.core.inc);
            if (cljs.core.rem.call(null, i, n) === 0) {
              return rf.call(null, result, input);
            } else {
              return result;
            }
          };
          G__14305 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__14305__0.call(this);
              case 1:
                return G__14305__1.call(this, result);
              case 2:
                return G__14305__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__14305.cljs$core$IFn$_invoke$arity$0 = G__14305__0;
          G__14305.cljs$core$IFn$_invoke$arity$1 = G__14305__1;
          G__14305.cljs$core$IFn$_invoke$arity$2 = G__14305__2;
          return G__14305;
        }();
      }(ia);
    };
  };
  var take_nth__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  take_nth = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take_nth__1.call(this, n);
      case 2:
        return take_nth__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_nth.cljs$core$IFn$_invoke$arity$1 = take_nth__1;
  take_nth.cljs$core$IFn$_invoke$arity$2 = take_nth__2;
  return take_nth;
}();
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function() {
  var partition_by = null;
  var partition_by__1 = function(f) {
    return function(rf) {
      var a = cljs.core.array_list.call(null);
      var pa = cljs.core.atom.call(null, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(a, pa) {
        return function() {
          var G__14307 = null;
          var G__14307__0 = function() {
            return rf.call(null);
          };
          var G__14307__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return rf.call(null, result, v);
            }();
            return rf.call(null, result__$1);
          };
          var G__14307__2 = function(result, input) {
            var pval = cljs.core.deref.call(null, pa);
            var val = f.call(null, input);
            cljs.core.reset_BANG_.call(null, pa, val);
            if (cljs.core.keyword_identical_QMARK_.call(null, pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.call(null, val, pval)) {
              a.add(input);
              return result;
            } else {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              var ret = rf.call(null, result, v);
              if (cljs.core.reduced_QMARK_.call(null, ret)) {
              } else {
                a.add(input);
              }
              return ret;
            }
          };
          G__14307 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__14307__0.call(this);
              case 1:
                return G__14307__1.call(this, result);
              case 2:
                return G__14307__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__14307.cljs$core$IFn$_invoke$arity$0 = G__14307__0;
          G__14307.cljs$core$IFn$_invoke$arity$1 = G__14307__1;
          G__14307.cljs$core$IFn$_invoke$arity$2 = G__14307__2;
          return G__14307;
        }();
      }(a, pa);
    };
  };
  var partition_by__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var fst = cljs.core.first.call(null, s);
        var fv = f.call(null, fst);
        var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv, s, temp__4126__auto__) {
          return function(p1__14306_SHARP_) {
            return cljs.core._EQ_.call(null, fv, f.call(null, p1__14306_SHARP_));
          };
        }(fst, fv, s, temp__4126__auto__), cljs.core.next.call(null, s)));
        return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_by = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return partition_by__1.call(this, f);
      case 2:
        return partition_by__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$1 = partition_by__1;
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  return partition_by;
}();
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var s = temp__4124__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__14318 = null;
      var G__14318__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__14318__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__14318__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__14318__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__14318__4 = function() {
        var G__14319__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__14319 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__14319__delegate.call(this, x, y, z, args);
        };
        G__14319.cljs$lang$maxFixedArity = 3;
        G__14319.cljs$lang$applyTo = function(arglist__14320) {
          var x = cljs.core.first(arglist__14320);
          arglist__14320 = cljs.core.next(arglist__14320);
          var y = cljs.core.first(arglist__14320);
          arglist__14320 = cljs.core.next(arglist__14320);
          var z = cljs.core.first(arglist__14320);
          var args = cljs.core.rest(arglist__14320);
          return G__14319__delegate(x, y, z, args);
        };
        G__14319.cljs$core$IFn$_invoke$arity$variadic = G__14319__delegate;
        return G__14319;
      }();
      G__14318 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__14318__0.call(this);
          case 1:
            return G__14318__1.call(this, x);
          case 2:
            return G__14318__2.call(this, x, y);
          case 3:
            return G__14318__3.call(this, x, y, z);
          default:
            return G__14318__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__14318.cljs$lang$maxFixedArity = 3;
      G__14318.cljs$lang$applyTo = G__14318__4.cljs$lang$applyTo;
      G__14318.cljs$core$IFn$_invoke$arity$0 = G__14318__0;
      G__14318.cljs$core$IFn$_invoke$arity$1 = G__14318__1;
      G__14318.cljs$core$IFn$_invoke$arity$2 = G__14318__2;
      G__14318.cljs$core$IFn$_invoke$arity$3 = G__14318__3;
      G__14318.cljs$core$IFn$_invoke$arity$variadic = G__14318__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__14318;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__14321 = null;
      var G__14321__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__14321__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__14321__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__14321__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__14321__4 = function() {
        var G__14322__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__14322 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__14322__delegate.call(this, x, y, z, args);
        };
        G__14322.cljs$lang$maxFixedArity = 3;
        G__14322.cljs$lang$applyTo = function(arglist__14323) {
          var x = cljs.core.first(arglist__14323);
          arglist__14323 = cljs.core.next(arglist__14323);
          var y = cljs.core.first(arglist__14323);
          arglist__14323 = cljs.core.next(arglist__14323);
          var z = cljs.core.first(arglist__14323);
          var args = cljs.core.rest(arglist__14323);
          return G__14322__delegate(x, y, z, args);
        };
        G__14322.cljs$core$IFn$_invoke$arity$variadic = G__14322__delegate;
        return G__14322;
      }();
      G__14321 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__14321__0.call(this);
          case 1:
            return G__14321__1.call(this, x);
          case 2:
            return G__14321__2.call(this, x, y);
          case 3:
            return G__14321__3.call(this, x, y, z);
          default:
            return G__14321__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__14321.cljs$lang$maxFixedArity = 3;
      G__14321.cljs$lang$applyTo = G__14321__4.cljs$lang$applyTo;
      G__14321.cljs$core$IFn$_invoke$arity$0 = G__14321__0;
      G__14321.cljs$core$IFn$_invoke$arity$1 = G__14321__1;
      G__14321.cljs$core$IFn$_invoke$arity$2 = G__14321__2;
      G__14321.cljs$core$IFn$_invoke$arity$3 = G__14321__3;
      G__14321.cljs$core$IFn$_invoke$arity$variadic = G__14321__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__14321;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__14324 = null;
      var G__14324__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__14324__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__14324__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__14324__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__14324__4 = function() {
        var G__14325__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__14325 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__14325__delegate.call(this, x, y, z, args);
        };
        G__14325.cljs$lang$maxFixedArity = 3;
        G__14325.cljs$lang$applyTo = function(arglist__14326) {
          var x = cljs.core.first(arglist__14326);
          arglist__14326 = cljs.core.next(arglist__14326);
          var y = cljs.core.first(arglist__14326);
          arglist__14326 = cljs.core.next(arglist__14326);
          var z = cljs.core.first(arglist__14326);
          var args = cljs.core.rest(arglist__14326);
          return G__14325__delegate(x, y, z, args);
        };
        G__14325.cljs$core$IFn$_invoke$arity$variadic = G__14325__delegate;
        return G__14325;
      }();
      G__14324 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__14324__0.call(this);
          case 1:
            return G__14324__1.call(this, x);
          case 2:
            return G__14324__2.call(this, x, y);
          case 3:
            return G__14324__3.call(this, x, y, z);
          default:
            return G__14324__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__14324.cljs$lang$maxFixedArity = 3;
      G__14324.cljs$lang$applyTo = G__14324__4.cljs$lang$applyTo;
      G__14324.cljs$core$IFn$_invoke$arity$0 = G__14324__0;
      G__14324.cljs$core$IFn$_invoke$arity$1 = G__14324__1;
      G__14324.cljs$core$IFn$_invoke$arity$2 = G__14324__2;
      G__14324.cljs$core$IFn$_invoke$arity$3 = G__14324__3;
      G__14324.cljs$core$IFn$_invoke$arity$variadic = G__14324__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__14324;
    }();
  };
  var juxt__4 = function() {
    var G__14327__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function(fs__$1) {
        return function() {
          var G__14328 = null;
          var G__14328__0 = function() {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__14308_SHARP_, p2__14309_SHARP_) {
                return cljs.core.conj.call(null, p1__14308_SHARP_, p2__14309_SHARP_.call(null));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__14328__1 = function(x) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__14310_SHARP_, p2__14311_SHARP_) {
                return cljs.core.conj.call(null, p1__14310_SHARP_, p2__14311_SHARP_.call(null, x));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__14328__2 = function(x, y) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__14312_SHARP_, p2__14313_SHARP_) {
                return cljs.core.conj.call(null, p1__14312_SHARP_, p2__14313_SHARP_.call(null, x, y));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__14328__3 = function(x, y, z) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__14314_SHARP_, p2__14315_SHARP_) {
                return cljs.core.conj.call(null, p1__14314_SHARP_, p2__14315_SHARP_.call(null, x, y, z));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__14328__4 = function() {
            var G__14329__delegate = function(x, y, z, args) {
              return cljs.core.reduce.call(null, function(fs__$1) {
                return function(p1__14316_SHARP_, p2__14317_SHARP_) {
                  return cljs.core.conj.call(null, p1__14316_SHARP_, cljs.core.apply.call(null, p2__14317_SHARP_, x, y, z, args));
                };
              }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
            };
            var G__14329 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__14329__delegate.call(this, x, y, z, args);
            };
            G__14329.cljs$lang$maxFixedArity = 3;
            G__14329.cljs$lang$applyTo = function(arglist__14330) {
              var x = cljs.core.first(arglist__14330);
              arglist__14330 = cljs.core.next(arglist__14330);
              var y = cljs.core.first(arglist__14330);
              arglist__14330 = cljs.core.next(arglist__14330);
              var z = cljs.core.first(arglist__14330);
              var args = cljs.core.rest(arglist__14330);
              return G__14329__delegate(x, y, z, args);
            };
            G__14329.cljs$core$IFn$_invoke$arity$variadic = G__14329__delegate;
            return G__14329;
          }();
          G__14328 = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return G__14328__0.call(this);
              case 1:
                return G__14328__1.call(this, x);
              case 2:
                return G__14328__2.call(this, x, y);
              case 3:
                return G__14328__3.call(this, x, y, z);
              default:
                return G__14328__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__14328.cljs$lang$maxFixedArity = 3;
          G__14328.cljs$lang$applyTo = G__14328__4.cljs$lang$applyTo;
          G__14328.cljs$core$IFn$_invoke$arity$0 = G__14328__0;
          G__14328.cljs$core$IFn$_invoke$arity$1 = G__14328__1;
          G__14328.cljs$core$IFn$_invoke$arity$2 = G__14328__2;
          G__14328.cljs$core$IFn$_invoke$arity$3 = G__14328__3;
          G__14328.cljs$core$IFn$_invoke$arity$variadic = G__14328__4.cljs$core$IFn$_invoke$arity$variadic;
          return G__14328;
        }();
      }(fs__$1);
    };
    var G__14327 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__14327__delegate.call(this, f, g, h, fs);
    };
    G__14327.cljs$lang$maxFixedArity = 3;
    G__14327.cljs$lang$applyTo = function(arglist__14331) {
      var f = cljs.core.first(arglist__14331);
      arglist__14331 = cljs.core.next(arglist__14331);
      var g = cljs.core.first(arglist__14331);
      arglist__14331 = cljs.core.next(arglist__14331);
      var h = cljs.core.first(arglist__14331);
      var fs = cljs.core.rest(arglist__14331);
      return G__14327__delegate(f, g, h, fs);
    };
    G__14327.cljs$core$IFn$_invoke$arity$variadic = G__14327__delegate;
    return G__14327;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__14332 = cljs.core.next.call(null, coll);
        coll = G__14332;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__14333 = n - 1;
        var G__14334 = cljs.core.next.call(null, coll);
        n = G__14333;
        coll = G__14334;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
      if (cljs.core.count.call(null, matches) === 1) {
        return cljs.core.first.call(null, matches);
      } else {
        return cljs.core.vec.call(null, matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count.call(null, matches) === 1) {
        return cljs.core.first.call(null, matches);
      } else {
        return cljs.core.vec.call(null, matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__14336 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
    var _ = cljs.core.nth.call(null, vec__14336, 0, null);
    var flags = cljs.core.nth.call(null, vec__14336, 1, null);
    var pattern = cljs.core.nth.call(null, vec__14336, 2, null);
    return new RegExp(pattern, flags);
  }
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_14338 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_14339__$1 = cljs.core.next.call(null, coll);
      var n_14340 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
      while (true) {
        if (coll_14339__$1 && (n_14340 == null || !(n_14340 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_14339__$1), writer, opts);
          var G__14341 = cljs.core.next.call(null, coll_14339__$1);
          var G__14342 = n_14340 - 1;
          coll_14339__$1 = G__14341;
          n_14340 = G__14342;
          continue;
        } else {
          if (cljs.core.seq.call(null, coll_14339__$1) && n_14340 === 0) {
            cljs.core._write.call(null, writer, sep);
            cljs.core._write.call(null, writer, "...");
          } else {
          }
        }
        break;
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_14338;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__14347 = cljs.core.seq.call(null, ss);
    var chunk__14348 = null;
    var count__14349 = 0;
    var i__14350 = 0;
    while (true) {
      if (i__14350 < count__14349) {
        var s = cljs.core._nth.call(null, chunk__14348, i__14350);
        cljs.core._write.call(null, writer, s);
        var G__14351 = seq__14347;
        var G__14352 = chunk__14348;
        var G__14353 = count__14349;
        var G__14354 = i__14350 + 1;
        seq__14347 = G__14351;
        chunk__14348 = G__14352;
        count__14349 = G__14353;
        i__14350 = G__14354;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__14347);
        if (temp__4126__auto__) {
          var seq__14347__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14347__$1)) {
            var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__14347__$1);
            var G__14355 = cljs.core.chunk_rest.call(null, seq__14347__$1);
            var G__14356 = c__4410__auto__;
            var G__14357 = cljs.core.count.call(null, c__4410__auto__);
            var G__14358 = 0;
            seq__14347 = G__14355;
            chunk__14348 = G__14356;
            count__14349 = G__14357;
            i__14350 = G__14358;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__14347__$1);
            cljs.core._write.call(null, writer, s);
            var G__14359 = cljs.core.next.call(null, seq__14347__$1);
            var G__14360 = null;
            var G__14361 = 0;
            var G__14362 = 0;
            seq__14347 = G__14359;
            chunk__14348 = G__14360;
            count__14349 = G__14361;
            i__14350 = G__14362;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__14363) {
    var writer = cljs.core.first(arglist__14363);
    var ss = cljs.core.rest(arglist__14363);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj14365 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj14365;
}();
cljs.core.quote_string = function quote_string(s) {
  return'"' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })) + '"';
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (cljs.core.truth_(function() {
        var and__3628__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
        if (cljs.core.truth_(and__3628__auto__)) {
          var and__3628__auto____$1 = function() {
            var G__14371 = obj;
            if (G__14371) {
              var bit__4304__auto__ = G__14371.cljs$lang$protocol_mask$partition0$ & 131072;
              if (bit__4304__auto__ || G__14371.cljs$core$IMeta$) {
                return true;
              } else {
                if (!G__14371.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__14371);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__14371);
            }
          }();
          if (and__3628__auto____$1) {
            return cljs.core.meta.call(null, obj);
          } else {
            return and__3628__auto____$1;
          }
        } else {
          return and__3628__auto__;
        }
      }())) {
        cljs.core._write.call(null, writer, "^");
        pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
        cljs.core._write.call(null, writer, " ");
      } else {
      }
      if (obj == null) {
        return cljs.core._write.call(null, writer, "nil");
      } else {
        if (obj.cljs$lang$type) {
          return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
        } else {
          if (function() {
            var G__14372 = obj;
            if (G__14372) {
              var bit__4297__auto__ = G__14372.cljs$lang$protocol_mask$partition0$ & 2147483648;
              if (bit__4297__auto__ || G__14372.cljs$core$IPrintWithWriter$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._pr_writer.call(null, obj, writer, opts);
          } else {
            if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
              return cljs.core._write.call(null, writer, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj));
            } else {
              if (cljs.core.object_QMARK_.call(null, obj)) {
                cljs.core._write.call(null, writer, "#js ");
                return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
              } else {
                if (obj instanceof Array) {
                  return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                } else {
                  if (goog.isString(obj)) {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                    } else {
                      return cljs.core._write.call(null, writer, obj);
                    }
                  } else {
                    if (cljs.core.fn_QMARK_.call(null, obj)) {
                      return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                    } else {
                      if (obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n);
                          while (true) {
                            if (cljs.core.count.call(null, ns) < len) {
                              var G__14374 = "0" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns);
                              ns = G__14374;
                              continue;
                            } else {
                              return ns;
                            }
                            break;
                          }
                        };
                        return cljs.core.write_all.call(null, writer, '#inst "', "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj.getUTCFullYear()), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                      } else {
                        if (cljs.core.regexp_QMARK_.call(null, obj)) {
                          return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                        } else {
                          if (function() {
                            var G__14373 = obj;
                            if (G__14373) {
                              var bit__4304__auto__ = G__14373.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if (bit__4304__auto__ || G__14373.cljs$core$IPrintWithWriter$) {
                                return true;
                              } else {
                                if (!G__14373.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__14373);
                                } else {
                                  return false;
                                }
                              }
                            } else {
                              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__14373);
                            }
                          }()) {
                            return cljs.core._pr_writer.call(null, obj, writer, opts);
                          } else {
                            return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__14379 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__14380 = null;
  var count__14381 = 0;
  var i__14382 = 0;
  while (true) {
    if (i__14382 < count__14381) {
      var obj = cljs.core._nth.call(null, chunk__14380, i__14382);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__14383 = seq__14379;
      var G__14384 = chunk__14380;
      var G__14385 = count__14381;
      var G__14386 = i__14382 + 1;
      seq__14379 = G__14383;
      chunk__14380 = G__14384;
      count__14381 = G__14385;
      i__14382 = G__14386;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__14379);
      if (temp__4126__auto__) {
        var seq__14379__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14379__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__14379__$1);
          var G__14387 = cljs.core.chunk_rest.call(null, seq__14379__$1);
          var G__14388 = c__4410__auto__;
          var G__14389 = cljs.core.count.call(null, c__4410__auto__);
          var G__14390 = 0;
          seq__14379 = G__14387;
          chunk__14380 = G__14388;
          count__14381 = G__14389;
          i__14382 = G__14390;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__14379__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__14391 = cljs.core.next.call(null, seq__14379__$1);
          var G__14392 = null;
          var G__14393 = 0;
          var G__14394 = 0;
          seq__14379 = G__14391;
          chunk__14380 = G__14392;
          count__14381 = G__14393;
          i__14382 = G__14394;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_sb_with_opts.call(null, objs, opts));
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__14395) {
    var objs = cljs.core.seq(arglist__14395);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__14396) {
    var objs = cljs.core.seq(arglist__14396);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__14397) {
    var objs = cljs.core.seq(arglist__14397);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__14398) {
    var objs = cljs.core.seq(arglist__14398);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__14399) {
    var objs = cljs.core.seq(arglist__14399);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__14400) {
    var objs = cljs.core.seq(arglist__14400);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__14401) {
    var objs = cljs.core.seq(arglist__14401);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__14402) {
    var objs = cljs.core.seq(arglist__14402);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, a__$1.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__14403) {
    var iref = cljs.core.first(arglist__14403);
    arglist__14403 = cljs.core.next(arglist__14403);
    var f = cljs.core.first(arglist__14403);
    var args = cljs.core.rest(arglist__14403);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix_string) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc)));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not.call(null, self__.f);
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = self__.f.call(null);
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.__GT_Delay = function __GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.preserving_reduced = function preserving_reduced(rf) {
  return function(p1__14404_SHARP_, p2__14405_SHARP_) {
    var ret = rf.call(null, p1__14404_SHARP_, p2__14405_SHARP_);
    if (cljs.core.reduced_QMARK_.call(null, ret)) {
      return cljs.core.reduced.call(null, ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cat(rf) {
  var rf1 = cljs.core.preserving_reduced.call(null, rf);
  return function(rf1) {
    return function() {
      var G__14406 = null;
      var G__14406__0 = function() {
        return rf.call(null);
      };
      var G__14406__1 = function(result) {
        return rf.call(null, result);
      };
      var G__14406__2 = function(result, input) {
        return cljs.core.reduce.call(null, rf1, result, input);
      };
      G__14406 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__14406__0.call(this);
          case 1:
            return G__14406__1.call(this, result);
          case 2:
            return G__14406__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__14406.cljs$core$IFn$_invoke$arity$0 = G__14406__0;
      G__14406.cljs$core$IFn$_invoke$arity$1 = G__14406__1;
      G__14406.cljs$core$IFn$_invoke$arity$2 = G__14406__2;
      return G__14406;
    }();
  }(rf1);
};
cljs.core.dedupe = function() {
  var dedupe = null;
  var dedupe__0 = function() {
    return function(rf) {
      var pa = cljs.core.atom.call(null, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(pa) {
        return function() {
          var G__14407 = null;
          var G__14407__0 = function() {
            return rf.call(null);
          };
          var G__14407__1 = function(result) {
            return rf.call(null, result);
          };
          var G__14407__2 = function(result, input) {
            var prior = cljs.core.deref.call(null, pa);
            cljs.core.reset_BANG_.call(null, pa, input);
            if (cljs.core._EQ_.call(null, prior, input)) {
              return result;
            } else {
              return rf.call(null, result, input);
            }
          };
          G__14407 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__14407__0.call(this);
              case 1:
                return G__14407__1.call(this, result);
              case 2:
                return G__14407__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__14407.cljs$core$IFn$_invoke$arity$0 = G__14407__0;
          G__14407.cljs$core$IFn$_invoke$arity$1 = G__14407__1;
          G__14407.cljs$core$IFn$_invoke$arity$2 = G__14407__2;
          return G__14407;
        }();
      }(pa);
    };
  };
  var dedupe__1 = function(coll) {
    return cljs.core.sequence.call(null, dedupe.call(null), coll);
  };
  dedupe = function(coll) {
    switch(arguments.length) {
      case 0:
        return dedupe__0.call(this);
      case 1:
        return dedupe__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dedupe.cljs$core$IFn$_invoke$arity$0 = dedupe__0;
  dedupe.cljs$core$IFn$_invoke$arity$1 = dedupe__1;
  return dedupe;
}();
cljs.core.random_sample = function() {
  var random_sample = null;
  var random_sample__1 = function(prob) {
    return cljs.core.filter.call(null, function(_) {
      return cljs.core.rand.call(null) < prob;
    });
  };
  var random_sample__2 = function(prob, coll) {
    return cljs.core.filter.call(null, function(_) {
      return cljs.core.rand.call(null) < prob;
    }, coll);
  };
  random_sample = function(prob, coll) {
    switch(arguments.length) {
      case 1:
        return random_sample__1.call(this, prob);
      case 2:
        return random_sample__2.call(this, prob, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_sample.cljs$core$IFn$_invoke$arity$1 = random_sample__1;
  random_sample.cljs$core$IFn$_invoke$arity$2 = random_sample__2;
  return random_sample;
}();
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/Eduction");
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.call(null, self__.xform, f, init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq.call(null, cljs.core.sequence.call(null, self__.xform, self__.coll));
};
cljs.core.__GT_Eduction = function __GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.eduction = function eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.run_BANG_ = function run_BANG_(proc, coll) {
  return cljs.core.reduce.call(null, function(p1__14409_SHARP_, p2__14408_SHARP_) {
    return proc.call(null, p2__14408_SHARP_);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
  var obj14411 = {};
  return obj14411;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3628__auto__ = x;
    if (and__3628__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4277__auto__ = x == null ? null : x;
    return function() {
      var or__3640__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3628__auto__ = x;
    if (and__3628__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4277__auto__ = x == null ? null : x;
    return function() {
      var or__3640__auto__ = cljs.core._key__GT_js[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__14413 = k;
    if (G__14413) {
      var bit__4304__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3640__auto__ = bit__4304__auto__;
        if (cljs.core.truth_(or__3640__auto__)) {
          return or__3640__auto__;
        } else {
          return G__14413.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__14413.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__14413);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__14413);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__14427 = x;
      if (G__14427) {
        var bit__4304__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3640__auto__ = bit__4304__auto__;
          if (cljs.core.truth_(or__3640__auto__)) {
            return or__3640__auto__;
          } else {
            return G__14427.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__14427.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__14427);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__14427);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x);
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj14429 = {};
              return obj14429;
            }();
            var seq__14430_14440 = cljs.core.seq.call(null, x);
            var chunk__14431_14441 = null;
            var count__14432_14442 = 0;
            var i__14433_14443 = 0;
            while (true) {
              if (i__14433_14443 < count__14432_14442) {
                var vec__14434_14444 = cljs.core._nth.call(null, chunk__14431_14441, i__14433_14443);
                var k_14445 = cljs.core.nth.call(null, vec__14434_14444, 0, null);
                var v_14446 = cljs.core.nth.call(null, vec__14434_14444, 1, null);
                m[cljs.core.key__GT_js.call(null, k_14445)] = clj__GT_js.call(null, v_14446);
                var G__14447 = seq__14430_14440;
                var G__14448 = chunk__14431_14441;
                var G__14449 = count__14432_14442;
                var G__14450 = i__14433_14443 + 1;
                seq__14430_14440 = G__14447;
                chunk__14431_14441 = G__14448;
                count__14432_14442 = G__14449;
                i__14433_14443 = G__14450;
                continue;
              } else {
                var temp__4126__auto___14451 = cljs.core.seq.call(null, seq__14430_14440);
                if (temp__4126__auto___14451) {
                  var seq__14430_14452__$1 = temp__4126__auto___14451;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__14430_14452__$1)) {
                    var c__4410__auto___14453 = cljs.core.chunk_first.call(null, seq__14430_14452__$1);
                    var G__14454 = cljs.core.chunk_rest.call(null, seq__14430_14452__$1);
                    var G__14455 = c__4410__auto___14453;
                    var G__14456 = cljs.core.count.call(null, c__4410__auto___14453);
                    var G__14457 = 0;
                    seq__14430_14440 = G__14454;
                    chunk__14431_14441 = G__14455;
                    count__14432_14442 = G__14456;
                    i__14433_14443 = G__14457;
                    continue;
                  } else {
                    var vec__14435_14458 = cljs.core.first.call(null, seq__14430_14452__$1);
                    var k_14459 = cljs.core.nth.call(null, vec__14435_14458, 0, null);
                    var v_14460 = cljs.core.nth.call(null, vec__14435_14458, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_14459)] = clj__GT_js.call(null, v_14460);
                    var G__14461 = cljs.core.next.call(null, seq__14430_14452__$1);
                    var G__14462 = null;
                    var G__14463 = 0;
                    var G__14464 = 0;
                    seq__14430_14440 = G__14461;
                    chunk__14431_14441 = G__14462;
                    count__14432_14442 = G__14463;
                    i__14433_14443 = G__14464;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__14436_14465 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__14437_14466 = null;
              var count__14438_14467 = 0;
              var i__14439_14468 = 0;
              while (true) {
                if (i__14439_14468 < count__14438_14467) {
                  var x_14469__$1 = cljs.core._nth.call(null, chunk__14437_14466, i__14439_14468);
                  arr.push(x_14469__$1);
                  var G__14470 = seq__14436_14465;
                  var G__14471 = chunk__14437_14466;
                  var G__14472 = count__14438_14467;
                  var G__14473 = i__14439_14468 + 1;
                  seq__14436_14465 = G__14470;
                  chunk__14437_14466 = G__14471;
                  count__14438_14467 = G__14472;
                  i__14439_14468 = G__14473;
                  continue;
                } else {
                  var temp__4126__auto___14474 = cljs.core.seq.call(null, seq__14436_14465);
                  if (temp__4126__auto___14474) {
                    var seq__14436_14475__$1 = temp__4126__auto___14474;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__14436_14475__$1)) {
                      var c__4410__auto___14476 = cljs.core.chunk_first.call(null, seq__14436_14475__$1);
                      var G__14477 = cljs.core.chunk_rest.call(null, seq__14436_14475__$1);
                      var G__14478 = c__4410__auto___14476;
                      var G__14479 = cljs.core.count.call(null, c__4410__auto___14476);
                      var G__14480 = 0;
                      seq__14436_14465 = G__14477;
                      chunk__14437_14466 = G__14478;
                      count__14438_14467 = G__14479;
                      i__14439_14468 = G__14480;
                      continue;
                    } else {
                      var x_14481__$1 = cljs.core.first.call(null, seq__14436_14475__$1);
                      arr.push(x_14481__$1);
                      var G__14482 = cljs.core.next.call(null, seq__14436_14475__$1);
                      var G__14483 = null;
                      var G__14484 = 0;
                      var G__14485 = 0;
                      seq__14436_14465 = G__14482;
                      chunk__14437_14466 = G__14483;
                      count__14438_14467 = G__14484;
                      i__14439_14468 = G__14485;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj14487 = {};
  return obj14487;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3628__auto__ = x;
    if (and__3628__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4277__auto__ = x == null ? null : x;
    return function() {
      var or__3640__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__14508__delegate = function(x, opts) {
      if (function() {
        var G__14498 = x;
        if (G__14498) {
          var bit__4304__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3640__auto__ = bit__4304__auto__;
            if (cljs.core.truth_(or__3640__auto__)) {
              return or__3640__auto__;
            } else {
              return G__14498.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__14498.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__14498);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__14498);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__14499 = opts;
          var map__14499__$1 = cljs.core.seq_QMARK_.call(null, map__14499) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14499) : map__14499;
          var keywordize_keys = cljs.core.get.call(null, map__14499__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__14499, map__14499__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__4379__auto__ = function(map__14499, map__14499__$1, keywordize_keys, keyfn) {
                          return function iter__14504(s__14505) {
                            return new cljs.core.LazySeq(null, function(map__14499, map__14499__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__14505__$1 = s__14505;
                                while (true) {
                                  var temp__4126__auto__ = cljs.core.seq.call(null, s__14505__$1);
                                  if (temp__4126__auto__) {
                                    var s__14505__$2 = temp__4126__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__14505__$2)) {
                                      var c__4377__auto__ = cljs.core.chunk_first.call(null, s__14505__$2);
                                      var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                                      var b__14507 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                                      if (function() {
                                        var i__14506 = 0;
                                        while (true) {
                                          if (i__14506 < size__4378__auto__) {
                                            var k = cljs.core._nth.call(null, c__4377__auto__, i__14506);
                                            cljs.core.chunk_append.call(null, b__14507, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__14509 = i__14506 + 1;
                                            i__14506 = G__14509;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14507), iter__14504.call(null, cljs.core.chunk_rest.call(null, s__14505__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14507), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__14505__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__14504.call(null, cljs.core.rest.call(null, s__14505__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__14499, map__14499__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__14499, map__14499__$1, keywordize_keys, keyfn);
                        return iter__4379__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      return x__$1;
                    }
                  }
                }
              }
            };
          }(map__14499, map__14499__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__14508 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__14508__delegate.call(this, x, opts);
    };
    G__14508.cljs$lang$maxFixedArity = 1;
    G__14508.cljs$lang$applyTo = function(arglist__14510) {
      var x = cljs.core.first(arglist__14510);
      var opts = cljs.core.rest(arglist__14510);
      return G__14508__delegate(x, opts);
    };
    G__14508.cljs$core$IFn$_invoke$arity$variadic = G__14508__delegate;
    return G__14508;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function() {
      var G__14511__delegate = function(args) {
        var v = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.call(null, f, args);
          cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__14511 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__14511__delegate.call(this, args);
      };
      G__14511.cljs$lang$maxFixedArity = 0;
      G__14511.cljs$lang$applyTo = function(arglist__14512) {
        var args = cljs.core.seq(arglist__14512);
        return G__14511__delegate(args);
      };
      G__14511.cljs$core$IFn$_invoke$arity$variadic = G__14511__delegate;
      return G__14511;
    }();
  }(mem);
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__14513 = ret;
        f = G__14513;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__14514__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__14514 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__14514__delegate.call(this, f, args);
    };
    G__14514.cljs$lang$maxFixedArity = 1;
    G__14514.cljs$lang$applyTo = function(arglist__14515) {
      var f = cljs.core.first(arglist__14515);
      var args = cljs.core.rest(arglist__14515);
      return G__14514__delegate(f, args);
    };
    G__14514.cljs$core$IFn$_invoke$arity$variadic = G__14514__delegate;
    return G__14514;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc_BANG_.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__14516) {
    var f = cljs.core.first(arglist__14516);
    var args = cljs.core.rest(arglist__14516);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3640__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__3640__auto__) {
      return or__3640__auto__;
    } else {
      var or__3640__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3640__auto____$1) {
        return or__3640__auto____$1;
      } else {
        var and__3628__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__3628__auto__) {
          var and__3628__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__3628__auto____$1) {
            var and__3628__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__3628__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__14517 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__14518 = i + 1;
                  ret = G__14517;
                  i = G__14518;
                  continue;
                }
                break;
              }
            } else {
              return and__3628__auto____$2;
            }
          } else {
            return and__3628__auto____$1;
          }
        } else {
          return and__3628__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null)))));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null)))));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__3640__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "already has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "as ancestor");
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error("Cyclic derivation:" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "as ancestor");
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3640__auto__)) {
      return or__3640__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__14519_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__14519_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__14519_SHARP_), cljs.core.second.call(null, p1__14519_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(parentMap, childsParents, newParents, deriv_seq) {
        return function(p1__14520_SHARP_, p2__14521_SHARP_) {
          return cljs.core.apply.call(null, cljs.core.derive, p1__14520_SHARP_, p2__14521_SHARP_);
        };
      }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3640__auto__ = cljs.core.truth_(function() {
    var and__3628__auto__ = xprefs;
    if (cljs.core.truth_(and__3628__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__3628__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3640__auto__)) {
    return or__3640__auto__;
  } else {
    var or__3640__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__14522 = cljs.core.rest.call(null, ps);
          ps = G__14522;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3640__auto____$1)) {
      return or__3640__auto____$1;
    } else {
      var or__3640__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__14523 = cljs.core.rest.call(null, ps);
            ps = G__14523;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3640__auto____$2)) {
        return or__3640__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3640__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__3640__auto__)) {
    return or__3640__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__14526) {
    var vec__14527 = p__14526;
    var k = cljs.core.nth.call(null, vec__14527, 0, null);
    var _ = cljs.core.nth.call(null, vec__14527, 1, null);
    var e = vec__14527;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3640__auto__ = be == null;
        if (or__3640__auto__) {
          return or__3640__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error("Multiple methods in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' match dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val) + " -\x3e " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(k) + " and " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, be2)) + ", and neither is preferred");
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj14529 = {};
  return obj14529;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3628__auto__ = mf;
    if (and__3628__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4277__auto__ = mf == null ? null : mf;
    return function() {
      var or__3640__auto__ = cljs.core._reset[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._reset["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3628__auto__ = mf;
    if (and__3628__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4277__auto__ = mf == null ? null : mf;
    return function() {
      var or__3640__auto__ = cljs.core._add_method[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._add_method["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3628__auto__ = mf;
    if (and__3628__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4277__auto__ = mf == null ? null : mf;
    return function() {
      var or__3640__auto__ = cljs.core._remove_method[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._remove_method["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3628__auto__ = mf;
    if (and__3628__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4277__auto__ = mf == null ? null : mf;
    return function() {
      var or__3640__auto__ = cljs.core._prefer_method[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3628__auto__ = mf;
    if (and__3628__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4277__auto__ = mf == null ? null : mf;
    return function() {
      var or__3640__auto__ = cljs.core._get_method[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._get_method["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3628__auto__ = mf;
    if (and__3628__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4277__auto__ = mf == null ? null : mf;
    return function() {
      var or__3640__auto__ = cljs.core._methods[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._methods["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3628__auto__ = mf;
    if (and__3628__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4277__auto__ = mf == null ? null : mf;
    return function() {
      var or__3640__auto__ = cljs.core._prefers[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.core._prefers["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function throw_no_method_error(name, dispatch_val) {
  throw new Error("No method in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' for dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4124__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var target_fn = temp__4124__auto__;
    return target_fn;
  } else {
    var temp__4124__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var target_fn = temp__4124__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error("Preference conflict in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.name) + "': " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_y) + " is already preferred to " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_x));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__14531 = null;
  var G__14531__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a);
  };
  var G__14531__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b);
  };
  var G__14531__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c);
  };
  var G__14531__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d);
  };
  var G__14531__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e);
  };
  var G__14531__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f);
  };
  var G__14531__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g);
  };
  var G__14531__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__14531__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__14531__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__14531__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__14531__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__14531__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__14531__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__14531__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__14531__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__14531__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__14531__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__14531__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__14531__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__14531__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__14531 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 2:
        return G__14531__2.call(this, self__, a);
      case 3:
        return G__14531__3.call(this, self__, a, b);
      case 4:
        return G__14531__4.call(this, self__, a, b, c);
      case 5:
        return G__14531__5.call(this, self__, a, b, c, d);
      case 6:
        return G__14531__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__14531__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__14531__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__14531__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__14531__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__14531__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__14531__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__14531__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__14531__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__14531__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__14531__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__14531__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__14531__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__14531__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__14531__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__14531__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__14531__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14531.cljs$core$IFn$_invoke$arity$2 = G__14531__2;
  G__14531.cljs$core$IFn$_invoke$arity$3 = G__14531__3;
  G__14531.cljs$core$IFn$_invoke$arity$4 = G__14531__4;
  G__14531.cljs$core$IFn$_invoke$arity$5 = G__14531__5;
  G__14531.cljs$core$IFn$_invoke$arity$6 = G__14531__6;
  G__14531.cljs$core$IFn$_invoke$arity$7 = G__14531__7;
  G__14531.cljs$core$IFn$_invoke$arity$8 = G__14531__8;
  G__14531.cljs$core$IFn$_invoke$arity$9 = G__14531__9;
  G__14531.cljs$core$IFn$_invoke$arity$10 = G__14531__10;
  G__14531.cljs$core$IFn$_invoke$arity$11 = G__14531__11;
  G__14531.cljs$core$IFn$_invoke$arity$12 = G__14531__12;
  G__14531.cljs$core$IFn$_invoke$arity$13 = G__14531__13;
  G__14531.cljs$core$IFn$_invoke$arity$14 = G__14531__14;
  G__14531.cljs$core$IFn$_invoke$arity$15 = G__14531__15;
  G__14531.cljs$core$IFn$_invoke$arity$16 = G__14531__16;
  G__14531.cljs$core$IFn$_invoke$arity$17 = G__14531__17;
  G__14531.cljs$core$IFn$_invoke$arity$18 = G__14531__18;
  G__14531.cljs$core$IFn$_invoke$arity$19 = G__14531__19;
  G__14531.cljs$core$IFn$_invoke$arity$20 = G__14531__20;
  G__14531.cljs$core$IFn$_invoke$arity$21 = G__14531__21;
  G__14531.cljs$core$IFn$_invoke$arity$22 = G__14531__22;
  return G__14531;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args14530) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14530)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, '#uuid "' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.uuid) + '"');
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__4220__auto__, writer__4221__auto__, opts__4222__auto__) {
  return cljs.core._write.call(null, writer__4221__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, 
  "letfn*", "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, 
  null), null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      throw "Invalid match arg: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(match);
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)));
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__15037 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__15037;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__15041 = cljs.core._EQ_;
    var expr__15042 = limit;
    if (cljs.core.truth_(pred__15041.call(null, 1, expr__15042))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__15041.call(null, 2, expr__15042))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(re), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)).split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4124__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4124__auto__)) {
            var m = temp__4124__auto__;
            var index = s__$1.indexOf(m);
            var G__15044 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__15045 = limit__$1 - 1;
            var G__15046 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__15044;
            limit__$1 = G__15045;
            parts = G__15046;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__15047 = index - 1;
        index = G__15047;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4124__auto___15048 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4124__auto___15048)) {
        var replacement_15049 = temp__4124__auto___15048;
        buffer.append("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(replacement_15049));
      } else {
        buffer.append(ch);
      }
      var G__15050 = index + 1;
      index = G__15050;
      continue;
    }
    break;
  }
};
goog.provide("hiccups.runtime");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
hiccups.runtime.re_tag = /([^\s\.#]+)(?:#([^\s\.#]+))?(?:\.([^\s#]+))?/;
hiccups.runtime.character_escapes = new cljs.core.PersistentArrayMap(null, 4, ["\x26", "\x26amp;", "\x3c", "\x26lt;", "\x3e", "\x26gt;", '"', "\x26quot;"], null);
hiccups.runtime.container_tags = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 33, ["table", null, "canvas", null, "body", null, "h3", null, "dt", null, "label", null, "fieldset", null, "form", null, "em", null, "option", null, "h2", null, "h4", null, "style", null, "span", null, "script", null, "ol", null, "dd", null, "a", null, "head", null, "textarea", null, "i", null, "div", null, "b", null, "h5", null, "pre", null, "ul", null, "iframe", null, "strong", null, "html", 
null, "h1", null, "li", null, "dl", null, "h6", null], null), null);
hiccups.runtime.as_str = function as_str(x) {
  if (x instanceof cljs.core.Keyword || x instanceof cljs.core.Symbol) {
    return cljs.core.name.call(null, x);
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x);
  }
};
hiccups.runtime._STAR_html_mode_STAR_ = new cljs.core.Keyword(null, "xml", "xml", -1170142052);
hiccups.runtime.xml_mode_QMARK_ = function xml_mode_QMARK_() {
  return cljs.core._EQ_.call(null, hiccups.runtime._STAR_html_mode_STAR_, new cljs.core.Keyword(null, "xml", "xml", -1170142052));
};
hiccups.runtime.in_mode = function in_mode(mode, f) {
  var _STAR_html_mode_STAR_15298 = hiccups.runtime._STAR_html_mode_STAR_;
  try {
    hiccups.runtime._STAR_html_mode_STAR_ = mode;
    return f.call(null);
  } finally {
    hiccups.runtime._STAR_html_mode_STAR_ = _STAR_html_mode_STAR_15298;
  }
};
hiccups.runtime.escape_html = function escape_html(text) {
  return clojure.string.escape.call(null, hiccups.runtime.as_str.call(null, text), hiccups.runtime.character_escapes);
};
hiccups.runtime.h = hiccups.runtime.escape_html;
hiccups.runtime.end_tag = function end_tag() {
  if (hiccups.runtime.xml_mode_QMARK_.call(null)) {
    return " /\x3e";
  } else {
    return "\x3e";
  }
};
hiccups.runtime.xml_attribute = function xml_attribute(name, value) {
  return " " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(hiccups.runtime.as_str.call(null, name)) + '\x3d"' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(hiccups.runtime.escape_html.call(null, value)) + '"';
};
hiccups.runtime.render_attribute = function render_attribute(p__15299) {
  var vec__15301 = p__15299;
  var name = cljs.core.nth.call(null, vec__15301, 0, null);
  var value = cljs.core.nth.call(null, vec__15301, 1, null);
  if (value === true) {
    if (hiccups.runtime.xml_mode_QMARK_.call(null)) {
      return hiccups.runtime.xml_attribute.call(null, name, name);
    } else {
      return " " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(hiccups.runtime.as_str.call(null, name));
    }
  } else {
    if (cljs.core.not.call(null, value)) {
      return "";
    } else {
      return hiccups.runtime.xml_attribute.call(null, name, value);
    }
  }
};
hiccups.runtime.render_attr_map = function render_attr_map(attrs) {
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.sort.call(null, cljs.core.map.call(null, hiccups.runtime.render_attribute, attrs)));
};
hiccups.runtime.normalize_element = function normalize_element(p__15302) {
  var vec__15305 = p__15302;
  var tag = cljs.core.nth.call(null, vec__15305, 0, null);
  var content = cljs.core.nthnext.call(null, vec__15305, 1);
  if (!(tag instanceof cljs.core.Keyword || tag instanceof cljs.core.Symbol || typeof tag === "string")) {
    throw "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + " is not a valid tag name";
  } else {
  }
  var vec__15306 = cljs.core.re_matches.call(null, hiccups.runtime.re_tag, hiccups.runtime.as_str.call(null, tag));
  var _ = cljs.core.nth.call(null, vec__15306, 0, null);
  var tag__$1 = cljs.core.nth.call(null, vec__15306, 1, null);
  var id = cljs.core.nth.call(null, vec__15306, 2, null);
  var class$ = cljs.core.nth.call(null, vec__15306, 3, null);
  var tag_attrs = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", -1388402092), id, new cljs.core.Keyword(null, "class", "class", -2030961996), cljs.core.truth_(class$) ? clojure.string.replace.call(null, class$, ".", " ") : null], null);
  var map_attrs = cljs.core.first.call(null, content);
  if (cljs.core.map_QMARK_.call(null, map_attrs)) {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag__$1, cljs.core.merge.call(null, tag_attrs, map_attrs), cljs.core.next.call(null, content)], null);
  } else {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag__$1, tag_attrs, content], null);
  }
};
hiccups.runtime.render_element = function render_element(element) {
  var vec__15308 = hiccups.runtime.normalize_element.call(null, element);
  var tag = cljs.core.nth.call(null, vec__15308, 0, null);
  var attrs = cljs.core.nth.call(null, vec__15308, 1, null);
  var content = cljs.core.nth.call(null, vec__15308, 2, null);
  if (cljs.core.truth_(function() {
    var or__3640__auto__ = content;
    if (cljs.core.truth_(or__3640__auto__)) {
      return or__3640__auto__;
    } else {
      return hiccups.runtime.container_tags.call(null, tag);
    }
  }())) {
    return "\x3c" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(hiccups.runtime.render_attr_map.call(null, attrs)) + "\x3e" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(hiccups.runtime.render_html.call(null, content)) + "\x3c/" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "\x3e";
  } else {
    return "\x3c" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(hiccups.runtime.render_attr_map.call(null, attrs)) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(hiccups.runtime.end_tag.call(null));
  }
};
hiccups.runtime.render_html = function render_html(x) {
  if (cljs.core.vector_QMARK_.call(null, x)) {
    return hiccups.runtime.render_element.call(null, x);
  } else {
    if (cljs.core.seq_QMARK_.call(null, x)) {
      return cljs.core.apply.call(null, cljs.core.str, cljs.core.map.call(null, render_html, x));
    } else {
      return hiccups.runtime.as_str.call(null, x);
    }
  }
};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose = goog.abstractMethod;
goog.disposable.IDisposable.prototype.isDisposed = goog.abstractMethod;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.provide("goog.disposeAll");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
      this.creationStack = (new Error).stack;
    }
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.define("goog.Disposable.MONITORING_MODE", 0);
goog.define("goog.Disposable.INCLUDE_STACK_ON_CREATION", true);
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.isDef(opt_scope) ? goog.bind(callback, opt_scope) : callback);
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera") || goog.labs.userAgent.util.matchUserAgent("OPR");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS") && !goog.labs.userAgent.util.matchUserAgent("Android");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return goog.labs.userAgent.browser.getOperaVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.labs.userAgent.browser.getOperaVersion_ = function(userAgent) {
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgent);
  var lastTuple = goog.array.peek(versionTuples);
  if (lastTuple[0] == "OPR" && lastTuple[1]) {
    return lastTuple[1];
  }
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.getVersionFromTuples_ = function(versionTuples) {
  goog.asserts.assert(versionTuples.length > 2, "Couldn't extract version tuple from user agent string");
  return versionTuples[2] && versionTuples[2][1] ? versionTuples[2][1] : "";
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit");
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = tuples[1];
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.userAgent");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"] || null;
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
};
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD;
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && goog.string.contains(ua, "Android");
  goog.userAgent.detectedIPhone_ = !!ua && goog.string.contains(ua, "iPhone");
  goog.userAgent.detectedIPad_ = !!ua && goog.string.contains(ua, "iPad");
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    return goog.isFunction(operaVersion) ? operaVersion() : operaVersion;
  }
  if (goog.userAgent.GECKO) {
    re = /rv\:([^\);]+)(\)|;)/;
  } else {
    if (goog.userAgent.IE) {
      re = /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.WEBKIT) {
        re = /WebKit\/(\S+)/;
      }
    }
  }
  if (re) {
    var arr = re.exec(goog.userAgent.getUserAgentString());
    version = arr ? arr[1] : "";
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9b") || goog.userAgent.IE && 
goog.userAgent.isVersionOrHigher("8") || goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher("528"), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("8") || goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || !!(goog.global["document"] && document.documentElement && "ontouchstart" in document.documentElement) || !!(goog.global["navigator"] && 
goog.global["navigator"]["msMaxTouchPoints"])};
goog.provide("goog.events.EventId");
goog.events.EventId = function(eventId) {
  this.id = eventId;
};
goog.events.EventId.prototype.toString = function() {
  return this.id;
};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.require("goog.events.EventId");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type instanceof goog.events.EventId ? String(type) : type;
  this.target = opt_target;
  this.currentTarget = this.target;
  this.propagationStopped_ = false;
  this.defaultPrevented = false;
  this.returnValue_ = true;
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.getVendorPrefixedName_ = function(eventName) {
  return goog.userAgent.WEBKIT ? "webkit" + eventName : goog.userAgent.OPERA ? "o" + eventName.toLowerCase() : eventName.toLowerCase();
};
goog.events.EventType = {CLICK:"click", RIGHTCLICK:"rightclick", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", MOUSEENTER:"mouseenter", MOUSELEAVE:"mouseleave", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", 
SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONSOLEMESSAGE:"consolemessage", CONTEXTMENU:"contextmenu", DOMCONTENTLOADED:"DOMContentLoaded", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", 
ORIENTATIONCHANGE:"orientationchange", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", ANIMATIONSTART:goog.events.getVendorPrefixedName_("AnimationStart"), ANIMATIONEND:goog.events.getVendorPrefixedName_("AnimationEnd"), 
ANIMATIONITERATION:goog.events.getVendorPrefixedName_("AnimationIteration"), TRANSITIONEND:goog.events.getVendorPrefixedName_("TransitionEnd"), POINTERDOWN:"pointerdown", POINTERUP:"pointerup", POINTERCANCEL:"pointercancel", POINTERMOVE:"pointermove", POINTEROVER:"pointerover", POINTEROUT:"pointerout", POINTERENTER:"pointerenter", POINTERLEAVE:"pointerleave", GOTPOINTERCAPTURE:"gotpointercapture", LOSTPOINTERCAPTURE:"lostpointercapture", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", 
MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERENTER:"MSPointerEnter", MSPOINTERHOVER:"MSPointerHover", MSPOINTERLEAVE:"MSPointerLeave", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROUT:"MSPointerOut", MSPOINTEROVER:"MSPointerOver", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", 
COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend", EXIT:"exit", LOADABORT:"loadabort", LOADCOMMIT:"loadcommit", LOADREDIRECT:"loadredirect", LOADSTART:"loadstart", LOADSTOP:"loadstop", RESPONSIVE:"responsive", SIZECHANGED:"sizechanged", UNRESPONSIVE:"unresponsive", VISIBILITYCHANGE:"visibilitychange", STORAGE:"storage", DOMSUBTREEMODIFIED:"DOMSubtreeModified", DOMNODEINSERTED:"DOMNodeInserted", DOMNODEREMOVED:"DOMNodeRemoved", DOMNODEREMOVEDFROMDOCUMENT:"DOMNodeRemovedFromDocument", 
DOMNODEINSERTEDINTODOCUMENT:"DOMNodeInsertedIntoDocument", DOMATTRMODIFIED:"DOMAttrModified", DOMCHARACTERDATAMODIFIED:"DOMCharacterDataModified"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  goog.events.BrowserEvent.base(this, "constructor", opt_e ? opt_e.type : "");
  this.target = null;
  this.currentTarget = null;
  this.relatedTarget = null;
  this.offsetX = 0;
  this.offsetY = 0;
  this.clientX = 0;
  this.clientY = 0;
  this.screenX = 0;
  this.screenY = 0;
  this.button = 0;
  this.keyCode = 0;
  this.charCode = 0;
  this.ctrlKey = false;
  this.altKey = false;
  this.shiftKey = false;
  this.metaKey = false;
  this.state = null;
  this.platformModifierKey = false;
  this.event_ = null;
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventId");
goog.events.Listenable = function() {
};
goog.events.Listenable.IMPLEMENTED_BY_PROP = "closure_listenable_" + (Math.random() * 1E6 | 0);
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return!!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.getParentEventTarget;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.key = goog.events.ListenableKey.reserveKey();
  this.callOnce = false;
  this.removed = false;
};
goog.define("goog.events.Listener.ENABLE_MONITORING", false);
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.markAsRemoved = function() {
  this.removed = true;
  this.listener = null;
  this.proxy = null;
  this.src = null;
  this.handler = null;
};
goog.provide("goog.events.ListenerMap");
goog.require("goog.array");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.ListenerMap = function(src) {
  this.src = src;
  this.listeners = {};
  this.typeCount_ = 0;
};
goog.events.ListenerMap.prototype.getTypeCount = function() {
  return this.typeCount_;
};
goog.events.ListenerMap.prototype.getListenerCount = function() {
  var count = 0;
  for (var type in this.listeners) {
    count += this.listeners[type].length;
  }
  return count;
};
goog.events.ListenerMap.prototype.add = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  var listenerArray = this.listeners[typeStr];
  if (!listenerArray) {
    listenerArray = this.listeners[typeStr] = [];
    this.typeCount_++;
  }
  var listenerObj;
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    listenerObj = listenerArray[index];
    if (!callOnce) {
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = new goog.events.Listener(listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
  }
  return listenerObj;
};
goog.events.ListenerMap.prototype.remove = function(type, listener, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  if (!(typeStr in this.listeners)) {
    return false;
  }
  var listenerArray = this.listeners[typeStr];
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    var listenerObj = listenerArray[index];
    listenerObj.markAsRemoved();
    goog.array.removeAt(listenerArray, index);
    if (listenerArray.length == 0) {
      delete this.listeners[typeStr];
      this.typeCount_--;
    }
    return true;
  }
  return false;
};
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
  var type = listener.type;
  if (!(type in this.listeners)) {
    return false;
  }
  var removed = goog.array.remove(this.listeners[type], listener);
  if (removed) {
    listener.markAsRemoved();
    if (this.listeners[type].length == 0) {
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return removed;
};
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
  var typeStr = opt_type && opt_type.toString();
  var count = 0;
  for (var type in this.listeners) {
    if (!typeStr || type == typeStr) {
      var listenerArray = this.listeners[type];
      for (var i = 0;i < listenerArray.length;i++) {
        ++count;
        listenerArray[i].markAsRemoved();
      }
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return count;
};
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
  var listenerArray = this.listeners[type.toString()];
  var rv = [];
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.capture == capture) {
        rv.push(listenerObj);
      }
    }
  }
  return rv;
};
goog.events.ListenerMap.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  var listenerArray = this.listeners[type.toString()];
  var i = -1;
  if (listenerArray) {
    i = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
  }
  return i > -1 ? listenerArray[i] : null;
};
goog.events.ListenerMap.prototype.hasListener = function(opt_type, opt_capture) {
  var hasType = goog.isDef(opt_type);
  var typeStr = hasType ? opt_type.toString() : "";
  var hasCapture = goog.isDef(opt_capture);
  return goog.object.some(this.listeners, function(listenerArray, type) {
    for (var i = 0;i < listenerArray.length;++i) {
      if ((!hasType || listenerArray[i].type == typeStr) && (!hasCapture || listenerArray[i].capture == opt_capture)) {
        return true;
      }
    }
    return false;
  });
};
goog.events.ListenerMap.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
  for (var i = 0;i < listenerArray.length;++i) {
    var listenerObj = listenerArray[i];
    if (!listenerObj.removed && listenerObj.listener == listener && listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope) {
      return i;
    }
  }
  return-1;
};
goog.provide("goog.events");
goog.provide("goog.events.CaptureSimulationMode");
goog.provide("goog.events.Key");
goog.provide("goog.events.ListenableType");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.forwardDeclare("goog.debug.ErrorHandler");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.Key;
goog.events.ListenableType;
goog.events.LISTENER_MAP_PROP_ = "closure_lm_" + (Math.random() * 1E6 | 0);
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.CaptureSimulationMode = {OFF_AND_FAIL:0, OFF_AND_SILENT:1, ON:2};
goog.define("goog.events.CAPTURE_SIMULATION_MODE", 2);
goog.events.listenerCountEstimate_ = 0;
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listen((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, false, opt_capt, opt_handler);
  }
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
      goog.asserts.fail("Can not register capture listener in IE8-.");
      return null;
    } else {
      if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
        return null;
      }
    }
  }
  var listenerMap = goog.events.getListenerMap_(src);
  if (!listenerMap) {
    src[goog.events.LISTENER_MAP_PROP_] = listenerMap = new goog.events.ListenerMap(src);
  }
  var listenerObj = listenerMap.add(type, listener, callOnce, opt_capt, opt_handler);
  if (listenerObj.proxy) {
    return listenerObj;
  }
  var proxy = goog.events.getProxy();
  listenerObj.proxy = proxy;
  proxy.src = src;
  proxy.listener = listenerObj;
  if (src.addEventListener) {
    src.addEventListener(type.toString(), proxy, capture);
  } else {
    src.attachEvent(goog.events.getOnString_(type.toString()), proxy);
  }
  goog.events.listenerCountEstimate_++;
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listenOnce((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, true, opt_capt, opt_handler);
  }
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), listener, opt_capt, opt_handler);
  }
  if (!src) {
    return false;
  }
  var capture = !!opt_capt;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    var listenerObj = listenerMap.getListener((type), listener, capture, opt_handler);
    if (listenerObj) {
      return goog.events.unlistenByKey(listenerObj);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  if (goog.isNumber(key)) {
    return false;
  }
  var listener = (key);
  if (!listener || listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  if (src.removeEventListener) {
    src.removeEventListener(type, proxy, listener.capture);
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  goog.events.listenerCountEstimate_--;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    listenerMap.removeByKey(listener);
    if (listenerMap.getTypeCount() == 0) {
      listenerMap.src = null;
      src[goog.events.LISTENER_MAP_PROP_] = null;
    }
  } else {
    listener.markAsRemoved();
  }
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.removeAll = function(obj, opt_type) {
  if (!obj) {
    return 0;
  }
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.removeAllListeners(opt_type);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  if (!listenerMap) {
    return 0;
  }
  var count = 0;
  var typeStr = opt_type && opt_type.toString();
  for (var type in listenerMap.listeners) {
    if (!typeStr || type == typeStr) {
      var listeners = listenerMap.listeners[type].concat();
      for (var i = 0;i < listeners.length;++i) {
        if (goog.events.unlistenByKey(listeners[i])) {
          ++count;
        }
      }
    }
  }
  return count;
};
goog.events.removeAllNativeListeners = function() {
  goog.events.listenerCountEstimate_ = 0;
  return 0;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    if (!obj) {
      return[];
    }
    var listenerMap = goog.events.getListenerMap_((obj));
    return listenerMap ? listenerMap.getListeners(type, capture) : [];
  }
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  type = (type);
  listener = goog.events.wrapListener(listener);
  var capture = !!opt_capt;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener(type, listener, capture, opt_handler);
  }
  if (!src) {
    return null;
  }
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    return listenerMap.getListener(type, listener, capture, opt_handler);
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  return!!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  return goog.events.fireListeners_(obj, type, capture, eventObject);
};
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
  var retval = 1;
  var listenerMap = goog.events.getListenerMap_((obj));
  if (listenerMap) {
    var listenerArray = listenerMap.listeners[type.toString()];
    if (listenerArray) {
      listenerArray = listenerArray.concat();
      for (var i = 0;i < listenerArray.length;i++) {
        var listener = listenerArray[i];
        if (listener && listener.capture == capture && !listener.removed) {
          retval &= goog.events.fireListener(listener, eventObject) !== false;
        }
      }
    }
  }
  return Boolean(retval);
};
goog.events.fireListener = function(listener, eventObject) {
  var listenerFn = listener.listener;
  var listenerHandler = listener.handler || listener.src;
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener);
  }
  return listenerFn.call(listenerHandler, eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.events.listenerCountEstimate_;
};
goog.events.dispatchEvent = function(src, e) {
  goog.asserts.assert(goog.events.Listenable.isImplementedBy(src), "Can not use goog.events.dispatchEvent with " + "non-goog.events.Listenable instance.");
  return src.dispatchEvent(e);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var evt = new goog.events.BrowserEvent(ieEvent, this);
    var retval = true;
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.ON) {
      if (!goog.events.isMarkedIeEvent_(ieEvent)) {
        goog.events.markIeEvent_(ieEvent);
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        var type = listener.type;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && i >= 0;i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, true, evt);
        }
        for (var i = 0;!evt.propagationStopped_ && i < ancestors.length;i++) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, false, evt);
        }
      }
    } else {
      retval = goog.events.fireListener(listener, evt);
    }
    return retval;
  }
  return goog.events.fireListener(listener, new goog.events.BrowserEvent(opt_evt, this));
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.getListenerMap_ = function(src) {
  var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener = function(listener) {
  goog.asserts.assert(listener, "Listener can not be null.");
  if (goog.isFunction(listener)) {
    return listener;
  }
  goog.asserts.assert(listener.handleEvent, "An object listener must have handleEvent method.");
  if (!listener[goog.events.LISTENER_WRAPPER_PROP_]) {
    listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
      return listener.handleEvent(e);
    };
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_];
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.asserts");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  this.eventTargetListeners_ = new goog.events.ListenerMap(this);
  this.actualEventTarget_ = this;
  this.parentEventTarget_ = null;
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
goog.events.Listenable.addImplementation(goog.events.EventTarget);
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  this.assertInitialized_();
  var ancestorsTree, ancestor = this.getParentEventTarget();
  if (ancestor) {
    ancestorsTree = [];
    var ancestorCount = 1;
    for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
      ancestorsTree.push(ancestor);
      goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
    }
  }
  return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  this.removeAllListeners();
  this.parentEventTarget_ = null;
};
goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
  this.assertInitialized_();
  return this.eventTargetListeners_.add(String(type), listener, false, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.add(String(type), listener, true, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.remove(String(type), listener, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlistenByKey = function(key) {
  return this.eventTargetListeners_.removeByKey(key);
};
goog.events.EventTarget.prototype.removeAllListeners = function(opt_type) {
  if (!this.eventTargetListeners_) {
    return 0;
  }
  return this.eventTargetListeners_.removeAll(opt_type);
};
goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
  var listenerArray = this.eventTargetListeners_.listeners[String(type)];
  if (!listenerArray) {
    return true;
  }
  listenerArray = listenerArray.concat();
  var rv = true;
  for (var i = 0;i < listenerArray.length;++i) {
    var listener = listenerArray[i];
    if (listener && !listener.removed && listener.capture == capture) {
      var listenerFn = listener.listener;
      var listenerHandler = listener.handler || listener.src;
      if (listener.callOnce) {
        this.unlistenByKey(listener);
      }
      rv = listenerFn.call(listenerHandler, eventObject) !== false && rv;
    }
  }
  return rv && eventObject.returnValue_ != false;
};
goog.events.EventTarget.prototype.getListeners = function(type, capture) {
  return this.eventTargetListeners_.getListeners(String(type), capture);
};
goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  return this.eventTargetListeners_.getListener(String(type), listener, capture, opt_listenerScope);
};
goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
  var id = goog.isDef(opt_type) ? String(opt_type) : undefined;
  return this.eventTargetListeners_.hasListener(id, opt_capture);
};
goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
  this.actualEventTarget_ = target;
};
goog.events.EventTarget.prototype.assertInitialized_ = function() {
  goog.asserts.assert(this.eventTargetListeners_, "Event target is not initialized. Did you call the superclass " + "(goog.events.EventTarget) constructor?");
};
goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
  var type = e.type || (e);
  if (goog.isString(e)) {
    e = new goog.events.Event(e, target);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event(type, target);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || target;
    }
  }
  var rv = true, currentTarget;
  if (opt_ancestorsTree) {
    for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, true, e) && rv;
    }
  }
  if (!e.propagationStopped_) {
    currentTarget = e.currentTarget = target;
    rv = currentTarget.fireListeners(type, true, e) && rv;
    if (!e.propagationStopped_) {
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  if (opt_ancestorsTree) {
    for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  return rv;
};
goog.provide("goog.Timer");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = .8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    if (this.timer_) {
      this.timerObject_.clearTimeout(this.timer_);
      this.timer_ = null;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return-1;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.provide("goog.json");
goog.provide("goog.json.Replacer");
goog.provide("goog.json.Reviver");
goog.provide("goog.json.Serializer");
goog.define("goog.json.USE_NATIVE_JSON", false);
goog.json.isValid = function(s) {
  if (/^\s*$/.test(s)) {
    return false;
  }
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe = /"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;
  return remainderRe.test(s.replace(backslashesRe, "@").replace(simpleValuesRe, "]").replace(openBracketsRe, ""));
};
goog.json.parse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  var o = String(s);
  if (goog.json.isValid(o)) {
    try {
      return(eval("(" + o + ")"));
    } catch (ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  return(eval("(" + s + ")"));
};
goog.json.Replacer;
goog.json.Reviver;
goog.json.serialize = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["stringify"]) : function(object, opt_replacer) {
  return(new goog.json.Serializer(opt_replacer)).serialize(object);
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer;
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serializeInternal(object, sb);
  return sb.join("");
};
goog.json.Serializer.prototype.serializeInternal = function(object, sb) {
  switch(typeof object) {
    case "string":
      this.serializeString_((object), sb);
      break;
    case "number":
      this.serializeNumber_((object), sb);
      break;
    case "boolean":
      sb.push(object);
      break;
    case "undefined":
      sb.push("null");
      break;
    case "object":
      if (object == null) {
        sb.push("null");
        break;
      }
      if (goog.isArray(object)) {
        this.serializeArray((object), sb);
        break;
      }
      this.serializeObject_((object), sb);
      break;
    case "function":
      break;
    default:
      throw Error("Unknown type: " + typeof object);;
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    if (c in goog.json.Serializer.charToJsonCharCache_) {
      return goog.json.Serializer.charToJsonCharCache_[c];
    }
    var cc = c.charCodeAt(0);
    var rv = "\\u";
    if (cc < 16) {
      rv += "000";
    } else {
      if (cc < 256) {
        rv += "00";
      } else {
        if (cc < 4096) {
          rv += "0";
        }
      }
    }
    return goog.json.Serializer.charToJsonCharCache_[c] = rv + cc.toString(16);
  }), '"');
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? n : "null");
};
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  var sep = "";
  for (var i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serializeInternal(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ",";
  }
  sb.push("]");
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "";
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      if (typeof value != "function") {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(":");
        this.serializeInternal(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);
        sep = ",";
      }
    }
  }
  sb.push("}");
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (typeof col.contains == "function") {
    return col.contains(val);
  }
  if (typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return!f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.standardAngleInRadians = function(angle) {
  return goog.math.modulo(angle, 2 * Math.PI);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length2;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return(goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (parseFloat("1e" + x) > num);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.iter");
goog.provide("goog.iter.Iterable");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.functions");
goog.require("goog.math");
goog.iter.Iterable;
if ("StopIteration" in goog.global) {
  goog.iter.StopIteration = goog.global["StopIteration"];
} else {
  goog.iter.StopIteration = Error("StopIteration");
}
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.filterFalse = function(iterable, f, opt_obj) {
  return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    var val = iterator.next();
    return f.call(opt_obj, val, undefined, iterator);
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  var iterator = goog.iter.toIterator(arguments);
  var iter = new goog.iter.Iterator;
  var current = null;
  iter.next = function() {
    while (true) {
      if (current == null) {
        var it = iterator.next();
        current = goog.iter.toIterator(it);
      }
      try {
        return current.next();
      } catch (ex) {
        if (ex !== goog.iter.StopIteration) {
          throw ex;
        }
        current = null;
      }
    }
  };
  return iter;
};
goog.iter.chainFromIterable = function(iterable) {
  return goog.iter.chain.apply(undefined, iterable);
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while (true) {
      if (taking) {
        var val = iterator.next();
        if (f.call(opt_obj, val, undefined, iterator)) {
          return val;
        } else {
          taking = false;
        }
      } else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2) {
  var fillValue = {};
  var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);
  return goog.iter.every(pairs, function(pair) {
    return pair[0] == pair[1];
  });
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return!arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.iter.count = function(opt_start, opt_step) {
  var counter = opt_start || 0;
  var step = goog.isDef(opt_step) ? opt_step : 1;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var returnValue = counter;
    counter += step;
    return returnValue;
  };
  return iter;
};
goog.iter.repeat = function(value) {
  var iter = new goog.iter.Iterator;
  iter.next = goog.functions.constant(value);
  return iter;
};
goog.iter.accumulate = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var total = 0;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    total += iterator.next();
    return total;
  };
  return iter;
};
goog.iter.zip = function(var_args) {
  var args = arguments;
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var arr = goog.array.map(iterators, function(it) {
        return it.next();
      });
      return arr;
    };
  }
  return iter;
};
goog.iter.zipLongest = function(fillValue, var_args) {
  var args = goog.array.slice(arguments, 1);
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var iteratorsHaveValues = false;
      var arr = goog.array.map(iterators, function(it) {
        var returnValue;
        try {
          returnValue = it.next();
          iteratorsHaveValues = true;
        } catch (ex) {
          if (ex !== goog.iter.StopIteration) {
            throw ex;
          }
          returnValue = fillValue;
        }
        return returnValue;
      });
      if (!iteratorsHaveValues) {
        throw goog.iter.StopIteration;
      }
      return arr;
    };
  }
  return iter;
};
goog.iter.compress = function(iterable, selectors) {
  var selectorIterator = goog.iter.toIterator(selectors);
  return goog.iter.filter(iterable, function() {
    return!!selectorIterator.next();
  });
};
goog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {
  this.iterator = goog.iter.toIterator(iterable);
  this.keyFunc = opt_keyFunc || goog.functions.identity;
  this.targetKey;
  this.currentKey;
  this.currentValue;
};
goog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);
goog.iter.GroupByIterator_.prototype.next = function() {
  while (this.currentKey == this.targetKey) {
    this.currentValue = this.iterator.next();
    this.currentKey = this.keyFunc(this.currentValue);
  }
  this.targetKey = this.currentKey;
  return[this.currentKey, this.groupItems_(this.targetKey)];
};
goog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {
  var arr = [];
  while (this.currentKey == targetKey) {
    arr.push(this.currentValue);
    try {
      this.currentValue = this.iterator.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
      break;
    }
    this.currentKey = this.keyFunc(this.currentValue);
  }
  return arr;
};
goog.iter.groupBy = function(iterable, opt_keyFunc) {
  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);
};
goog.iter.starMap = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var args = goog.iter.toArray(iterator.next());
    return f.apply(opt_obj, goog.array.concat(args, undefined, iterator));
  };
  return iter;
};
goog.iter.tee = function(iterable, opt_num) {
  var iterator = goog.iter.toIterator(iterable);
  var num = goog.isNumber(opt_num) ? opt_num : 2;
  var buffers = goog.array.map(goog.array.range(num), function() {
    return[];
  });
  var addNextIteratorValueToBuffers = function() {
    var val = iterator.next();
    goog.array.forEach(buffers, function(buffer) {
      buffer.push(val);
    });
  };
  var createIterator = function(buffer) {
    var iter = new goog.iter.Iterator;
    iter.next = function() {
      if (goog.array.isEmpty(buffer)) {
        addNextIteratorValueToBuffers();
      }
      goog.asserts.assert(!goog.array.isEmpty(buffer));
      return buffer.shift();
    };
    return iter;
  };
  return goog.array.map(buffers, createIterator);
};
goog.iter.enumerate = function(iterable, opt_start) {
  return goog.iter.zip(goog.iter.count(opt_start), iterable);
};
goog.iter.limit = function(iterable, limitSize) {
  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var remaining = limitSize;
  iter.next = function() {
    if (remaining-- > 0) {
      return iterator.next();
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.consume = function(iterable, count) {
  goog.asserts.assert(goog.math.isInt(count) && count >= 0);
  var iterator = goog.iter.toIterator(iterable);
  while (count-- > 0) {
    goog.iter.nextOrValue(iterator, null);
  }
  return iterator;
};
goog.iter.slice = function(iterable, start, opt_end) {
  goog.asserts.assert(goog.math.isInt(start) && start >= 0);
  var iterator = goog.iter.consume(iterable, start);
  if (goog.isNumber(opt_end)) {
    goog.asserts.assert(goog.math.isInt((opt_end)) && opt_end >= start);
    iterator = goog.iter.limit(iterator, opt_end - start);
  }
  return iterator;
};
goog.iter.hasDuplicates_ = function(arr) {
  var deduped = [];
  goog.array.removeDuplicates(arr, deduped);
  return arr.length != deduped.length;
};
goog.iter.permutations = function(iterable, opt_length) {
  var elements = goog.iter.toArray(iterable);
  var length = goog.isNumber(opt_length) ? opt_length : elements.length;
  var sets = goog.array.repeat(elements, length);
  var product = goog.iter.product.apply(undefined, sets);
  return goog.iter.filter(product, function(arr) {
    return!goog.iter.hasDuplicates_(arr);
  });
};
goog.iter.combinations = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.iter.range(elements.length);
  var indexIterator = goog.iter.permutations(indexes, length);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.iter.combinationsWithReplacement = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.array.range(elements.length);
  var sets = goog.array.repeat(indexes, length);
  var indexIterator = goog.iter.product.apply(undefined, sets);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  this.count_ = 0;
  this.version_ = 0;
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return(this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.forEach = function(f, opt_obj) {
  var keys = this.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = this.get(key);
    f.call(opt_obj, value, key, this);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      if (version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if (i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key];
    }
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.define("goog.debug.LOGGING_ENABLED", goog.DEBUG);
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersionOrHigher("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line, opt_col, opt_error) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line, opt_col, opt_error);
    }
    logFunc({message:message, fileName:url, line:line, col:opt_col, error:opt_error});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var str = [];
  var helper = function(obj, space, parentSeen) {
    var nestspace = space + "  ";
    var seen = new goog.structs.Set(parentSeen);
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (seen.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  seen.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace, seen);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "", new goog.structs.Set);
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var error = "Message: " + goog.string.htmlEscape(e.message) + '\nUrl: \x3ca href\x3d"view-source:' + e.fileName + '" target\x3d"_new"\x3e' + e.fileName + "\x3c/a\x3e\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + goog.string.htmlEscape(e.stack + "-\x3e ") + "[end]\n\nJS stack traversal:\n" + goog.string.htmlEscape(goog.debug.getStacktrace(opt_fn) + "-\x3e ");
    return error;
  } catch (e2) {
    return "Exception trying to expose exception! You win, we lose. " + e2;
  }
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return{"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || err.line || "Not available";
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || err.filename || err.sourceURL || goog.global["$googDebugFname"] || href;
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || !err.lineNumber || !err.fileName || !err.stack || !err.message || !err.name) {
    return{"message":err.message || "Not available", "name":err.name || "UnknownError", "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return err;
};
goog.debug.enhanceError = function(err, opt_message) {
  var error;
  if (typeof err == "string") {
    error = Error(err);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(error, goog.debug.enhanceError);
    }
  } else {
    error = err;
  }
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(goog.debug.enhanceError);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  if (goog.STRICT_MODE_COMPATIBLE) {
    var stack = goog.debug.getNativeStackTrace_(goog.debug.getStacktraceSimple);
    if (stack) {
      return stack;
    }
  }
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getNativeStackTrace_ = function(fn) {
  var tempErr = new Error;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(tempErr, fn);
    return String(tempErr.stack);
  } else {
    try {
      throw tempErr;
    } catch (e) {
      tempErr = e;
    }
    var stack = tempErr.stack;
    if (stack) {
      return String(stack);
    }
  }
  return null;
};
goog.debug.getStacktrace = function(opt_fn) {
  var stack;
  if (goog.STRICT_MODE_COMPATIBLE) {
    var contextFn = opt_fn || goog.debug.getStacktrace;
    stack = goog.debug.getNativeStackTrace_(contextFn);
  }
  if (!stack) {
    stack = goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
  }
  return stack;
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;args && i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.debug.LogRecord.prototype.exceptionText_ = null;
goog.define("goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS", true);
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
  delete this.exceptionText_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.getExceptionText = function() {
  return this.exceptionText_;
};
goog.debug.LogRecord.prototype.setExceptionText = function(text) {
  this.exceptionText_ = text;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.define("goog.debug.LogBuffer.CAPACITY", 0);
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Loggable");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Loggable;
goog.debug.Logger = function(name) {
  this.name_ = name;
  this.parent_ = null;
  this.level_ = null;
  this.children_ = null;
  this.handlers_ = null;
};
goog.debug.Logger.ROOT_LOGGER_NAME = "";
goog.define("goog.debug.Logger.ENABLE_HIERARCHY", true);
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      if (!this.handlers_) {
        this.handlers_ = [];
      }
      this.handlers_.push(handler);
    } else {
      goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootHandlers_.push(handler);
    }
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
    return!!handlers && goog.array.remove(handlers, handler);
  } else {
    return false;
  }
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      this.level_ = level;
    } else {
      goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootLevel_ = level;
    }
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return goog.debug.LOGGING_ENABLED ? this.level_ : goog.debug.Logger.Level.OFF;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.LOGGING_ENABLED) {
    return goog.debug.Logger.Level.OFF;
  }
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return goog.debug.LOGGING_ENABLED && level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(level)) {
    if (goog.isFunction(msg)) {
      msg = msg();
    }
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception, goog.debug.Logger.prototype.log));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception, opt_fnStackContext) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    var context;
    if (goog.STRICT_MODE_COMPATIBLE) {
      context = opt_fnStackContext || goog.debug.Logger.prototype.getLogRecord;
    } else {
      context = opt_fnStackContext || arguments.callee.caller;
    }
    logRecord.setException(opt_exception);
    logRecord.setExceptionText(goog.debug.exposeException(opt_exception, opt_fnStackContext || goog.debug.Logger.prototype.getLogRecord));
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger(goog.debug.Logger.ROOT_LOGGER_NAME);
    goog.debug.LogManager.loggers_[goog.debug.Logger.ROOT_LOGGER_NAME] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return(goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.log");
goog.provide("goog.log.Level");
goog.provide("goog.log.LogRecord");
goog.provide("goog.log.Logger");
goog.require("goog.debug");
goog.require("goog.debug.LogManager");
goog.require("goog.debug.LogRecord");
goog.require("goog.debug.Logger");
goog.define("goog.log.ENABLED", goog.debug.LOGGING_ENABLED);
goog.log.ROOT_LOGGER_NAME = goog.debug.Logger.ROOT_LOGGER_NAME;
goog.log.Logger = goog.debug.Logger;
goog.log.Level = goog.debug.Logger.Level;
goog.log.LogRecord = goog.debug.LogRecord;
goog.log.getLogger = function(name, opt_level) {
  if (goog.log.ENABLED) {
    var logger = goog.debug.LogManager.getLogger(name);
    if (opt_level && logger) {
      logger.setLevel(opt_level);
    }
    return logger;
  } else {
    return null;
  }
};
goog.log.addHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    logger.addHandler(handler);
  }
};
goog.log.removeHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    return logger.removeHandler(handler);
  } else {
    return false;
  }
};
goog.log.log = function(logger, level, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.log(level, msg, opt_exception);
  }
};
goog.log.error = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.severe(msg, opt_exception);
  }
};
goog.log.warning = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.warning(msg, opt_exception);
  }
};
goog.log.info = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.info(msg, opt_exception);
  }
};
goog.log.fine = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.fine(msg, opt_exception);
  }
};
goog.provide("goog.net.ErrorCode");
goog.net.ErrorCode = {NO_ERROR:0, ACCESS_DENIED:1, FILE_NOT_FOUND:2, FF_SILENT_ERROR:3, CUSTOM_ERROR:4, EXCEPTION:5, HTTP_ERROR:6, ABORT:7, TIMEOUT:8, OFFLINE:9};
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch(errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return "No Error";
    case goog.net.ErrorCode.ACCESS_DENIED:
      return "Access denied to content document";
    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return "File not found";
    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return "Firefox silently errored";
    case goog.net.ErrorCode.CUSTOM_ERROR:
      return "Application custom error";
    case goog.net.ErrorCode.EXCEPTION:
      return "An exception occurred";
    case goog.net.ErrorCode.HTTP_ERROR:
      return "Http response at 400 or 500 level";
    case goog.net.ErrorCode.ABORT:
      return "Request was aborted";
    case goog.net.ErrorCode.TIMEOUT:
      return "Request timed out";
    case goog.net.ErrorCode.OFFLINE:
      return "The resource is not available offline";
    default:
      return "Unrecognized error code";
  }
};
goog.provide("goog.net.EventType");
goog.net.EventType = {COMPLETE:"complete", SUCCESS:"success", ERROR:"error", ABORT:"abort", READY:"ready", READY_STATE_CHANGE:"readystatechange", TIMEOUT:"timeout", INCREMENTAL_DATA:"incrementaldata", PROGRESS:"progress"};
goog.provide("goog.net.HttpStatus");
goog.net.HttpStatus = {CONTINUE:100, SWITCHING_PROTOCOLS:101, OK:200, CREATED:201, ACCEPTED:202, NON_AUTHORITATIVE_INFORMATION:203, NO_CONTENT:204, RESET_CONTENT:205, PARTIAL_CONTENT:206, MULTIPLE_CHOICES:300, MOVED_PERMANENTLY:301, FOUND:302, SEE_OTHER:303, NOT_MODIFIED:304, USE_PROXY:305, TEMPORARY_REDIRECT:307, BAD_REQUEST:400, UNAUTHORIZED:401, PAYMENT_REQUIRED:402, FORBIDDEN:403, NOT_FOUND:404, METHOD_NOT_ALLOWED:405, NOT_ACCEPTABLE:406, PROXY_AUTHENTICATION_REQUIRED:407, REQUEST_TIMEOUT:408, 
CONFLICT:409, GONE:410, LENGTH_REQUIRED:411, PRECONDITION_FAILED:412, REQUEST_ENTITY_TOO_LARGE:413, REQUEST_URI_TOO_LONG:414, UNSUPPORTED_MEDIA_TYPE:415, REQUEST_RANGE_NOT_SATISFIABLE:416, EXPECTATION_FAILED:417, INTERNAL_SERVER_ERROR:500, NOT_IMPLEMENTED:501, BAD_GATEWAY:502, SERVICE_UNAVAILABLE:503, GATEWAY_TIMEOUT:504, HTTP_VERSION_NOT_SUPPORTED:505, QUIRK_IE_NO_CONTENT:1223};
goog.net.HttpStatus.isSuccess = function(status) {
  switch(status) {
    case goog.net.HttpStatus.OK:
    ;
    case goog.net.HttpStatus.CREATED:
    ;
    case goog.net.HttpStatus.ACCEPTED:
    ;
    case goog.net.HttpStatus.NO_CONTENT:
    ;
    case goog.net.HttpStatus.PARTIAL_CONTENT:
    ;
    case goog.net.HttpStatus.NOT_MODIFIED:
    ;
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;
    default:
      return false;
  }
};
goog.provide("goog.net.XhrLike");
goog.net.XhrLike = function() {
};
goog.net.XhrLike.OrNative;
goog.net.XhrLike.prototype.onreadystatechange;
goog.net.XhrLike.prototype.responseText;
goog.net.XhrLike.prototype.responseXML;
goog.net.XhrLike.prototype.readyState;
goog.net.XhrLike.prototype.status;
goog.net.XhrLike.prototype.statusText;
goog.net.XhrLike.prototype.open = function(method, url, opt_async, opt_user, opt_password) {
};
goog.net.XhrLike.prototype.send = function(opt_data) {
};
goog.net.XhrLike.prototype.abort = function() {
};
goog.net.XhrLike.prototype.setRequestHeader = function(header, value) {
};
goog.net.XhrLike.prototype.getResponseHeader = function(header) {
};
goog.net.XhrLike.prototype.getAllResponseHeaders = function() {
};
goog.provide("goog.net.XmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.net.XmlHttpFactory = function() {
};
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ || (this.cachedOptions_ = this.internalGetOptions());
};
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;
goog.provide("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.require("goog.net.XmlHttpFactory");
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);
  this.xhrFactory_ = xhrFactory;
  this.optionsFactory_ = optionsFactory;
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_();
};
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_();
};
goog.provide("goog.net.DefaultXmlHttpFactory");
goog.provide("goog.net.XmlHttp");
goog.provide("goog.net.XmlHttp.OptionType");
goog.provide("goog.net.XmlHttp.ReadyState");
goog.provide("goog.net.XmlHttpDefines");
goog.require("goog.asserts");
goog.require("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance();
};
goog.define("goog.net.XmlHttp.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttpDefines = {};
goog.define("goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions();
};
goog.net.XmlHttp.OptionType = {USE_NULL_FUNCTION:0, LOCAL_REQUEST_ERROR:1};
goog.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
goog.net.XmlHttp.factory_;
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory(goog.asserts.assert(factory), goog.asserts.assert(optionsFactory)));
};
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory;
};
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this);
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if (progId) {
    return new ActiveXObject(progId);
  } else {
    return new XMLHttpRequest;
  }
};
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if (progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;
  }
  return options;
};
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_;
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR || goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR) {
    return "";
  }
  if (!this.ieProgId_ && typeof XMLHttpRequest == "undefined" && typeof ActiveXObject != "undefined") {
    var ACTIVE_X_IDENTS = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    for (var i = 0;i < ACTIVE_X_IDENTS.length;i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      try {
        new ActiveXObject(candidate);
        this.ieProgId_ = candidate;
        return candidate;
      } catch (e) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled," + " or MSXML might not be installed");
  }
  return(this.ieProgId_);
};
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory);
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  goog.uri.utils.phishingProtection_();
  return(uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.needsPhishingProtection_ = goog.userAgent.WEBKIT;
goog.uri.utils.phishingProtection_ = function() {
  if (goog.uri.utils.needsPhishingProtection_) {
    goog.uri.utils.needsPhishingProtection_ = false;
    var location = goog.global["location"];
    if (location) {
      var href = location["href"];
      if (href) {
        var domain = goog.uri.utils.getDomain(href);
        if (domain && domain != location["hostname"]) {
          goog.uri.utils.needsPhishingProtection_ = true;
          throw Error();
        }
      }
    }
  }
};
goog.uri.utils.decodeIfPossible_ = function(uri) {
  return uri && decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && self.location) {
    var protocol = self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri));
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri));
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, opt_value) {
  var paramArr = [uri, "\x26", key];
  if (goog.isDefAndNotNull(opt_value)) {
    paramArr.push("\x3d", goog.string.urlEncode(opt_value));
  }
  return goog.uri.utils.appendQueryData_(paramArr);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || followingChar == goog.uri.utils.CharCode_.EQUAL || followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return-1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.setPath = function(uri, path) {
  if (!goog.string.startsWith(path, "/")) {
    path = "/" + path;
  }
  var parts = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(parts[goog.uri.utils.ComponentIndex.SCHEME], parts[goog.uri.utils.ComponentIndex.USER_INFO], parts[goog.uri.utils.ComponentIndex.DOMAIN], parts[goog.uri.utils.ComponentIndex.PORT], path, parts[goog.uri.utils.ComponentIndex.QUERY_DATA], parts[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.net.XhrIo");
goog.provide("goog.net.XhrIo.ResponseType");
goog.require("goog.Timer");
goog.require("goog.array");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.EventTarget");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.HttpStatus");
goog.require("goog.net.XmlHttp");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.userAgent");
goog.forwardDeclare("goog.Uri");
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.net.XhrIo.base(this, "constructor");
  this.headers = new goog.structs.Map;
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;
  this.active_ = false;
  this.xhr_ = null;
  this.xhrOptions_ = null;
  this.lastUri_ = "";
  this.lastMethod_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastError_ = "";
  this.errorDispatched_ = false;
  this.inSend_ = false;
  this.inOpen_ = false;
  this.inAbort_ = false;
  this.timeoutInterval_ = 0;
  this.timeoutId_ = null;
  this.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;
  this.withCredentials_ = false;
  this.useXhr2Timeout_ = false;
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);
goog.net.XhrIo.ResponseType = {DEFAULT:"", TEXT:"text", DOCUMENT:"document", BLOB:"blob", ARRAY_BUFFER:"arraybuffer"};
goog.net.XhrIo.prototype.logger_ = goog.log.getLogger("goog.net.XhrIo");
goog.net.XhrIo.CONTENT_TYPE_HEADER = "Content-Type";
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;
goog.net.XhrIo.METHODS_WITH_FORM_DATA = ["POST", "PUT"];
goog.net.XhrIo.FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset\x3dutf-8";
goog.net.XhrIo.XHR2_TIMEOUT_ = "timeout";
goog.net.XhrIo.XHR2_ON_TIMEOUT_ = "ontimeout";
goog.net.XhrIo.sendInstances_ = [];
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_timeoutInterval, opt_withCredentials) {
  var x = new goog.net.XhrIo;
  goog.net.XhrIo.sendInstances_.push(x);
  if (opt_callback) {
    x.listen(goog.net.EventType.COMPLETE, opt_callback);
  }
  x.listenOnce(goog.net.EventType.READY, x.cleanupSend_);
  if (opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval);
  }
  if (opt_withCredentials) {
    x.setWithCredentials(opt_withCredentials);
  }
  x.send(url, opt_method, opt_content, opt_headers);
  return x;
};
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while (instances.length) {
    instances.pop().dispose();
  }
};
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = errorHandler.protectEntryPoint(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
};
goog.net.XhrIo.prototype.cleanupSend_ = function() {
  this.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, this);
};
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type;
};
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials;
};
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_;
};
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content, opt_headers) {
  if (this.xhr_) {
    throw Error("[goog.net.XhrIo] Object is active with another request\x3d" + this.lastUri_ + "; newUri\x3d" + url);
  }
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  this.lastUri_ = url;
  this.lastError_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);
  try {
    goog.log.fine(this.logger_, this.formatMsg_("Opening Xhr"));
    this.inOpen_ = true;
    this.xhr_.open(method, String(url), true);
    this.inOpen_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Error opening Xhr: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return;
  }
  var content = opt_content || "";
  var headers = this.headers.clone();
  if (opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value);
    });
  }
  var contentTypeKey = goog.array.find(headers.getKeys(), goog.net.XhrIo.isContentTypeHeader_);
  var contentIsFormData = goog.global["FormData"] && content instanceof goog.global["FormData"];
  if (goog.array.contains(goog.net.XhrIo.METHODS_WITH_FORM_DATA, method) && !contentTypeKey && !contentIsFormData) {
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);
  }
  headers.forEach(function(value, key) {
    this.xhr_.setRequestHeader(key, value);
  }, this);
  if (this.responseType_) {
    this.xhr_.responseType = this.responseType_;
  }
  if (goog.object.containsKey(this.xhr_, "withCredentials")) {
    this.xhr_.withCredentials = this.withCredentials_;
  }
  try {
    this.cleanUpTimeoutTimer_();
    if (this.timeoutInterval_ > 0) {
      this.useXhr2Timeout_ = goog.net.XhrIo.shouldUseXhr2Timeout_(this.xhr_);
      goog.log.fine(this.logger_, this.formatMsg_("Will abort after " + this.timeoutInterval_ + "ms if incomplete, xhr2 " + this.useXhr2Timeout_));
      if (this.useXhr2Timeout_) {
        this.xhr_[goog.net.XhrIo.XHR2_TIMEOUT_] = this.timeoutInterval_;
        this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = goog.bind(this.timeout_, this);
      } else {
        this.timeoutId_ = goog.Timer.callOnce(this.timeout_, this.timeoutInterval_, this);
      }
    }
    goog.log.fine(this.logger_, this.formatMsg_("Sending request"));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Send error: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
  }
};
goog.net.XhrIo.shouldUseXhr2Timeout_ = function(xhr) {
  return goog.userAgent.IE && goog.userAgent.isVersionOrHigher(9) && goog.isNumber(xhr[goog.net.XhrIo.XHR2_TIMEOUT_]) && goog.isDef(xhr[goog.net.XhrIo.XHR2_ON_TIMEOUT_]);
};
goog.net.XhrIo.isContentTypeHeader_ = function(header) {
  return goog.string.caseInsensitiveEquals(goog.net.XhrIo.CONTENT_TYPE_HEADER, header);
};
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();
};
goog.net.XhrIo.prototype.timeout_ = function() {
  if (typeof goog == "undefined") {
  } else {
    if (this.xhr_) {
      this.lastError_ = "Timed out after " + this.timeoutInterval_ + "ms, aborting";
      this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
      goog.log.fine(this.logger_, this.formatMsg_(this.lastError_));
      this.dispatchEvent(goog.net.EventType.TIMEOUT);
      this.abort(goog.net.ErrorCode.TIMEOUT);
    }
  }
};
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if (this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_();
};
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if (!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
  }
};
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if (this.xhr_ && this.active_) {
    goog.log.fine(this.logger_, this.formatMsg_("Aborting"));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_();
  }
};
goog.net.XhrIo.prototype.disposeInternal = function() {
  if (this.xhr_) {
    if (this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false;
    }
    this.cleanUpXhr_(true);
  }
  goog.net.XhrIo.base(this, "disposeInternal");
};
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if (this.isDisposed()) {
    return;
  }
  if (!this.inOpen_ && !this.inSend_ && !this.inAbort_) {
    this.onReadyStateChangeEntryPoint_();
  } else {
    this.onReadyStateChangeHelper_();
  }
};
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_();
};
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if (!this.active_) {
    return;
  }
  if (typeof goog == "undefined") {
  } else {
    if (this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE && this.getStatus() == 2) {
      goog.log.fine(this.logger_, this.formatMsg_("Local request error detected and ignored"));
    } else {
      if (this.inSend_ && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
        goog.Timer.callOnce(this.onReadyStateChange_, 0, this);
        return;
      }
      this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);
      if (this.isComplete()) {
        goog.log.fine(this.logger_, this.formatMsg_("Request complete"));
        this.active_ = false;
        try {
          if (this.isSuccess()) {
            this.dispatchEvent(goog.net.EventType.COMPLETE);
            this.dispatchEvent(goog.net.EventType.SUCCESS);
          } else {
            this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
            this.lastError_ = this.getStatusText() + " [" + this.getStatus() + "]";
            this.dispatchErrors_();
          }
        } finally {
          this.cleanUpXhr_();
        }
      }
    }
  }
};
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if (this.xhr_) {
    this.cleanUpTimeoutTimer_();
    var xhr = this.xhr_;
    var clearedOnReadyStateChange = this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ? goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;
    if (!opt_fromDispose) {
      this.dispatchEvent(goog.net.EventType.READY);
    }
    try {
      xhr.onreadystatechange = clearedOnReadyStateChange;
    } catch (e) {
      goog.log.error(this.logger_, "Problem encountered resetting onreadystatechange: " + e.message);
    }
  }
};
goog.net.XhrIo.prototype.cleanUpTimeoutTimer_ = function() {
  if (this.xhr_ && this.useXhr2Timeout_) {
    this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = null;
  }
  if (goog.isNumber(this.timeoutId_)) {
    goog.Timer.clear(this.timeoutId_);
    this.timeoutId_ = null;
  }
};
goog.net.XhrIo.prototype.isActive = function() {
  return!!this.xhr_;
};
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;
};
goog.net.XhrIo.prototype.isSuccess = function() {
  var status = this.getStatus();
  return goog.net.HttpStatus.isSuccess(status) || status === 0 && !this.isLastUriEffectiveSchemeHttp_();
};
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));
  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);
};
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ? (this.xhr_.readyState) : goog.net.XmlHttp.ReadyState.UNINITIALIZED;
};
goog.net.XhrIo.prototype.getStatus = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.status : -1;
  } catch (e) {
    return-1;
  }
};
goog.net.XhrIo.prototype.getStatusText = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.statusText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get status: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_);
};
goog.net.XhrIo.prototype.getResponseText = function() {
  try {
    return this.xhr_ ? this.xhr_.responseText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseText: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getResponseBody = function() {
  try {
    if (this.xhr_ && "responseBody" in this.xhr_) {
      return this.xhr_["responseBody"];
    }
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseBody: " + e.message);
  }
  return null;
};
goog.net.XhrIo.prototype.getResponseXml = function() {
  try {
    return this.xhr_ ? this.xhr_.responseXML : null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseXML: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if (!this.xhr_) {
    return undefined;
  }
  var responseText = this.xhr_.responseText;
  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length);
  }
  return goog.json.parse(responseText);
};
goog.net.XhrIo.prototype.getResponse = function() {
  try {
    if (!this.xhr_) {
      return null;
    }
    if ("response" in this.xhr_) {
      return this.xhr_.response;
    }
    switch(this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      ;
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if ("mozResponseArrayBuffer" in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer;
        }
      ;
    }
    goog.log.error(this.logger_, "Response type " + this.responseType_ + " is not " + "supported on this browser");
    return null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get response: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ? this.xhr_.getResponseHeader(key) : undefined;
};
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ? this.xhr_.getAllResponseHeaders() : "";
};
goog.net.XhrIo.prototype.getResponseHeaders = function() {
  var headersObject = {};
  var headersArray = this.getAllResponseHeaders().split("\r\n");
  for (var i = 0;i < headersArray.length;i++) {
    if (goog.string.isEmpty(headersArray[i])) {
      continue;
    }
    var keyValue = goog.string.splitLimit(headersArray[i], ": ", 2);
    if (headersObject[keyValue[0]]) {
      headersObject[keyValue[0]] += ", " + keyValue[1];
    } else {
      headersObject[keyValue[0]] = keyValue[1];
    }
  }
  return headersObject;
};
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ : String(this.lastError_);
};
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + " [" + this.lastMethod_ + " " + this.lastUri_ + " " + this.getStatus() + "]";
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
});
goog.provide("shoreleave.remotes.protocols");
goog.require("cljs.core");
shoreleave.remotes.protocols.ITransportData = function() {
  var obj15329 = {};
  return obj15329;
}();
shoreleave.remotes.protocols._data_str = function _data_str(t) {
  if (function() {
    var and__3628__auto__ = t;
    if (and__3628__auto__) {
      return t.shoreleave$remotes$protocols$ITransportData$_data_str$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return t.shoreleave$remotes$protocols$ITransportData$_data_str$arity$1(t);
  } else {
    var x__4277__auto__ = t == null ? null : t;
    return function() {
      var or__3640__auto__ = shoreleave.remotes.protocols._data_str[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = shoreleave.remotes.protocols._data_str["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransportData.-data-str", t);
        }
      }
    }().call(null, t);
  }
};
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.require("goog.uri.utils.StandardQueryParam");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.scheme_ = "";
goog.Uri.prototype.userInfo_ = "";
goog.Uri.prototype.domain_ = "";
goog.Uri.prototype.port_ = null;
goog.Uri.prototype.path_ = "";
goog.Uri.prototype.queryData_;
goog.Uri.prototype.fragment_ = "";
goog.Uri.prototype.isReadOnly_ = false;
goog.Uri.prototype.ignoreCase_ = false;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_), ":");
  }
  var domain = this.getDomain();
  if (domain) {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_), "@");
    }
    out.push(goog.string.urlEncode(domain));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return!!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return!!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return!!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return!!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, (values));
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return(this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return!!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return(!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val) {
  return val ? decodeURIComponent(val) : "";
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra) {
  if (goog.isString(unescapedPart)) {
    return encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var pairs = this.encodedQuery_.split("\x26");
      for (var i = 0;i < pairs.length;i++) {
        var indexOfEquals = pairs[i].indexOf("\x3d");
        var name = null;
        var value = null;
        if (indexOfEquals >= 0) {
          name = pairs[i].substring(0, indexOfEquals);
          value = pairs[i].substring(indexOfEquals + 1);
        } else {
          name = pairs[i];
        }
        name = goog.string.urlDecode(name);
        name = this.getKeyName_(name);
        this.add(name, value ? goog.string.urlDecode(value) : "");
      }
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.keyMap_ = null;
goog.Uri.QueryData.prototype.count_ = null;
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (goog.isString(opt_key)) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = (this.keyMap_.getValues());
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  this.keyMap_.forEach(function(value, key) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    this.keyMap_.forEach(function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
goog.provide("goog.net.Cookies");
goog.provide("goog.net.cookies");
goog.net.Cookies = function(context) {
  this.document_ = context;
};
goog.net.Cookies.MAX_COOKIE_LENGTH = 3950;
goog.net.Cookies.SPLIT_RE_ = /\s*;\s*/;
goog.net.Cookies.prototype.isEnabled = function() {
  return navigator.cookieEnabled;
};
goog.net.Cookies.prototype.isValidName = function(name) {
  return!/[;=\s]/.test(name);
};
goog.net.Cookies.prototype.isValidValue = function(value) {
  return!/[;\r\n]/.test(value);
};
goog.net.Cookies.prototype.set = function(name, value, opt_maxAge, opt_path, opt_domain, opt_secure) {
  if (!this.isValidName(name)) {
    throw Error('Invalid cookie name "' + name + '"');
  }
  if (!this.isValidValue(value)) {
    throw Error('Invalid cookie value "' + value + '"');
  }
  if (!goog.isDef(opt_maxAge)) {
    opt_maxAge = -1;
  }
  var domainStr = opt_domain ? ";domain\x3d" + opt_domain : "";
  var pathStr = opt_path ? ";path\x3d" + opt_path : "";
  var secureStr = opt_secure ? ";secure" : "";
  var expiresStr;
  if (opt_maxAge < 0) {
    expiresStr = "";
  } else {
    if (opt_maxAge == 0) {
      var pastDate = new Date(1970, 1, 1);
      expiresStr = ";expires\x3d" + pastDate.toUTCString();
    } else {
      var futureDate = new Date(goog.now() + opt_maxAge * 1E3);
      expiresStr = ";expires\x3d" + futureDate.toUTCString();
    }
  }
  this.setCookie_(name + "\x3d" + value + domainStr + pathStr + expiresStr + secureStr);
};
goog.net.Cookies.prototype.get = function(name, opt_default) {
  var nameEq = name + "\x3d";
  var parts = this.getParts_();
  for (var i = 0, part;part = parts[i];i++) {
    if (part.lastIndexOf(nameEq, 0) == 0) {
      return part.substr(nameEq.length);
    }
    if (part == name) {
      return "";
    }
  }
  return opt_default;
};
goog.net.Cookies.prototype.remove = function(name, opt_path, opt_domain) {
  var rv = this.containsKey(name);
  this.set(name, "", 0, opt_path, opt_domain);
  return rv;
};
goog.net.Cookies.prototype.getKeys = function() {
  return this.getKeyValues_().keys;
};
goog.net.Cookies.prototype.getValues = function() {
  return this.getKeyValues_().values;
};
goog.net.Cookies.prototype.isEmpty = function() {
  return!this.getCookie_();
};
goog.net.Cookies.prototype.getCount = function() {
  var cookie = this.getCookie_();
  if (!cookie) {
    return 0;
  }
  return this.getParts_().length;
};
goog.net.Cookies.prototype.containsKey = function(key) {
  return goog.isDef(this.get(key));
};
goog.net.Cookies.prototype.containsValue = function(value) {
  var values = this.getKeyValues_().values;
  for (var i = 0;i < values.length;i++) {
    if (values[i] == value) {
      return true;
    }
  }
  return false;
};
goog.net.Cookies.prototype.clear = function() {
  var keys = this.getKeyValues_().keys;
  for (var i = keys.length - 1;i >= 0;i--) {
    this.remove(keys[i]);
  }
};
goog.net.Cookies.prototype.setCookie_ = function(s) {
  this.document_.cookie = s;
};
goog.net.Cookies.prototype.getCookie_ = function() {
  return this.document_.cookie;
};
goog.net.Cookies.prototype.getParts_ = function() {
  return(this.getCookie_() || "").split(goog.net.Cookies.SPLIT_RE_);
};
goog.net.Cookies.prototype.getKeyValues_ = function() {
  var parts = this.getParts_();
  var keys = [], values = [], index, part;
  for (var i = 0;part = parts[i];i++) {
    index = part.indexOf("\x3d");
    if (index == -1) {
      keys.push("");
      values.push(part);
    } else {
      keys.push(part.substring(0, index));
      values.push(part.substring(index + 1));
    }
  }
  return{keys:keys, values:values};
};
goog.net.cookies = new goog.net.Cookies(document);
goog.net.cookies.MAX_COOKIE_LENGTH = goog.net.Cookies.MAX_COOKIE_LENGTH;
goog.provide("shoreleave.browser.cookies");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string");
goog.require("goog.net.Cookies");
goog.require("goog.net.Cookies");
goog.net.Cookies.prototype.cljs$core$ITransientAssociative$ = true;
goog.net.Cookies.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$5 = function() {
  var G__15323__delegate = function(c, k, v, opts) {
    var c__$1 = this;
    var temp__4126__auto__ = function() {
      var and__3628__auto__ = c__$1.isValidName(cljs.core.name.call(null, k));
      if (cljs.core.truth_(and__3628__auto__)) {
        return cljs.core.name.call(null, k);
      } else {
        return and__3628__auto__;
      }
    }();
    if (cljs.core.truth_(temp__4126__auto__)) {
      var k__$1 = temp__4126__auto__;
      var map__15321 = cljs.core.apply.call(null, cljs.core.hash_map, opts);
      var map__15321__$1 = cljs.core.seq_QMARK_.call(null, map__15321) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15321) : map__15321;
      var secure_QMARK_ = cljs.core.get.call(null, map__15321__$1, new cljs.core.Keyword(null, "secure?", "secure?", -368029718));
      var domain = cljs.core.get.call(null, map__15321__$1, new cljs.core.Keyword(null, "domain", "domain", 1847214937));
      var path = cljs.core.get.call(null, map__15321__$1, new cljs.core.Keyword(null, "path", "path", -188191168));
      var max_age = cljs.core.get.call(null, map__15321__$1, new cljs.core.Keyword(null, "max-age", "max-age", -270129271));
      return c__$1.set(k__$1, v, max_age, path, domain, secure_QMARK_);
    } else {
      return null;
    }
  };
  var G__15323 = function(c, k, v, var_args) {
    var opts = null;
    if (arguments.length > 3) {
      opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return G__15323__delegate.call(this, c, k, v, opts);
  };
  G__15323.cljs$lang$maxFixedArity = 3;
  G__15323.cljs$lang$applyTo = function(arglist__15324) {
    var c = cljs.core.first(arglist__15324);
    arglist__15324 = cljs.core.next(arglist__15324);
    var k = cljs.core.first(arglist__15324);
    arglist__15324 = cljs.core.next(arglist__15324);
    var v = cljs.core.first(arglist__15324);
    var opts = cljs.core.rest(arglist__15324);
    return G__15323__delegate(c, k, v, opts);
  };
  G__15323.cljs$core$IFn$_invoke$arity$variadic = G__15323__delegate;
  return G__15323;
}();
goog.net.Cookies.prototype.cljs$core$ILookup$ = true;
goog.net.Cookies.prototype.cljs$core$ILookup$_lookup$arity$2 = function(c, k) {
  var c__$1 = this;
  return cljs.core._lookup.call(null, c__$1, k, null);
};
goog.net.Cookies.prototype.cljs$core$ILookup$_lookup$arity$3 = function(c, k, not_found) {
  var c__$1 = this;
  var v = c__$1.get(cljs.core.name.call(null, k), not_found);
  if (typeof v === "string") {
    return goog.string.urlDecode(v);
  } else {
    return v;
  }
};
goog.net.Cookies.prototype.cljs$core$ITransientMap$ = true;
goog.net.Cookies.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$4 = function() {
  var G__15325__delegate = function(c, k, opts) {
    var c__$1 = this;
    var temp__4126__auto__ = function() {
      var and__3628__auto__ = c__$1.isValidName(cljs.core.name.call(null, k));
      if (cljs.core.truth_(and__3628__auto__)) {
        return cljs.core.name.call(null, k);
      } else {
        return and__3628__auto__;
      }
    }();
    if (cljs.core.truth_(temp__4126__auto__)) {
      var k__$1 = temp__4126__auto__;
      var map__15322 = cljs.core.apply.call(null, cljs.core.hash_map, opts);
      var map__15322__$1 = cljs.core.seq_QMARK_.call(null, map__15322) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15322) : map__15322;
      var domain = cljs.core.get.call(null, map__15322__$1, new cljs.core.Keyword(null, "domain", "domain", 1847214937));
      var path = cljs.core.get.call(null, map__15322__$1, new cljs.core.Keyword(null, "path", "path", -188191168));
      return c__$1.remove(k__$1, path, domain);
    } else {
      return null;
    }
  };
  var G__15325 = function(c, k, var_args) {
    var opts = null;
    if (arguments.length > 2) {
      opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return G__15325__delegate.call(this, c, k, opts);
  };
  G__15325.cljs$lang$maxFixedArity = 2;
  G__15325.cljs$lang$applyTo = function(arglist__15326) {
    var c = cljs.core.first(arglist__15326);
    arglist__15326 = cljs.core.next(arglist__15326);
    var k = cljs.core.first(arglist__15326);
    var opts = cljs.core.rest(arglist__15326);
    return G__15325__delegate(c, k, opts);
  };
  G__15325.cljs$core$IFn$_invoke$arity$variadic = G__15325__delegate;
  return G__15325;
}();
goog.net.Cookies.prototype.cljs$core$IPrintWithWriter$ = true;
goog.net.Cookies.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(c, writer, opts) {
  var c__$1 = this;
  return cljs.core._write.call(null, writer, cljs.core._persistent_BANG_.call(null, c__$1));
};
goog.net.Cookies.prototype.cljs$core$ICounted$ = true;
goog.net.Cookies.prototype.cljs$core$ICounted$_count$arity$1 = function(c) {
  var c__$1 = this;
  return c__$1.getCount();
};
goog.net.Cookies.prototype.cljs$core$IHash$ = true;
goog.net.Cookies.prototype.cljs$core$IHash$_hash$arity$1 = function(c) {
  var c__$1 = this;
  return cljs.core._hash.call(null, cljs.core._persistent_BANG_.call(null, c__$1));
};
goog.net.Cookies.prototype.cljs$core$ITransientCollection$ = true;
goog.net.Cookies.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(c) {
  var c__$1 = this;
  return shoreleave.browser.cookies.as_hash_map.call(null, c__$1);
};
goog.net.Cookies.prototype.cljs$core$IAssociative$ = true;
goog.net.Cookies.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(c, k, v) {
  var c__$1 = this;
  return cljs.core._assoc.call(null, cljs.core._persistent_BANG_.call(null, c__$1), k, v);
};
goog.net.Cookies.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(c, k) {
  var c__$1 = this;
  return c__$1.containsKey(cljs.core.name.call(null, k));
};
goog.net.Cookies.prototype.cljs$core$ISeqable$ = true;
goog.net.Cookies.prototype.cljs$core$ISeqable$_seq$arity$1 = function(c) {
  var c__$1 = this;
  return cljs.core.map.call(null, cljs.core.vector, c__$1.getKeys(), c__$1.getValues());
};
goog.net.Cookies.prototype.cljs$core$IFn$ = true;
goog.net.Cookies.prototype.call = function() {
  var G__15327 = null;
  var G__15327__2 = function(self__, k) {
    var self____$1 = this;
    var c = self____$1;
    return cljs.core._lookup.call(null, c, k);
  };
  var G__15327__3 = function(self__, k, not_found) {
    var self____$1 = this;
    var c = self____$1;
    return cljs.core._lookup.call(null, c, k, not_found);
  };
  G__15327 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15327__2.call(this, self__, k);
      case 3:
        return G__15327__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__15327.cljs$core$IFn$_invoke$arity$2 = G__15327__2;
  G__15327.cljs$core$IFn$_invoke$arity$3 = G__15327__3;
  return G__15327;
}();
goog.net.Cookies.prototype.apply = function(self__, args15320) {
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args15320)));
};
goog.net.Cookies.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var c = this;
  return cljs.core._lookup.call(null, c, k);
};
goog.net.Cookies.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var c = this;
  return cljs.core._lookup.call(null, c, k, not_found);
};
shoreleave.browser.cookies.cookies = new goog.net.Cookies(document);
shoreleave.browser.cookies.as_hash_map = function() {
  var as_hash_map = null;
  var as_hash_map__0 = function() {
    return as_hash_map.call(null, shoreleave.browser.cookies.cookies);
  };
  var as_hash_map__1 = function(cks) {
    return cljs.core.zipmap.call(null, cks.getKeys(), cks.getValues());
  };
  as_hash_map = function(cks) {
    switch(arguments.length) {
      case 0:
        return as_hash_map__0.call(this);
      case 1:
        return as_hash_map__1.call(this, cks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  as_hash_map.cljs$core$IFn$_invoke$arity$0 = as_hash_map__0;
  as_hash_map.cljs$core$IFn$_invoke$arity$1 = as_hash_map__1;
  return as_hash_map;
}();
shoreleave.browser.cookies.cookies_enabled_QMARK_ = function() {
  var cookies_enabled_QMARK_ = null;
  var cookies_enabled_QMARK___0 = function() {
    return cookies_enabled_QMARK_.call(null, shoreleave.browser.cookies.cookies);
  };
  var cookies_enabled_QMARK___1 = function(cks) {
    return cks.isEnabled();
  };
  cookies_enabled_QMARK_ = function(cks) {
    switch(arguments.length) {
      case 0:
        return cookies_enabled_QMARK___0.call(this);
      case 1:
        return cookies_enabled_QMARK___1.call(this, cks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cookies_enabled_QMARK_.cljs$core$IFn$_invoke$arity$0 = cookies_enabled_QMARK___0;
  cookies_enabled_QMARK_.cljs$core$IFn$_invoke$arity$1 = cookies_enabled_QMARK___1;
  return cookies_enabled_QMARK_;
}();
shoreleave.browser.cookies.empty_BANG_ = function empty_BANG_(cks) {
  return cks.clear();
};
goog.provide("shoreleave.remotes.common");
goog.require("cljs.core");
goog.require("shoreleave.remotes.protocols");
goog.require("shoreleave.remotes.protocols");
goog.require("goog.net.EventType");
goog.require("goog.string");
goog.require("goog.Uri.QueryData");
goog.require("shoreleave.browser.cookies");
goog.require("goog.Uri.QueryData");
goog.require("clojure.string");
goog.require("goog.net.EventType");
goog.require("shoreleave.browser.cookies");
goog.require("goog.structs");
goog.require("goog.structs");
goog.require("clojure.string");
goog.require("goog.string");
shoreleave.remotes.common.event_types = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "on-complete", "on-complete", -1531183971), goog.net.EventType.COMPLETE, new cljs.core.Keyword(null, "on-success", "on-success", 1786904109), goog.net.EventType.SUCCESS, new cljs.core.Keyword(null, "on-error", "on-error", 1728533530), goog.net.EventType.ERROR, new cljs.core.Keyword(null, "on-timeout", "on-timeout", -672710385), goog.net.EventType.TIMEOUT, new cljs.core.Keyword(null, "on-ready", 
"on-ready", 628441937), goog.net.EventType.READY], null);
shoreleave.remotes.common._STAR_csrf_token_name_STAR_ = new cljs.core.Keyword(null, "__anti-forgery-token", "__anti-forgery-token", -1690887812);
shoreleave.remotes.common.rand_id_str = function rand_id_str() {
  return goog.string.getRandomString();
};
shoreleave.remotes.common.__GT_url_method = function __GT_url_method(m) {
  return clojure.string.upper_case.call(null, cljs.core.name.call(null, m));
};
shoreleave.remotes.common.parse_route = function parse_route(route) {
  if (typeof route === "string") {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["GET", route], null);
  } else {
    if (cljs.core.vector_QMARK_.call(null, route)) {
      var vec__15319 = route;
      var m = cljs.core.nth.call(null, vec__15319, 0, null);
      var u = cljs.core.nth.call(null, vec__15319, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [shoreleave.remotes.common.__GT_url_method.call(null, m), u], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["GET", route], null);
    }
  }
};
shoreleave.remotes.common.__GT_simple_callback = function __GT_simple_callback(callback) {
  if (cljs.core.truth_(callback)) {
    return function(req) {
      var data = req.getResponseText();
      return callback.call(null, data);
    };
  } else {
    return null;
  }
};
shoreleave.remotes.common.csrf_protected = function csrf_protected(content_map, method) {
  var temp__4124__auto__ = function() {
    var and__3628__auto__ = cljs.core._EQ_.call(null, method, "POST");
    if (and__3628__auto__) {
      return shoreleave.remotes.common._STAR_csrf_token_name_STAR_.call(null, shoreleave.browser.cookies.cookies);
    } else {
      return and__3628__auto__;
    }
  }();
  if (cljs.core.truth_(temp__4124__auto__)) {
    var anti_forgery_token = temp__4124__auto__;
    return cljs.core.merge.call(null, content_map, new cljs.core.PersistentArrayMap.fromArray([shoreleave.remotes.common._STAR_csrf_token_name_STAR_, anti_forgery_token], true, false));
  } else {
    return content_map;
  }
};
shoreleave.remotes.protocols.ITransportData["_"] = true;
shoreleave.remotes.protocols._data_str["_"] = function(t) {
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(goog.Uri.QueryData.createFromMap(new goog.structs.Map(cljs.core.clj__GT_js.call(null, t))));
};
cljs.core.PersistentTreeMap.prototype.shoreleave$remotes$protocols$ITransportData$ = true;
cljs.core.PersistentTreeMap.prototype.shoreleave$remotes$protocols$ITransportData$_data_str$arity$1 = function(t) {
  var t__$1 = this;
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(goog.Uri.QueryData.createFromMap(new goog.structs.Map(cljs.core.clj__GT_js.call(null, t__$1))));
};
cljs.core.PersistentHashMap.prototype.shoreleave$remotes$protocols$ITransportData$ = true;
cljs.core.PersistentHashMap.prototype.shoreleave$remotes$protocols$ITransportData$_data_str$arity$1 = function(t) {
  var t__$1 = this;
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(goog.Uri.QueryData.createFromMap(new goog.structs.Map(cljs.core.clj__GT_js.call(null, t__$1))));
};
cljs.core.PersistentArrayMap.prototype.shoreleave$remotes$protocols$ITransportData$ = true;
cljs.core.PersistentArrayMap.prototype.shoreleave$remotes$protocols$ITransportData$_data_str$arity$1 = function(t) {
  var t__$1 = this;
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(goog.Uri.QueryData.createFromMap(new goog.structs.Map(cljs.core.clj__GT_js.call(null, t__$1))));
};
shoreleave.remotes.protocols.ITransportData["string"] = true;
shoreleave.remotes.protocols._data_str["string"] = function(t) {
  return t;
};
shoreleave.remotes.common.__GT_data_str = function __GT_data_str(d) {
  return shoreleave.remotes.protocols._data_str.call(null, d);
};
goog.provide("shoreleave.remotes.xhr");
goog.require("cljs.core");
goog.require("shoreleave.remotes.common");
goog.require("shoreleave.remotes.common");
goog.require("goog.events");
goog.require("goog.events");
goog.require("goog.net.XhrIo");
goog.require("goog.net.XhrIo");
shoreleave.remotes.xhr.xhr = function() {
  var xhr__delegate = function(route, opts) {
    var req = new goog.net.XhrIo;
    var vec__15315 = shoreleave.remotes.common.parse_route.call(null, route);
    var method = cljs.core.nth.call(null, vec__15315, 0, null);
    var uri = cljs.core.nth.call(null, vec__15315, 1, null);
    var map__15316 = cljs.core.apply.call(null, cljs.core.hash_map, opts);
    var map__15316__$1 = cljs.core.seq_QMARK_.call(null, map__15316) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15316) : map__15316;
    var headers = cljs.core.get.call(null, map__15316__$1, new cljs.core.Keyword(null, "headers", "headers", -835030129));
    var content = cljs.core.get.call(null, map__15316__$1, new cljs.core.Keyword(null, "content", "content", 15833224));
    var on_error = cljs.core.get.call(null, map__15316__$1, new cljs.core.Keyword(null, "on-error", "on-error", 1728533530));
    var on_success = cljs.core.get.call(null, map__15316__$1, new cljs.core.Keyword(null, "on-success", "on-success", 1786904109));
    var content__$1 = shoreleave.remotes.common.csrf_protected.call(null, content, method);
    var data = shoreleave.remotes.common.__GT_data_str.call(null, content__$1);
    var suc_callback = shoreleave.remotes.common.__GT_simple_callback.call(null, on_success);
    var err_callback = shoreleave.remotes.common.__GT_simple_callback.call(null, function() {
      var or__3640__auto__ = on_error;
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return function(or__3640__auto__, req, vec__15315, method, uri, map__15316, map__15316__$1, headers, content, on_error, on_success, content__$1, data, suc_callback) {
          return function(p1__15312_SHARP_) {
            return console.log("XHR ERROR: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__15312_SHARP_));
          };
        }(or__3640__auto__, req, vec__15315, method, uri, map__15316, map__15316__$1, headers, content, on_error, on_success, content__$1, data, suc_callback);
      }
    }());
    if (cljs.core.truth_(suc_callback)) {
      goog.events.listen(req, shoreleave.remotes.common.event_types.call(null, new cljs.core.Keyword(null, "on-success", "on-success", 1786904109)), function(req, vec__15315, method, uri, map__15316, map__15316__$1, headers, content, on_error, on_success, content__$1, data, suc_callback, err_callback) {
        return function() {
          return suc_callback.call(null, req);
        };
      }(req, vec__15315, method, uri, map__15316, map__15316__$1, headers, content, on_error, on_success, content__$1, data, suc_callback, err_callback));
      goog.events.listen(req, shoreleave.remotes.common.event_types.call(null, new cljs.core.Keyword(null, "on-error", "on-error", 1728533530)), function(req, vec__15315, method, uri, map__15316, map__15316__$1, headers, content, on_error, on_success, content__$1, data, suc_callback, err_callback) {
        return function() {
          return err_callback.call(null, req);
        };
      }(req, vec__15315, method, uri, map__15316, map__15316__$1, headers, content, on_error, on_success, content__$1, data, suc_callback, err_callback));
    } else {
    }
    return req.send(uri, method, data, cljs.core.truth_(headers) ? cljs.core.clj__GT_js.call(null, headers) : null);
  };
  var xhr = function(route, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return xhr__delegate.call(this, route, opts);
  };
  xhr.cljs$lang$maxFixedArity = 1;
  xhr.cljs$lang$applyTo = function(arglist__15317) {
    var route = cljs.core.first(arglist__15317);
    var opts = cljs.core.rest(arglist__15317);
    return xhr__delegate(route, opts);
  };
  xhr.cljs$core$IFn$_invoke$arity$variadic = xhr__delegate;
  return xhr;
}();
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj15187 = {};
  return obj15187;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__3628__auto__ = reader;
    if (and__3628__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4277__auto__ = reader == null ? null : reader;
    return function() {
      var or__3640__auto__ = cljs.reader.read_char[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.reader.read_char["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__3628__auto__ = reader;
    if (and__3628__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4277__auto__ = reader == null ? null : reader;
    return function() {
      var or__3640__auto__ = cljs.reader.unread[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.reader.unread["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__3640__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__3640__auto__)) {
    return or__3640__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__15188) {
    var rdr = cljs.core.first(arglist__15188);
    var msg = cljs.core.rest(arglist__15188);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__3628__auto__ = !(ch === "#");
  if (and__3628__auto__) {
    var and__3628__auto____$1 = !(ch === "'");
    if (and__3628__auto____$1) {
      var and__3628__auto____$2 = !(ch === ":");
      if (and__3628__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__3628__auto____$2;
      }
    } else {
      return and__3628__auto____$1;
    }
  } else {
    return and__3628__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__15189 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__15190 = cljs.reader.read_char.call(null, rdr);
      sb = G__15189;
      ch = G__15190;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var ie8_fix = groups[2];
  var zero = cljs.core._EQ_.call(null, ie8_fix, "") ? null : ie8_fix;
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : [null, null];
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return-parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__15191 = cljs.reader.read_char.call(null, rdr);
      ch = G__15191;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4124__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var macrofn = temp__4124__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__15192 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__15192;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__15193 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__15193;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4124__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var obj = temp__4124__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__3640__auto__ = ch == null;
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__3640__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__15194 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__15195 = cljs.reader.read_char.call(null, reader);
      buffer = G__15194;
      ch = G__15195;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__15196 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__15197 = cljs.reader.read_char.call(null, reader);
        buffer = G__15196;
        ch = G__15197;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__15198 = function() {
            buffer.append(ch);
            return buffer;
          }();
          var G__15199 = cljs.reader.read_char.call(null, reader);
          buffer = G__15198;
          ch = G__15199;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__15204 = function() {
            var G__15202 = buffer;
            G__15202.append(nch);
            return G__15202;
          }();
          var G__15205 = cljs.reader.read_char.call(null, reader);
          buffer = G__15204;
          ch = G__15205;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__15206 = function() {
            var G__15203 = buffer;
            G__15203.append(ch);
            return G__15203;
          }();
          var G__15207 = cljs.reader.read_char.call(null, reader);
          buffer = G__15206;
          ch = G__15207;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        return not_found;
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        return f;
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__15209 = o;
    if (G__15209) {
      var bit__4304__auto__ = G__15209.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4304__auto__ || G__15209.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__15209.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__15209);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__15209);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__15210 = reader;
        var G__15211 = eof_is_error;
        var G__15212 = sentinel;
        var G__15213 = is_recursive;
        reader = G__15210;
        eof_is_error = G__15211;
        sentinel = G__15212;
        is_recursive = G__15213;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__15214 = cljs.reader.read_comment.call(null, reader, ch);
          var G__15215 = eof_is_error;
          var G__15216 = sentinel;
          var G__15217 = is_recursive;
          reader = G__15214;
          eof_is_error = G__15215;
          sentinel = G__15216;
          is_recursive = G__15217;
          continue;
        } else {
          var f = cljs.reader.macros.call(null, ch);
          var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : cljs.reader.read_symbol.call(null, reader, ch);
          if (res === reader) {
            var G__15218 = reader;
            var G__15219 = eof_is_error;
            var G__15220 = sentinel;
            var G__15221 = is_recursive;
            reader = G__15218;
            eof_is_error = G__15219;
            sentinel = G__15220;
            is_recursive = G__15221;
            continue;
          } else {
            return res;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      var b = new goog.string.StringBuffer(s);
      while (true) {
        if (b.getLength() < width) {
          var G__15222 = b.append("0");
          b = G__15222;
          continue;
        } else {
          return b.toString();
        }
        break;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(msg) + " Failed:  " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(low) + "\x3c\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + "\x3c\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(high));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__15224 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__15224, 0, null);
  var years = cljs.core.nth.call(null, vec__15224, 1, null);
  var months = cljs.core.nth.call(null, vec__15224, 2, null);
  var days = cljs.core.nth.call(null, vec__15224, 3, null);
  var hours = cljs.core.nth.call(null, vec__15224, 4, null);
  var minutes = cljs.core.nth.call(null, vec__15224, 5, null);
  var seconds = cljs.core.nth.call(null, vec__15224, 6, null);
  var fraction = cljs.core.nth.call(null, vec__15224, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__15224, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__15224, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__15224, 10, null);
  var v = vec__15224;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, "Unrecognized date/time syntax: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__3640__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__3640__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__3640__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__3640__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__3640__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__3640__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__3640__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__3640__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__3640__auto__)) {
        return or__3640__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4124__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var vec__15226 = temp__4124__auto__;
    var years = cljs.core.nth.call(null, vec__15226, 0, null);
    var months = cljs.core.nth.call(null, vec__15226, 1, null);
    var days = cljs.core.nth.call(null, vec__15226, 2, null);
    var hours = cljs.core.nth.call(null, vec__15226, 3, null);
    var minutes = cljs.core.nth.call(null, vec__15226, 4, null);
    var seconds = cljs.core.nth.call(null, vec__15226, 5, null);
    var ms = cljs.core.nth.call(null, vec__15226, 6, null);
    var offset = cljs.core.nth.call(null, vec__15226, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, "Unrecognized date/time syntax: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ts));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__15239_15251 = cljs.core.seq.call(null, form);
    var chunk__15240_15252 = null;
    var count__15241_15253 = 0;
    var i__15242_15254 = 0;
    while (true) {
      if (i__15242_15254 < count__15241_15253) {
        var x_15255 = cljs.core._nth.call(null, chunk__15240_15252, i__15242_15254);
        arr.push(x_15255);
        var G__15256 = seq__15239_15251;
        var G__15257 = chunk__15240_15252;
        var G__15258 = count__15241_15253;
        var G__15259 = i__15242_15254 + 1;
        seq__15239_15251 = G__15256;
        chunk__15240_15252 = G__15257;
        count__15241_15253 = G__15258;
        i__15242_15254 = G__15259;
        continue;
      } else {
        var temp__4126__auto___15260 = cljs.core.seq.call(null, seq__15239_15251);
        if (temp__4126__auto___15260) {
          var seq__15239_15261__$1 = temp__4126__auto___15260;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15239_15261__$1)) {
            var c__4410__auto___15262 = cljs.core.chunk_first.call(null, seq__15239_15261__$1);
            var G__15263 = cljs.core.chunk_rest.call(null, seq__15239_15261__$1);
            var G__15264 = c__4410__auto___15262;
            var G__15265 = cljs.core.count.call(null, c__4410__auto___15262);
            var G__15266 = 0;
            seq__15239_15251 = G__15263;
            chunk__15240_15252 = G__15264;
            count__15241_15253 = G__15265;
            i__15242_15254 = G__15266;
            continue;
          } else {
            var x_15267 = cljs.core.first.call(null, seq__15239_15261__$1);
            arr.push(x_15267);
            var G__15268 = cljs.core.next.call(null, seq__15239_15261__$1);
            var G__15269 = null;
            var G__15270 = 0;
            var G__15271 = 0;
            seq__15239_15251 = G__15268;
            chunk__15240_15252 = G__15269;
            count__15241_15253 = G__15270;
            i__15242_15254 = G__15271;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj15244 = {};
        return obj15244;
      }();
      var seq__15245_15272 = cljs.core.seq.call(null, form);
      var chunk__15246_15273 = null;
      var count__15247_15274 = 0;
      var i__15248_15275 = 0;
      while (true) {
        if (i__15248_15275 < count__15247_15274) {
          var vec__15249_15276 = cljs.core._nth.call(null, chunk__15246_15273, i__15248_15275);
          var k_15277 = cljs.core.nth.call(null, vec__15249_15276, 0, null);
          var v_15278 = cljs.core.nth.call(null, vec__15249_15276, 1, null);
          obj[cljs.core.name.call(null, k_15277)] = v_15278;
          var G__15279 = seq__15245_15272;
          var G__15280 = chunk__15246_15273;
          var G__15281 = count__15247_15274;
          var G__15282 = i__15248_15275 + 1;
          seq__15245_15272 = G__15279;
          chunk__15246_15273 = G__15280;
          count__15247_15274 = G__15281;
          i__15248_15275 = G__15282;
          continue;
        } else {
          var temp__4126__auto___15283 = cljs.core.seq.call(null, seq__15245_15272);
          if (temp__4126__auto___15283) {
            var seq__15245_15284__$1 = temp__4126__auto___15283;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__15245_15284__$1)) {
              var c__4410__auto___15285 = cljs.core.chunk_first.call(null, seq__15245_15284__$1);
              var G__15286 = cljs.core.chunk_rest.call(null, seq__15245_15284__$1);
              var G__15287 = c__4410__auto___15285;
              var G__15288 = cljs.core.count.call(null, c__4410__auto___15285);
              var G__15289 = 0;
              seq__15245_15272 = G__15286;
              chunk__15246_15273 = G__15287;
              count__15247_15274 = G__15288;
              i__15248_15275 = G__15289;
              continue;
            } else {
              var vec__15250_15290 = cljs.core.first.call(null, seq__15245_15284__$1);
              var k_15291 = cljs.core.nth.call(null, vec__15250_15290, 0, null);
              var v_15292 = cljs.core.nth.call(null, vec__15250_15290, 1, null);
              obj[cljs.core.name.call(null, k_15291)] = v_15292;
              var G__15293 = cljs.core.next.call(null, seq__15245_15284__$1);
              var G__15294 = null;
              var G__15295 = 0;
              var G__15296 = 0;
              seq__15245_15272 = G__15293;
              chunk__15246_15273 = G__15294;
              count__15247_15274 = G__15295;
              i__15248_15275 = G__15296;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, null, "JS literal expects a vector or map containing only string or unqualified keyword keys");
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag);
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag);
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("shoreleave.remotes.http_rpc");
goog.require("cljs.core");
goog.require("cljs.reader");
goog.require("cljs.reader");
goog.require("shoreleave.remotes.xhr");
goog.require("shoreleave.remotes.xhr");
shoreleave.remotes.http_rpc._STAR_remote_uri_STAR_ = "/_shoreleave";
shoreleave.remotes.http_rpc.remote_callback = function() {
  var remote_callback__delegate = function(remote, params, callback, extra_content) {
    if (cljs.core.map_QMARK_.call(null, callback)) {
      var map__15310 = callback;
      var map__15310__$1 = cljs.core.seq_QMARK_.call(null, map__15310) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15310) : map__15310;
      var on_error = cljs.core.get.call(null, map__15310__$1, new cljs.core.Keyword(null, "on-error", "on-error", 1728533530));
      var on_success = cljs.core.get.call(null, map__15310__$1, new cljs.core.Keyword(null, "on-success", "on-success", 1786904109));
      return shoreleave.remotes.xhr.xhr.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "post", "post", 269697687), shoreleave.remotes.http_rpc._STAR_remote_uri_STAR_], null), new cljs.core.Keyword(null, "content", "content", 15833224), cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "remote", "remote", -1593576576), remote, new cljs.core.Keyword(null, "params", "params", 710516235), 
      cljs.core.pr_str.call(null, params)], null), cljs.core.apply.call(null, cljs.core.hash_map, extra_content)), new cljs.core.Keyword(null, "on-success", "on-success", 1786904109), cljs.core.truth_(on_success) ? function(map__15310, map__15310__$1, on_error, on_success) {
        return function(data) {
          var data__$1 = cljs.core._EQ_.call(null, data, "") ? "nil" : data;
          return on_success.call(null, cljs.reader.read_string.call(null, data__$1));
        };
      }(map__15310, map__15310__$1, on_error, on_success) : null, new cljs.core.Keyword(null, "on-error", "on-error", 1728533530), cljs.core.truth_(on_error) ? function(map__15310, map__15310__$1, on_error, on_success) {
        return function(data) {
          var data__$1 = cljs.core._EQ_.call(null, data, "") ? "nil" : data;
          return on_error.call(null, cljs.reader.read_string.call(null, data__$1));
        };
      }(map__15310, map__15310__$1, on_error, on_success) : null);
    } else {
      return shoreleave.remotes.xhr.xhr.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "post", "post", 269697687), shoreleave.remotes.http_rpc._STAR_remote_uri_STAR_], null), new cljs.core.Keyword(null, "content", "content", 15833224), cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "remote", "remote", -1593576576), remote, new cljs.core.Keyword(null, "params", "params", 710516235), 
      cljs.core.pr_str.call(null, params)], null), cljs.core.apply.call(null, cljs.core.hash_map, extra_content)), new cljs.core.Keyword(null, "on-success", "on-success", 1786904109), cljs.core.truth_(callback) ? function(data) {
        var data__$1 = cljs.core._EQ_.call(null, data, "") ? "nil" : data;
        return callback.call(null, cljs.reader.read_string.call(null, data__$1));
      } : null);
    }
  };
  var remote_callback = function(remote, params, callback, var_args) {
    var extra_content = null;
    if (arguments.length > 3) {
      extra_content = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return remote_callback__delegate.call(this, remote, params, callback, extra_content);
  };
  remote_callback.cljs$lang$maxFixedArity = 3;
  remote_callback.cljs$lang$applyTo = function(arglist__15311) {
    var remote = cljs.core.first(arglist__15311);
    arglist__15311 = cljs.core.next(arglist__15311);
    var params = cljs.core.first(arglist__15311);
    arglist__15311 = cljs.core.next(arglist__15311);
    var callback = cljs.core.first(arglist__15311);
    var extra_content = cljs.core.rest(arglist__15311);
    return remote_callback__delegate(remote, params, callback, extra_content);
  };
  remote_callback.cljs$core$IFn$_invoke$arity$variadic = remote_callback__delegate;
  return remote_callback;
}();
goog.provide("goog.dom.forms");
goog.require("goog.structs.Map");
goog.dom.forms.getFormDataMap = function(form) {
  var map = new goog.structs.Map;
  goog.dom.forms.getFormDataHelper_(form, map, goog.dom.forms.addFormDataToMap_);
  return map;
};
goog.dom.forms.getFormDataString = function(form) {
  var sb = [];
  goog.dom.forms.getFormDataHelper_(form, sb, goog.dom.forms.addFormDataToStringBuffer_);
  return sb.join("\x26");
};
goog.dom.forms.getFormDataHelper_ = function(form, result, fnAppend) {
  var els = form.elements;
  for (var el, i = 0;el = els[i];i++) {
    if (el.form != form || el.disabled || el.tagName.toLowerCase() == "fieldset") {
      continue;
    }
    var name = el.name;
    switch(el.type.toLowerCase()) {
      case "file":
      ;
      case "submit":
      ;
      case "reset":
      ;
      case "button":
        break;
      case "select-multiple":
        var values = goog.dom.forms.getValue(el);
        if (values != null) {
          for (var value, j = 0;value = values[j];j++) {
            fnAppend(result, name, value);
          }
        }
        break;
      default:
        var value = goog.dom.forms.getValue(el);
        if (value != null) {
          fnAppend(result, name, value);
        }
      ;
    }
  }
  var inputs = form.getElementsByTagName("input");
  for (var input, i = 0;input = inputs[i];i++) {
    if (input.form == form && input.type.toLowerCase() == "image") {
      name = input.name;
      fnAppend(result, name, input.value);
      fnAppend(result, name + ".x", "0");
      fnAppend(result, name + ".y", "0");
    }
  }
};
goog.dom.forms.addFormDataToMap_ = function(map, name, value) {
  var array = map.get(name);
  if (!array) {
    array = [];
    map.set(name, array);
  }
  array.push(value);
};
goog.dom.forms.addFormDataToStringBuffer_ = function(sb, name, value) {
  sb.push(encodeURIComponent(name) + "\x3d" + encodeURIComponent(value));
};
goog.dom.forms.hasFileInput = function(form) {
  var els = form.elements;
  for (var el, i = 0;el = els[i];i++) {
    if (!el.disabled && el.type && el.type.toLowerCase() == "file") {
      return true;
    }
  }
  return false;
};
goog.dom.forms.setDisabled = function(el, disabled) {
  if (el.tagName == "FORM") {
    var els = el.elements;
    for (var i = 0;el = els[i];i++) {
      goog.dom.forms.setDisabled(el, disabled);
    }
  } else {
    if (disabled == true) {
      el.blur();
    }
    el.disabled = disabled;
  }
};
goog.dom.forms.focusAndSelect = function(el) {
  el.focus();
  if (el.select) {
    el.select();
  }
};
goog.dom.forms.hasValue = function(el) {
  var value = goog.dom.forms.getValue(el);
  return!!value;
};
goog.dom.forms.hasValueByName = function(form, name) {
  var value = goog.dom.forms.getValueByName(form, name);
  return!!value;
};
goog.dom.forms.getValue = function(el) {
  var type = el.type;
  if (!goog.isDef(type)) {
    return null;
  }
  switch(type.toLowerCase()) {
    case "checkbox":
    ;
    case "radio":
      return goog.dom.forms.getInputChecked_(el);
    case "select-one":
      return goog.dom.forms.getSelectSingle_(el);
    case "select-multiple":
      return goog.dom.forms.getSelectMultiple_(el);
    default:
      return goog.isDef(el.value) ? el.value : null;
  }
};
goog.dom.$F = goog.dom.forms.getValue;
goog.dom.forms.getValueByName = function(form, name) {
  var els = form.elements[name];
  if (els) {
    if (els.type) {
      return goog.dom.forms.getValue(els);
    } else {
      for (var i = 0;i < els.length;i++) {
        var val = goog.dom.forms.getValue(els[i]);
        if (val) {
          return val;
        }
      }
    }
  }
  return null;
};
goog.dom.forms.getInputChecked_ = function(el) {
  return el.checked ? el.value : null;
};
goog.dom.forms.getSelectSingle_ = function(el) {
  var selectedIndex = el.selectedIndex;
  return selectedIndex >= 0 ? el.options[selectedIndex].value : null;
};
goog.dom.forms.getSelectMultiple_ = function(el) {
  var values = [];
  for (var option, i = 0;option = el.options[i];i++) {
    if (option.selected) {
      values.push(option.value);
    }
  }
  return values.length ? values : null;
};
goog.dom.forms.setValue = function(el, opt_value) {
  var type = el.type;
  if (goog.isDef(type)) {
    switch(type.toLowerCase()) {
      case "checkbox":
      ;
      case "radio":
        goog.dom.forms.setInputChecked_(el, (opt_value));
        break;
      case "select-one":
        goog.dom.forms.setSelectSingle_(el, (opt_value));
        break;
      case "select-multiple":
        goog.dom.forms.setSelectMultiple_(el, (opt_value));
        break;
      default:
        el.value = goog.isDefAndNotNull(opt_value) ? opt_value : "";
    }
  }
};
goog.dom.forms.setInputChecked_ = function(el, opt_value) {
  el.checked = opt_value ? "checked" : null;
};
goog.dom.forms.setSelectSingle_ = function(el, opt_value) {
  el.selectedIndex = -1;
  if (goog.isString(opt_value)) {
    for (var option, i = 0;option = el.options[i];i++) {
      if (option.value == opt_value) {
        option.selected = true;
        break;
      }
    }
  }
};
goog.dom.forms.setSelectMultiple_ = function(el, opt_value) {
  if (goog.isString(opt_value)) {
    opt_value = [opt_value];
  }
  for (var option, i = 0;option = el.options[i];i++) {
    option.selected = false;
    if (opt_value) {
      for (var value, j = 0;value = opt_value[j];j++) {
        if (option.value == value) {
          option.selected = true;
        }
      }
    }
  }
};
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || goog.userAgent.IE && goog.userAgent.isDocumentModeOrHigher(9) || goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9.1"), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || goog.userAgent.OPERA || goog.userAgent.WEBKIT, 
INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE, LEGACY_IE_RANGES:goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return "(" + this.x + ", " + this.y + ")";
  };
}
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += tx;
    if (goog.isNumber(opt_ty)) {
      this.y += opt_ty;
    }
  }
  return this;
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};
goog.math.Coordinate.prototype.rotateRadians = function(radians, opt_center) {
  var center = opt_center || new goog.math.Coordinate(0, 0);
  var x = this.x;
  var y = this.y;
  var cos = Math.cos(radians);
  var sin = Math.sin(radians);
  this.x = (x - center.x) * cos - (y - center.y) * sin + center.x;
  this.y = (x - center.x) * sin + (y - center.y) * cos + center.y;
};
goog.math.Coordinate.prototype.rotateDegrees = function(degrees, opt_center) {
  this.rotateRadians(goog.math.toRadians(degrees), opt_center);
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height;
};
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return "(" + this.width + " x " + this.height + ")";
  };
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function() {
  return(this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function() {
  return!this.area();
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.provide("goog.dom");
goog.provide("goog.dom.Appendable");
goog.provide("goog.dom.DomHelper");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.TagName");
goog.require("goog.functions");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.define("goog.dom.ASSUME_QUIRKS_MODE", false);
goog.define("goog.dom.ASSUME_STANDARDS_MODE", false);
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper);
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document;
};
goog.dom.getElement = function(element) {
  return goog.dom.getElementHelper_(document, element);
};
goog.dom.getElementHelper_ = function(doc, element) {
  return goog.isString(element) ? doc.getElementById(element) : element;
};
goog.dom.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(document, id);
};
goog.dom.getRequiredElementHelper_ = function(doc, id) {
  goog.asserts.assertString(id);
  var element = goog.dom.getElementHelper_(doc, id);
  element = goog.asserts.assertElement(element, "No element found with id: " + id);
  return element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className);
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el);
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (goog.dom.canUseQuerySelector_(parent)) {
    retVal = parent.querySelector("." + className);
  } else {
    retVal = goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el)[0];
  }
  return retVal || null;
};
goog.dom.getRequiredElementByClass = function(className, opt_root) {
  var retValue = goog.dom.getElementByClass(className, opt_root);
  return goog.asserts.assert(retValue, "No element found with className: " + className);
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return!!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query);
  }
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if (tagName) {
      var arrayLike = {};
      var len = 0;
      for (var i = 0, el;el = els[i];i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;
      return arrayLike;
    } else {
      return els;
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if (typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return arrayLike;
  } else {
    return els;
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (key == "style") {
      element.style.cssText = val;
    } else {
      if (key == "class") {
        element.className = val;
      } else {
        if (key == "for") {
          element.htmlFor = val;
        } else {
          if (key in goog.dom.DIRECT_ATTRIBUTE_MAP_) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
          } else {
            if (goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val);
            } else {
              element[key] = val;
            }
          }
        }
      }
    }
  });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if (doc) {
    var body = doc.body;
    var docEl = doc.documentElement;
    if (!body && !docEl) {
      return 0;
    }
    var vh = goog.dom.getViewportSize_(win).height;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
    } else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }
      if (sh > vh) {
        height = sh > oh ? sh : oh;
      } else {
        height = sh < oh ? sh : oh;
      }
    }
  }
  return height;
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || goog.global || window;
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  if (goog.userAgent.IE && goog.userAgent.isVersionOrHigher("10") && win.pageYOffset != el.scrollTop) {
    return new goog.math.Coordinate(el.scrollLeft, el.scrollTop);
  }
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  if (!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc)) {
    return doc.documentElement;
  }
  return doc.body || doc.documentElement;
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && attributes && (attributes.name || attributes.type)) {
    var tagNameArr = ["\x3c", tagName];
    if (attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone;
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("");
  }
  var element = doc.createElement(tagName);
  if (attributes) {
    if (goog.isString(attributes)) {
      element.className = attributes;
    } else {
      if (goog.isArray(attributes)) {
        element.className = attributes.join(" ");
      } else {
        goog.dom.setProperties(element, attributes);
      }
    }
  }
  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }
  return element;
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if (child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
    }
  }
  for (var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
    } else {
      childHandler(arg);
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name);
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var rowHtml = ["\x3ctr\x3e"];
  for (var i = 0;i < columns;i++) {
    rowHtml.push(fillWithNbsp ? "\x3ctd\x3e\x26nbsp;\x3c/td\x3e" : "\x3ctd\x3e\x3c/td\x3e");
  }
  rowHtml.push("\x3c/tr\x3e");
  rowHtml = rowHtml.join("");
  var totalHtml = ["\x3ctable\x3e"];
  for (i = 0;i < rows;i++) {
    totalHtml.push(rowHtml);
  }
  totalHtml.push("\x3c/table\x3e");
  var elem = doc.createElement(goog.dom.TagName.DIV);
  elem.innerHTML = totalHtml.join("");
  return(elem.removeChild(elem.firstChild));
};
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString);
};
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement("div");
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    tempDiv.innerHTML = "\x3cbr\x3e" + htmlString;
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    tempDiv.innerHTML = htmlString;
  }
  if (tempDiv.childNodes.length == 1) {
    return(tempDiv.removeChild(tempDiv.firstChild));
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }
  return doc.compatMode == "CSS1Compat";
};
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch(node.tagName) {
    case goog.dom.TagName.APPLET:
    ;
    case goog.dom.TagName.AREA:
    ;
    case goog.dom.TagName.BASE:
    ;
    case goog.dom.TagName.BR:
    ;
    case goog.dom.TagName.COL:
    ;
    case goog.dom.TagName.COMMAND:
    ;
    case goog.dom.TagName.EMBED:
    ;
    case goog.dom.TagName.FRAME:
    ;
    case goog.dom.TagName.HR:
    ;
    case goog.dom.TagName.IMG:
    ;
    case goog.dom.TagName.INPUT:
    ;
    case goog.dom.TagName.IFRAME:
    ;
    case goog.dom.TagName.ISINDEX:
    ;
    case goog.dom.TagName.KEYGEN:
    ;
    case goog.dom.TagName.LINK:
    ;
    case goog.dom.TagName.NOFRAMES:
    ;
    case goog.dom.TagName.NOSCRIPT:
    ;
    case goog.dom.TagName.META:
    ;
    case goog.dom.TagName.OBJECT:
    ;
    case goog.dom.TagName.PARAM:
    ;
    case goog.dom.TagName.SCRIPT:
    ;
    case goog.dom.TagName.SOURCE:
    ;
    case goog.dom.TagName.STYLE:
    ;
    case goog.dom.TagName.TRACK:
    ;
    case goog.dom.TagName.WBR:
      return false;
  }
  return true;
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child);
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function(node) {
  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if (element.removeNode) {
      return(element.removeNode(false));
    } else {
      while (child = element.firstChild) {
        parent.insertBefore(child, element);
      }
      return(goog.dom.removeNode(element));
    }
  }
};
goog.dom.getChildren = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children;
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};
goog.dom.getFirstElementChild = function(node) {
  if (node.firstElementChild != undefined) {
    return(node).firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function(node) {
  if (node.lastElementChild != undefined) {
    return(node).lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function(node) {
  if (node.nextElementSibling != undefined) {
    return(node).nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function(node) {
  if (node.previousElementSibling != undefined) {
    return(node).previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }
  return(node);
};
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }
  if (node.firstChild) {
    return node.firstChild;
  }
  while (node && !node.nextSibling) {
    node = node.parentNode;
  }
  return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }
  if (!node.previousSibling) {
    return node.parentNode;
  }
  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }
  return node;
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj;
};
goog.dom.getParentElement = function(element) {
  var parent;
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    var isIe9 = goog.userAgent.IE && goog.userAgent.isVersionOrHigher("9") && !goog.userAgent.isVersionOrHigher("10");
    if (!(isIe9 && goog.global["SVGElement"] && element instanceof goog.global["SVGElement"])) {
      parent = element.parentElement;
      if (parent) {
        return parent;
      }
    }
  }
  parent = element.parentNode;
  return goog.dom.isElement(parent) ? (parent) : null;
};
goog.dom.contains = function(parent, descendant) {
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }
  if (typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16);
  }
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if (node1 == node2) {
    return 0;
  }
  if (node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return-1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }
  if ("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }
      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return-1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }
      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }
      return(isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    return-1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while (s = s.previousSibling) {
    if (s == node1) {
      return-1;
    }
  }
  return 1;
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else {
    if (count == 1) {
      return arguments[0];
    }
  }
  var paths = [];
  var minLength = Infinity;
  for (i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for (var j = 1;j < count;j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};
goog.dom.getOwnerDocument = function(node) {
  goog.asserts.assert(node, "Node cannot be null or undefined.");
  return(node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document);
};
goog.dom.getFrameContentDocument = function(frame) {
  var doc = frame.contentDocument || frame.contentWindow.document;
  return doc;
};
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow || goog.dom.getWindow(goog.dom.getFrameContentDocument(frame));
};
goog.dom.setTextContent = function(node, text) {
  goog.asserts.assert(node != null, "goog.dom.setTextContent expects a non-null value for node");
  if ("textContent" in node) {
    node.textContent = text;
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      node.data = text;
    } else {
      if (node.firstChild && node.firstChild.nodeType == goog.dom.NodeType.TEXT) {
        while (node.lastChild != node.firstChild) {
          node.removeChild(node.lastChild);
        }
        node.firstChild.data = text;
      } else {
        goog.dom.removeChildren(node);
        var doc = goog.dom.getOwnerDocument(node);
        node.appendChild(doc.createTextNode(String(text)));
      }
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  if ("outerHTML" in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement("div");
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  return goog.dom.hasSpecifiedTabIndex_(element) && goog.dom.isTabIndexFocusable_(element);
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex");
  }
};
goog.dom.isFocusable = function(element) {
  var focusable;
  if (goog.dom.nativelySupportsFocus_(element)) {
    focusable = !element.disabled && (!goog.dom.hasSpecifiedTabIndex_(element) || goog.dom.isTabIndexFocusable_(element));
  } else {
    focusable = goog.dom.isFocusableTabIndex(element);
  }
  return focusable && goog.userAgent.IE ? goog.dom.hasNonZeroBoundingRect_(element) : focusable;
};
goog.dom.hasSpecifiedTabIndex_ = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  return goog.isDefAndNotNull(attrNode) && attrNode.specified;
};
goog.dom.isTabIndexFocusable_ = function(element) {
  var index = element.tabIndex;
  return goog.isNumber(index) && index >= 0 && index < 32768;
};
goog.dom.nativelySupportsFocus_ = function(element) {
  return element.tagName == goog.dom.TagName.A || element.tagName == goog.dom.TagName.INPUT || element.tagName == goog.dom.TagName.TEXTAREA || element.tagName == goog.dom.TagName.SELECT || element.tagName == goog.dom.TagName.BUTTON;
};
goog.dom.hasNonZeroBoundingRect_ = function(element) {
  var rect = goog.isFunction(element["getBoundingClientRect"]) ? element.getBoundingClientRect() : {"height":element.offsetHeight, "width":element.offsetWidth};
  return goog.isDefAndNotNull(rect) && rect.height > 0 && rect.width > 0;
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("");
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ");
  }
  if (textContent != " ") {
    textContent = textContent.replace(/^\s*/, "");
  }
  return textContent;
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("");
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      if (normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""));
      } else {
        buf.push(node.nodeValue);
      }
    } else {
      if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
      } else {
        var child = node.firstChild;
        while (child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling;
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while (cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length;
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    } else {
      if (cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length;
      } else {
        if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        } else {
          for (var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i]);
          }
        }
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }
  return cur;
};
goog.dom.isNodeList = function(val) {
  if (val && typeof val.length == "number") {
    if (goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string";
    } else {
      if (goog.isFunction(val)) {
        return typeof val.item == "function";
      }
    }
  }
  return false;
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return(goog.dom.getAncestor(element, function(node) {
    return(!tagName || node.nodeName == tagName) && (!opt_class || goog.isString(node.className) && goog.array.contains(node.className.split(/\s+/), opt_class));
  }, true));
};
goog.dom.getAncestorByClass = function(element, className) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className);
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (!opt_includeNode) {
    element = element.parentNode;
  }
  var ignoreSearchSteps = opt_maxSearchSteps == null;
  var steps = 0;
  while (element && (ignoreSearchSteps || steps <= opt_maxSearchSteps)) {
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  return null;
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement;
  } catch (e) {
  }
  return null;
};
goog.dom.devicePixelRatio_;
goog.dom.getPixelRatio = goog.functions.cacheReturnValue(function() {
  var win = goog.dom.getWindow();
  var isFirefoxMobile = goog.userAgent.GECKO && goog.userAgent.MOBILE;
  if (goog.isDef(win.devicePixelRatio) && !isFirefoxMobile) {
    return win.devicePixelRatio;
  } else {
    if (win.matchMedia) {
      return goog.dom.matchesPixelRatio_(.75) || goog.dom.matchesPixelRatio_(1.5) || goog.dom.matchesPixelRatio_(2) || goog.dom.matchesPixelRatio_(3) || 1;
    }
  }
  return 1;
});
goog.dom.matchesPixelRatio_ = function(pixelRatio) {
  var win = goog.dom.getWindow();
  var query = "(-webkit-min-device-pixel-ratio: " + pixelRatio + ")," + "(min--moz-device-pixel-ratio: " + pixelRatio + ")," + "(min-resolution: " + pixelRatio + "dppx)";
  return win.matchMedia(query).matches ? pixelRatio : 0;
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || goog.global.document || document;
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  return goog.dom.getElementHelper_(this.document_, element);
};
goog.dom.DomHelper.prototype.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(this.document_, id);
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.getRequiredElementByClass = function(className, opt_root) {
  var root = opt_root || this.document_;
  return goog.dom.getRequiredElementByClass(className, root);
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name);
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString);
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.isFocusable = goog.dom.isFocusable;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.provide("goog.dom.classes");
goog.require("goog.array");
goog.dom.classes.set = function(element, className) {
  element.className = className;
};
goog.dom.classes.get = function(element) {
  var className = element.className;
  return goog.isString(className) && className.match(/\S+/g) || [];
};
goog.dom.classes.add = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var expectedCount = classes.length + args.length;
  goog.dom.classes.add_(classes, args);
  goog.dom.classes.set(element, classes.join(" "));
  return classes.length == expectedCount;
};
goog.dom.classes.remove = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var newClasses = goog.dom.classes.getDifference_(classes, args);
  goog.dom.classes.set(element, newClasses.join(" "));
  return newClasses.length == classes.length - args.length;
};
goog.dom.classes.add_ = function(classes, args) {
  for (var i = 0;i < args.length;i++) {
    if (!goog.array.contains(classes, args[i])) {
      classes.push(args[i]);
    }
  }
};
goog.dom.classes.getDifference_ = function(arr1, arr2) {
  return goog.array.filter(arr1, function(item) {
    return!goog.array.contains(arr2, item);
  });
};
goog.dom.classes.swap = function(element, fromClass, toClass) {
  var classes = goog.dom.classes.get(element);
  var removed = false;
  for (var i = 0;i < classes.length;i++) {
    if (classes[i] == fromClass) {
      goog.array.splice(classes, i--, 1);
      removed = true;
    }
  }
  if (removed) {
    classes.push(toClass);
    goog.dom.classes.set(element, classes.join(" "));
  }
  return removed;
};
goog.dom.classes.addRemove = function(element, classesToRemove, classesToAdd) {
  var classes = goog.dom.classes.get(element);
  if (goog.isString(classesToRemove)) {
    goog.array.remove(classes, classesToRemove);
  } else {
    if (goog.isArray(classesToRemove)) {
      classes = goog.dom.classes.getDifference_(classes, classesToRemove);
    }
  }
  if (goog.isString(classesToAdd) && !goog.array.contains(classes, classesToAdd)) {
    classes.push(classesToAdd);
  } else {
    if (goog.isArray(classesToAdd)) {
      goog.dom.classes.add_(classes, classesToAdd);
    }
  }
  goog.dom.classes.set(element, classes.join(" "));
};
goog.dom.classes.has = function(element, className) {
  return goog.array.contains(goog.dom.classes.get(element), className);
};
goog.dom.classes.enable = function(element, className, enabled) {
  if (enabled) {
    goog.dom.classes.add(element, className);
  } else {
    goog.dom.classes.remove(element, className);
  }
};
goog.dom.classes.toggle = function(element, className) {
  var add = !goog.dom.classes.has(element, className);
  goog.dom.classes.enable(element, className, add);
  return add;
};
goog.provide("domina.support");
goog.require("cljs.core");
goog.require("goog.events");
goog.require("goog.events");
goog.require("goog.dom");
goog.require("goog.dom");
var div_15780 = document.createElement("div");
var test_html_15781 = "   \x3clink/\x3e\x3ctable\x3e\x3c/table\x3e\x3ca href\x3d'/a' style\x3d'top:1px;float:left;opacity:.55;'\x3ea\x3c/a\x3e\x3cinput type\x3d'checkbox'/\x3e";
div_15780.innerHTML = test_html_15781;
domina.support.leading_whitespace_QMARK_ = cljs.core._EQ_.call(null, div_15780.firstChild.nodeType, 3);
domina.support.extraneous_tbody_QMARK_ = cljs.core._EQ_.call(null, div_15780.getElementsByTagName("tbody").length, 0);
domina.support.unscoped_html_elements_QMARK_ = cljs.core._EQ_.call(null, div_15780.getElementsByTagName("link").length, 0);
goog.provide("goog.dom.vendor");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.dom.vendor.getVendorJsPrefix = function() {
  if (goog.userAgent.WEBKIT) {
    return "Webkit";
  } else {
    if (goog.userAgent.GECKO) {
      return "Moz";
    } else {
      if (goog.userAgent.IE) {
        return "ms";
      } else {
        if (goog.userAgent.OPERA) {
          return "O";
        }
      }
    }
  }
  return null;
};
goog.dom.vendor.getVendorPrefix = function() {
  if (goog.userAgent.WEBKIT) {
    return "-webkit";
  } else {
    if (goog.userAgent.GECKO) {
      return "-moz";
    } else {
      if (goog.userAgent.IE) {
        return "-ms";
      } else {
        if (goog.userAgent.OPERA) {
          return "-o";
        }
      }
    }
  }
  return null;
};
goog.dom.vendor.getPrefixedPropertyName = function(propertyName, opt_object) {
  if (opt_object && propertyName in opt_object) {
    return propertyName;
  }
  var prefix = goog.dom.vendor.getVendorJsPrefix();
  if (prefix) {
    prefix = prefix.toLowerCase();
    var prefixedPropertyName = prefix + goog.string.toTitleCase(propertyName);
    return!goog.isDef(opt_object) || prefixedPropertyName in opt_object ? prefixedPropertyName : null;
  }
  return null;
};
goog.dom.vendor.getPrefixedEventType = function(eventType) {
  var prefix = goog.dom.vendor.getVendorJsPrefix() || "";
  return(prefix + eventType).toLowerCase();
};
goog.provide("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.math.Box = function(top, right, bottom, left) {
  this.top = top;
  this.right = right;
  this.bottom = bottom;
  this.left = left;
};
goog.math.Box.boundingBox = function(var_args) {
  var box = new goog.math.Box(arguments[0].y, arguments[0].x, arguments[0].y, arguments[0].x);
  for (var i = 1;i < arguments.length;i++) {
    var coord = arguments[i];
    box.top = Math.min(box.top, coord.y);
    box.right = Math.max(box.right, coord.x);
    box.bottom = Math.max(box.bottom, coord.y);
    box.left = Math.min(box.left, coord.x);
  }
  return box;
};
goog.math.Box.prototype.getWidth = function() {
  return this.right - this.left;
};
goog.math.Box.prototype.getHeight = function() {
  return this.bottom - this.top;
};
goog.math.Box.prototype.clone = function() {
  return new goog.math.Box(this.top, this.right, this.bottom, this.left);
};
if (goog.DEBUG) {
  goog.math.Box.prototype.toString = function() {
    return "(" + this.top + "t, " + this.right + "r, " + this.bottom + "b, " + this.left + "l)";
  };
}
goog.math.Box.prototype.contains = function(other) {
  return goog.math.Box.contains(this, other);
};
goog.math.Box.prototype.expand = function(top, opt_right, opt_bottom, opt_left) {
  if (goog.isObject(top)) {
    this.top -= top.top;
    this.right += top.right;
    this.bottom += top.bottom;
    this.left -= top.left;
  } else {
    this.top -= top;
    this.right += opt_right;
    this.bottom += opt_bottom;
    this.left -= opt_left;
  }
  return this;
};
goog.math.Box.prototype.expandToInclude = function(box) {
  this.left = Math.min(this.left, box.left);
  this.top = Math.min(this.top, box.top);
  this.right = Math.max(this.right, box.right);
  this.bottom = Math.max(this.bottom, box.bottom);
};
goog.math.Box.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.top == b.top && a.right == b.right && a.bottom == b.bottom && a.left == b.left;
};
goog.math.Box.contains = function(box, other) {
  if (!box || !other) {
    return false;
  }
  if (other instanceof goog.math.Box) {
    return other.left >= box.left && other.right <= box.right && other.top >= box.top && other.bottom <= box.bottom;
  }
  return other.x >= box.left && other.x <= box.right && other.y >= box.top && other.y <= box.bottom;
};
goog.math.Box.relativePositionX = function(box, coord) {
  if (coord.x < box.left) {
    return coord.x - box.left;
  } else {
    if (coord.x > box.right) {
      return coord.x - box.right;
    }
  }
  return 0;
};
goog.math.Box.relativePositionY = function(box, coord) {
  if (coord.y < box.top) {
    return coord.y - box.top;
  } else {
    if (coord.y > box.bottom) {
      return coord.y - box.bottom;
    }
  }
  return 0;
};
goog.math.Box.distance = function(box, coord) {
  var x = goog.math.Box.relativePositionX(box, coord);
  var y = goog.math.Box.relativePositionY(box, coord);
  return Math.sqrt(x * x + y * y);
};
goog.math.Box.intersects = function(a, b) {
  return a.left <= b.right && b.left <= a.right && a.top <= b.bottom && b.top <= a.bottom;
};
goog.math.Box.intersectsWithPadding = function(a, b, padding) {
  return a.left <= b.right + padding && b.left <= a.right + padding && a.top <= b.bottom + padding && b.top <= a.bottom + padding;
};
goog.math.Box.prototype.ceil = function() {
  this.top = Math.ceil(this.top);
  this.right = Math.ceil(this.right);
  this.bottom = Math.ceil(this.bottom);
  this.left = Math.ceil(this.left);
  return this;
};
goog.math.Box.prototype.floor = function() {
  this.top = Math.floor(this.top);
  this.right = Math.floor(this.right);
  this.bottom = Math.floor(this.bottom);
  this.left = Math.floor(this.left);
  return this;
};
goog.math.Box.prototype.round = function() {
  this.top = Math.round(this.top);
  this.right = Math.round(this.right);
  this.bottom = Math.round(this.bottom);
  this.left = Math.round(this.left);
  return this;
};
goog.math.Box.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.left += tx.x;
    this.right += tx.x;
    this.top += tx.y;
    this.bottom += tx.y;
  } else {
    this.left += tx;
    this.right += tx;
    if (goog.isNumber(opt_ty)) {
      this.top += opt_ty;
      this.bottom += opt_ty;
    }
  }
  return this;
};
goog.math.Box.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.left *= sx;
  this.right *= sx;
  this.top *= sy;
  this.bottom *= sy;
  return this;
};
goog.provide("goog.math.Rect");
goog.require("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.math.Rect = function(x, y, w, h) {
  this.left = x;
  this.top = y;
  this.width = w;
  this.height = h;
};
goog.math.Rect.prototype.clone = function() {
  return new goog.math.Rect(this.left, this.top, this.width, this.height);
};
goog.math.Rect.prototype.toBox = function() {
  var right = this.left + this.width;
  var bottom = this.top + this.height;
  return new goog.math.Box(this.top, right, bottom, this.left);
};
goog.math.Rect.createFromBox = function(box) {
  return new goog.math.Rect(box.left, box.top, box.right - box.left, box.bottom - box.top);
};
if (goog.DEBUG) {
  goog.math.Rect.prototype.toString = function() {
    return "(" + this.left + ", " + this.top + " - " + this.width + "w x " + this.height + "h)";
  };
}
goog.math.Rect.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.left == b.left && a.width == b.width && a.top == b.top && a.height == b.height;
};
goog.math.Rect.prototype.intersection = function(rect) {
  var x0 = Math.max(this.left, rect.left);
  var x1 = Math.min(this.left + this.width, rect.left + rect.width);
  if (x0 <= x1) {
    var y0 = Math.max(this.top, rect.top);
    var y1 = Math.min(this.top + this.height, rect.top + rect.height);
    if (y0 <= y1) {
      this.left = x0;
      this.top = y0;
      this.width = x1 - x0;
      this.height = y1 - y0;
      return true;
    }
  }
  return false;
};
goog.math.Rect.intersection = function(a, b) {
  var x0 = Math.max(a.left, b.left);
  var x1 = Math.min(a.left + a.width, b.left + b.width);
  if (x0 <= x1) {
    var y0 = Math.max(a.top, b.top);
    var y1 = Math.min(a.top + a.height, b.top + b.height);
    if (y0 <= y1) {
      return new goog.math.Rect(x0, y0, x1 - x0, y1 - y0);
    }
  }
  return null;
};
goog.math.Rect.intersects = function(a, b) {
  return a.left <= b.left + b.width && b.left <= a.left + a.width && a.top <= b.top + b.height && b.top <= a.top + a.height;
};
goog.math.Rect.prototype.intersects = function(rect) {
  return goog.math.Rect.intersects(this, rect);
};
goog.math.Rect.difference = function(a, b) {
  var intersection = goog.math.Rect.intersection(a, b);
  if (!intersection || !intersection.height || !intersection.width) {
    return[a.clone()];
  }
  var result = [];
  var top = a.top;
  var height = a.height;
  var ar = a.left + a.width;
  var ab = a.top + a.height;
  var br = b.left + b.width;
  var bb = b.top + b.height;
  if (b.top > a.top) {
    result.push(new goog.math.Rect(a.left, a.top, a.width, b.top - a.top));
    top = b.top;
    height -= b.top - a.top;
  }
  if (bb < ab) {
    result.push(new goog.math.Rect(a.left, bb, a.width, ab - bb));
    height = bb - top;
  }
  if (b.left > a.left) {
    result.push(new goog.math.Rect(a.left, top, b.left - a.left, height));
  }
  if (br < ar) {
    result.push(new goog.math.Rect(br, top, ar - br, height));
  }
  return result;
};
goog.math.Rect.prototype.difference = function(rect) {
  return goog.math.Rect.difference(this, rect);
};
goog.math.Rect.prototype.boundingRect = function(rect) {
  var right = Math.max(this.left + this.width, rect.left + rect.width);
  var bottom = Math.max(this.top + this.height, rect.top + rect.height);
  this.left = Math.min(this.left, rect.left);
  this.top = Math.min(this.top, rect.top);
  this.width = right - this.left;
  this.height = bottom - this.top;
};
goog.math.Rect.boundingRect = function(a, b) {
  if (!a || !b) {
    return null;
  }
  var clone = a.clone();
  clone.boundingRect(b);
  return clone;
};
goog.math.Rect.prototype.contains = function(another) {
  if (another instanceof goog.math.Rect) {
    return this.left <= another.left && this.left + this.width >= another.left + another.width && this.top <= another.top && this.top + this.height >= another.top + another.height;
  } else {
    return another.x >= this.left && another.x <= this.left + this.width && another.y >= this.top && another.y <= this.top + this.height;
  }
};
goog.math.Rect.prototype.squaredDistance = function(point) {
  var dx = point.x < this.left ? this.left - point.x : Math.max(point.x - (this.left + this.width), 0);
  var dy = point.y < this.top ? this.top - point.y : Math.max(point.y - (this.top + this.height), 0);
  return dx * dx + dy * dy;
};
goog.math.Rect.prototype.distance = function(point) {
  return Math.sqrt(this.squaredDistance(point));
};
goog.math.Rect.prototype.getSize = function() {
  return new goog.math.Size(this.width, this.height);
};
goog.math.Rect.prototype.getTopLeft = function() {
  return new goog.math.Coordinate(this.left, this.top);
};
goog.math.Rect.prototype.getCenter = function() {
  return new goog.math.Coordinate(this.left + this.width / 2, this.top + this.height / 2);
};
goog.math.Rect.prototype.getBottomRight = function() {
  return new goog.math.Coordinate(this.left + this.width, this.top + this.height);
};
goog.math.Rect.prototype.ceil = function() {
  this.left = Math.ceil(this.left);
  this.top = Math.ceil(this.top);
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Rect.prototype.floor = function() {
  this.left = Math.floor(this.left);
  this.top = Math.floor(this.top);
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Rect.prototype.round = function() {
  this.left = Math.round(this.left);
  this.top = Math.round(this.top);
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Rect.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.left += tx.x;
    this.top += tx.y;
  } else {
    this.left += tx;
    if (goog.isNumber(opt_ty)) {
      this.top += opt_ty;
    }
  }
  return this;
};
goog.math.Rect.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.left *= sx;
  this.width *= sx;
  this.top *= sy;
  this.height *= sy;
  return this;
};
goog.provide("goog.style");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.vendor");
goog.require("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Rect");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.define("goog.style.GET_BOUNDING_CLIENT_RECT_ALWAYS_EXISTS", false);
goog.style.setStyle = function(element, style, opt_value) {
  if (goog.isString(style)) {
    goog.style.setStyle_(element, opt_value, style);
  } else {
    goog.object.forEach(style, goog.partial(goog.style.setStyle_, element));
  }
};
goog.style.setStyle_ = function(element, value, style) {
  var propertyName = goog.style.getVendorJsStyleName_(element, style);
  if (propertyName) {
    element.style[propertyName] = value;
  }
};
goog.style.getVendorJsStyleName_ = function(element, style) {
  var camelStyle = goog.string.toCamelCase(style);
  if (element.style[camelStyle] === undefined) {
    var prefixedStyle = goog.dom.vendor.getVendorJsPrefix() + goog.string.toTitleCase(camelStyle);
    if (element.style[prefixedStyle] !== undefined) {
      return prefixedStyle;
    }
  }
  return camelStyle;
};
goog.style.getVendorStyleName_ = function(element, style) {
  var camelStyle = goog.string.toCamelCase(style);
  if (element.style[camelStyle] === undefined) {
    var prefixedStyle = goog.dom.vendor.getVendorJsPrefix() + goog.string.toTitleCase(camelStyle);
    if (element.style[prefixedStyle] !== undefined) {
      return goog.dom.vendor.getVendorPrefix() + "-" + style;
    }
  }
  return style;
};
goog.style.getStyle = function(element, property) {
  var styleValue = element.style[goog.string.toCamelCase(property)];
  if (typeof styleValue !== "undefined") {
    return styleValue;
  }
  return element.style[goog.style.getVendorJsStyleName_(element, property)] || "";
};
goog.style.getComputedStyle = function(element, property) {
  var doc = goog.dom.getOwnerDocument(element);
  if (doc.defaultView && doc.defaultView.getComputedStyle) {
    var styles = doc.defaultView.getComputedStyle(element, null);
    if (styles) {
      return styles[property] || styles.getPropertyValue(property) || "";
    }
  }
  return "";
};
goog.style.getCascadedStyle = function(element, style) {
  return element.currentStyle ? element.currentStyle[style] : null;
};
goog.style.getStyle_ = function(element, style) {
  return goog.style.getComputedStyle(element, style) || goog.style.getCascadedStyle(element, style) || element.style && element.style[style];
};
goog.style.getComputedBoxSizing = function(element) {
  return goog.style.getStyle_(element, "boxSizing") || goog.style.getStyle_(element, "MozBoxSizing") || goog.style.getStyle_(element, "WebkitBoxSizing") || null;
};
goog.style.getComputedPosition = function(element) {
  return goog.style.getStyle_(element, "position");
};
goog.style.getBackgroundColor = function(element) {
  return goog.style.getStyle_(element, "backgroundColor");
};
goog.style.getComputedOverflowX = function(element) {
  return goog.style.getStyle_(element, "overflowX");
};
goog.style.getComputedOverflowY = function(element) {
  return goog.style.getStyle_(element, "overflowY");
};
goog.style.getComputedZIndex = function(element) {
  return goog.style.getStyle_(element, "zIndex");
};
goog.style.getComputedTextAlign = function(element) {
  return goog.style.getStyle_(element, "textAlign");
};
goog.style.getComputedCursor = function(element) {
  return goog.style.getStyle_(element, "cursor");
};
goog.style.getComputedTransform = function(element) {
  var property = goog.style.getVendorStyleName_(element, "transform");
  return goog.style.getStyle_(element, property) || goog.style.getStyle_(element, "transform");
};
goog.style.setPosition = function(el, arg1, opt_arg2) {
  var x, y;
  var buggyGeckoSubPixelPos = goog.userAgent.GECKO && (goog.userAgent.MAC || goog.userAgent.X11) && goog.userAgent.isVersionOrHigher("1.9");
  if (arg1 instanceof goog.math.Coordinate) {
    x = arg1.x;
    y = arg1.y;
  } else {
    x = arg1;
    y = opt_arg2;
  }
  el.style.left = goog.style.getPixelStyleValue_((x), buggyGeckoSubPixelPos);
  el.style.top = goog.style.getPixelStyleValue_((y), buggyGeckoSubPixelPos);
};
goog.style.getPosition = function(element) {
  return new goog.math.Coordinate(element.offsetLeft, element.offsetTop);
};
goog.style.getClientViewportElement = function(opt_node) {
  var doc;
  if (opt_node) {
    doc = goog.dom.getOwnerDocument(opt_node);
  } else {
    doc = goog.dom.getDocument();
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9) && !goog.dom.getDomHelper(doc).isCss1CompatMode()) {
    return doc.body;
  }
  return doc.documentElement;
};
goog.style.getViewportPageOffset = function(doc) {
  var body = doc.body;
  var documentElement = doc.documentElement;
  var scrollLeft = body.scrollLeft || documentElement.scrollLeft;
  var scrollTop = body.scrollTop || documentElement.scrollTop;
  return new goog.math.Coordinate(scrollLeft, scrollTop);
};
goog.style.getBoundingClientRect_ = function(el) {
  var rect;
  try {
    rect = el.getBoundingClientRect();
  } catch (e) {
    return{"left":0, "top":0, "right":0, "bottom":0};
  }
  if (goog.userAgent.IE && el.ownerDocument.body) {
    var doc = el.ownerDocument;
    rect.left -= doc.documentElement.clientLeft + doc.body.clientLeft;
    rect.top -= doc.documentElement.clientTop + doc.body.clientTop;
  }
  return(rect);
};
goog.style.getOffsetParent = function(element) {
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(8)) {
    return element.offsetParent;
  }
  var doc = goog.dom.getOwnerDocument(element);
  var positionStyle = goog.style.getStyle_(element, "position");
  var skipStatic = positionStyle == "fixed" || positionStyle == "absolute";
  for (var parent = element.parentNode;parent && parent != doc;parent = parent.parentNode) {
    positionStyle = goog.style.getStyle_((parent), "position");
    skipStatic = skipStatic && positionStyle == "static" && parent != doc.documentElement && parent != doc.body;
    if (!skipStatic && (parent.scrollWidth > parent.clientWidth || parent.scrollHeight > parent.clientHeight || positionStyle == "fixed" || positionStyle == "absolute" || positionStyle == "relative")) {
      return(parent);
    }
  }
  return null;
};
goog.style.getVisibleRectForElement = function(element) {
  var visibleRect = new goog.math.Box(0, Infinity, Infinity, 0);
  var dom = goog.dom.getDomHelper(element);
  var body = dom.getDocument().body;
  var documentElement = dom.getDocument().documentElement;
  var scrollEl = dom.getDocumentScrollElement();
  for (var el = element;el = goog.style.getOffsetParent(el);) {
    if ((!goog.userAgent.IE || el.clientWidth != 0) && (!goog.userAgent.WEBKIT || el.clientHeight != 0 || el != body) && (el != body && el != documentElement && goog.style.getStyle_(el, "overflow") != "visible")) {
      var pos = goog.style.getPageOffset(el);
      var client = goog.style.getClientLeftTop(el);
      pos.x += client.x;
      pos.y += client.y;
      visibleRect.top = Math.max(visibleRect.top, pos.y);
      visibleRect.right = Math.min(visibleRect.right, pos.x + el.clientWidth);
      visibleRect.bottom = Math.min(visibleRect.bottom, pos.y + el.clientHeight);
      visibleRect.left = Math.max(visibleRect.left, pos.x);
    }
  }
  var scrollX = scrollEl.scrollLeft, scrollY = scrollEl.scrollTop;
  visibleRect.left = Math.max(visibleRect.left, scrollX);
  visibleRect.top = Math.max(visibleRect.top, scrollY);
  var winSize = dom.getViewportSize();
  visibleRect.right = Math.min(visibleRect.right, scrollX + winSize.width);
  visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + winSize.height);
  return visibleRect.top >= 0 && visibleRect.left >= 0 && visibleRect.bottom > visibleRect.top && visibleRect.right > visibleRect.left ? visibleRect : null;
};
goog.style.getContainerOffsetToScrollInto = function(element, container, opt_center) {
  var elementPos = goog.style.getPageOffset(element);
  var containerPos = goog.style.getPageOffset(container);
  var containerBorder = goog.style.getBorderBox(container);
  var relX = elementPos.x - containerPos.x - containerBorder.left;
  var relY = elementPos.y - containerPos.y - containerBorder.top;
  var spaceX = container.clientWidth - element.offsetWidth;
  var spaceY = container.clientHeight - element.offsetHeight;
  var scrollLeft = container.scrollLeft;
  var scrollTop = container.scrollTop;
  if (opt_center) {
    scrollLeft += relX - spaceX / 2;
    scrollTop += relY - spaceY / 2;
  } else {
    scrollLeft += Math.min(relX, Math.max(relX - spaceX, 0));
    scrollTop += Math.min(relY, Math.max(relY - spaceY, 0));
  }
  return new goog.math.Coordinate(scrollLeft, scrollTop);
};
goog.style.scrollIntoContainerView = function(element, container, opt_center) {
  var offset = goog.style.getContainerOffsetToScrollInto(element, container, opt_center);
  container.scrollLeft = offset.x;
  container.scrollTop = offset.y;
};
goog.style.getClientLeftTop = function(el) {
  if (goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("1.9")) {
    var left = parseFloat(goog.style.getComputedStyle(el, "borderLeftWidth"));
    if (goog.style.isRightToLeft(el)) {
      var scrollbarWidth = el.offsetWidth - el.clientWidth - left - parseFloat(goog.style.getComputedStyle(el, "borderRightWidth"));
      left += scrollbarWidth;
    }
    return new goog.math.Coordinate(left, parseFloat(goog.style.getComputedStyle(el, "borderTopWidth")));
  }
  return new goog.math.Coordinate(el.clientLeft, el.clientTop);
};
goog.style.getPageOffset = function(el) {
  var box, doc = goog.dom.getOwnerDocument(el);
  var positionStyle = goog.style.getStyle_(el, "position");
  goog.asserts.assertObject(el, "Parameter is required");
  var BUGGY_GECKO_BOX_OBJECT = !goog.style.GET_BOUNDING_CLIENT_RECT_ALWAYS_EXISTS && goog.userAgent.GECKO && doc.getBoxObjectFor && !el.getBoundingClientRect && positionStyle == "absolute" && (box = doc.getBoxObjectFor(el)) && (box.screenX < 0 || box.screenY < 0);
  var pos = new goog.math.Coordinate(0, 0);
  var viewportElement = goog.style.getClientViewportElement(doc);
  if (el == viewportElement) {
    return pos;
  }
  if (goog.style.GET_BOUNDING_CLIENT_RECT_ALWAYS_EXISTS || el.getBoundingClientRect) {
    box = goog.style.getBoundingClientRect_(el);
    var scrollCoord = goog.dom.getDomHelper(doc).getDocumentScroll();
    pos.x = box.left + scrollCoord.x;
    pos.y = box.top + scrollCoord.y;
  } else {
    if (doc.getBoxObjectFor && !BUGGY_GECKO_BOX_OBJECT) {
      box = doc.getBoxObjectFor(el);
      var vpBox = doc.getBoxObjectFor(viewportElement);
      pos.x = box.screenX - vpBox.screenX;
      pos.y = box.screenY - vpBox.screenY;
    } else {
      var parent = el;
      do {
        pos.x += parent.offsetLeft;
        pos.y += parent.offsetTop;
        if (parent != el) {
          pos.x += parent.clientLeft || 0;
          pos.y += parent.clientTop || 0;
        }
        if (goog.userAgent.WEBKIT && goog.style.getComputedPosition(parent) == "fixed") {
          pos.x += doc.body.scrollLeft;
          pos.y += doc.body.scrollTop;
          break;
        }
        parent = parent.offsetParent;
      } while (parent && parent != el);
      if (goog.userAgent.OPERA || goog.userAgent.WEBKIT && positionStyle == "absolute") {
        pos.y -= doc.body.offsetTop;
      }
      for (parent = el;(parent = goog.style.getOffsetParent(parent)) && parent != doc.body && parent != viewportElement;) {
        pos.x -= parent.scrollLeft;
        if (!goog.userAgent.OPERA || parent.tagName != "TR") {
          pos.y -= parent.scrollTop;
        }
      }
    }
  }
  return pos;
};
goog.style.getPageOffsetLeft = function(el) {
  return goog.style.getPageOffset(el).x;
};
goog.style.getPageOffsetTop = function(el) {
  return goog.style.getPageOffset(el).y;
};
goog.style.getFramedPageOffset = function(el, relativeWin) {
  var position = new goog.math.Coordinate(0, 0);
  var currentWin = goog.dom.getWindow(goog.dom.getOwnerDocument(el));
  var currentEl = el;
  do {
    var offset = currentWin == relativeWin ? goog.style.getPageOffset(currentEl) : goog.style.getClientPositionForElement_(goog.asserts.assert(currentEl));
    position.x += offset.x;
    position.y += offset.y;
  } while (currentWin && currentWin != relativeWin && (currentEl = currentWin.frameElement) && (currentWin = currentWin.parent));
  return position;
};
goog.style.translateRectForAnotherFrame = function(rect, origBase, newBase) {
  if (origBase.getDocument() != newBase.getDocument()) {
    var body = origBase.getDocument().body;
    var pos = goog.style.getFramedPageOffset(body, newBase.getWindow());
    pos = goog.math.Coordinate.difference(pos, goog.style.getPageOffset(body));
    if (goog.userAgent.IE && !origBase.isCss1CompatMode()) {
      pos = goog.math.Coordinate.difference(pos, origBase.getDocumentScroll());
    }
    rect.left += pos.x;
    rect.top += pos.y;
  }
};
goog.style.getRelativePosition = function(a, b) {
  var ap = goog.style.getClientPosition(a);
  var bp = goog.style.getClientPosition(b);
  return new goog.math.Coordinate(ap.x - bp.x, ap.y - bp.y);
};
goog.style.getClientPositionForElement_ = function(el) {
  var pos;
  if (goog.style.GET_BOUNDING_CLIENT_RECT_ALWAYS_EXISTS || el.getBoundingClientRect) {
    var box = goog.style.getBoundingClientRect_(el);
    pos = new goog.math.Coordinate(box.left, box.top);
  } else {
    var scrollCoord = goog.dom.getDomHelper(el).getDocumentScroll();
    var pageCoord = goog.style.getPageOffset(el);
    pos = new goog.math.Coordinate(pageCoord.x - scrollCoord.x, pageCoord.y - scrollCoord.y);
  }
  if (goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher(12)) {
    return goog.math.Coordinate.sum(pos, goog.style.getCssTranslation(el));
  } else {
    return pos;
  }
};
goog.style.getClientPosition = function(el) {
  goog.asserts.assert(el);
  if (el.nodeType == goog.dom.NodeType.ELEMENT) {
    return goog.style.getClientPositionForElement_((el));
  } else {
    var isAbstractedEvent = goog.isFunction(el.getBrowserEvent);
    var be = (el);
    var targetEvent = el;
    if (el.targetTouches) {
      targetEvent = el.targetTouches[0];
    } else {
      if (isAbstractedEvent && be.getBrowserEvent().targetTouches) {
        targetEvent = be.getBrowserEvent().targetTouches[0];
      }
    }
    return new goog.math.Coordinate(targetEvent.clientX, targetEvent.clientY);
  }
};
goog.style.setPageOffset = function(el, x, opt_y) {
  var cur = goog.style.getPageOffset(el);
  if (x instanceof goog.math.Coordinate) {
    opt_y = x.y;
    x = x.x;
  }
  var dx = x - cur.x;
  var dy = opt_y - cur.y;
  goog.style.setPosition(el, el.offsetLeft + dx, el.offsetTop + dy);
};
goog.style.setSize = function(element, w, opt_h) {
  var h;
  if (w instanceof goog.math.Size) {
    h = w.height;
    w = w.width;
  } else {
    if (opt_h == undefined) {
      throw Error("missing height argument");
    }
    h = opt_h;
  }
  goog.style.setWidth(element, (w));
  goog.style.setHeight(element, (h));
};
goog.style.getPixelStyleValue_ = function(value, round) {
  if (typeof value == "number") {
    value = (round ? Math.round(value) : value) + "px";
  }
  return value;
};
goog.style.setHeight = function(element, height) {
  element.style.height = goog.style.getPixelStyleValue_(height, true);
};
goog.style.setWidth = function(element, width) {
  element.style.width = goog.style.getPixelStyleValue_(width, true);
};
goog.style.getSize = function(element) {
  return goog.style.evaluateWithTemporaryDisplay_(goog.style.getSizeWithDisplay_, (element));
};
goog.style.evaluateWithTemporaryDisplay_ = function(fn, element) {
  if (goog.style.getStyle_(element, "display") != "none") {
    return fn(element);
  }
  var style = element.style;
  var originalDisplay = style.display;
  var originalVisibility = style.visibility;
  var originalPosition = style.position;
  style.visibility = "hidden";
  style.position = "absolute";
  style.display = "inline";
  var retVal = fn(element);
  style.display = originalDisplay;
  style.position = originalPosition;
  style.visibility = originalVisibility;
  return retVal;
};
goog.style.getSizeWithDisplay_ = function(element) {
  var offsetWidth = element.offsetWidth;
  var offsetHeight = element.offsetHeight;
  var webkitOffsetsZero = goog.userAgent.WEBKIT && !offsetWidth && !offsetHeight;
  if ((!goog.isDef(offsetWidth) || webkitOffsetsZero) && element.getBoundingClientRect) {
    var clientRect = goog.style.getBoundingClientRect_(element);
    return new goog.math.Size(clientRect.right - clientRect.left, clientRect.bottom - clientRect.top);
  }
  return new goog.math.Size(offsetWidth, offsetHeight);
};
goog.style.getTransformedSize = function(element) {
  if (!element.getBoundingClientRect) {
    return null;
  }
  var clientRect = goog.style.evaluateWithTemporaryDisplay_(goog.style.getBoundingClientRect_, element);
  return new goog.math.Size(clientRect.right - clientRect.left, clientRect.bottom - clientRect.top);
};
goog.style.getBounds = function(element) {
  var o = goog.style.getPageOffset(element);
  var s = goog.style.getSize(element);
  return new goog.math.Rect(o.x, o.y, s.width, s.height);
};
goog.style.toCamelCase = function(selector) {
  return goog.string.toCamelCase(String(selector));
};
goog.style.toSelectorCase = function(selector) {
  return goog.string.toSelectorCase(selector);
};
goog.style.getOpacity = function(el) {
  var style = el.style;
  var result = "";
  if ("opacity" in style) {
    result = style.opacity;
  } else {
    if ("MozOpacity" in style) {
      result = style.MozOpacity;
    } else {
      if ("filter" in style) {
        var match = style.filter.match(/alpha\(opacity=([\d.]+)\)/);
        if (match) {
          result = String(match[1] / 100);
        }
      }
    }
  }
  return result == "" ? result : Number(result);
};
goog.style.setOpacity = function(el, alpha) {
  var style = el.style;
  if ("opacity" in style) {
    style.opacity = alpha;
  } else {
    if ("MozOpacity" in style) {
      style.MozOpacity = alpha;
    } else {
      if ("filter" in style) {
        if (alpha === "") {
          style.filter = "";
        } else {
          style.filter = "alpha(opacity\x3d" + alpha * 100 + ")";
        }
      }
    }
  }
};
goog.style.setTransparentBackgroundImage = function(el, src) {
  var style = el.style;
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("8")) {
    style.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader(" + 'src\x3d"' + src + '", sizingMethod\x3d"crop")';
  } else {
    style.backgroundImage = "url(" + src + ")";
    style.backgroundPosition = "top left";
    style.backgroundRepeat = "no-repeat";
  }
};
goog.style.clearTransparentBackgroundImage = function(el) {
  var style = el.style;
  if ("filter" in style) {
    style.filter = "";
  } else {
    style.backgroundImage = "none";
  }
};
goog.style.showElement = function(el, display) {
  goog.style.setElementShown(el, display);
};
goog.style.setElementShown = function(el, isShown) {
  el.style.display = isShown ? "" : "none";
};
goog.style.isElementShown = function(el) {
  return el.style.display != "none";
};
goog.style.installStyles = function(stylesString, opt_node) {
  var dh = goog.dom.getDomHelper(opt_node);
  var styleSheet = null;
  var doc = dh.getDocument();
  if (goog.userAgent.IE && doc.createStyleSheet) {
    styleSheet = doc.createStyleSheet();
    goog.style.setStyles(styleSheet, stylesString);
  } else {
    var head = dh.getElementsByTagNameAndClass("head")[0];
    if (!head) {
      var body = dh.getElementsByTagNameAndClass("body")[0];
      head = dh.createDom("head");
      body.parentNode.insertBefore(head, body);
    }
    styleSheet = dh.createDom("style");
    goog.style.setStyles(styleSheet, stylesString);
    dh.appendChild(head, styleSheet);
  }
  return styleSheet;
};
goog.style.uninstallStyles = function(styleSheet) {
  var node = styleSheet.ownerNode || styleSheet.owningElement || (styleSheet);
  goog.dom.removeNode(node);
};
goog.style.setStyles = function(element, stylesString) {
  if (goog.userAgent.IE && goog.isDef(element.cssText)) {
    element.cssText = stylesString;
  } else {
    element.innerHTML = stylesString;
  }
};
goog.style.setPreWrap = function(el) {
  var style = el.style;
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("8")) {
    style.whiteSpace = "pre";
    style.wordWrap = "break-word";
  } else {
    if (goog.userAgent.GECKO) {
      style.whiteSpace = "-moz-pre-wrap";
    } else {
      style.whiteSpace = "pre-wrap";
    }
  }
};
goog.style.setInlineBlock = function(el) {
  var style = el.style;
  style.position = "relative";
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("8")) {
    style.zoom = "1";
    style.display = "inline";
  } else {
    if (goog.userAgent.GECKO) {
      style.display = goog.userAgent.isVersionOrHigher("1.9a") ? "inline-block" : "-moz-inline-box";
    } else {
      style.display = "inline-block";
    }
  }
};
goog.style.isRightToLeft = function(el) {
  return "rtl" == goog.style.getStyle_(el, "direction");
};
goog.style.unselectableStyle_ = goog.userAgent.GECKO ? "MozUserSelect" : goog.userAgent.WEBKIT ? "WebkitUserSelect" : null;
goog.style.isUnselectable = function(el) {
  if (goog.style.unselectableStyle_) {
    return el.style[goog.style.unselectableStyle_].toLowerCase() == "none";
  } else {
    if (goog.userAgent.IE || goog.userAgent.OPERA) {
      return el.getAttribute("unselectable") == "on";
    }
  }
  return false;
};
goog.style.setUnselectable = function(el, unselectable, opt_noRecurse) {
  var descendants = !opt_noRecurse ? el.getElementsByTagName("*") : null;
  var name = goog.style.unselectableStyle_;
  if (name) {
    var value = unselectable ? "none" : "";
    el.style[name] = value;
    if (descendants) {
      for (var i = 0, descendant;descendant = descendants[i];i++) {
        descendant.style[name] = value;
      }
    }
  } else {
    if (goog.userAgent.IE || goog.userAgent.OPERA) {
      var value = unselectable ? "on" : "";
      el.setAttribute("unselectable", value);
      if (descendants) {
        for (var i = 0, descendant;descendant = descendants[i];i++) {
          descendant.setAttribute("unselectable", value);
        }
      }
    }
  }
};
goog.style.getBorderBoxSize = function(element) {
  return new goog.math.Size(element.offsetWidth, element.offsetHeight);
};
goog.style.setBorderBoxSize = function(element, size) {
  var doc = goog.dom.getOwnerDocument(element);
  var isCss1CompatMode = goog.dom.getDomHelper(doc).isCss1CompatMode();
  if (goog.userAgent.IE && (!isCss1CompatMode || !goog.userAgent.isVersionOrHigher("8"))) {
    var style = element.style;
    if (isCss1CompatMode) {
      var paddingBox = goog.style.getPaddingBox(element);
      var borderBox = goog.style.getBorderBox(element);
      style.pixelWidth = size.width - borderBox.left - paddingBox.left - paddingBox.right - borderBox.right;
      style.pixelHeight = size.height - borderBox.top - paddingBox.top - paddingBox.bottom - borderBox.bottom;
    } else {
      style.pixelWidth = size.width;
      style.pixelHeight = size.height;
    }
  } else {
    goog.style.setBoxSizingSize_(element, size, "border-box");
  }
};
goog.style.getContentBoxSize = function(element) {
  var doc = goog.dom.getOwnerDocument(element);
  var ieCurrentStyle = goog.userAgent.IE && element.currentStyle;
  if (ieCurrentStyle && goog.dom.getDomHelper(doc).isCss1CompatMode() && ieCurrentStyle.width != "auto" && ieCurrentStyle.height != "auto" && !ieCurrentStyle.boxSizing) {
    var width = goog.style.getIePixelValue_(element, ieCurrentStyle.width, "width", "pixelWidth");
    var height = goog.style.getIePixelValue_(element, ieCurrentStyle.height, "height", "pixelHeight");
    return new goog.math.Size(width, height);
  } else {
    var borderBoxSize = goog.style.getBorderBoxSize(element);
    var paddingBox = goog.style.getPaddingBox(element);
    var borderBox = goog.style.getBorderBox(element);
    return new goog.math.Size(borderBoxSize.width - borderBox.left - paddingBox.left - paddingBox.right - borderBox.right, borderBoxSize.height - borderBox.top - paddingBox.top - paddingBox.bottom - borderBox.bottom);
  }
};
goog.style.setContentBoxSize = function(element, size) {
  var doc = goog.dom.getOwnerDocument(element);
  var isCss1CompatMode = goog.dom.getDomHelper(doc).isCss1CompatMode();
  if (goog.userAgent.IE && (!isCss1CompatMode || !goog.userAgent.isVersionOrHigher("8"))) {
    var style = element.style;
    if (isCss1CompatMode) {
      style.pixelWidth = size.width;
      style.pixelHeight = size.height;
    } else {
      var paddingBox = goog.style.getPaddingBox(element);
      var borderBox = goog.style.getBorderBox(element);
      style.pixelWidth = size.width + borderBox.left + paddingBox.left + paddingBox.right + borderBox.right;
      style.pixelHeight = size.height + borderBox.top + paddingBox.top + paddingBox.bottom + borderBox.bottom;
    }
  } else {
    goog.style.setBoxSizingSize_(element, size, "content-box");
  }
};
goog.style.setBoxSizingSize_ = function(element, size, boxSizing) {
  var style = element.style;
  if (goog.userAgent.GECKO) {
    style.MozBoxSizing = boxSizing;
  } else {
    if (goog.userAgent.WEBKIT) {
      style.WebkitBoxSizing = boxSizing;
    } else {
      style.boxSizing = boxSizing;
    }
  }
  style.width = Math.max(size.width, 0) + "px";
  style.height = Math.max(size.height, 0) + "px";
};
goog.style.getIePixelValue_ = function(element, value, name, pixelName) {
  if (/^\d+px?$/.test(value)) {
    return parseInt(value, 10);
  } else {
    var oldStyleValue = element.style[name];
    var oldRuntimeValue = element.runtimeStyle[name];
    element.runtimeStyle[name] = element.currentStyle[name];
    element.style[name] = value;
    var pixelValue = element.style[pixelName];
    element.style[name] = oldStyleValue;
    element.runtimeStyle[name] = oldRuntimeValue;
    return pixelValue;
  }
};
goog.style.getIePixelDistance_ = function(element, propName) {
  var value = goog.style.getCascadedStyle(element, propName);
  return value ? goog.style.getIePixelValue_(element, value, "left", "pixelLeft") : 0;
};
goog.style.getBox_ = function(element, stylePrefix) {
  if (goog.userAgent.IE) {
    var left = goog.style.getIePixelDistance_(element, stylePrefix + "Left");
    var right = goog.style.getIePixelDistance_(element, stylePrefix + "Right");
    var top = goog.style.getIePixelDistance_(element, stylePrefix + "Top");
    var bottom = goog.style.getIePixelDistance_(element, stylePrefix + "Bottom");
    return new goog.math.Box(top, right, bottom, left);
  } else {
    var left = (goog.style.getComputedStyle(element, stylePrefix + "Left"));
    var right = (goog.style.getComputedStyle(element, stylePrefix + "Right"));
    var top = (goog.style.getComputedStyle(element, stylePrefix + "Top"));
    var bottom = (goog.style.getComputedStyle(element, stylePrefix + "Bottom"));
    return new goog.math.Box(parseFloat(top), parseFloat(right), parseFloat(bottom), parseFloat(left));
  }
};
goog.style.getPaddingBox = function(element) {
  return goog.style.getBox_(element, "padding");
};
goog.style.getMarginBox = function(element) {
  return goog.style.getBox_(element, "margin");
};
goog.style.ieBorderWidthKeywords_ = {"thin":2, "medium":4, "thick":6};
goog.style.getIePixelBorder_ = function(element, prop) {
  if (goog.style.getCascadedStyle(element, prop + "Style") == "none") {
    return 0;
  }
  var width = goog.style.getCascadedStyle(element, prop + "Width");
  if (width in goog.style.ieBorderWidthKeywords_) {
    return goog.style.ieBorderWidthKeywords_[width];
  }
  return goog.style.getIePixelValue_(element, width, "left", "pixelLeft");
};
goog.style.getBorderBox = function(element) {
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    var left = goog.style.getIePixelBorder_(element, "borderLeft");
    var right = goog.style.getIePixelBorder_(element, "borderRight");
    var top = goog.style.getIePixelBorder_(element, "borderTop");
    var bottom = goog.style.getIePixelBorder_(element, "borderBottom");
    return new goog.math.Box(top, right, bottom, left);
  } else {
    var left = (goog.style.getComputedStyle(element, "borderLeftWidth"));
    var right = (goog.style.getComputedStyle(element, "borderRightWidth"));
    var top = (goog.style.getComputedStyle(element, "borderTopWidth"));
    var bottom = (goog.style.getComputedStyle(element, "borderBottomWidth"));
    return new goog.math.Box(parseFloat(top), parseFloat(right), parseFloat(bottom), parseFloat(left));
  }
};
goog.style.getFontFamily = function(el) {
  var doc = goog.dom.getOwnerDocument(el);
  var font = "";
  if (doc.body.createTextRange && goog.dom.contains(doc, el)) {
    var range = doc.body.createTextRange();
    range.moveToElementText(el);
    try {
      font = range.queryCommandValue("FontName");
    } catch (e) {
      font = "";
    }
  }
  if (!font) {
    font = goog.style.getStyle_(el, "fontFamily");
  }
  var fontsArray = font.split(",");
  if (fontsArray.length > 1) {
    font = fontsArray[0];
  }
  return goog.string.stripQuotes(font, "\"'");
};
goog.style.lengthUnitRegex_ = /[^\d]+$/;
goog.style.getLengthUnits = function(value) {
  var units = value.match(goog.style.lengthUnitRegex_);
  return units && units[0] || null;
};
goog.style.ABSOLUTE_CSS_LENGTH_UNITS_ = {"cm":1, "in":1, "mm":1, "pc":1, "pt":1};
goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_ = {"em":1, "ex":1};
goog.style.getFontSize = function(el) {
  var fontSize = goog.style.getStyle_(el, "fontSize");
  var sizeUnits = goog.style.getLengthUnits(fontSize);
  if (fontSize && "px" == sizeUnits) {
    return parseInt(fontSize, 10);
  }
  if (goog.userAgent.IE) {
    if (sizeUnits in goog.style.ABSOLUTE_CSS_LENGTH_UNITS_) {
      return goog.style.getIePixelValue_(el, fontSize, "left", "pixelLeft");
    } else {
      if (el.parentNode && el.parentNode.nodeType == goog.dom.NodeType.ELEMENT && sizeUnits in goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_) {
        var parentElement = (el.parentNode);
        var parentSize = goog.style.getStyle_(parentElement, "fontSize");
        return goog.style.getIePixelValue_(parentElement, fontSize == parentSize ? "1em" : fontSize, "left", "pixelLeft");
      }
    }
  }
  var sizeElement = goog.dom.createDom("span", {"style":"visibility:hidden;position:absolute;" + "line-height:0;padding:0;margin:0;border:0;height:1em;"});
  goog.dom.appendChild(el, sizeElement);
  fontSize = sizeElement.offsetHeight;
  goog.dom.removeNode(sizeElement);
  return fontSize;
};
goog.style.parseStyleAttribute = function(value) {
  var result = {};
  goog.array.forEach(value.split(/\s*;\s*/), function(pair) {
    var keyValue = pair.split(/\s*:\s*/);
    if (keyValue.length == 2) {
      result[goog.string.toCamelCase(keyValue[0].toLowerCase())] = keyValue[1];
    }
  });
  return result;
};
goog.style.toStyleAttribute = function(obj) {
  var buffer = [];
  goog.object.forEach(obj, function(value, key) {
    buffer.push(goog.string.toSelectorCase(key), ":", value, ";");
  });
  return buffer.join("");
};
goog.style.setFloat = function(el, value) {
  el.style[goog.userAgent.IE ? "styleFloat" : "cssFloat"] = value;
};
goog.style.getFloat = function(el) {
  return el.style[goog.userAgent.IE ? "styleFloat" : "cssFloat"] || "";
};
goog.style.getScrollbarWidth = function(opt_className) {
  var outerDiv = goog.dom.createElement("div");
  if (opt_className) {
    outerDiv.className = opt_className;
  }
  outerDiv.style.cssText = "overflow:auto;" + "position:absolute;top:0;width:100px;height:100px";
  var innerDiv = goog.dom.createElement("div");
  goog.style.setSize(innerDiv, "200px", "200px");
  outerDiv.appendChild(innerDiv);
  goog.dom.appendChild(goog.dom.getDocument().body, outerDiv);
  var width = outerDiv.offsetWidth - outerDiv.clientWidth;
  goog.dom.removeNode(outerDiv);
  return width;
};
goog.style.MATRIX_TRANSLATION_REGEX_ = new RegExp("matrix\\([0-9\\.\\-]+, [0-9\\.\\-]+, " + "[0-9\\.\\-]+, [0-9\\.\\-]+, " + "([0-9\\.\\-]+)p?x?, ([0-9\\.\\-]+)p?x?\\)");
goog.style.getCssTranslation = function(element) {
  var transform = goog.style.getComputedTransform(element);
  if (!transform) {
    return new goog.math.Coordinate(0, 0);
  }
  var matches = transform.match(goog.style.MATRIX_TRANSLATION_REGEX_);
  if (!matches) {
    return new goog.math.Coordinate(0, 0);
  }
  return new goog.math.Coordinate(parseFloat(matches[1]), parseFloat(matches[2]));
};
goog.provide("goog.dom.xml");
goog.require("goog.dom");
goog.require("goog.dom.NodeType");
goog.dom.xml.MAX_XML_SIZE_KB = 2 * 1024;
goog.dom.xml.MAX_ELEMENT_DEPTH = 256;
goog.dom.xml.createDocument = function(opt_rootTagName, opt_namespaceUri) {
  if (opt_namespaceUri && !opt_rootTagName) {
    throw Error("Can't create document with namespace and no root tag");
  }
  if (document.implementation && document.implementation.createDocument) {
    return document.implementation.createDocument(opt_namespaceUri || "", opt_rootTagName || "", null);
  } else {
    if (typeof ActiveXObject != "undefined") {
      var doc = goog.dom.xml.createMsXmlDocument_();
      if (doc) {
        if (opt_rootTagName) {
          doc.appendChild(doc.createNode(goog.dom.NodeType.ELEMENT, opt_rootTagName, opt_namespaceUri || ""));
        }
        return doc;
      }
    }
  }
  throw Error("Your browser does not support creating new documents");
};
goog.dom.xml.loadXml = function(xml) {
  if (typeof DOMParser != "undefined") {
    return(new DOMParser).parseFromString(xml, "application/xml");
  } else {
    if (typeof ActiveXObject != "undefined") {
      var doc = goog.dom.xml.createMsXmlDocument_();
      doc.loadXML(xml);
      return doc;
    }
  }
  throw Error("Your browser does not support loading xml documents");
};
goog.dom.xml.serialize = function(xml) {
  if (typeof XMLSerializer != "undefined") {
    return(new XMLSerializer).serializeToString(xml);
  }
  var text = xml.xml;
  if (text) {
    return text;
  }
  throw Error("Your browser does not support serializing XML documents");
};
goog.dom.xml.selectSingleNode = function(node, path) {
  if (typeof node.selectSingleNode != "undefined") {
    var doc = goog.dom.getOwnerDocument(node);
    if (typeof doc.setProperty != "undefined") {
      doc.setProperty("SelectionLanguage", "XPath");
    }
    return node.selectSingleNode(path);
  } else {
    if (document.implementation.hasFeature("XPath", "3.0")) {
      var doc = goog.dom.getOwnerDocument(node);
      var resolver = doc.createNSResolver(doc.documentElement);
      var result = doc.evaluate(path, node, resolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
      return result.singleNodeValue;
    }
  }
  return null;
};
goog.dom.xml.selectNodes = function(node, path) {
  if (typeof node.selectNodes != "undefined") {
    var doc = goog.dom.getOwnerDocument(node);
    if (typeof doc.setProperty != "undefined") {
      doc.setProperty("SelectionLanguage", "XPath");
    }
    return node.selectNodes(path);
  } else {
    if (document.implementation.hasFeature("XPath", "3.0")) {
      var doc = goog.dom.getOwnerDocument(node);
      var resolver = doc.createNSResolver(doc.documentElement);
      var nodes = doc.evaluate(path, node, resolver, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
      var results = [];
      var count = nodes.snapshotLength;
      for (var i = 0;i < count;i++) {
        results.push(nodes.snapshotItem(i));
      }
      return results;
    } else {
      return[];
    }
  }
};
goog.dom.xml.setAttributes = function(element, attributes) {
  for (var key in attributes) {
    if (attributes.hasOwnProperty(key)) {
      element.setAttribute(key, attributes[key]);
    }
  }
};
goog.dom.xml.createMsXmlDocument_ = function() {
  var doc = new ActiveXObject("MSXML2.DOMDocument");
  if (doc) {
    doc.resolveExternals = false;
    doc.validateOnParse = false;
    try {
      doc.setProperty("ProhibitDTD", true);
      doc.setProperty("MaxXMLSize", goog.dom.xml.MAX_XML_SIZE_KB);
      doc.setProperty("MaxElementDepth", goog.dom.xml.MAX_ELEMENT_DEPTH);
    } catch (e) {
    }
  }
  return doc;
};
goog.provide("domina");
goog.require("cljs.core");
goog.require("goog.dom.forms");
goog.require("goog.dom");
goog.require("goog.dom.classes");
goog.require("goog.dom.xml");
goog.require("goog.dom");
goog.require("goog.dom.classes");
goog.require("goog.dom.forms");
goog.require("goog.string");
goog.require("cljs.core");
goog.require("domina.support");
goog.require("goog.events");
goog.require("goog.string");
goog.require("domina.support");
goog.require("goog.style");
goog.require("goog.style");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("goog.events");
goog.require("goog.dom.xml");
goog.require("cljs.core");
domina.re_html = /<|&#?\w+;/;
domina.re_leading_whitespace = /^\s+/;
domina.re_xhtml_tag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/i;
domina.re_tag_name = /<([\w:]+)/;
domina.re_no_inner_html = /<(?:script|style)/i;
domina.re_tbody = /<tbody/i;
var opt_wrapper_15330 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3cselect multiple\x3d'multiple'\x3e", "\x3c/select\x3e"], null);
var table_section_wrapper_15331 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3ctable\x3e", "\x3c/table\x3e"], null);
var cell_wrapper_15332 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [3, "\x3ctable\x3e\x3ctbody\x3e\x3ctr\x3e", "\x3c/tr\x3e\x3c/tbody\x3e\x3c/table\x3e"], null);
domina.wrap_map = cljs.core.PersistentHashMap.fromArrays(["td", "optgroup", "tfoot", "tr", "area", new cljs.core.Keyword(null, "default", "default", -1987822328), "option", "legend", "thead", "col", "caption", "th", "colgroup", "tbody"], [cell_wrapper_15332, opt_wrapper_15330, table_section_wrapper_15331, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [2, "\x3ctable\x3e\x3ctbody\x3e", "\x3c/tbody\x3e\x3c/table\x3e"], null), new cljs.core.PersistentVector(null, 3, 
5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3cmap\x3e", "\x3c/map\x3e"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, "", ""], null), opt_wrapper_15330, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3cfieldset\x3e", "\x3c/fieldset\x3e"], null), table_section_wrapper_15331, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [2, "\x3ctable\x3e\x3ctbody\x3e\x3c/tbody\x3e\x3ccolgroup\x3e", 
"\x3c/colgroup\x3e\x3c/table\x3e"], null), table_section_wrapper_15331, cell_wrapper_15332, table_section_wrapper_15331, table_section_wrapper_15331]);
domina.remove_extraneous_tbody_BANG_ = function remove_extraneous_tbody_BANG_(div, html, tag_name, start_wrap) {
  var no_tbody_QMARK_ = cljs.core.not.call(null, cljs.core.re_find.call(null, domina.re_tbody, html));
  var tbody = cljs.core._EQ_.call(null, tag_name, "table") && no_tbody_QMARK_ ? function() {
    var and__3628__auto__ = div.firstChild;
    if (cljs.core.truth_(and__3628__auto__)) {
      return div.firstChild.childNodes;
    } else {
      return and__3628__auto__;
    }
  }() : cljs.core._EQ_.call(null, start_wrap, "\x3ctable\x3e") && no_tbody_QMARK_ ? div.childNodes : cljs.core.PersistentVector.EMPTY;
  var seq__15337 = cljs.core.seq.call(null, tbody);
  var chunk__15338 = null;
  var count__15339 = 0;
  var i__15340 = 0;
  while (true) {
    if (i__15340 < count__15339) {
      var child = cljs.core._nth.call(null, chunk__15338, i__15340);
      if (cljs.core._EQ_.call(null, child.nodeName, "tbody") && cljs.core._EQ_.call(null, child.childNodes.length, 0)) {
        child.parentNode.removeChild(child);
      } else {
      }
      var G__15341 = seq__15337;
      var G__15342 = chunk__15338;
      var G__15343 = count__15339;
      var G__15344 = i__15340 + 1;
      seq__15337 = G__15341;
      chunk__15338 = G__15342;
      count__15339 = G__15343;
      i__15340 = G__15344;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__15337);
      if (temp__4126__auto__) {
        var seq__15337__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__15337__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__15337__$1);
          var G__15345 = cljs.core.chunk_rest.call(null, seq__15337__$1);
          var G__15346 = c__4410__auto__;
          var G__15347 = cljs.core.count.call(null, c__4410__auto__);
          var G__15348 = 0;
          seq__15337 = G__15345;
          chunk__15338 = G__15346;
          count__15339 = G__15347;
          i__15340 = G__15348;
          continue;
        } else {
          var child = cljs.core.first.call(null, seq__15337__$1);
          if (cljs.core._EQ_.call(null, child.nodeName, "tbody") && cljs.core._EQ_.call(null, child.childNodes.length, 0)) {
            child.parentNode.removeChild(child);
          } else {
          }
          var G__15349 = cljs.core.next.call(null, seq__15337__$1);
          var G__15350 = null;
          var G__15351 = 0;
          var G__15352 = 0;
          seq__15337 = G__15349;
          chunk__15338 = G__15350;
          count__15339 = G__15351;
          i__15340 = G__15352;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
domina.restore_leading_whitespace_BANG_ = function restore_leading_whitespace_BANG_(div, html) {
  return div.insertBefore(document.createTextNode(cljs.core.first.call(null, cljs.core.re_find.call(null, domina.re_leading_whitespace, html))), div.firstChild);
};
domina.html_to_dom = function html_to_dom(html) {
  var html__$1 = clojure.string.replace.call(null, html, domina.re_xhtml_tag, "\x3c$1\x3e\x3c/$2\x3e");
  var tag_name = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.second.call(null, cljs.core.re_find.call(null, domina.re_tag_name, html__$1)))).toLowerCase();
  var vec__15354 = cljs.core.get.call(null, domina.wrap_map, tag_name, (new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(domina.wrap_map));
  var depth = cljs.core.nth.call(null, vec__15354, 0, null);
  var start_wrap = cljs.core.nth.call(null, vec__15354, 1, null);
  var end_wrap = cljs.core.nth.call(null, vec__15354, 2, null);
  var div = function() {
    var wrapper = function() {
      var div = document.createElement("div");
      div.innerHTML = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(start_wrap) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(html__$1) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(end_wrap);
      return div;
    }();
    var level = depth;
    while (true) {
      if (level > 0) {
        var G__15355 = wrapper.lastChild;
        var G__15356 = level - 1;
        wrapper = G__15355;
        level = G__15356;
        continue;
      } else {
        return wrapper;
      }
      break;
    }
  }();
  if (cljs.core.truth_(domina.support.extraneous_tbody_QMARK_)) {
    domina.remove_extraneous_tbody_BANG_.call(null, div, html__$1, tag_name, start_wrap);
  } else {
  }
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = cljs.core.not.call(null, domina.support.leading_whitespace_QMARK_);
    if (and__3628__auto__) {
      return cljs.core.re_find.call(null, domina.re_leading_whitespace, html__$1);
    } else {
      return and__3628__auto__;
    }
  }())) {
    domina.restore_leading_whitespace_BANG_.call(null, div, html__$1);
  } else {
  }
  return div.childNodes;
};
domina.string_to_dom = function string_to_dom(s) {
  if (cljs.core.truth_(cljs.core.re_find.call(null, domina.re_html, s))) {
    return domina.html_to_dom.call(null, s);
  } else {
    return document.createTextNode(s);
  }
};
domina.DomContent = function() {
  var obj15358 = {};
  return obj15358;
}();
domina.nodes = function nodes(content) {
  if (function() {
    var and__3628__auto__ = content;
    if (and__3628__auto__) {
      return content.domina$DomContent$nodes$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return content.domina$DomContent$nodes$arity$1(content);
  } else {
    var x__4277__auto__ = content == null ? null : content;
    return function() {
      var or__3640__auto__ = domina.nodes[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = domina.nodes["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "DomContent.nodes", content);
        }
      }
    }().call(null, content);
  }
};
domina.single_node = function single_node(nodeseq) {
  if (function() {
    var and__3628__auto__ = nodeseq;
    if (and__3628__auto__) {
      return nodeseq.domina$DomContent$single_node$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return nodeseq.domina$DomContent$single_node$arity$1(nodeseq);
  } else {
    var x__4277__auto__ = nodeseq == null ? null : nodeseq;
    return function() {
      var or__3640__auto__ = domina.single_node[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = domina.single_node["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "DomContent.single-node", nodeseq);
        }
      }
    }().call(null, nodeseq);
  }
};
domina._STAR_debug_STAR_ = true;
domina.log_debug = function() {
  var log_debug__delegate = function(mesg) {
    if (cljs.core.truth_(function() {
      var and__3628__auto__ = domina._STAR_debug_STAR_;
      if (cljs.core.truth_(and__3628__auto__)) {
        return!cljs.core._EQ_.call(null, window.console, undefined);
      } else {
        return and__3628__auto__;
      }
    }())) {
      return console.log(cljs.core.apply.call(null, cljs.core.str, mesg));
    } else {
      return null;
    }
  };
  var log_debug = function(var_args) {
    var mesg = null;
    if (arguments.length > 0) {
      mesg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return log_debug__delegate.call(this, mesg);
  };
  log_debug.cljs$lang$maxFixedArity = 0;
  log_debug.cljs$lang$applyTo = function(arglist__15359) {
    var mesg = cljs.core.seq(arglist__15359);
    return log_debug__delegate(mesg);
  };
  log_debug.cljs$core$IFn$_invoke$arity$variadic = log_debug__delegate;
  return log_debug;
}();
domina.log = function() {
  var log__delegate = function(mesg) {
    if (cljs.core.truth_(window.console)) {
      return console.log(cljs.core.apply.call(null, cljs.core.str, mesg));
    } else {
      return null;
    }
  };
  var log = function(var_args) {
    var mesg = null;
    if (arguments.length > 0) {
      mesg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return log__delegate.call(this, mesg);
  };
  log.cljs$lang$maxFixedArity = 0;
  log.cljs$lang$applyTo = function(arglist__15360) {
    var mesg = cljs.core.seq(arglist__15360);
    return log__delegate(mesg);
  };
  log.cljs$core$IFn$_invoke$arity$variadic = log__delegate;
  return log;
}();
domina.by_id = function by_id(id) {
  return goog.dom.getElement(cljs.core.name.call(null, id));
};
domina.by_class = function by_class(class_name) {
  return domina.normalize_seq.call(null, goog.dom.getElementsByClass(cljs.core.name.call(null, class_name)));
};
domina.children = function children(content) {
  return cljs.core.doall.call(null, cljs.core.mapcat.call(null, goog.dom.getChildren, domina.nodes.call(null, content)));
};
domina.common_ancestor = function() {
  var common_ancestor__delegate = function(contents) {
    return cljs.core.apply.call(null, goog.dom.findCommonAncestor, cljs.core.map.call(null, domina.single_node, contents));
  };
  var common_ancestor = function(var_args) {
    var contents = null;
    if (arguments.length > 0) {
      contents = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return common_ancestor__delegate.call(this, contents);
  };
  common_ancestor.cljs$lang$maxFixedArity = 0;
  common_ancestor.cljs$lang$applyTo = function(arglist__15361) {
    var contents = cljs.core.seq(arglist__15361);
    return common_ancestor__delegate(contents);
  };
  common_ancestor.cljs$core$IFn$_invoke$arity$variadic = common_ancestor__delegate;
  return common_ancestor;
}();
domina.ancestor_QMARK_ = function ancestor_QMARK_(ancestor_content, descendant_content) {
  return cljs.core._EQ_.call(null, domina.common_ancestor.call(null, ancestor_content, descendant_content), domina.single_node.call(null, ancestor_content));
};
domina.clone = function clone(content) {
  return cljs.core.map.call(null, function(p1__15362_SHARP_) {
    return p1__15362_SHARP_.cloneNode(true);
  }, domina.nodes.call(null, content));
};
domina.append_BANG_ = function append_BANG_(parent_content, child_content) {
  domina.apply_with_cloning.call(null, goog.dom.appendChild, parent_content, child_content);
  return parent_content;
};
domina.insert_BANG_ = function insert_BANG_(parent_content, child_content, idx) {
  domina.apply_with_cloning.call(null, function(p1__15363_SHARP_, p2__15364_SHARP_) {
    return goog.dom.insertChildAt(p1__15363_SHARP_, p2__15364_SHARP_, idx);
  }, parent_content, child_content);
  return parent_content;
};
domina.prepend_BANG_ = function prepend_BANG_(parent_content, child_content) {
  domina.insert_BANG_.call(null, parent_content, child_content, 0);
  return parent_content;
};
domina.insert_before_BANG_ = function insert_before_BANG_(content, new_content) {
  domina.apply_with_cloning.call(null, function(p1__15366_SHARP_, p2__15365_SHARP_) {
    return goog.dom.insertSiblingBefore(p2__15365_SHARP_, p1__15366_SHARP_);
  }, content, new_content);
  return content;
};
domina.insert_after_BANG_ = function insert_after_BANG_(content, new_content) {
  domina.apply_with_cloning.call(null, function(p1__15368_SHARP_, p2__15367_SHARP_) {
    return goog.dom.insertSiblingAfter(p2__15367_SHARP_, p1__15368_SHARP_);
  }, content, new_content);
  return content;
};
domina.swap_content_BANG_ = function swap_content_BANG_(old_content, new_content) {
  domina.apply_with_cloning.call(null, function(p1__15370_SHARP_, p2__15369_SHARP_) {
    return goog.dom.replaceNode(p2__15369_SHARP_, p1__15370_SHARP_);
  }, old_content, new_content);
  return old_content;
};
domina.detach_BANG_ = function detach_BANG_(content) {
  return cljs.core.doall.call(null, cljs.core.map.call(null, goog.dom.removeNode, domina.nodes.call(null, content)));
};
domina.destroy_BANG_ = function destroy_BANG_(content) {
  return cljs.core.dorun.call(null, cljs.core.map.call(null, goog.dom.removeNode, domina.nodes.call(null, content)));
};
domina.destroy_children_BANG_ = function destroy_children_BANG_(content) {
  cljs.core.dorun.call(null, cljs.core.map.call(null, goog.dom.removeChildren, domina.nodes.call(null, content)));
  return content;
};
domina.style = function style(content, name) {
  var s = goog.style.getStyle(domina.single_node.call(null, content), cljs.core.name.call(null, name));
  if (cljs.core.truth_(clojure.string.blank_QMARK_.call(null, s))) {
    return null;
  } else {
    return s;
  }
};
domina.attr = function attr(content, name) {
  return domina.single_node.call(null, content).getAttribute(cljs.core.name.call(null, name));
};
domina.set_style_BANG_ = function() {
  var set_style_BANG___delegate = function(content, name, value) {
    var seq__15375_15379 = cljs.core.seq.call(null, domina.nodes.call(null, content));
    var chunk__15376_15380 = null;
    var count__15377_15381 = 0;
    var i__15378_15382 = 0;
    while (true) {
      if (i__15378_15382 < count__15377_15381) {
        var n_15383 = cljs.core._nth.call(null, chunk__15376_15380, i__15378_15382);
        goog.style.setStyle(n_15383, cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
        var G__15384 = seq__15375_15379;
        var G__15385 = chunk__15376_15380;
        var G__15386 = count__15377_15381;
        var G__15387 = i__15378_15382 + 1;
        seq__15375_15379 = G__15384;
        chunk__15376_15380 = G__15385;
        count__15377_15381 = G__15386;
        i__15378_15382 = G__15387;
        continue;
      } else {
        var temp__4126__auto___15388 = cljs.core.seq.call(null, seq__15375_15379);
        if (temp__4126__auto___15388) {
          var seq__15375_15389__$1 = temp__4126__auto___15388;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15375_15389__$1)) {
            var c__4410__auto___15390 = cljs.core.chunk_first.call(null, seq__15375_15389__$1);
            var G__15391 = cljs.core.chunk_rest.call(null, seq__15375_15389__$1);
            var G__15392 = c__4410__auto___15390;
            var G__15393 = cljs.core.count.call(null, c__4410__auto___15390);
            var G__15394 = 0;
            seq__15375_15379 = G__15391;
            chunk__15376_15380 = G__15392;
            count__15377_15381 = G__15393;
            i__15378_15382 = G__15394;
            continue;
          } else {
            var n_15395 = cljs.core.first.call(null, seq__15375_15389__$1);
            goog.style.setStyle(n_15395, cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
            var G__15396 = cljs.core.next.call(null, seq__15375_15389__$1);
            var G__15397 = null;
            var G__15398 = 0;
            var G__15399 = 0;
            seq__15375_15379 = G__15396;
            chunk__15376_15380 = G__15397;
            count__15377_15381 = G__15398;
            i__15378_15382 = G__15399;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return content;
  };
  var set_style_BANG_ = function(content, name, var_args) {
    var value = null;
    if (arguments.length > 2) {
      value = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return set_style_BANG___delegate.call(this, content, name, value);
  };
  set_style_BANG_.cljs$lang$maxFixedArity = 2;
  set_style_BANG_.cljs$lang$applyTo = function(arglist__15400) {
    var content = cljs.core.first(arglist__15400);
    arglist__15400 = cljs.core.next(arglist__15400);
    var name = cljs.core.first(arglist__15400);
    var value = cljs.core.rest(arglist__15400);
    return set_style_BANG___delegate(content, name, value);
  };
  set_style_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_style_BANG___delegate;
  return set_style_BANG_;
}();
domina.set_attr_BANG_ = function() {
  var set_attr_BANG___delegate = function(content, name, value) {
    var seq__15405_15409 = cljs.core.seq.call(null, domina.nodes.call(null, content));
    var chunk__15406_15410 = null;
    var count__15407_15411 = 0;
    var i__15408_15412 = 0;
    while (true) {
      if (i__15408_15412 < count__15407_15411) {
        var n_15413 = cljs.core._nth.call(null, chunk__15406_15410, i__15408_15412);
        n_15413.setAttribute(cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
        var G__15414 = seq__15405_15409;
        var G__15415 = chunk__15406_15410;
        var G__15416 = count__15407_15411;
        var G__15417 = i__15408_15412 + 1;
        seq__15405_15409 = G__15414;
        chunk__15406_15410 = G__15415;
        count__15407_15411 = G__15416;
        i__15408_15412 = G__15417;
        continue;
      } else {
        var temp__4126__auto___15418 = cljs.core.seq.call(null, seq__15405_15409);
        if (temp__4126__auto___15418) {
          var seq__15405_15419__$1 = temp__4126__auto___15418;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15405_15419__$1)) {
            var c__4410__auto___15420 = cljs.core.chunk_first.call(null, seq__15405_15419__$1);
            var G__15421 = cljs.core.chunk_rest.call(null, seq__15405_15419__$1);
            var G__15422 = c__4410__auto___15420;
            var G__15423 = cljs.core.count.call(null, c__4410__auto___15420);
            var G__15424 = 0;
            seq__15405_15409 = G__15421;
            chunk__15406_15410 = G__15422;
            count__15407_15411 = G__15423;
            i__15408_15412 = G__15424;
            continue;
          } else {
            var n_15425 = cljs.core.first.call(null, seq__15405_15419__$1);
            n_15425.setAttribute(cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
            var G__15426 = cljs.core.next.call(null, seq__15405_15419__$1);
            var G__15427 = null;
            var G__15428 = 0;
            var G__15429 = 0;
            seq__15405_15409 = G__15426;
            chunk__15406_15410 = G__15427;
            count__15407_15411 = G__15428;
            i__15408_15412 = G__15429;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return content;
  };
  var set_attr_BANG_ = function(content, name, var_args) {
    var value = null;
    if (arguments.length > 2) {
      value = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return set_attr_BANG___delegate.call(this, content, name, value);
  };
  set_attr_BANG_.cljs$lang$maxFixedArity = 2;
  set_attr_BANG_.cljs$lang$applyTo = function(arglist__15430) {
    var content = cljs.core.first(arglist__15430);
    arglist__15430 = cljs.core.next(arglist__15430);
    var name = cljs.core.first(arglist__15430);
    var value = cljs.core.rest(arglist__15430);
    return set_attr_BANG___delegate(content, name, value);
  };
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_attr_BANG___delegate;
  return set_attr_BANG_;
}();
domina.remove_attr_BANG_ = function remove_attr_BANG_(content, name) {
  var seq__15435_15439 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__15436_15440 = null;
  var count__15437_15441 = 0;
  var i__15438_15442 = 0;
  while (true) {
    if (i__15438_15442 < count__15437_15441) {
      var n_15443 = cljs.core._nth.call(null, chunk__15436_15440, i__15438_15442);
      n_15443.removeAttribute(cljs.core.name.call(null, name));
      var G__15444 = seq__15435_15439;
      var G__15445 = chunk__15436_15440;
      var G__15446 = count__15437_15441;
      var G__15447 = i__15438_15442 + 1;
      seq__15435_15439 = G__15444;
      chunk__15436_15440 = G__15445;
      count__15437_15441 = G__15446;
      i__15438_15442 = G__15447;
      continue;
    } else {
      var temp__4126__auto___15448 = cljs.core.seq.call(null, seq__15435_15439);
      if (temp__4126__auto___15448) {
        var seq__15435_15449__$1 = temp__4126__auto___15448;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__15435_15449__$1)) {
          var c__4410__auto___15450 = cljs.core.chunk_first.call(null, seq__15435_15449__$1);
          var G__15451 = cljs.core.chunk_rest.call(null, seq__15435_15449__$1);
          var G__15452 = c__4410__auto___15450;
          var G__15453 = cljs.core.count.call(null, c__4410__auto___15450);
          var G__15454 = 0;
          seq__15435_15439 = G__15451;
          chunk__15436_15440 = G__15452;
          count__15437_15441 = G__15453;
          i__15438_15442 = G__15454;
          continue;
        } else {
          var n_15455 = cljs.core.first.call(null, seq__15435_15449__$1);
          n_15455.removeAttribute(cljs.core.name.call(null, name));
          var G__15456 = cljs.core.next.call(null, seq__15435_15449__$1);
          var G__15457 = null;
          var G__15458 = 0;
          var G__15459 = 0;
          seq__15435_15439 = G__15456;
          chunk__15436_15440 = G__15457;
          count__15437_15441 = G__15458;
          i__15438_15442 = G__15459;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.parse_style_attributes = function parse_style_attributes(style) {
  return cljs.core.reduce.call(null, function(acc, pair) {
    var vec__15461 = pair.split(/\s*:\s*/);
    var k = cljs.core.nth.call(null, vec__15461, 0, null);
    var v = cljs.core.nth.call(null, vec__15461, 1, null);
    if (cljs.core.truth_(function() {
      var and__3628__auto__ = k;
      if (cljs.core.truth_(and__3628__auto__)) {
        return v;
      } else {
        return and__3628__auto__;
      }
    }())) {
      return cljs.core.assoc.call(null, acc, cljs.core.keyword.call(null, k.toLowerCase()), v);
    } else {
      return acc;
    }
  }, cljs.core.PersistentArrayMap.EMPTY, style.split(/\s*;\s*/));
};
domina.styles = function styles(content) {
  var style = domina.attr.call(null, content, "style");
  if (typeof style === "string") {
    return domina.parse_style_attributes.call(null, style);
  } else {
    if (style == null) {
      return cljs.core.PersistentArrayMap.EMPTY;
    } else {
      if (cljs.core.truth_(style.cssText)) {
        return domina.parse_style_attributes.call(null, style.cssText);
      } else {
        return cljs.core.PersistentArrayMap.EMPTY;
      }
    }
  }
};
domina.attrs = function attrs(content) {
  var node = domina.single_node.call(null, content);
  var attrs__$1 = node.attributes;
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.filter.call(null, cljs.core.complement.call(null, cljs.core.nil_QMARK_), cljs.core.map.call(null, function(node, attrs__$1) {
    return function(p1__15462_SHARP_) {
      var attr = attrs__$1.item(p1__15462_SHARP_);
      var value = attr.nodeValue;
      if (cljs.core.not_EQ_.call(null, null, value) && cljs.core.not_EQ_.call(null, "", value)) {
        return new cljs.core.PersistentArrayMap.fromArray([cljs.core.keyword.call(null, attr.nodeName.toLowerCase()), attr.nodeValue], true, false);
      } else {
        return null;
      }
    };
  }(node, attrs__$1), cljs.core.range.call(null, attrs__$1.length))));
};
domina.set_styles_BANG_ = function set_styles_BANG_(content, styles) {
  var seq__15469_15475 = cljs.core.seq.call(null, styles);
  var chunk__15470_15476 = null;
  var count__15471_15477 = 0;
  var i__15472_15478 = 0;
  while (true) {
    if (i__15472_15478 < count__15471_15477) {
      var vec__15473_15479 = cljs.core._nth.call(null, chunk__15470_15476, i__15472_15478);
      var name_15480 = cljs.core.nth.call(null, vec__15473_15479, 0, null);
      var value_15481 = cljs.core.nth.call(null, vec__15473_15479, 1, null);
      domina.set_style_BANG_.call(null, content, name_15480, value_15481);
      var G__15482 = seq__15469_15475;
      var G__15483 = chunk__15470_15476;
      var G__15484 = count__15471_15477;
      var G__15485 = i__15472_15478 + 1;
      seq__15469_15475 = G__15482;
      chunk__15470_15476 = G__15483;
      count__15471_15477 = G__15484;
      i__15472_15478 = G__15485;
      continue;
    } else {
      var temp__4126__auto___15486 = cljs.core.seq.call(null, seq__15469_15475);
      if (temp__4126__auto___15486) {
        var seq__15469_15487__$1 = temp__4126__auto___15486;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__15469_15487__$1)) {
          var c__4410__auto___15488 = cljs.core.chunk_first.call(null, seq__15469_15487__$1);
          var G__15489 = cljs.core.chunk_rest.call(null, seq__15469_15487__$1);
          var G__15490 = c__4410__auto___15488;
          var G__15491 = cljs.core.count.call(null, c__4410__auto___15488);
          var G__15492 = 0;
          seq__15469_15475 = G__15489;
          chunk__15470_15476 = G__15490;
          count__15471_15477 = G__15491;
          i__15472_15478 = G__15492;
          continue;
        } else {
          var vec__15474_15493 = cljs.core.first.call(null, seq__15469_15487__$1);
          var name_15494 = cljs.core.nth.call(null, vec__15474_15493, 0, null);
          var value_15495 = cljs.core.nth.call(null, vec__15474_15493, 1, null);
          domina.set_style_BANG_.call(null, content, name_15494, value_15495);
          var G__15496 = cljs.core.next.call(null, seq__15469_15487__$1);
          var G__15497 = null;
          var G__15498 = 0;
          var G__15499 = 0;
          seq__15469_15475 = G__15496;
          chunk__15470_15476 = G__15497;
          count__15471_15477 = G__15498;
          i__15472_15478 = G__15499;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.set_attrs_BANG_ = function set_attrs_BANG_(content, attrs) {
  var seq__15506_15512 = cljs.core.seq.call(null, attrs);
  var chunk__15507_15513 = null;
  var count__15508_15514 = 0;
  var i__15509_15515 = 0;
  while (true) {
    if (i__15509_15515 < count__15508_15514) {
      var vec__15510_15516 = cljs.core._nth.call(null, chunk__15507_15513, i__15509_15515);
      var name_15517 = cljs.core.nth.call(null, vec__15510_15516, 0, null);
      var value_15518 = cljs.core.nth.call(null, vec__15510_15516, 1, null);
      domina.set_attr_BANG_.call(null, content, name_15517, value_15518);
      var G__15519 = seq__15506_15512;
      var G__15520 = chunk__15507_15513;
      var G__15521 = count__15508_15514;
      var G__15522 = i__15509_15515 + 1;
      seq__15506_15512 = G__15519;
      chunk__15507_15513 = G__15520;
      count__15508_15514 = G__15521;
      i__15509_15515 = G__15522;
      continue;
    } else {
      var temp__4126__auto___15523 = cljs.core.seq.call(null, seq__15506_15512);
      if (temp__4126__auto___15523) {
        var seq__15506_15524__$1 = temp__4126__auto___15523;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__15506_15524__$1)) {
          var c__4410__auto___15525 = cljs.core.chunk_first.call(null, seq__15506_15524__$1);
          var G__15526 = cljs.core.chunk_rest.call(null, seq__15506_15524__$1);
          var G__15527 = c__4410__auto___15525;
          var G__15528 = cljs.core.count.call(null, c__4410__auto___15525);
          var G__15529 = 0;
          seq__15506_15512 = G__15526;
          chunk__15507_15513 = G__15527;
          count__15508_15514 = G__15528;
          i__15509_15515 = G__15529;
          continue;
        } else {
          var vec__15511_15530 = cljs.core.first.call(null, seq__15506_15524__$1);
          var name_15531 = cljs.core.nth.call(null, vec__15511_15530, 0, null);
          var value_15532 = cljs.core.nth.call(null, vec__15511_15530, 1, null);
          domina.set_attr_BANG_.call(null, content, name_15531, value_15532);
          var G__15533 = cljs.core.next.call(null, seq__15506_15524__$1);
          var G__15534 = null;
          var G__15535 = 0;
          var G__15536 = 0;
          seq__15506_15512 = G__15533;
          chunk__15507_15513 = G__15534;
          count__15508_15514 = G__15535;
          i__15509_15515 = G__15536;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.has_class_QMARK_ = function has_class_QMARK_(content, class$) {
  return goog.dom.classes.has(domina.single_node.call(null, content), class$);
};
domina.add_class_BANG_ = function add_class_BANG_(content, class$) {
  var seq__15541_15545 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__15542_15546 = null;
  var count__15543_15547 = 0;
  var i__15544_15548 = 0;
  while (true) {
    if (i__15544_15548 < count__15543_15547) {
      var node_15549 = cljs.core._nth.call(null, chunk__15542_15546, i__15544_15548);
      goog.dom.classes.add(node_15549, class$);
      var G__15550 = seq__15541_15545;
      var G__15551 = chunk__15542_15546;
      var G__15552 = count__15543_15547;
      var G__15553 = i__15544_15548 + 1;
      seq__15541_15545 = G__15550;
      chunk__15542_15546 = G__15551;
      count__15543_15547 = G__15552;
      i__15544_15548 = G__15553;
      continue;
    } else {
      var temp__4126__auto___15554 = cljs.core.seq.call(null, seq__15541_15545);
      if (temp__4126__auto___15554) {
        var seq__15541_15555__$1 = temp__4126__auto___15554;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__15541_15555__$1)) {
          var c__4410__auto___15556 = cljs.core.chunk_first.call(null, seq__15541_15555__$1);
          var G__15557 = cljs.core.chunk_rest.call(null, seq__15541_15555__$1);
          var G__15558 = c__4410__auto___15556;
          var G__15559 = cljs.core.count.call(null, c__4410__auto___15556);
          var G__15560 = 0;
          seq__15541_15545 = G__15557;
          chunk__15542_15546 = G__15558;
          count__15543_15547 = G__15559;
          i__15544_15548 = G__15560;
          continue;
        } else {
          var node_15561 = cljs.core.first.call(null, seq__15541_15555__$1);
          goog.dom.classes.add(node_15561, class$);
          var G__15562 = cljs.core.next.call(null, seq__15541_15555__$1);
          var G__15563 = null;
          var G__15564 = 0;
          var G__15565 = 0;
          seq__15541_15545 = G__15562;
          chunk__15542_15546 = G__15563;
          count__15543_15547 = G__15564;
          i__15544_15548 = G__15565;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.remove_class_BANG_ = function remove_class_BANG_(content, class$) {
  var seq__15570_15574 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__15571_15575 = null;
  var count__15572_15576 = 0;
  var i__15573_15577 = 0;
  while (true) {
    if (i__15573_15577 < count__15572_15576) {
      var node_15578 = cljs.core._nth.call(null, chunk__15571_15575, i__15573_15577);
      goog.dom.classes.remove(node_15578, class$);
      var G__15579 = seq__15570_15574;
      var G__15580 = chunk__15571_15575;
      var G__15581 = count__15572_15576;
      var G__15582 = i__15573_15577 + 1;
      seq__15570_15574 = G__15579;
      chunk__15571_15575 = G__15580;
      count__15572_15576 = G__15581;
      i__15573_15577 = G__15582;
      continue;
    } else {
      var temp__4126__auto___15583 = cljs.core.seq.call(null, seq__15570_15574);
      if (temp__4126__auto___15583) {
        var seq__15570_15584__$1 = temp__4126__auto___15583;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__15570_15584__$1)) {
          var c__4410__auto___15585 = cljs.core.chunk_first.call(null, seq__15570_15584__$1);
          var G__15586 = cljs.core.chunk_rest.call(null, seq__15570_15584__$1);
          var G__15587 = c__4410__auto___15585;
          var G__15588 = cljs.core.count.call(null, c__4410__auto___15585);
          var G__15589 = 0;
          seq__15570_15574 = G__15586;
          chunk__15571_15575 = G__15587;
          count__15572_15576 = G__15588;
          i__15573_15577 = G__15589;
          continue;
        } else {
          var node_15590 = cljs.core.first.call(null, seq__15570_15584__$1);
          goog.dom.classes.remove(node_15590, class$);
          var G__15591 = cljs.core.next.call(null, seq__15570_15584__$1);
          var G__15592 = null;
          var G__15593 = 0;
          var G__15594 = 0;
          seq__15570_15574 = G__15591;
          chunk__15571_15575 = G__15592;
          count__15572_15576 = G__15593;
          i__15573_15577 = G__15594;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.toggle_class_BANG_ = function toggle_class_BANG_(content, class$) {
  var seq__15599_15603 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__15600_15604 = null;
  var count__15601_15605 = 0;
  var i__15602_15606 = 0;
  while (true) {
    if (i__15602_15606 < count__15601_15605) {
      var node_15607 = cljs.core._nth.call(null, chunk__15600_15604, i__15602_15606);
      goog.dom.classes.toggle(node_15607, class$);
      var G__15608 = seq__15599_15603;
      var G__15609 = chunk__15600_15604;
      var G__15610 = count__15601_15605;
      var G__15611 = i__15602_15606 + 1;
      seq__15599_15603 = G__15608;
      chunk__15600_15604 = G__15609;
      count__15601_15605 = G__15610;
      i__15602_15606 = G__15611;
      continue;
    } else {
      var temp__4126__auto___15612 = cljs.core.seq.call(null, seq__15599_15603);
      if (temp__4126__auto___15612) {
        var seq__15599_15613__$1 = temp__4126__auto___15612;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__15599_15613__$1)) {
          var c__4410__auto___15614 = cljs.core.chunk_first.call(null, seq__15599_15613__$1);
          var G__15615 = cljs.core.chunk_rest.call(null, seq__15599_15613__$1);
          var G__15616 = c__4410__auto___15614;
          var G__15617 = cljs.core.count.call(null, c__4410__auto___15614);
          var G__15618 = 0;
          seq__15599_15603 = G__15615;
          chunk__15600_15604 = G__15616;
          count__15601_15605 = G__15617;
          i__15602_15606 = G__15618;
          continue;
        } else {
          var node_15619 = cljs.core.first.call(null, seq__15599_15613__$1);
          goog.dom.classes.toggle(node_15619, class$);
          var G__15620 = cljs.core.next.call(null, seq__15599_15613__$1);
          var G__15621 = null;
          var G__15622 = 0;
          var G__15623 = 0;
          seq__15599_15603 = G__15620;
          chunk__15600_15604 = G__15621;
          count__15601_15605 = G__15622;
          i__15602_15606 = G__15623;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.classes = function classes(content) {
  return cljs.core.seq.call(null, goog.dom.classes.get(domina.single_node.call(null, content)));
};
domina.set_classes_BANG_ = function set_classes_BANG_(content, classes) {
  var classes_15632__$1 = cljs.core.coll_QMARK_.call(null, classes) ? clojure.string.join.call(null, " ", classes) : classes;
  var seq__15628_15633 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__15629_15634 = null;
  var count__15630_15635 = 0;
  var i__15631_15636 = 0;
  while (true) {
    if (i__15631_15636 < count__15630_15635) {
      var node_15637 = cljs.core._nth.call(null, chunk__15629_15634, i__15631_15636);
      goog.dom.classes.set(node_15637, classes_15632__$1);
      var G__15638 = seq__15628_15633;
      var G__15639 = chunk__15629_15634;
      var G__15640 = count__15630_15635;
      var G__15641 = i__15631_15636 + 1;
      seq__15628_15633 = G__15638;
      chunk__15629_15634 = G__15639;
      count__15630_15635 = G__15640;
      i__15631_15636 = G__15641;
      continue;
    } else {
      var temp__4126__auto___15642 = cljs.core.seq.call(null, seq__15628_15633);
      if (temp__4126__auto___15642) {
        var seq__15628_15643__$1 = temp__4126__auto___15642;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__15628_15643__$1)) {
          var c__4410__auto___15644 = cljs.core.chunk_first.call(null, seq__15628_15643__$1);
          var G__15645 = cljs.core.chunk_rest.call(null, seq__15628_15643__$1);
          var G__15646 = c__4410__auto___15644;
          var G__15647 = cljs.core.count.call(null, c__4410__auto___15644);
          var G__15648 = 0;
          seq__15628_15633 = G__15645;
          chunk__15629_15634 = G__15646;
          count__15630_15635 = G__15647;
          i__15631_15636 = G__15648;
          continue;
        } else {
          var node_15649 = cljs.core.first.call(null, seq__15628_15643__$1);
          goog.dom.classes.set(node_15649, classes_15632__$1);
          var G__15650 = cljs.core.next.call(null, seq__15628_15643__$1);
          var G__15651 = null;
          var G__15652 = 0;
          var G__15653 = 0;
          seq__15628_15633 = G__15650;
          chunk__15629_15634 = G__15651;
          count__15630_15635 = G__15652;
          i__15631_15636 = G__15653;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.text = function text(content) {
  return goog.string.trim(goog.dom.getTextContent(domina.single_node.call(null, content)));
};
domina.set_text_BANG_ = function set_text_BANG_(content, value) {
  var seq__15658_15662 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__15659_15663 = null;
  var count__15660_15664 = 0;
  var i__15661_15665 = 0;
  while (true) {
    if (i__15661_15665 < count__15660_15664) {
      var node_15666 = cljs.core._nth.call(null, chunk__15659_15663, i__15661_15665);
      goog.dom.setTextContent(node_15666, value);
      var G__15667 = seq__15658_15662;
      var G__15668 = chunk__15659_15663;
      var G__15669 = count__15660_15664;
      var G__15670 = i__15661_15665 + 1;
      seq__15658_15662 = G__15667;
      chunk__15659_15663 = G__15668;
      count__15660_15664 = G__15669;
      i__15661_15665 = G__15670;
      continue;
    } else {
      var temp__4126__auto___15671 = cljs.core.seq.call(null, seq__15658_15662);
      if (temp__4126__auto___15671) {
        var seq__15658_15672__$1 = temp__4126__auto___15671;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__15658_15672__$1)) {
          var c__4410__auto___15673 = cljs.core.chunk_first.call(null, seq__15658_15672__$1);
          var G__15674 = cljs.core.chunk_rest.call(null, seq__15658_15672__$1);
          var G__15675 = c__4410__auto___15673;
          var G__15676 = cljs.core.count.call(null, c__4410__auto___15673);
          var G__15677 = 0;
          seq__15658_15662 = G__15674;
          chunk__15659_15663 = G__15675;
          count__15660_15664 = G__15676;
          i__15661_15665 = G__15677;
          continue;
        } else {
          var node_15678 = cljs.core.first.call(null, seq__15658_15672__$1);
          goog.dom.setTextContent(node_15678, value);
          var G__15679 = cljs.core.next.call(null, seq__15658_15672__$1);
          var G__15680 = null;
          var G__15681 = 0;
          var G__15682 = 0;
          seq__15658_15662 = G__15679;
          chunk__15659_15663 = G__15680;
          count__15660_15664 = G__15681;
          i__15661_15665 = G__15682;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.value = function value(content) {
  return goog.dom.forms.getValue(domina.single_node.call(null, content));
};
domina.set_value_BANG_ = function set_value_BANG_(content, value) {
  var seq__15687_15691 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__15688_15692 = null;
  var count__15689_15693 = 0;
  var i__15690_15694 = 0;
  while (true) {
    if (i__15690_15694 < count__15689_15693) {
      var node_15695 = cljs.core._nth.call(null, chunk__15688_15692, i__15690_15694);
      goog.dom.forms.setValue(node_15695, value);
      var G__15696 = seq__15687_15691;
      var G__15697 = chunk__15688_15692;
      var G__15698 = count__15689_15693;
      var G__15699 = i__15690_15694 + 1;
      seq__15687_15691 = G__15696;
      chunk__15688_15692 = G__15697;
      count__15689_15693 = G__15698;
      i__15690_15694 = G__15699;
      continue;
    } else {
      var temp__4126__auto___15700 = cljs.core.seq.call(null, seq__15687_15691);
      if (temp__4126__auto___15700) {
        var seq__15687_15701__$1 = temp__4126__auto___15700;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__15687_15701__$1)) {
          var c__4410__auto___15702 = cljs.core.chunk_first.call(null, seq__15687_15701__$1);
          var G__15703 = cljs.core.chunk_rest.call(null, seq__15687_15701__$1);
          var G__15704 = c__4410__auto___15702;
          var G__15705 = cljs.core.count.call(null, c__4410__auto___15702);
          var G__15706 = 0;
          seq__15687_15691 = G__15703;
          chunk__15688_15692 = G__15704;
          count__15689_15693 = G__15705;
          i__15690_15694 = G__15706;
          continue;
        } else {
          var node_15707 = cljs.core.first.call(null, seq__15687_15701__$1);
          goog.dom.forms.setValue(node_15707, value);
          var G__15708 = cljs.core.next.call(null, seq__15687_15701__$1);
          var G__15709 = null;
          var G__15710 = 0;
          var G__15711 = 0;
          seq__15687_15691 = G__15708;
          chunk__15688_15692 = G__15709;
          count__15689_15693 = G__15710;
          i__15690_15694 = G__15711;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.html = function html(content) {
  return domina.single_node.call(null, content).innerHTML;
};
domina.replace_children_BANG_ = function replace_children_BANG_(content, inner_content) {
  return domina.append_BANG_.call(null, domina.destroy_children_BANG_.call(null, content), inner_content);
};
domina.set_inner_html_BANG_ = function set_inner_html_BANG_(content, html_string) {
  var allows_inner_html_QMARK_ = cljs.core.not.call(null, cljs.core.re_find.call(null, domina.re_no_inner_html, html_string));
  var leading_whitespace_QMARK_ = cljs.core.re_find.call(null, domina.re_leading_whitespace, html_string);
  var tag_name = ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.second.call(null, cljs.core.re_find.call(null, domina.re_tag_name, html_string)))).toLowerCase();
  var special_tag_QMARK_ = cljs.core.contains_QMARK_.call(null, domina.wrap_map, tag_name);
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = allows_inner_html_QMARK_;
    if (and__3628__auto__) {
      var and__3628__auto____$1 = function() {
        var or__3640__auto__ = domina.support.leading_whitespace_QMARK_;
        if (cljs.core.truth_(or__3640__auto__)) {
          return or__3640__auto__;
        } else {
          return cljs.core.not.call(null, leading_whitespace_QMARK_);
        }
      }();
      if (cljs.core.truth_(and__3628__auto____$1)) {
        return!special_tag_QMARK_;
      } else {
        return and__3628__auto____$1;
      }
    } else {
      return and__3628__auto__;
    }
  }())) {
    var value_15722 = clojure.string.replace.call(null, html_string, domina.re_xhtml_tag, "\x3c$1\x3e\x3c/$2\x3e");
    try {
      var seq__15718_15723 = cljs.core.seq.call(null, domina.nodes.call(null, content));
      var chunk__15719_15724 = null;
      var count__15720_15725 = 0;
      var i__15721_15726 = 0;
      while (true) {
        if (i__15721_15726 < count__15720_15725) {
          var node_15727 = cljs.core._nth.call(null, chunk__15719_15724, i__15721_15726);
          node_15727.innerHTML = value_15722;
          var G__15728 = seq__15718_15723;
          var G__15729 = chunk__15719_15724;
          var G__15730 = count__15720_15725;
          var G__15731 = i__15721_15726 + 1;
          seq__15718_15723 = G__15728;
          chunk__15719_15724 = G__15729;
          count__15720_15725 = G__15730;
          i__15721_15726 = G__15731;
          continue;
        } else {
          var temp__4126__auto___15732 = cljs.core.seq.call(null, seq__15718_15723);
          if (temp__4126__auto___15732) {
            var seq__15718_15733__$1 = temp__4126__auto___15732;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__15718_15733__$1)) {
              var c__4410__auto___15734 = cljs.core.chunk_first.call(null, seq__15718_15733__$1);
              var G__15735 = cljs.core.chunk_rest.call(null, seq__15718_15733__$1);
              var G__15736 = c__4410__auto___15734;
              var G__15737 = cljs.core.count.call(null, c__4410__auto___15734);
              var G__15738 = 0;
              seq__15718_15723 = G__15735;
              chunk__15719_15724 = G__15736;
              count__15720_15725 = G__15737;
              i__15721_15726 = G__15738;
              continue;
            } else {
              var node_15739 = cljs.core.first.call(null, seq__15718_15733__$1);
              node_15739.innerHTML = value_15722;
              var G__15740 = cljs.core.next.call(null, seq__15718_15733__$1);
              var G__15741 = null;
              var G__15742 = 0;
              var G__15743 = 0;
              seq__15718_15723 = G__15740;
              chunk__15719_15724 = G__15741;
              count__15720_15725 = G__15742;
              i__15721_15726 = G__15743;
              continue;
            }
          } else {
          }
        }
        break;
      }
    } catch (e15717) {
      if (e15717 instanceof Error) {
        var e_15744 = e15717;
        domina.replace_children_BANG_.call(null, content, value_15722);
      } else {
        throw e15717;
      }
    }
  } else {
    domina.replace_children_BANG_.call(null, content, html_string);
  }
  return content;
};
domina.set_html_BANG_ = function set_html_BANG_(content, inner_content) {
  if (typeof inner_content === "string") {
    return domina.set_inner_html_BANG_.call(null, content, inner_content);
  } else {
    return domina.replace_children_BANG_.call(null, content, inner_content);
  }
};
domina.get_data = function() {
  var get_data = null;
  var get_data__2 = function(node, key) {
    return get_data.call(null, node, key, false);
  };
  var get_data__3 = function(node, key, bubble) {
    var m = domina.single_node.call(null, node).__domina_data;
    var value = cljs.core.truth_(m) ? cljs.core.get.call(null, m, key) : null;
    if (cljs.core.truth_(function() {
      var and__3628__auto__ = bubble;
      if (cljs.core.truth_(and__3628__auto__)) {
        return value == null;
      } else {
        return and__3628__auto__;
      }
    }())) {
      var temp__4126__auto__ = domina.single_node.call(null, node).parentNode;
      if (cljs.core.truth_(temp__4126__auto__)) {
        var parent = temp__4126__auto__;
        return get_data.call(null, parent, key, true);
      } else {
        return null;
      }
    } else {
      return value;
    }
  };
  get_data = function(node, key, bubble) {
    switch(arguments.length) {
      case 2:
        return get_data__2.call(this, node, key);
      case 3:
        return get_data__3.call(this, node, key, bubble);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_data.cljs$core$IFn$_invoke$arity$2 = get_data__2;
  get_data.cljs$core$IFn$_invoke$arity$3 = get_data__3;
  return get_data;
}();
domina.set_data_BANG_ = function set_data_BANG_(node, key, value) {
  var m = function() {
    var or__3640__auto__ = domina.single_node.call(null, node).__domina_data;
    if (cljs.core.truth_(or__3640__auto__)) {
      return or__3640__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }();
  return domina.single_node.call(null, node).__domina_data = cljs.core.assoc.call(null, m, key, value);
};
domina.apply_with_cloning = function apply_with_cloning(f, parent_content, child_content) {
  var parents = domina.nodes.call(null, parent_content);
  var children = domina.nodes.call(null, child_content);
  var first_child = function() {
    var frag = document.createDocumentFragment();
    var seq__15751_15755 = cljs.core.seq.call(null, children);
    var chunk__15752_15756 = null;
    var count__15753_15757 = 0;
    var i__15754_15758 = 0;
    while (true) {
      if (i__15754_15758 < count__15753_15757) {
        var child_15759 = cljs.core._nth.call(null, chunk__15752_15756, i__15754_15758);
        frag.appendChild(child_15759);
        var G__15760 = seq__15751_15755;
        var G__15761 = chunk__15752_15756;
        var G__15762 = count__15753_15757;
        var G__15763 = i__15754_15758 + 1;
        seq__15751_15755 = G__15760;
        chunk__15752_15756 = G__15761;
        count__15753_15757 = G__15762;
        i__15754_15758 = G__15763;
        continue;
      } else {
        var temp__4126__auto___15764 = cljs.core.seq.call(null, seq__15751_15755);
        if (temp__4126__auto___15764) {
          var seq__15751_15765__$1 = temp__4126__auto___15764;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15751_15765__$1)) {
            var c__4410__auto___15766 = cljs.core.chunk_first.call(null, seq__15751_15765__$1);
            var G__15767 = cljs.core.chunk_rest.call(null, seq__15751_15765__$1);
            var G__15768 = c__4410__auto___15766;
            var G__15769 = cljs.core.count.call(null, c__4410__auto___15766);
            var G__15770 = 0;
            seq__15751_15755 = G__15767;
            chunk__15752_15756 = G__15768;
            count__15753_15757 = G__15769;
            i__15754_15758 = G__15770;
            continue;
          } else {
            var child_15771 = cljs.core.first.call(null, seq__15751_15765__$1);
            frag.appendChild(child_15771);
            var G__15772 = cljs.core.next.call(null, seq__15751_15765__$1);
            var G__15773 = null;
            var G__15774 = 0;
            var G__15775 = 0;
            seq__15751_15755 = G__15772;
            chunk__15752_15756 = G__15773;
            count__15753_15757 = G__15774;
            i__15754_15758 = G__15775;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return frag;
  }();
  var other_children = cljs.core.doall.call(null, cljs.core.repeatedly.call(null, cljs.core.count.call(null, parents) - 1, function(parents, children, first_child) {
    return function() {
      return first_child.cloneNode(true);
    };
  }(parents, children, first_child)));
  if (cljs.core.seq.call(null, parents)) {
    f.call(null, cljs.core.first.call(null, parents), first_child);
    return cljs.core.doall.call(null, cljs.core.map.call(null, function(parents, children, first_child, other_children) {
      return function(p1__15745_SHARP_, p2__15746_SHARP_) {
        return f.call(null, p1__15745_SHARP_, p2__15746_SHARP_);
      };
    }(parents, children, first_child, other_children), cljs.core.rest.call(null, parents), other_children));
  } else {
    return null;
  }
};
domina.lazy_nl_via_item = function() {
  var lazy_nl_via_item = null;
  var lazy_nl_via_item__1 = function(nl) {
    return lazy_nl_via_item.call(null, nl, 0);
  };
  var lazy_nl_via_item__2 = function(nl, n) {
    if (n < nl.length) {
      return new cljs.core.LazySeq(null, function() {
        return cljs.core.cons.call(null, nl.item(n), lazy_nl_via_item.call(null, nl, n + 1));
      }, null, null);
    } else {
      return null;
    }
  };
  lazy_nl_via_item = function(nl, n) {
    switch(arguments.length) {
      case 1:
        return lazy_nl_via_item__1.call(this, nl);
      case 2:
        return lazy_nl_via_item__2.call(this, nl, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  lazy_nl_via_item.cljs$core$IFn$_invoke$arity$1 = lazy_nl_via_item__1;
  lazy_nl_via_item.cljs$core$IFn$_invoke$arity$2 = lazy_nl_via_item__2;
  return lazy_nl_via_item;
}();
domina.lazy_nl_via_array_ref = function() {
  var lazy_nl_via_array_ref = null;
  var lazy_nl_via_array_ref__1 = function(nl) {
    return lazy_nl_via_array_ref.call(null, nl, 0);
  };
  var lazy_nl_via_array_ref__2 = function(nl, n) {
    if (n < nl.length) {
      return new cljs.core.LazySeq(null, function() {
        return cljs.core.cons.call(null, nl[n], lazy_nl_via_array_ref.call(null, nl, n + 1));
      }, null, null);
    } else {
      return null;
    }
  };
  lazy_nl_via_array_ref = function(nl, n) {
    switch(arguments.length) {
      case 1:
        return lazy_nl_via_array_ref__1.call(this, nl);
      case 2:
        return lazy_nl_via_array_ref__2.call(this, nl, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  lazy_nl_via_array_ref.cljs$core$IFn$_invoke$arity$1 = lazy_nl_via_array_ref__1;
  lazy_nl_via_array_ref.cljs$core$IFn$_invoke$arity$2 = lazy_nl_via_array_ref__2;
  return lazy_nl_via_array_ref;
}();
domina.lazy_nodelist = function lazy_nodelist(nl) {
  if (cljs.core.truth_(nl.item)) {
    return domina.lazy_nl_via_item.call(null, nl);
  } else {
    return domina.lazy_nl_via_array_ref.call(null, nl);
  }
};
domina.array_like_QMARK_ = function array_like_QMARK_(obj) {
  var and__3628__auto__ = obj;
  if (cljs.core.truth_(and__3628__auto__)) {
    var and__3628__auto____$1 = cljs.core.not.call(null, obj.nodeName);
    if (and__3628__auto____$1) {
      return obj.length;
    } else {
      return and__3628__auto____$1;
    }
  } else {
    return and__3628__auto__;
  }
};
domina.normalize_seq = function normalize_seq(list_thing) {
  if (list_thing == null) {
    return cljs.core.List.EMPTY;
  } else {
    if (function() {
      var G__15777 = list_thing;
      if (G__15777) {
        var bit__4304__auto__ = G__15777.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4304__auto__ || G__15777.cljs$core$ISeqable$) {
          return true;
        } else {
          if (!G__15777.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__15777);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__15777);
      }
    }()) {
      return cljs.core.seq.call(null, list_thing);
    } else {
      if (cljs.core.truth_(domina.array_like_QMARK_.call(null, list_thing))) {
        return domina.lazy_nodelist.call(null, list_thing);
      } else {
        return cljs.core.seq.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [list_thing], null));
      }
    }
  }
};
domina.DomContent["_"] = true;
domina.nodes["_"] = function(content) {
  if (content == null) {
    return cljs.core.List.EMPTY;
  } else {
    if (function() {
      var G__15778 = content;
      if (G__15778) {
        var bit__4304__auto__ = G__15778.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4304__auto__ || G__15778.cljs$core$ISeqable$) {
          return true;
        } else {
          if (!G__15778.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__15778);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__15778);
      }
    }()) {
      return cljs.core.seq.call(null, content);
    } else {
      if (cljs.core.truth_(domina.array_like_QMARK_.call(null, content))) {
        return domina.lazy_nodelist.call(null, content);
      } else {
        return cljs.core.seq.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [content], null));
      }
    }
  }
};
domina.single_node["_"] = function(content) {
  if (content == null) {
    return null;
  } else {
    if (function() {
      var G__15779 = content;
      if (G__15779) {
        var bit__4304__auto__ = G__15779.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4304__auto__ || G__15779.cljs$core$ISeqable$) {
          return true;
        } else {
          if (!G__15779.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__15779);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__15779);
      }
    }()) {
      return cljs.core.first.call(null, content);
    } else {
      if (cljs.core.truth_(domina.array_like_QMARK_.call(null, content))) {
        return content.item(0);
      } else {
        return content;
      }
    }
  }
};
domina.DomContent["string"] = true;
domina.nodes["string"] = function(s) {
  return cljs.core.doall.call(null, domina.nodes.call(null, domina.string_to_dom.call(null, s)));
};
domina.single_node["string"] = function(s) {
  return domina.single_node.call(null, domina.string_to_dom.call(null, s));
};
if (cljs.core.truth_(typeof NodeList != "undefined")) {
  NodeList.prototype.cljs$core$ISeqable$ = true;
  NodeList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return domina.lazy_nodelist.call(null, nodelist__$1);
  };
  NodeList.prototype.cljs$core$IIndexed$ = true;
  NodeList.prototype.cljs$core$IIndexed$_nth$arity$2 = function(nodelist, n) {
    var nodelist__$1 = this;
    return nodelist__$1.item(n);
  };
  NodeList.prototype.cljs$core$IIndexed$_nth$arity$3 = function(nodelist, n, not_found) {
    var nodelist__$1 = this;
    if (nodelist__$1.length <= n) {
      return not_found;
    } else {
      return cljs.core.nth.call(null, nodelist__$1, n);
    }
  };
  NodeList.prototype.cljs$core$ICounted$ = true;
  NodeList.prototype.cljs$core$ICounted$_count$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return nodelist__$1.length;
  };
} else {
}
if (cljs.core.truth_(typeof StaticNodeList != "undefined")) {
  StaticNodeList.prototype.cljs$core$ISeqable$ = true;
  StaticNodeList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return domina.lazy_nodelist.call(null, nodelist__$1);
  };
  StaticNodeList.prototype.cljs$core$IIndexed$ = true;
  StaticNodeList.prototype.cljs$core$IIndexed$_nth$arity$2 = function(nodelist, n) {
    var nodelist__$1 = this;
    return nodelist__$1.item(n);
  };
  StaticNodeList.prototype.cljs$core$IIndexed$_nth$arity$3 = function(nodelist, n, not_found) {
    var nodelist__$1 = this;
    if (nodelist__$1.length <= n) {
      return not_found;
    } else {
      return cljs.core.nth.call(null, nodelist__$1, n);
    }
  };
  StaticNodeList.prototype.cljs$core$ICounted$ = true;
  StaticNodeList.prototype.cljs$core$ICounted$_count$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return nodelist__$1.length;
  };
} else {
}
if (cljs.core.truth_(typeof HTMLCollection != "undefined")) {
  HTMLCollection.prototype.cljs$core$ISeqable$ = true;
  HTMLCollection.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
    var coll__$1 = this;
    return domina.lazy_nodelist.call(null, coll__$1);
  };
  HTMLCollection.prototype.cljs$core$IIndexed$ = true;
  HTMLCollection.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
    var coll__$1 = this;
    return coll__$1.item(n);
  };
  HTMLCollection.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
    var coll__$1 = this;
    if (coll__$1.length <= n) {
      return not_found;
    } else {
      return cljs.core.nth.call(null, coll__$1, n);
    }
  };
  HTMLCollection.prototype.cljs$core$ICounted$ = true;
  HTMLCollection.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
    var coll__$1 = this;
    return coll__$1.length;
  };
} else {
}
;goog.provide("domina.events");
goog.require("cljs.core");
goog.require("goog.events");
goog.require("goog.events");
goog.require("goog.object");
goog.require("goog.object");
goog.require("domina");
domina.events.Event = function() {
  var obj15783 = {};
  return obj15783;
}();
domina.events.prevent_default = function prevent_default(evt) {
  if (function() {
    var and__3628__auto__ = evt;
    if (and__3628__auto__) {
      return evt.domina$events$Event$prevent_default$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return evt.domina$events$Event$prevent_default$arity$1(evt);
  } else {
    var x__4277__auto__ = evt == null ? null : evt;
    return function() {
      var or__3640__auto__ = domina.events.prevent_default[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = domina.events.prevent_default["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Event.prevent-default", evt);
        }
      }
    }().call(null, evt);
  }
};
domina.events.stop_propagation = function stop_propagation(evt) {
  if (function() {
    var and__3628__auto__ = evt;
    if (and__3628__auto__) {
      return evt.domina$events$Event$stop_propagation$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return evt.domina$events$Event$stop_propagation$arity$1(evt);
  } else {
    var x__4277__auto__ = evt == null ? null : evt;
    return function() {
      var or__3640__auto__ = domina.events.stop_propagation[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = domina.events.stop_propagation["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Event.stop-propagation", evt);
        }
      }
    }().call(null, evt);
  }
};
domina.events.target = function target(evt) {
  if (function() {
    var and__3628__auto__ = evt;
    if (and__3628__auto__) {
      return evt.domina$events$Event$target$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return evt.domina$events$Event$target$arity$1(evt);
  } else {
    var x__4277__auto__ = evt == null ? null : evt;
    return function() {
      var or__3640__auto__ = domina.events.target[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = domina.events.target["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Event.target", evt);
        }
      }
    }().call(null, evt);
  }
};
domina.events.current_target = function current_target(evt) {
  if (function() {
    var and__3628__auto__ = evt;
    if (and__3628__auto__) {
      return evt.domina$events$Event$current_target$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return evt.domina$events$Event$current_target$arity$1(evt);
  } else {
    var x__4277__auto__ = evt == null ? null : evt;
    return function() {
      var or__3640__auto__ = domina.events.current_target[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = domina.events.current_target["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Event.current-target", evt);
        }
      }
    }().call(null, evt);
  }
};
domina.events.event_type = function event_type(evt) {
  if (function() {
    var and__3628__auto__ = evt;
    if (and__3628__auto__) {
      return evt.domina$events$Event$event_type$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return evt.domina$events$Event$event_type$arity$1(evt);
  } else {
    var x__4277__auto__ = evt == null ? null : evt;
    return function() {
      var or__3640__auto__ = domina.events.event_type[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = domina.events.event_type["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Event.event-type", evt);
        }
      }
    }().call(null, evt);
  }
};
domina.events.raw_event = function raw_event(evt) {
  if (function() {
    var and__3628__auto__ = evt;
    if (and__3628__auto__) {
      return evt.domina$events$Event$raw_event$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return evt.domina$events$Event$raw_event$arity$1(evt);
  } else {
    var x__4277__auto__ = evt == null ? null : evt;
    return function() {
      var or__3640__auto__ = domina.events.raw_event[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = domina.events.raw_event["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Event.raw-event", evt);
        }
      }
    }().call(null, evt);
  }
};
domina.events.root_element = window.document.documentElement;
domina.events.create_listener_function = function create_listener_function(f) {
  return function(evt) {
    f.call(null, function() {
      if (typeof domina.events.t15787 !== "undefined") {
      } else {
        domina.events.t15787 = function(evt, f, create_listener_function, meta15788) {
          this.evt = evt;
          this.f = f;
          this.create_listener_function = create_listener_function;
          this.meta15788 = meta15788;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393472;
        };
        domina.events.t15787.cljs$lang$type = true;
        domina.events.t15787.cljs$lang$ctorStr = "domina.events/t15787";
        domina.events.t15787.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
          return cljs.core._write.call(null, writer__4218__auto__, "domina.events/t15787");
        };
        domina.events.t15787.prototype.cljs$core$ILookup$_lookup$arity$2 = function(o, k) {
          var self__ = this;
          var o__$1 = this;
          var temp__4124__auto__ = self__.evt[k];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var val = temp__4124__auto__;
            return val;
          } else {
            return self__.evt[cljs.core.name.call(null, k)];
          }
        };
        domina.events.t15787.prototype.cljs$core$ILookup$_lookup$arity$3 = function(o, k, not_found) {
          var self__ = this;
          var o__$1 = this;
          var or__3640__auto__ = cljs.core._lookup.call(null, o__$1, k);
          if (cljs.core.truth_(or__3640__auto__)) {
            return or__3640__auto__;
          } else {
            return not_found;
          }
        };
        domina.events.t15787.prototype.domina$events$Event$ = true;
        domina.events.t15787.prototype.domina$events$Event$prevent_default$arity$1 = function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.evt.preventDefault();
        };
        domina.events.t15787.prototype.domina$events$Event$stop_propagation$arity$1 = function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.evt.stopPropagation();
        };
        domina.events.t15787.prototype.domina$events$Event$target$arity$1 = function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.evt.target;
        };
        domina.events.t15787.prototype.domina$events$Event$current_target$arity$1 = function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.evt.currentTarget;
        };
        domina.events.t15787.prototype.domina$events$Event$event_type$arity$1 = function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.evt.type;
        };
        domina.events.t15787.prototype.domina$events$Event$raw_event$arity$1 = function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.evt;
        };
        domina.events.t15787.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15789) {
          var self__ = this;
          var _15789__$1 = this;
          return self__.meta15788;
        };
        domina.events.t15787.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15789, meta15788__$1) {
          var self__ = this;
          var _15789__$1 = this;
          return new domina.events.t15787(self__.evt, self__.f, self__.create_listener_function, meta15788__$1);
        };
        domina.events.__GT_t15787 = function __GT_t15787(evt__$1, f__$1, create_listener_function__$1, meta15788) {
          return new domina.events.t15787(evt__$1, f__$1, create_listener_function__$1, meta15788);
        };
      }
      return new domina.events.t15787(evt, f, create_listener_function, null);
    }());
    return true;
  };
};
domina.events.listen_internal_BANG_ = function listen_internal_BANG_(content, type, listener, capture, once) {
  var f = domina.events.create_listener_function.call(null, listener);
  var t = cljs.core.name.call(null, type);
  return cljs.core.doall.call(null, function() {
    var iter__4379__auto__ = function(f, t) {
      return function iter__15794(s__15795) {
        return new cljs.core.LazySeq(null, function(f, t) {
          return function() {
            var s__15795__$1 = s__15795;
            while (true) {
              var temp__4126__auto__ = cljs.core.seq.call(null, s__15795__$1);
              if (temp__4126__auto__) {
                var s__15795__$2 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__15795__$2)) {
                  var c__4377__auto__ = cljs.core.chunk_first.call(null, s__15795__$2);
                  var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                  var b__15797 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                  if (function() {
                    var i__15796 = 0;
                    while (true) {
                      if (i__15796 < size__4378__auto__) {
                        var node = cljs.core._nth.call(null, c__4377__auto__, i__15796);
                        cljs.core.chunk_append.call(null, b__15797, cljs.core.truth_(once) ? goog.events.listenOnce(node, t, f, capture) : goog.events.listen(node, t, f, capture));
                        var G__15798 = i__15796 + 1;
                        i__15796 = G__15798;
                        continue;
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15797), iter__15794.call(null, cljs.core.chunk_rest.call(null, s__15795__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15797), null);
                  }
                } else {
                  var node = cljs.core.first.call(null, s__15795__$2);
                  return cljs.core.cons.call(null, cljs.core.truth_(once) ? goog.events.listenOnce(node, t, f, capture) : goog.events.listen(node, t, f, capture), iter__15794.call(null, cljs.core.rest.call(null, s__15795__$2)));
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(f, t), null, null);
      };
    }(f, t);
    return iter__4379__auto__.call(null, domina.nodes.call(null, content));
  }());
};
domina.events.listen_BANG_ = function() {
  var listen_BANG_ = null;
  var listen_BANG___2 = function(type, listener) {
    return listen_BANG_.call(null, domina.events.root_element, type, listener);
  };
  var listen_BANG___3 = function(content, type, listener) {
    return domina.events.listen_internal_BANG_.call(null, content, type, listener, false, false);
  };
  listen_BANG_ = function(content, type, listener) {
    switch(arguments.length) {
      case 2:
        return listen_BANG___2.call(this, content, type);
      case 3:
        return listen_BANG___3.call(this, content, type, listener);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  listen_BANG_.cljs$core$IFn$_invoke$arity$2 = listen_BANG___2;
  listen_BANG_.cljs$core$IFn$_invoke$arity$3 = listen_BANG___3;
  return listen_BANG_;
}();
domina.events.capture_BANG_ = function() {
  var capture_BANG_ = null;
  var capture_BANG___2 = function(type, listener) {
    return capture_BANG_.call(null, domina.events.root_element, type, listener);
  };
  var capture_BANG___3 = function(content, type, listener) {
    return domina.events.listen_internal_BANG_.call(null, content, type, listener, true, false);
  };
  capture_BANG_ = function(content, type, listener) {
    switch(arguments.length) {
      case 2:
        return capture_BANG___2.call(this, content, type);
      case 3:
        return capture_BANG___3.call(this, content, type, listener);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  capture_BANG_.cljs$core$IFn$_invoke$arity$2 = capture_BANG___2;
  capture_BANG_.cljs$core$IFn$_invoke$arity$3 = capture_BANG___3;
  return capture_BANG_;
}();
domina.events.listen_once_BANG_ = function() {
  var listen_once_BANG_ = null;
  var listen_once_BANG___2 = function(type, listener) {
    return listen_once_BANG_.call(null, domina.events.root_element, type, listener);
  };
  var listen_once_BANG___3 = function(content, type, listener) {
    return domina.events.listen_internal_BANG_.call(null, content, type, listener, false, true);
  };
  listen_once_BANG_ = function(content, type, listener) {
    switch(arguments.length) {
      case 2:
        return listen_once_BANG___2.call(this, content, type);
      case 3:
        return listen_once_BANG___3.call(this, content, type, listener);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  listen_once_BANG_.cljs$core$IFn$_invoke$arity$2 = listen_once_BANG___2;
  listen_once_BANG_.cljs$core$IFn$_invoke$arity$3 = listen_once_BANG___3;
  return listen_once_BANG_;
}();
domina.events.capture_once_BANG_ = function() {
  var capture_once_BANG_ = null;
  var capture_once_BANG___2 = function(type, listener) {
    return capture_once_BANG_.call(null, domina.events.root_element, type, listener);
  };
  var capture_once_BANG___3 = function(content, type, listener) {
    return domina.events.listen_internal_BANG_.call(null, content, type, listener, true, true);
  };
  capture_once_BANG_ = function(content, type, listener) {
    switch(arguments.length) {
      case 2:
        return capture_once_BANG___2.call(this, content, type);
      case 3:
        return capture_once_BANG___3.call(this, content, type, listener);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  capture_once_BANG_.cljs$core$IFn$_invoke$arity$2 = capture_once_BANG___2;
  capture_once_BANG_.cljs$core$IFn$_invoke$arity$3 = capture_once_BANG___3;
  return capture_once_BANG_;
}();
domina.events.unlisten_BANG_ = function() {
  var unlisten_BANG_ = null;
  var unlisten_BANG___0 = function() {
    return unlisten_BANG_.call(null, domina.events.root_element);
  };
  var unlisten_BANG___1 = function(content) {
    var seq__15807 = cljs.core.seq.call(null, domina.nodes.call(null, content));
    var chunk__15808 = null;
    var count__15809 = 0;
    var i__15810 = 0;
    while (true) {
      if (i__15810 < count__15809) {
        var node = cljs.core._nth.call(null, chunk__15808, i__15810);
        goog.events.removeAll(node);
        var G__15815 = seq__15807;
        var G__15816 = chunk__15808;
        var G__15817 = count__15809;
        var G__15818 = i__15810 + 1;
        seq__15807 = G__15815;
        chunk__15808 = G__15816;
        count__15809 = G__15817;
        i__15810 = G__15818;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__15807);
        if (temp__4126__auto__) {
          var seq__15807__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15807__$1)) {
            var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__15807__$1);
            var G__15819 = cljs.core.chunk_rest.call(null, seq__15807__$1);
            var G__15820 = c__4410__auto__;
            var G__15821 = cljs.core.count.call(null, c__4410__auto__);
            var G__15822 = 0;
            seq__15807 = G__15819;
            chunk__15808 = G__15820;
            count__15809 = G__15821;
            i__15810 = G__15822;
            continue;
          } else {
            var node = cljs.core.first.call(null, seq__15807__$1);
            goog.events.removeAll(node);
            var G__15823 = cljs.core.next.call(null, seq__15807__$1);
            var G__15824 = null;
            var G__15825 = 0;
            var G__15826 = 0;
            seq__15807 = G__15823;
            chunk__15808 = G__15824;
            count__15809 = G__15825;
            i__15810 = G__15826;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var unlisten_BANG___2 = function(content, type) {
    var type__$1 = cljs.core.name.call(null, type);
    var seq__15811 = cljs.core.seq.call(null, domina.nodes.call(null, content));
    var chunk__15812 = null;
    var count__15813 = 0;
    var i__15814 = 0;
    while (true) {
      if (i__15814 < count__15813) {
        var node = cljs.core._nth.call(null, chunk__15812, i__15814);
        goog.events.removeAll(node, type__$1);
        var G__15827 = seq__15811;
        var G__15828 = chunk__15812;
        var G__15829 = count__15813;
        var G__15830 = i__15814 + 1;
        seq__15811 = G__15827;
        chunk__15812 = G__15828;
        count__15813 = G__15829;
        i__15814 = G__15830;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__15811);
        if (temp__4126__auto__) {
          var seq__15811__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15811__$1)) {
            var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__15811__$1);
            var G__15831 = cljs.core.chunk_rest.call(null, seq__15811__$1);
            var G__15832 = c__4410__auto__;
            var G__15833 = cljs.core.count.call(null, c__4410__auto__);
            var G__15834 = 0;
            seq__15811 = G__15831;
            chunk__15812 = G__15832;
            count__15813 = G__15833;
            i__15814 = G__15834;
            continue;
          } else {
            var node = cljs.core.first.call(null, seq__15811__$1);
            goog.events.removeAll(node, type__$1);
            var G__15835 = cljs.core.next.call(null, seq__15811__$1);
            var G__15836 = null;
            var G__15837 = 0;
            var G__15838 = 0;
            seq__15811 = G__15835;
            chunk__15812 = G__15836;
            count__15813 = G__15837;
            i__15814 = G__15838;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  unlisten_BANG_ = function(content, type) {
    switch(arguments.length) {
      case 0:
        return unlisten_BANG___0.call(this);
      case 1:
        return unlisten_BANG___1.call(this, content);
      case 2:
        return unlisten_BANG___2.call(this, content, type);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unlisten_BANG_.cljs$core$IFn$_invoke$arity$0 = unlisten_BANG___0;
  unlisten_BANG_.cljs$core$IFn$_invoke$arity$1 = unlisten_BANG___1;
  unlisten_BANG_.cljs$core$IFn$_invoke$arity$2 = unlisten_BANG___2;
  return unlisten_BANG_;
}();
domina.events.ancestor_nodes = function() {
  var ancestor_nodes = null;
  var ancestor_nodes__1 = function(n) {
    return ancestor_nodes.call(null, n, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [n], null));
  };
  var ancestor_nodes__2 = function(n, so_far) {
    while (true) {
      var temp__4124__auto__ = n.parentNode;
      if (cljs.core.truth_(temp__4124__auto__)) {
        var parent = temp__4124__auto__;
        var G__15839 = parent;
        var G__15840 = cljs.core.cons.call(null, parent, so_far);
        n = G__15839;
        so_far = G__15840;
        continue;
      } else {
        return so_far;
      }
      break;
    }
  };
  ancestor_nodes = function(n, so_far) {
    switch(arguments.length) {
      case 1:
        return ancestor_nodes__1.call(this, n);
      case 2:
        return ancestor_nodes__2.call(this, n, so_far);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestor_nodes.cljs$core$IFn$_invoke$arity$1 = ancestor_nodes__1;
  ancestor_nodes.cljs$core$IFn$_invoke$arity$2 = ancestor_nodes__2;
  return ancestor_nodes;
}();
domina.events.dispatch_browser_BANG_ = function dispatch_browser_BANG_(source, evt) {
  evt.target = domina.single_node.call(null, source);
  var ancestors = domina.events.ancestor_nodes.call(null, domina.single_node.call(null, source));
  var seq__15849_15857 = cljs.core.seq.call(null, ancestors);
  var chunk__15850_15858 = null;
  var count__15851_15859 = 0;
  var i__15852_15860 = 0;
  while (true) {
    if (i__15852_15860 < count__15851_15859) {
      var n_15861 = cljs.core._nth.call(null, chunk__15850_15858, i__15852_15860);
      if (cljs.core.truth_(evt.propagationStopped_)) {
      } else {
        evt.currentTarget = n_15861;
        goog.events.fireListeners(n_15861, evt.type, true, evt);
      }
      var G__15862 = seq__15849_15857;
      var G__15863 = chunk__15850_15858;
      var G__15864 = count__15851_15859;
      var G__15865 = i__15852_15860 + 1;
      seq__15849_15857 = G__15862;
      chunk__15850_15858 = G__15863;
      count__15851_15859 = G__15864;
      i__15852_15860 = G__15865;
      continue;
    } else {
      var temp__4126__auto___15866 = cljs.core.seq.call(null, seq__15849_15857);
      if (temp__4126__auto___15866) {
        var seq__15849_15867__$1 = temp__4126__auto___15866;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__15849_15867__$1)) {
          var c__4410__auto___15868 = cljs.core.chunk_first.call(null, seq__15849_15867__$1);
          var G__15869 = cljs.core.chunk_rest.call(null, seq__15849_15867__$1);
          var G__15870 = c__4410__auto___15868;
          var G__15871 = cljs.core.count.call(null, c__4410__auto___15868);
          var G__15872 = 0;
          seq__15849_15857 = G__15869;
          chunk__15850_15858 = G__15870;
          count__15851_15859 = G__15871;
          i__15852_15860 = G__15872;
          continue;
        } else {
          var n_15873 = cljs.core.first.call(null, seq__15849_15867__$1);
          if (cljs.core.truth_(evt.propagationStopped_)) {
          } else {
            evt.currentTarget = n_15873;
            goog.events.fireListeners(n_15873, evt.type, true, evt);
          }
          var G__15874 = cljs.core.next.call(null, seq__15849_15867__$1);
          var G__15875 = null;
          var G__15876 = 0;
          var G__15877 = 0;
          seq__15849_15857 = G__15874;
          chunk__15850_15858 = G__15875;
          count__15851_15859 = G__15876;
          i__15852_15860 = G__15877;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var seq__15853_15878 = cljs.core.seq.call(null, cljs.core.reverse.call(null, ancestors));
  var chunk__15854_15879 = null;
  var count__15855_15880 = 0;
  var i__15856_15881 = 0;
  while (true) {
    if (i__15856_15881 < count__15855_15880) {
      var n_15882 = cljs.core._nth.call(null, chunk__15854_15879, i__15856_15881);
      if (cljs.core.truth_(evt.propagationStopped_)) {
      } else {
        evt.currentTarget = n_15882;
        goog.events.fireListeners(n_15882, evt.type, false, evt);
      }
      var G__15883 = seq__15853_15878;
      var G__15884 = chunk__15854_15879;
      var G__15885 = count__15855_15880;
      var G__15886 = i__15856_15881 + 1;
      seq__15853_15878 = G__15883;
      chunk__15854_15879 = G__15884;
      count__15855_15880 = G__15885;
      i__15856_15881 = G__15886;
      continue;
    } else {
      var temp__4126__auto___15887 = cljs.core.seq.call(null, seq__15853_15878);
      if (temp__4126__auto___15887) {
        var seq__15853_15888__$1 = temp__4126__auto___15887;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__15853_15888__$1)) {
          var c__4410__auto___15889 = cljs.core.chunk_first.call(null, seq__15853_15888__$1);
          var G__15890 = cljs.core.chunk_rest.call(null, seq__15853_15888__$1);
          var G__15891 = c__4410__auto___15889;
          var G__15892 = cljs.core.count.call(null, c__4410__auto___15889);
          var G__15893 = 0;
          seq__15853_15878 = G__15890;
          chunk__15854_15879 = G__15891;
          count__15855_15880 = G__15892;
          i__15856_15881 = G__15893;
          continue;
        } else {
          var n_15894 = cljs.core.first.call(null, seq__15853_15888__$1);
          if (cljs.core.truth_(evt.propagationStopped_)) {
          } else {
            evt.currentTarget = n_15894;
            goog.events.fireListeners(n_15894, evt.type, false, evt);
          }
          var G__15895 = cljs.core.next.call(null, seq__15853_15888__$1);
          var G__15896 = null;
          var G__15897 = 0;
          var G__15898 = 0;
          seq__15853_15878 = G__15895;
          chunk__15854_15879 = G__15896;
          count__15855_15880 = G__15897;
          i__15856_15881 = G__15898;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return evt.returnValue_;
};
domina.events.dispatch_event_target_BANG_ = function dispatch_event_target_BANG_(source, evt) {
  return goog.events.dispatchEvent(source, evt);
};
domina.events.is_event_target_QMARK_ = function is_event_target_QMARK_(o) {
  var and__3628__auto__ = o.getParentEventTarget;
  if (cljs.core.truth_(and__3628__auto__)) {
    return o.dispatchEvent;
  } else {
    return and__3628__auto__;
  }
};
domina.events.dispatch_BANG_ = function() {
  var dispatch_BANG_ = null;
  var dispatch_BANG___2 = function(type, evt_map) {
    return dispatch_BANG_.call(null, domina.events.root_element, type, evt_map);
  };
  var dispatch_BANG___3 = function(source, type, evt_map) {
    var evt = new goog.events.Event(cljs.core.name.call(null, type));
    var seq__15905_15911 = cljs.core.seq.call(null, evt_map);
    var chunk__15906_15912 = null;
    var count__15907_15913 = 0;
    var i__15908_15914 = 0;
    while (true) {
      if (i__15908_15914 < count__15907_15913) {
        var vec__15909_15915 = cljs.core._nth.call(null, chunk__15906_15912, i__15908_15914);
        var k_15916 = cljs.core.nth.call(null, vec__15909_15915, 0, null);
        var v_15917 = cljs.core.nth.call(null, vec__15909_15915, 1, null);
        evt[k_15916] = v_15917;
        var G__15918 = seq__15905_15911;
        var G__15919 = chunk__15906_15912;
        var G__15920 = count__15907_15913;
        var G__15921 = i__15908_15914 + 1;
        seq__15905_15911 = G__15918;
        chunk__15906_15912 = G__15919;
        count__15907_15913 = G__15920;
        i__15908_15914 = G__15921;
        continue;
      } else {
        var temp__4126__auto___15922 = cljs.core.seq.call(null, seq__15905_15911);
        if (temp__4126__auto___15922) {
          var seq__15905_15923__$1 = temp__4126__auto___15922;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15905_15923__$1)) {
            var c__4410__auto___15924 = cljs.core.chunk_first.call(null, seq__15905_15923__$1);
            var G__15925 = cljs.core.chunk_rest.call(null, seq__15905_15923__$1);
            var G__15926 = c__4410__auto___15924;
            var G__15927 = cljs.core.count.call(null, c__4410__auto___15924);
            var G__15928 = 0;
            seq__15905_15911 = G__15925;
            chunk__15906_15912 = G__15926;
            count__15907_15913 = G__15927;
            i__15908_15914 = G__15928;
            continue;
          } else {
            var vec__15910_15929 = cljs.core.first.call(null, seq__15905_15923__$1);
            var k_15930 = cljs.core.nth.call(null, vec__15910_15929, 0, null);
            var v_15931 = cljs.core.nth.call(null, vec__15910_15929, 1, null);
            evt[k_15930] = v_15931;
            var G__15932 = cljs.core.next.call(null, seq__15905_15923__$1);
            var G__15933 = null;
            var G__15934 = 0;
            var G__15935 = 0;
            seq__15905_15911 = G__15932;
            chunk__15906_15912 = G__15933;
            count__15907_15913 = G__15934;
            i__15908_15914 = G__15935;
            continue;
          }
        } else {
        }
      }
      break;
    }
    if (cljs.core.truth_(domina.events.is_event_target_QMARK_.call(null, source))) {
      return domina.events.dispatch_event_target_BANG_.call(null, source, evt);
    } else {
      return domina.events.dispatch_browser_BANG_.call(null, source, evt);
    }
  };
  dispatch_BANG_ = function(source, type, evt_map) {
    switch(arguments.length) {
      case 2:
        return dispatch_BANG___2.call(this, source, type);
      case 3:
        return dispatch_BANG___3.call(this, source, type, evt_map);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dispatch_BANG_.cljs$core$IFn$_invoke$arity$2 = dispatch_BANG___2;
  dispatch_BANG_.cljs$core$IFn$_invoke$arity$3 = dispatch_BANG___3;
  return dispatch_BANG_;
}();
domina.events.unlisten_by_key_BANG_ = function unlisten_by_key_BANG_(key) {
  return goog.events.unlistenByKey(key);
};
domina.events.get_listeners = function get_listeners(content, type) {
  var type__$1 = cljs.core.name.call(null, type);
  return cljs.core.mapcat.call(null, function(type__$1) {
    return function(p1__15936_SHARP_) {
      return goog.events.getListeners(p1__15936_SHARP_, type__$1, false);
    };
  }(type__$1), domina.nodes.call(null, content));
};
goog.provide("domina.xpath");
goog.require("cljs.core");
goog.require("goog.dom");
goog.require("goog.dom");
goog.require("domina");
domina.xpath.select_node_STAR_ = function select_node_STAR_(path, node, technique_1, technique_2) {
  var doc = goog.dom.getOwnerDocument(node);
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = node.selectSingleNode;
    if (cljs.core.truth_(and__3628__auto__)) {
      return doc.setProperty;
    } else {
      return and__3628__auto__;
    }
  }())) {
    doc.setProperty("SelectionLanguage", "XPath");
    return technique_1.call(null, node, path);
  } else {
    if (cljs.core.truth_(doc.evaluate)) {
      return technique_2.call(null, null, doc, node, path);
    } else {
      throw new Error("Could not find XPath support in this browser.");
    }
  }
};
domina.xpath.select_node = function select_node(expr, node) {
  return domina.xpath.select_node_STAR_.call(null, expr, node, function(node__$1, expr__$1) {
    return node__$1.selectSingleNode(expr__$1);
  }, function(resolver, doc, node__$1, expr__$1) {
    var result = doc.evaluate(expr__$1, node__$1, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
    return result.singleNodeValue;
  });
};
domina.xpath.select_nodes = function select_nodes(expr, node) {
  return domina.xpath.select_node_STAR_.call(null, expr, node, function(node__$1, expr__$1) {
    return node__$1.selectNodes(expr__$1);
  }, function(resolver, doc, node__$1, expr__$1) {
    var result = doc.evaluate(expr__$1, node__$1, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
    var num_results = result.snapshotLength;
    var i = 0;
    var acc = null;
    while (true) {
      if (i < num_results) {
        var G__15937 = i + 1;
        var G__15938 = cljs.core.cons.call(null, result.snapshotItem(i), acc);
        i = G__15937;
        acc = G__15938;
        continue;
      } else {
        return acc;
      }
      break;
    }
  });
};
domina.xpath.root_element = function root_element() {
  return goog.dom.getElementsByTagNameAndClass("html")[0];
};
domina.xpath.xpath = function() {
  var xpath = null;
  var xpath__1 = function(expr) {
    return xpath.call(null, domina.xpath.root_element.call(null), expr);
  };
  var xpath__2 = function(base, expr) {
    if (typeof domina.xpath.t15942 !== "undefined") {
    } else {
      domina.xpath.t15942 = function(expr, base, xpath, meta15943) {
        this.expr = expr;
        this.base = base;
        this.xpath = xpath;
        this.meta15943 = meta15943;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      domina.xpath.t15942.cljs$lang$type = true;
      domina.xpath.t15942.cljs$lang$ctorStr = "domina.xpath/t15942";
      domina.xpath.t15942.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
        return cljs.core._write.call(null, writer__4218__auto__, "domina.xpath/t15942");
      };
      domina.xpath.t15942.prototype.domina$DomContent$ = true;
      domina.xpath.t15942.prototype.domina$DomContent$nodes$arity$1 = function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.mapcat.call(null, cljs.core.partial.call(null, domina.xpath.select_nodes, self__.expr), domina.nodes.call(null, self__.base));
      };
      domina.xpath.t15942.prototype.domina$DomContent$single_node$arity$1 = function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.first.call(null, cljs.core.filter.call(null, cljs.core.complement.call(null, cljs.core.nil_QMARK_), cljs.core.map.call(null, cljs.core.partial.call(null, domina.xpath.select_node, self__.expr), domina.nodes.call(null, self__.base))));
      };
      domina.xpath.t15942.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15944) {
        var self__ = this;
        var _15944__$1 = this;
        return self__.meta15943;
      };
      domina.xpath.t15942.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15944, meta15943__$1) {
        var self__ = this;
        var _15944__$1 = this;
        return new domina.xpath.t15942(self__.expr, self__.base, self__.xpath, meta15943__$1);
      };
      domina.xpath.__GT_t15942 = function __GT_t15942(expr__$1, base__$1, xpath__$1, meta15943) {
        return new domina.xpath.t15942(expr__$1, base__$1, xpath__$1, meta15943);
      };
    }
    return new domina.xpath.t15942(expr, base, xpath, null);
  };
  xpath = function(base, expr) {
    switch(arguments.length) {
      case 1:
        return xpath__1.call(this, base);
      case 2:
        return xpath__2.call(this, base, expr);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  xpath.cljs$core$IFn$_invoke$arity$1 = xpath__1;
  xpath.cljs$core$IFn$_invoke$arity$2 = xpath__2;
  return xpath;
}();
goog.provide("cljs.looperscript.ui");
goog.require("cljs.core");
goog.require("cljs.reader");
goog.require("shoreleave.remotes.http_rpc");
goog.require("domina.xpath");
goog.require("domina");
goog.require("hiccups.runtime");
goog.require("shoreleave.remotes.http_rpc");
goog.require("domina.events");
goog.require("domina");
goog.require("domina.events");
goog.require("domina.xpath");
goog.require("cljs.reader");
goog.require("hiccups.runtime");
cljs.looperscript.ui.make_html_for_textarea = function make_html_for_textarea(id, label, text) {
  return "\x3clabel" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(hiccups.runtime.render_attr_map.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "for", "for", -1323786319), id, new cljs.core.Keyword(null, "id", "id", -1388402092), null, new cljs.core.Keyword(null, "class", "class", -2030961996), null], null))) + "\x3e" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(hiccups.runtime.render_html.call(null, label)) + "\x3c/label\x3e\x3cbr /\x3e\x3ctextarea" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(hiccups.runtime.render_attr_map.call(null, 
  new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", -1388402092), id, new cljs.core.Keyword(null, "class", "class", -2030961996), "text-area"], null))) + "\x3e" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(hiccups.runtime.render_html.call(null, text)) + "\x3c/textarea\x3e\x3cbr /\x3e";
};
cljs.looperscript.ui.part_prototype = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "sound", "sound", -2127407070), "sounds:", "0 3.86", cljs.looperscript.ui.string__GT_sounds], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "rhythm", "rhythm", 1037284533), "rhythm:", "1", cljs.looperscript.ui.process_rhythm_ratios], 
null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "volume", "volume", 1900330799), "volumes:", "1", cljs.looperscript.ui.string__GT_numbers], null)], null);
cljs.looperscript.ui.make_html_for_part = function make_html_for_part(part_name) {
  return "\x3cdiv" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(hiccups.runtime.render_attr_map.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", -1388402092), "part-" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(part_name), new cljs.core.Keyword(null, "class", "class", -2030961996), "part"], null))) + "\x3e" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.call(null, cljs.core.str, function() {
    var iter__4379__auto__ = function iter__13290(s__13291) {
      return new cljs.core.LazySeq(null, function() {
        var s__13291__$1 = s__13291;
        while (true) {
          var temp__4126__auto__ = cljs.core.seq.call(null, s__13291__$1);
          if (temp__4126__auto__) {
            var s__13291__$2 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__13291__$2)) {
              var c__4377__auto__ = cljs.core.chunk_first.call(null, s__13291__$2);
              var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
              var b__13293 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
              if (function() {
                var i__13292 = 0;
                while (true) {
                  if (i__13292 < size__4378__auto__) {
                    var vec__13296 = cljs.core._nth.call(null, c__4377__auto__, i__13292);
                    var id = cljs.core.nth.call(null, vec__13296, 0, null);
                    var l = cljs.core.nth.call(null, vec__13296, 1, null);
                    var t = cljs.core.nth.call(null, vec__13296, 2, null);
                    cljs.core.chunk_append.call(null, b__13293, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(hiccups.runtime.render_html.call(null, cljs.looperscript.ui.make_html_for_textarea.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(id) + "-" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(part_name), l, t))));
                    var G__13298 = i__13292 + 1;
                    i__13292 = G__13298;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13293), iter__13290.call(null, cljs.core.chunk_rest.call(null, s__13291__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13293), null);
              }
            } else {
              var vec__13297 = cljs.core.first.call(null, s__13291__$2);
              var id = cljs.core.nth.call(null, vec__13297, 0, null);
              var l = cljs.core.nth.call(null, vec__13297, 1, null);
              var t = cljs.core.nth.call(null, vec__13297, 2, null);
              return cljs.core.cons.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(hiccups.runtime.render_html.call(null, cljs.looperscript.ui.make_html_for_textarea.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(id) + "-" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(part_name), l, t))), iter__13290.call(null, cljs.core.rest.call(null, s__13291__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4379__auto__.call(null, cljs.looperscript.ui.part_prototype);
  }())) + "\x3c/div\x3e";
};
cljs.looperscript.ui.make_html_for_parts = function make_html_for_parts(ids) {
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.call(null, cljs.core.str, function() {
    var iter__4379__auto__ = function iter__13303(s__13304) {
      return new cljs.core.LazySeq(null, function() {
        var s__13304__$1 = s__13304;
        while (true) {
          var temp__4126__auto__ = cljs.core.seq.call(null, s__13304__$1);
          if (temp__4126__auto__) {
            var s__13304__$2 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__13304__$2)) {
              var c__4377__auto__ = cljs.core.chunk_first.call(null, s__13304__$2);
              var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
              var b__13306 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
              if (function() {
                var i__13305 = 0;
                while (true) {
                  if (i__13305 < size__4378__auto__) {
                    var i = cljs.core._nth.call(null, c__4377__auto__, i__13305);
                    cljs.core.chunk_append.call(null, b__13306, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(hiccups.runtime.render_html.call(null, cljs.looperscript.ui.make_html_for_part.call(null, i))));
                    var G__13307 = i__13305 + 1;
                    i__13305 = G__13307;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13306), iter__13303.call(null, cljs.core.chunk_rest.call(null, s__13304__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13306), null);
              }
            } else {
              var i = cljs.core.first.call(null, s__13304__$2);
              return cljs.core.cons.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(hiccups.runtime.render_html.call(null, cljs.looperscript.ui.make_html_for_part.call(null, i))), iter__13303.call(null, cljs.core.rest.call(null, s__13304__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4379__auto__.call(null, ids);
  }()));
};
cljs.looperscript.ui.get_current_vals = function get_current_vals(id) {
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.vec.call(null, function() {
    var iter__4379__auto__ = function iter__13312(s__13313) {
      return new cljs.core.LazySeq(null, function() {
        var s__13313__$1 = s__13313;
        while (true) {
          var temp__4126__auto__ = cljs.core.seq.call(null, s__13313__$1);
          if (temp__4126__auto__) {
            var s__13313__$2 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__13313__$2)) {
              var c__4377__auto__ = cljs.core.chunk_first.call(null, s__13313__$2);
              var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
              var b__13315 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
              if (function() {
                var i__13314 = 0;
                while (true) {
                  if (i__13314 < size__4378__auto__) {
                    var p = cljs.core._nth.call(null, c__4377__auto__, i__13314);
                    cljs.core.chunk_append.call(null, b__13315, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p, domina.value.call(null, domina.by_id.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(p) + "-" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(id)))], null));
                    var G__13316 = i__13314 + 1;
                    i__13314 = G__13316;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13315), iter__13312.call(null, cljs.core.chunk_rest.call(null, s__13313__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13315), null);
              }
            } else {
              var p = cljs.core.first.call(null, s__13313__$2);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p, domina.value.call(null, domina.by_id.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(p) + "-" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(id)))], null), iter__13312.call(null, cljs.core.rest.call(null, s__13313__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4379__auto__.call(null, cljs.core.map.call(null, cljs.core.first, cljs.looperscript.ui.part_prototype));
  }()));
};
goog.provide("instaparse.auto_flatten_seq");
goog.require("cljs.core");
instaparse.auto_flatten_seq.threshold = 32;
instaparse.auto_flatten_seq.hash_ordered_coll_without_mix = function() {
  var hash_ordered_coll_without_mix = null;
  var hash_ordered_coll_without_mix__1 = function(coll) {
    return hash_ordered_coll_without_mix.call(null, 1, coll);
  };
  var hash_ordered_coll_without_mix__2 = function(existing_unmixed_hash, coll) {
    var unmixed_hash = existing_unmixed_hash;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (!(coll__$1 == null)) {
        var G__14606 = cljs.core.imul.call(null, 31, unmixed_hash) + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
        var G__14607 = cljs.core.next.call(null, coll__$1);
        unmixed_hash = G__14606;
        coll__$1 = G__14607;
        continue;
      } else {
        return unmixed_hash;
      }
      break;
    }
  };
  hash_ordered_coll_without_mix = function(existing_unmixed_hash, coll) {
    switch(arguments.length) {
      case 1:
        return hash_ordered_coll_without_mix__1.call(this, existing_unmixed_hash);
      case 2:
        return hash_ordered_coll_without_mix__2.call(this, existing_unmixed_hash, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$1 = hash_ordered_coll_without_mix__1;
  hash_ordered_coll_without_mix.cljs$core$IFn$_invoke$arity$2 = hash_ordered_coll_without_mix__2;
  return hash_ordered_coll_without_mix;
}();
instaparse.auto_flatten_seq.hash_conj = function hash_conj(unmixed_hash, item) {
  return cljs.core.imul.call(null, 31, unmixed_hash) + cljs.core.hash.call(null, item) | 0;
};
instaparse.auto_flatten_seq.expt = function expt(base, pow) {
  if (pow === 0) {
    return 1;
  } else {
    var n = pow | 0;
    var y = 1 | 0;
    var z = base | 0;
    while (true) {
      var t = cljs.core.even_QMARK_.call(null, n);
      var n__$1 = cljs.core.quot.call(null, n, 2);
      if (t) {
        var G__14608 = n__$1;
        var G__14609 = y;
        var G__14610 = cljs.core.imul.call(null, z, z);
        n = G__14608;
        y = G__14609;
        z = G__14610;
        continue;
      } else {
        if (n__$1 === 0) {
          return cljs.core.imul.call(null, z, y);
        } else {
          var G__14611 = n__$1;
          var G__14612 = cljs.core.imul.call(null, z, y);
          var G__14613 = cljs.core.imul.call(null, z, z);
          n = G__14611;
          y = G__14612;
          z = G__14613;
          continue;
        }
      }
      break;
    }
  }
};
instaparse.auto_flatten_seq.hash_cat = function hash_cat(v1, v2) {
  var c = cljs.core.count.call(null, v2);
  var e = instaparse.auto_flatten_seq.expt.call(null, 31, c) | 0;
  return(cljs.core.imul.call(null, e, v1.premix_hashcode) | 0) + (v2.premix_hashcode - e);
};
instaparse.auto_flatten_seq.delve = function delve(v, index) {
  var v__$1 = cljs.core.get_in.call(null, v, index);
  var index__$1 = index;
  while (true) {
    if (cljs.core.truth_(instaparse.auto_flatten_seq.afs_QMARK_.call(null, v__$1))) {
      var G__14614 = cljs.core.get.call(null, v__$1, 0);
      var G__14615 = cljs.core.conj.call(null, index__$1, 0);
      v__$1 = G__14614;
      index__$1 = G__14615;
      continue;
    } else {
      return index__$1;
    }
    break;
  }
};
instaparse.auto_flatten_seq.advance = function advance(v, index) {
  while (true) {
    if (cljs.core._EQ_.call(null, cljs.core.count.call(null, index), 1)) {
      if (cljs.core.peek.call(null, index) < instaparse.auto_flatten_seq.true_count.call(null, v) - 1) {
        return instaparse.auto_flatten_seq.delve.call(null, v, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.peek.call(null, index) + 1], null));
      } else {
        return null;
      }
    } else {
      if (cljs.core.peek.call(null, index) < instaparse.auto_flatten_seq.true_count.call(null, cljs.core.get_in.call(null, v, cljs.core.pop.call(null, index))) - 1) {
        return instaparse.auto_flatten_seq.delve.call(null, v, cljs.core.conj.call(null, cljs.core.pop.call(null, index), cljs.core.peek.call(null, index) + 1));
      } else {
        var G__14616 = v;
        var G__14617 = cljs.core.pop.call(null, index);
        v = G__14616;
        index = G__14617;
        continue;
      }
    }
    break;
  }
};
instaparse.auto_flatten_seq.flat_seq = function() {
  var flat_seq = null;
  var flat_seq__1 = function(v) {
    if (cljs.core.count.call(null, v) > 0) {
      return flat_seq.call(null, v, instaparse.auto_flatten_seq.delve.call(null, v, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [0], null)));
    } else {
      return null;
    }
  };
  var flat_seq__2 = function(v, index) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, cljs.core.get_in.call(null, v, index), function() {
        var temp__4126__auto__ = instaparse.auto_flatten_seq.advance.call(null, v, index);
        if (cljs.core.truth_(temp__4126__auto__)) {
          var next_index = temp__4126__auto__;
          return flat_seq.call(null, v, next_index);
        } else {
          return null;
        }
      }());
    }, null, null);
  };
  flat_seq = function(v, index) {
    switch(arguments.length) {
      case 1:
        return flat_seq__1.call(this, v);
      case 2:
        return flat_seq__2.call(this, v, index);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  flat_seq.cljs$core$IFn$_invoke$arity$1 = flat_seq__1;
  flat_seq.cljs$core$IFn$_invoke$arity$2 = flat_seq__2;
  return flat_seq;
}();
instaparse.auto_flatten_seq.ConjFlat = function() {
  var obj14619 = {};
  return obj14619;
}();
instaparse.auto_flatten_seq.conj_flat = function conj_flat(self, obj) {
  if (function() {
    var and__3628__auto__ = self;
    if (and__3628__auto__) {
      return self.instaparse$auto_flatten_seq$ConjFlat$conj_flat$arity$2;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return self.instaparse$auto_flatten_seq$ConjFlat$conj_flat$arity$2(self, obj);
  } else {
    var x__4277__auto__ = self == null ? null : self;
    return function() {
      var or__3640__auto__ = instaparse.auto_flatten_seq.conj_flat[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = instaparse.auto_flatten_seq.conj_flat["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ConjFlat.conj-flat", self);
        }
      }
    }().call(null, self, obj);
  }
};
instaparse.auto_flatten_seq.cached_QMARK_ = function cached_QMARK_(self) {
  if (function() {
    var and__3628__auto__ = self;
    if (and__3628__auto__) {
      return self.instaparse$auto_flatten_seq$ConjFlat$cached_QMARK_$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return self.instaparse$auto_flatten_seq$ConjFlat$cached_QMARK_$arity$1(self);
  } else {
    var x__4277__auto__ = self == null ? null : self;
    return function() {
      var or__3640__auto__ = instaparse.auto_flatten_seq.cached_QMARK_[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = instaparse.auto_flatten_seq.cached_QMARK_["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ConjFlat.cached?", self);
        }
      }
    }().call(null, self);
  }
};
instaparse.auto_flatten_seq.AutoFlattenSeq = function(v, premix_hashcode, hashcode, cnt, dirty, cached_seq) {
  this.v = v;
  this.premix_hashcode = premix_hashcode;
  this.hashcode = hashcode;
  this.cnt = cnt;
  this.dirty = dirty;
  this.cached_seq = cached_seq;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850950;
};
instaparse.auto_flatten_seq.AutoFlattenSeq.cljs$lang$type = true;
instaparse.auto_flatten_seq.AutoFlattenSeq.cljs$lang$ctorStr = "instaparse.auto-flatten-seq/AutoFlattenSeq";
instaparse.auto_flatten_seq.AutoFlattenSeq.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "instaparse.auto-flatten-seq/AutoFlattenSeq");
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ILookup$_lookup$arity$2 = function(self, key) {
  var self__ = this;
  var self__$1 = this;
  return self__.v.cljs$core$ILookup$_lookup$arity$2(null, key);
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ILookup$_lookup$arity$3 = function(self, key, not_found) {
  var self__ = this;
  var self__$1 = this;
  return self__.v.cljs$core$ILookup$_lookup$arity$3(null, key, not_found);
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.meta.call(null, self__.v);
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$INext$_next$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.next.call(null, cljs.core.seq.call(null, self__$1));
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return self__.cnt;
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return self__.hashcode;
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(self, other) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core._EQ_.call(null, self__.hashcode, cljs.core.hash.call(null, other)) && cljs.core._EQ_.call(null, self__.cnt, cljs.core.count.call(null, other)) && (cljs.core._EQ_.call(null, self__.cnt, 0) || cljs.core._EQ_.call(null, cljs.core.seq.call(null, self__$1), other));
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.with_meta.call(null, instaparse.auto_flatten_seq.EMPTY, cljs.core.meta.call(null, self__$1));
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.first.call(null, cljs.core.seq.call(null, self__$1));
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, self__$1));
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  if (cljs.core.truth_(self__.cached_seq)) {
    return self__.cached_seq;
  } else {
    self__.cached_seq = self__.dirty ? instaparse.auto_flatten_seq.flat_seq.call(null, self__.v) : cljs.core.seq.call(null, self__.v);
    return self__.cached_seq;
  }
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(self, metamap) {
  var self__ = this;
  var self__$1 = this;
  return new instaparse.auto_flatten_seq.AutoFlattenSeq(cljs.core.with_meta.call(null, self__.v, metamap), self__.premix_hashcode, self__.hashcode, self__.cnt, self__.dirty, null);
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.instaparse$auto_flatten_seq$ConjFlat$ = true;
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.instaparse$auto_flatten_seq$ConjFlat$conj_flat$arity$2 = function(self, obj) {
  var self__ = this;
  var self__$1 = this;
  if (obj == null) {
    return self__$1;
  } else {
    if (cljs.core.truth_(instaparse.auto_flatten_seq.afs_QMARK_.call(null, obj))) {
      if (self__.cnt === 0) {
        return obj;
      } else {
        if (cljs.core.count.call(null, obj) <= instaparse.auto_flatten_seq.threshold) {
          var phc = instaparse.auto_flatten_seq.hash_cat.call(null, self__$1, obj);
          var new_cnt = self__.cnt + cljs.core.count.call(null, obj);
          return new instaparse.auto_flatten_seq.AutoFlattenSeq(cljs.core.into.call(null, self__.v, obj), phc, cljs.core.mix_collection_hash.call(null, phc, new_cnt), new_cnt, function() {
            var or__3640__auto__ = self__.dirty;
            if (or__3640__auto__) {
              return or__3640__auto__;
            } else {
              return obj.dirty;
            }
          }(), null);
        } else {
          var phc = instaparse.auto_flatten_seq.hash_cat.call(null, self__$1, obj);
          var new_cnt = self__.cnt + cljs.core.count.call(null, obj);
          return new instaparse.auto_flatten_seq.AutoFlattenSeq(cljs.core.conj.call(null, self__.v, obj), phc, cljs.core.mix_collection_hash.call(null, phc, new_cnt), new_cnt, true, null);
        }
      }
    } else {
      var phc = instaparse.auto_flatten_seq.hash_conj.call(null, self__.premix_hashcode, obj);
      var new_cnt = self__.cnt + 1;
      return new instaparse.auto_flatten_seq.AutoFlattenSeq(cljs.core.conj.call(null, self__.v, obj), phc, cljs.core.mix_collection_hash.call(null, phc, new_cnt), new_cnt, self__.dirty, null);
    }
  }
};
instaparse.auto_flatten_seq.AutoFlattenSeq.prototype.instaparse$auto_flatten_seq$ConjFlat$cached_QMARK_$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return self__.cached_seq;
};
instaparse.auto_flatten_seq.__GT_AutoFlattenSeq = function __GT_AutoFlattenSeq(v, premix_hashcode, hashcode, cnt, dirty, cached_seq) {
  return new instaparse.auto_flatten_seq.AutoFlattenSeq(v, premix_hashcode, hashcode, cnt, dirty, cached_seq);
};
instaparse.auto_flatten_seq.auto_flatten_seq = function auto_flatten_seq(v) {
  var v__$1 = cljs.core.vec.call(null, v);
  var c = cljs.core.count.call(null, v__$1);
  var unmixed_hash = instaparse.auto_flatten_seq.hash_ordered_coll_without_mix.call(null, v__$1);
  return new instaparse.auto_flatten_seq.AutoFlattenSeq(v__$1, unmixed_hash, cljs.core.mix_collection_hash.call(null, unmixed_hash, c), c, false, null);
};
instaparse.auto_flatten_seq.EMPTY = instaparse.auto_flatten_seq.auto_flatten_seq.call(null, cljs.core.PersistentVector.EMPTY);
instaparse.auto_flatten_seq.afs_QMARK_ = function afs_QMARK_(s) {
  return s instanceof instaparse.auto_flatten_seq.AutoFlattenSeq;
};
instaparse.auto_flatten_seq.true_count = function true_count(v) {
  if (instaparse.auto_flatten_seq.afs_QMARK_.call(null, v)) {
    return cljs.core.count.call(null, v.v);
  } else {
    return cljs.core.count.call(null, v);
  }
};
instaparse.auto_flatten_seq.flat_vec_helper = function flat_vec_helper(acc, v) {
  while (true) {
    var temp__4124__auto__ = cljs.core.seq.call(null, v);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      var fst = cljs.core.first.call(null, v);
      if (instaparse.auto_flatten_seq.afs_QMARK_.call(null, fst)) {
        var G__14620 = flat_vec_helper.call(null, acc, fst);
        var G__14621 = cljs.core.next.call(null, v);
        acc = G__14620;
        v = G__14621;
        continue;
      } else {
        var G__14622 = cljs.core.conj_BANG_.call(null, acc, fst);
        var G__14623 = cljs.core.next.call(null, v);
        acc = G__14622;
        v = G__14623;
        continue;
      }
    } else {
      return acc;
    }
    break;
  }
};
instaparse.auto_flatten_seq.flat_vec = function flat_vec(v) {
  return cljs.core.persistent_BANG_.call(null, instaparse.auto_flatten_seq.flat_vec_helper.call(null, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), v));
};
instaparse.auto_flatten_seq.GetVec = function() {
  var obj14625 = {};
  return obj14625;
}();
instaparse.auto_flatten_seq.get_vec = function get_vec(self) {
  if (function() {
    var and__3628__auto__ = self;
    if (and__3628__auto__) {
      return self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(self);
  } else {
    var x__4277__auto__ = self == null ? null : self;
    return function() {
      var or__3640__auto__ = instaparse.auto_flatten_seq.get_vec[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = instaparse.auto_flatten_seq.get_vec["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "GetVec.get-vec", self);
        }
      }
    }().call(null, self);
  }
};
instaparse.auto_flatten_seq.FlattenOnDemandVector = function(v, hashcode, cnt, flat) {
  this.v = v;
  this.hashcode = hashcode;
  this.cnt = cnt;
  this.flat = flat;
  this.cljs$lang$protocol_mask$partition0$ = 150364959;
  this.cljs$lang$protocol_mask$partition1$ = 2048;
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.cljs$lang$type = true;
instaparse.auto_flatten_seq.FlattenOnDemandVector.cljs$lang$ctorStr = "instaparse.auto-flatten-seq/FlattenOnDemandVector";
instaparse.auto_flatten_seq.FlattenOnDemandVector.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "instaparse.auto-flatten-seq/FlattenOnDemandVector");
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.toString = function() {
  var self__ = this;
  var self = this;
  return cljs.core.pr_str_STAR_.call(null, self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null));
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(self, key) {
  var self__ = this;
  var self__$1 = this;
  return instaparse.auto_flatten_seq.get_vec.call(null, self__$1).cljs$core$ILookup$_lookup$arity$2(null, key);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(self, key, not_found) {
  var self__ = this;
  var self__$1 = this;
  return instaparse.auto_flatten_seq.get_vec.call(null, self__$1).cljs$core$ILookup$_lookup$arity$3(null, key, not_found);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.instaparse$auto_flatten_seq$GetVec$ = true;
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  if (cljs.core.not.call(null, cljs.core.deref.call(null, self__.flat))) {
    cljs.core.swap_BANG_.call(null, self__.flat, function(self__$1) {
      return function(_) {
        return cljs.core.with_meta.call(null, instaparse.auto_flatten_seq.flat_vec.call(null, cljs.core.deref.call(null, self__.v)), cljs.core.meta.call(null, cljs.core.deref.call(null, self__.v)));
      };
    }(self__$1));
    cljs.core.swap_BANG_.call(null, self__.v, function(self__$1) {
      return function(_) {
        return null;
      };
    }(self__$1));
  } else {
  }
  return cljs.core.deref.call(null, self__.flat);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(self, f, init) {
  var self__ = this;
  var self__$1 = this;
  return instaparse.auto_flatten_seq.get_vec.call(null, self__$1).cljs$core$IKVReduce$_kv_reduce$arity$3(null, f, init);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(self, i) {
  var self__ = this;
  var self__$1 = this;
  return instaparse.auto_flatten_seq.get_vec.call(null, self__$1).cljs$core$IIndexed$_nth$arity$2(null, i);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(self, i, not_found) {
  var self__ = this;
  var self__$1 = this;
  return instaparse.auto_flatten_seq.get_vec.call(null, self__$1).cljs$core$IIndexed$_nth$arity$3(null, i, not_found);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(self, i, val) {
  var self__ = this;
  var self__$1 = this;
  return instaparse.auto_flatten_seq.get_vec.call(null, self__$1).cljs$core$IVector$_assoc_n$arity$3(null, i, val);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  if (cljs.core.truth_(cljs.core.deref.call(null, self__.flat))) {
    return cljs.core.meta.call(null, cljs.core.deref.call(null, self__.flat));
  } else {
    return cljs.core.meta.call(null, cljs.core.deref.call(null, self__.v));
  }
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ICounted$_count$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return self__.cnt;
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IStack$_peek$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return instaparse.auto_flatten_seq.get_vec.call(null, self__$1).cljs$core$IStack$_peek$arity$1(null);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IStack$_pop$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return instaparse.auto_flatten_seq.get_vec.call(null, self__$1).cljs$core$IStack$_pop$arity$1(null);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.rseq.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1));
  } else {
    return null;
  }
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IHash$_hash$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return self__.hashcode;
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(self, other) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core._EQ_.call(null, self__.hashcode, cljs.core.hash.call(null, other)) && cljs.core._EQ_.call(null, self__.cnt, cljs.core.count.call(null, other)) && cljs.core._EQ_.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1), other);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.with_meta.call(null, instaparse.auto_flatten_seq.EMPTY, cljs.core.meta.call(null, self__$1));
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(self, i, val) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.assoc.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1), i, val);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(self, k) {
  var self__ = this;
  var self__$1 = this;
  return instaparse.auto_flatten_seq.get_vec.call(null, self__$1).cljs$core$IAssociative$_contains_key_QMARK_$arity$2(null, k);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(self) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.seq.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1));
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(self, metamap) {
  var self__ = this;
  var self__$1 = this;
  if (cljs.core.truth_(cljs.core.deref.call(null, self__.flat))) {
    return new instaparse.auto_flatten_seq.FlattenOnDemandVector(cljs.core.atom.call(null, cljs.core.deref.call(null, self__.v)), self__.hashcode, self__.cnt, cljs.core.atom.call(null, cljs.core.with_meta.call(null, cljs.core.deref.call(null, self__.flat), metamap)));
  } else {
    return new instaparse.auto_flatten_seq.FlattenOnDemandVector(cljs.core.atom.call(null, cljs.core.with_meta.call(null, cljs.core.deref.call(null, self__.v), metamap)), self__.hashcode, self__.cnt, cljs.core.atom.call(null, cljs.core.deref.call(null, self__.flat)));
  }
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(self, obj) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core.conj.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1), obj);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.call = function() {
  var G__14627 = null;
  var G__14627__2 = function(self__, arg) {
    var self__ = this;
    var self____$1 = this;
    var self = self____$1;
    return self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null).cljs$core$IFn$_invoke$arity$2(null, arg);
  };
  var G__14627__3 = function(self__, arg, not_found) {
    var self__ = this;
    var self____$1 = this;
    var self = self____$1;
    return self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null).cljs$core$IFn$_invoke$arity$3(null, arg, not_found);
  };
  G__14627 = function(self__, arg, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14627__2.call(this, self__, arg);
      case 3:
        return G__14627__3.call(this, self__, arg, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14627.cljs$core$IFn$_invoke$arity$2 = G__14627__2;
  G__14627.cljs$core$IFn$_invoke$arity$3 = G__14627__3;
  return G__14627;
}();
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.apply = function(self__, args14626) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14626)));
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(arg) {
  var self__ = this;
  var self = this;
  return self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null).cljs$core$IFn$_invoke$arity$2(null, arg);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(arg, not_found) {
  var self__ = this;
  var self = this;
  return self.instaparse$auto_flatten_seq$GetVec$get_vec$arity$1(null).cljs$core$IFn$_invoke$arity$3(null, arg, not_found);
};
instaparse.auto_flatten_seq.FlattenOnDemandVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(self, that) {
  var self__ = this;
  var self__$1 = this;
  return cljs.core._compare.call(null, instaparse.auto_flatten_seq.get_vec.call(null, self__$1), that);
};
instaparse.auto_flatten_seq.__GT_FlattenOnDemandVector = function __GT_FlattenOnDemandVector(v, hashcode, cnt, flat) {
  return new instaparse.auto_flatten_seq.FlattenOnDemandVector(v, hashcode, cnt, flat);
};
instaparse.auto_flatten_seq.convert_afs_to_vec = function convert_afs_to_vec(afs) {
  if (cljs.core.truth_(afs.dirty)) {
    if (cljs.core.truth_(instaparse.auto_flatten_seq.cached_QMARK_.call(null, afs))) {
      return cljs.core.vec.call(null, cljs.core.seq.call(null, afs));
    } else {
      return new instaparse.auto_flatten_seq.FlattenOnDemandVector(cljs.core.atom.call(null, afs.v), afs.hashcode, afs.cnt, cljs.core.atom.call(null, null));
    }
  } else {
    return afs.v;
  }
};
goog.provide("instaparse.reduction");
goog.require("cljs.core");
goog.require("instaparse.auto_flatten_seq");
goog.require("instaparse.auto_flatten_seq");
instaparse.reduction.singleton_QMARK_ = function singleton_QMARK_(s) {
  return cljs.core.seq.call(null, s) && cljs.core.not.call(null, cljs.core.next.call(null, s));
};
instaparse.reduction.red = function red(parser, f) {
  return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "red", "red", -969428204), f);
};
instaparse.reduction.raw_non_terminal_reduction = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "reduction-type", "reduction-type", -488293450), new cljs.core.Keyword(null, "raw", "raw", 1604651272)], null);
instaparse.reduction.HiccupNonTerminalReduction = function HiccupNonTerminalReduction(key) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "reduction-type", "reduction-type", -488293450), new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), new cljs.core.Keyword(null, "key", "key", -1516042587), key], null);
};
instaparse.reduction.EnliveNonTerminalReduction = function EnliveNonTerminalReduction(key) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "reduction-type", "reduction-type", -488293450), new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), new cljs.core.Keyword(null, "key", "key", -1516042587), key], null);
};
instaparse.reduction.reduction_types = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), instaparse.reduction.HiccupNonTerminalReduction, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), instaparse.reduction.EnliveNonTerminalReduction], null);
instaparse.reduction.node_builders = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), function(tag, item) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), tag, new cljs.core.Keyword(null, "content", "content", 15833224), cljs.core._conj.call(null, cljs.core.List.EMPTY, item)], null);
}, new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), function(tag, item) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag, item], null);
}], null);
instaparse.reduction.standard_non_terminal_reduction = new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238);
instaparse.reduction.apply_reduction = function apply_reduction(f, result) {
  var G__15054 = (new cljs.core.Keyword(null, "reduction-type", "reduction-type", -488293450)).cljs$core$IFn$_invoke$arity$1(f) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "reduction-type", "reduction-type", -488293450)).cljs$core$IFn$_invoke$arity$1(f).fqn : null;
  switch(G__15054) {
    case "enlive":
      var content = instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.EMPTY, result);
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), (new cljs.core.Keyword(null, "key", "key", -1516042587)).cljs$core$IFn$_invoke$arity$1(f), new cljs.core.Keyword(null, "content", "content", 15833224), cljs.core.count.call(null, content) === 0 ? null : content], null);
      break;
    case "hiccup":
      return instaparse.auto_flatten_seq.convert_afs_to_vec.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.auto_flatten_seq.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "key", "key", -1516042587)).cljs$core$IFn$_invoke$arity$1(f)], null)), result));
      break;
    case "raw":
      return instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.EMPTY, result);
      break;
    default:
      return f.call(null, result);
  }
};
instaparse.reduction.apply_standard_reductions = function() {
  var apply_standard_reductions = null;
  var apply_standard_reductions__1 = function(grammar) {
    return apply_standard_reductions.call(null, instaparse.reduction.standard_non_terminal_reduction, grammar);
  };
  var apply_standard_reductions__2 = function(reduction_type, grammar) {
    var temp__4124__auto__ = instaparse.reduction.reduction_types.call(null, reduction_type);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var reduction = temp__4124__auto__;
      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
        var iter__4379__auto__ = function(reduction, temp__4124__auto__) {
          return function iter__15064(s__15065) {
            return new cljs.core.LazySeq(null, function(reduction, temp__4124__auto__) {
              return function() {
                var s__15065__$1 = s__15065;
                while (true) {
                  var temp__4126__auto__ = cljs.core.seq.call(null, s__15065__$1);
                  if (temp__4126__auto__) {
                    var s__15065__$2 = temp__4126__auto__;
                    if (cljs.core.chunked_seq_QMARK_.call(null, s__15065__$2)) {
                      var c__4377__auto__ = cljs.core.chunk_first.call(null, s__15065__$2);
                      var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                      var b__15067 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                      if (function() {
                        var i__15066 = 0;
                        while (true) {
                          if (i__15066 < size__4378__auto__) {
                            var vec__15070 = cljs.core._nth.call(null, c__4377__auto__, i__15066);
                            var k = cljs.core.nth.call(null, vec__15070, 0, null);
                            var v = cljs.core.nth.call(null, vec__15070, 1, null);
                            cljs.core.chunk_append.call(null, b__15067, cljs.core.truth_((new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(v)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.assoc.call(null, v, new cljs.core.Keyword(null, "red", "red", -969428204), reduction.call(null, k))], null));
                            var G__15072 = i__15066 + 1;
                            i__15066 = G__15072;
                            continue;
                          } else {
                            return true;
                          }
                          break;
                        }
                      }()) {
                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15067), iter__15064.call(null, cljs.core.chunk_rest.call(null, s__15065__$2)));
                      } else {
                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15067), null);
                      }
                    } else {
                      var vec__15071 = cljs.core.first.call(null, s__15065__$2);
                      var k = cljs.core.nth.call(null, vec__15071, 0, null);
                      var v = cljs.core.nth.call(null, vec__15071, 1, null);
                      return cljs.core.cons.call(null, cljs.core.truth_((new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(v)) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.assoc.call(null, v, new cljs.core.Keyword(null, "red", "red", -969428204), reduction.call(null, k))], null), iter__15064.call(null, cljs.core.rest.call(null, 
                      s__15065__$2)));
                    }
                  } else {
                    return null;
                  }
                  break;
                }
              };
            }(reduction, temp__4124__auto__), null, null);
          };
        }(reduction, temp__4124__auto__);
        return iter__4379__auto__.call(null, grammar);
      }());
    } else {
      throw "Invalid output format" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(reduction_type) + ". Use :enlive or :hiccup.";
    }
  };
  apply_standard_reductions = function(reduction_type, grammar) {
    switch(arguments.length) {
      case 1:
        return apply_standard_reductions__1.call(this, reduction_type);
      case 2:
        return apply_standard_reductions__2.call(this, reduction_type, grammar);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply_standard_reductions.cljs$core$IFn$_invoke$arity$1 = apply_standard_reductions__1;
  apply_standard_reductions.cljs$core$IFn$_invoke$arity$2 = apply_standard_reductions__2;
  return apply_standard_reductions;
}();
goog.provide("instaparse.combinators_source");
goog.require("cljs.core");
goog.require("instaparse.reduction");
goog.require("instaparse.reduction");
instaparse.combinators_source.Epsilon = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "epsilon", "epsilon", -730158570)], null);
instaparse.combinators_source.opt = function opt(parser) {
  if (cljs.core._EQ_.call(null, parser, instaparse.combinators_source.Epsilon)) {
    return instaparse.combinators_source.Epsilon;
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "opt", "opt", -794706369), new cljs.core.Keyword(null, "parser", "parser", -1543495310), parser], null);
  }
};
instaparse.combinators_source.plus = function plus(parser) {
  if (cljs.core._EQ_.call(null, parser, instaparse.combinators_source.Epsilon)) {
    return instaparse.combinators_source.Epsilon;
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "plus", "plus", 211540661), new cljs.core.Keyword(null, "parser", "parser", -1543495310), parser], null);
  }
};
instaparse.combinators_source.star = function star(parser) {
  if (cljs.core._EQ_.call(null, parser, instaparse.combinators_source.Epsilon)) {
    return instaparse.combinators_source.Epsilon;
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "star", "star", 279424429), new cljs.core.Keyword(null, "parser", "parser", -1543495310), parser], null);
  }
};
instaparse.combinators_source.rep = function rep(m, n, parser) {
  if (m <= n) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c\x3d", "\x3c\x3d", 1244895369, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null)))));
  }
  if (cljs.core._EQ_.call(null, parser, instaparse.combinators_source.Epsilon)) {
    return instaparse.combinators_source.Epsilon;
  } else {
    return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "rep", "rep", -1226820564), new cljs.core.Keyword(null, "parser", "parser", -1543495310), parser, new cljs.core.Keyword(null, "min", "min", 444991522), m, new cljs.core.Keyword(null, "max", "max", 61366548), n], null);
  }
};
instaparse.combinators_source.alt = function() {
  var alt__delegate = function(parsers) {
    if (cljs.core.every_QMARK_.call(null, cljs.core.partial.call(null, cljs.core._EQ_, instaparse.combinators_source.Epsilon), parsers)) {
      return instaparse.combinators_source.Epsilon;
    } else {
      if (instaparse.reduction.singleton_QMARK_.call(null, parsers)) {
        return cljs.core.first.call(null, parsers);
      } else {
        return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "alt", "alt", -3214426), new cljs.core.Keyword(null, "parsers", "parsers", -804353827), parsers], null);
      }
    }
  };
  var alt = function(var_args) {
    var parsers = null;
    if (arguments.length > 0) {
      parsers = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return alt__delegate.call(this, parsers);
  };
  alt.cljs$lang$maxFixedArity = 0;
  alt.cljs$lang$applyTo = function(arglist__15110) {
    var parsers = cljs.core.seq(arglist__15110);
    return alt__delegate(parsers);
  };
  alt.cljs$core$IFn$_invoke$arity$variadic = alt__delegate;
  return alt;
}();
instaparse.combinators_source.ord2 = function ord2(parser1, parser2) {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "ord", "ord", 1142548323), new cljs.core.Keyword(null, "parser1", "parser1", -439601422), parser1, new cljs.core.Keyword(null, "parser2", "parser2", 1013754688), parser2], null);
};
instaparse.combinators_source.ord = function() {
  var ord = null;
  var ord__0 = function() {
    return instaparse.combinators_source.Epsilon;
  };
  var ord__2 = function() {
    var G__15111__delegate = function(parser1, parsers) {
      var parsers__$1 = cljs.core._EQ_.call(null, parser1, instaparse.combinators_source.Epsilon) ? cljs.core.remove.call(null, cljs.core.PersistentHashSet.fromArray([instaparse.combinators_source.Epsilon], true), parsers) : parsers;
      if (cljs.core.seq.call(null, parsers__$1)) {
        return instaparse.combinators_source.ord2.call(null, parser1, cljs.core.apply.call(null, ord, parsers__$1));
      } else {
        return parser1;
      }
    };
    var G__15111 = function(parser1, var_args) {
      var parsers = null;
      if (arguments.length > 1) {
        parsers = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__15111__delegate.call(this, parser1, parsers);
    };
    G__15111.cljs$lang$maxFixedArity = 1;
    G__15111.cljs$lang$applyTo = function(arglist__15112) {
      var parser1 = cljs.core.first(arglist__15112);
      var parsers = cljs.core.rest(arglist__15112);
      return G__15111__delegate(parser1, parsers);
    };
    G__15111.cljs$core$IFn$_invoke$arity$variadic = G__15111__delegate;
    return G__15111;
  }();
  ord = function(parser1, var_args) {
    var parsers = var_args;
    switch(arguments.length) {
      case 0:
        return ord__0.call(this);
      default:
        return ord__2.cljs$core$IFn$_invoke$arity$variadic(parser1, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ord.cljs$lang$maxFixedArity = 1;
  ord.cljs$lang$applyTo = ord__2.cljs$lang$applyTo;
  ord.cljs$core$IFn$_invoke$arity$0 = ord__0;
  ord.cljs$core$IFn$_invoke$arity$variadic = ord__2.cljs$core$IFn$_invoke$arity$variadic;
  return ord;
}();
instaparse.combinators_source.cat = function() {
  var cat__delegate = function(parsers) {
    if (cljs.core.every_QMARK_.call(null, cljs.core.partial.call(null, cljs.core._EQ_, instaparse.combinators_source.Epsilon), parsers)) {
      return instaparse.combinators_source.Epsilon;
    } else {
      var parsers__$1 = cljs.core.remove.call(null, cljs.core.PersistentHashSet.fromArray([instaparse.combinators_source.Epsilon], true), parsers);
      if (instaparse.reduction.singleton_QMARK_.call(null, parsers__$1)) {
        return cljs.core.first.call(null, parsers__$1);
      } else {
        return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "cat", "cat", -1457810207), new cljs.core.Keyword(null, "parsers", "parsers", -804353827), parsers__$1], null);
      }
    }
  };
  var cat = function(var_args) {
    var parsers = null;
    if (arguments.length > 0) {
      parsers = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cat__delegate.call(this, parsers);
  };
  cat.cljs$lang$maxFixedArity = 0;
  cat.cljs$lang$applyTo = function(arglist__15113) {
    var parsers = cljs.core.seq(arglist__15113);
    return cat__delegate(parsers);
  };
  cat.cljs$core$IFn$_invoke$arity$variadic = cat__delegate;
  return cat;
}();
instaparse.combinators_source.string = function string(s) {
  if (cljs.core._EQ_.call(null, s, "")) {
    return instaparse.combinators_source.Epsilon;
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "string", "string", -1989541586), new cljs.core.Keyword(null, "string", "string", -1989541586), s], null);
  }
};
instaparse.combinators_source.string_ci = function string_ci(s) {
  if (cljs.core._EQ_.call(null, s, "")) {
    return instaparse.combinators_source.Epsilon;
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "string-ci", "string-ci", 374631805), new cljs.core.Keyword(null, "string", "string", -1989541586), s], null);
  }
};
instaparse.combinators_source.regexp__GT_str = function regexp__GT_str(r) {
  if (cljs.core.regexp_QMARK_.call(null, r)) {
    var s = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(r);
    return cljs.core.subs.call(null, s, 1, cljs.core.count.call(null, s) - 1);
  } else {
    return r;
  }
};
instaparse.combinators_source.regexp = function regexp(r) {
  var s = "^" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.combinators_source.regexp__GT_str.call(null, r));
  if (cljs.core._EQ_.call(null, s, "^")) {
    return instaparse.combinators_source.Epsilon;
  } else {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "regexp", "regexp", -541372782), new cljs.core.Keyword(null, "regexp", "regexp", -541372782), cljs.core.re_pattern.call(null, s)], null);
  }
};
instaparse.combinators_source.nt = function nt(s) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "nt", "nt", -835425781), new cljs.core.Keyword(null, "keyword", "keyword", 811389747), s], null);
};
instaparse.combinators_source.look = function look(parser) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "look", "look", -539441433), new cljs.core.Keyword(null, "parser", "parser", -1543495310), parser], null);
};
instaparse.combinators_source.neg = function neg(parser) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "neg", "neg", 1800032960), new cljs.core.Keyword(null, "parser", "parser", -1543495310), parser], null);
};
instaparse.combinators_source.hide = function hide(parser) {
  return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "hide", "hide", -596913169), true);
};
instaparse.combinators_source.hide_tag = function hide_tag(parser) {
  return instaparse.reduction.red.call(null, parser, instaparse.reduction.raw_non_terminal_reduction);
};
instaparse.combinators_source.hidden_tag_QMARK_ = function hidden_tag_QMARK_(parser) {
  return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser), instaparse.reduction.raw_non_terminal_reduction);
};
instaparse.combinators_source.unhide_content = function unhide_content(parser) {
  var parser__$1 = cljs.core.truth_((new cljs.core.Keyword(null, "hide", "hide", -596913169)).cljs$core$IFn$_invoke$arity$1(parser)) ? cljs.core.dissoc.call(null, parser, new cljs.core.Keyword(null, "hide", "hide", -596913169)) : parser;
  if (cljs.core.truth_((new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser__$1))) {
    return cljs.core.assoc.call(null, parser__$1, new cljs.core.Keyword(null, "parser", "parser", -1543495310), unhide_content.call(null, (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser__$1)));
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(parser__$1))) {
      return cljs.core.assoc.call(null, parser__$1, new cljs.core.Keyword(null, "parsers", "parsers", -804353827), cljs.core.map.call(null, unhide_content, (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(parser__$1)));
    } else {
      if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser__$1), new cljs.core.Keyword(null, "ord", "ord", 1142548323))) {
        return cljs.core.assoc.call(null, parser__$1, new cljs.core.Keyword(null, "parser1", "parser1", -439601422), unhide_content.call(null, (new cljs.core.Keyword(null, "parser1", "parser1", -439601422)).cljs$core$IFn$_invoke$arity$1(parser__$1)), new cljs.core.Keyword(null, "parser2", "parser2", 1013754688), unhide_content.call(null, (new cljs.core.Keyword(null, "parser2", "parser2", 1013754688)).cljs$core$IFn$_invoke$arity$1(parser__$1)));
      } else {
        return parser__$1;
      }
    }
  }
};
instaparse.combinators_source.unhide_all_content = function unhide_all_content(grammar) {
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__4379__auto__ = function iter__15122(s__15123) {
      return new cljs.core.LazySeq(null, function() {
        var s__15123__$1 = s__15123;
        while (true) {
          var temp__4126__auto__ = cljs.core.seq.call(null, s__15123__$1);
          if (temp__4126__auto__) {
            var s__15123__$2 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__15123__$2)) {
              var c__4377__auto__ = cljs.core.chunk_first.call(null, s__15123__$2);
              var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
              var b__15125 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
              if (function() {
                var i__15124 = 0;
                while (true) {
                  if (i__15124 < size__4378__auto__) {
                    var vec__15128 = cljs.core._nth.call(null, c__4377__auto__, i__15124);
                    var k = cljs.core.nth.call(null, vec__15128, 0, null);
                    var v = cljs.core.nth.call(null, vec__15128, 1, null);
                    cljs.core.chunk_append.call(null, b__15125, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, instaparse.combinators_source.unhide_content.call(null, v)], null));
                    var G__15130 = i__15124 + 1;
                    i__15124 = G__15130;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15125), iter__15122.call(null, cljs.core.chunk_rest.call(null, s__15123__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15125), null);
              }
            } else {
              var vec__15129 = cljs.core.first.call(null, s__15123__$2);
              var k = cljs.core.nth.call(null, vec__15129, 0, null);
              var v = cljs.core.nth.call(null, vec__15129, 1, null);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, instaparse.combinators_source.unhide_content.call(null, v)], null), iter__15122.call(null, cljs.core.rest.call(null, s__15123__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4379__auto__.call(null, grammar);
  }());
};
instaparse.combinators_source.unhide_tags = function unhide_tags(reduction_type, grammar) {
  var temp__4124__auto__ = instaparse.reduction.reduction_types.call(null, reduction_type);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var reduction = temp__4124__auto__;
    return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
      var iter__4379__auto__ = function(reduction, temp__4124__auto__) {
        return function iter__15139(s__15140) {
          return new cljs.core.LazySeq(null, function(reduction, temp__4124__auto__) {
            return function() {
              var s__15140__$1 = s__15140;
              while (true) {
                var temp__4126__auto__ = cljs.core.seq.call(null, s__15140__$1);
                if (temp__4126__auto__) {
                  var s__15140__$2 = temp__4126__auto__;
                  if (cljs.core.chunked_seq_QMARK_.call(null, s__15140__$2)) {
                    var c__4377__auto__ = cljs.core.chunk_first.call(null, s__15140__$2);
                    var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                    var b__15142 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                    if (function() {
                      var i__15141 = 0;
                      while (true) {
                        if (i__15141 < size__4378__auto__) {
                          var vec__15145 = cljs.core._nth.call(null, c__4377__auto__, i__15141);
                          var k = cljs.core.nth.call(null, vec__15145, 0, null);
                          var v = cljs.core.nth.call(null, vec__15145, 1, null);
                          cljs.core.chunk_append.call(null, b__15142, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.assoc.call(null, v, new cljs.core.Keyword(null, "red", "red", -969428204), reduction.call(null, k))], null));
                          var G__15147 = i__15141 + 1;
                          i__15141 = G__15147;
                          continue;
                        } else {
                          return true;
                        }
                        break;
                      }
                    }()) {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15142), iter__15139.call(null, cljs.core.chunk_rest.call(null, s__15140__$2)));
                    } else {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15142), null);
                    }
                  } else {
                    var vec__15146 = cljs.core.first.call(null, s__15140__$2);
                    var k = cljs.core.nth.call(null, vec__15146, 0, null);
                    var v = cljs.core.nth.call(null, vec__15146, 1, null);
                    return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.assoc.call(null, v, new cljs.core.Keyword(null, "red", "red", -969428204), reduction.call(null, k))], null), iter__15139.call(null, cljs.core.rest.call(null, s__15140__$2)));
                  }
                } else {
                  return null;
                }
                break;
              }
            };
          }(reduction, temp__4124__auto__), null, null);
        };
      }(reduction, temp__4124__auto__);
      return iter__4379__auto__.call(null, grammar);
    }());
  } else {
    throw "Invalid output format" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(reduction_type) + ". Use :enlive or :hiccup.";
  }
};
instaparse.combinators_source.unhide_all = function unhide_all(reduction_type, grammar) {
  var temp__4124__auto__ = instaparse.reduction.reduction_types.call(null, reduction_type);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var reduction = temp__4124__auto__;
    return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
      var iter__4379__auto__ = function(reduction, temp__4124__auto__) {
        return function iter__15156(s__15157) {
          return new cljs.core.LazySeq(null, function(reduction, temp__4124__auto__) {
            return function() {
              var s__15157__$1 = s__15157;
              while (true) {
                var temp__4126__auto__ = cljs.core.seq.call(null, s__15157__$1);
                if (temp__4126__auto__) {
                  var s__15157__$2 = temp__4126__auto__;
                  if (cljs.core.chunked_seq_QMARK_.call(null, s__15157__$2)) {
                    var c__4377__auto__ = cljs.core.chunk_first.call(null, s__15157__$2);
                    var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                    var b__15159 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                    if (function() {
                      var i__15158 = 0;
                      while (true) {
                        if (i__15158 < size__4378__auto__) {
                          var vec__15162 = cljs.core._nth.call(null, c__4377__auto__, i__15158);
                          var k = cljs.core.nth.call(null, vec__15162, 0, null);
                          var v = cljs.core.nth.call(null, vec__15162, 1, null);
                          cljs.core.chunk_append.call(null, b__15159, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.assoc.call(null, instaparse.combinators_source.unhide_content.call(null, v), new cljs.core.Keyword(null, "red", "red", -969428204), reduction.call(null, k))], null));
                          var G__15164 = i__15158 + 1;
                          i__15158 = G__15164;
                          continue;
                        } else {
                          return true;
                        }
                        break;
                      }
                    }()) {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15159), iter__15156.call(null, cljs.core.chunk_rest.call(null, s__15157__$2)));
                    } else {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15159), null);
                    }
                  } else {
                    var vec__15163 = cljs.core.first.call(null, s__15157__$2);
                    var k = cljs.core.nth.call(null, vec__15163, 0, null);
                    var v = cljs.core.nth.call(null, vec__15163, 1, null);
                    return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.assoc.call(null, instaparse.combinators_source.unhide_content.call(null, v), new cljs.core.Keyword(null, "red", "red", -969428204), reduction.call(null, k))], null), iter__15156.call(null, cljs.core.rest.call(null, s__15157__$2)));
                  }
                } else {
                  return null;
                }
                break;
              }
            };
          }(reduction, temp__4124__auto__), null, null);
        };
      }(reduction, temp__4124__auto__);
      return iter__4379__auto__.call(null, grammar);
    }());
  } else {
    throw "Invalid output format" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(reduction_type) + ". Use :enlive or :hiccup.";
  }
};
instaparse.combinators_source.auto_whitespace_parser = function auto_whitespace_parser(parser, ws_parser) {
  var G__15167 = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser).fqn : null;
  switch(G__15167) {
    case "neg":
      return cljs.core.update_in.call(null, parser, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parser", "parser", -1543495310)], null), auto_whitespace_parser, ws_parser);
      break;
    case "cat":
      return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "parsers", "parsers", -804353827), cljs.core.map.call(null, function(G__15167) {
        return function(p1__15165_SHARP_) {
          return auto_whitespace_parser.call(null, p1__15165_SHARP_, ws_parser);
        };
      }(G__15167), (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(parser)));
      break;
    case "ord":
      return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "parser1", "parser1", -439601422), auto_whitespace_parser.call(null, (new cljs.core.Keyword(null, "parser1", "parser1", -439601422)).cljs$core$IFn$_invoke$arity$1(parser), ws_parser), new cljs.core.Keyword(null, "parser2", "parser2", 1013754688), auto_whitespace_parser.call(null, (new cljs.core.Keyword(null, "parser2", "parser2", 1013754688)).cljs$core$IFn$_invoke$arity$1(parser), ws_parser));
      break;
    case "alt":
      return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "parsers", "parsers", -804353827), cljs.core.map.call(null, function(G__15167) {
        return function(p1__15165_SHARP_) {
          return auto_whitespace_parser.call(null, p1__15165_SHARP_, ws_parser);
        };
      }(G__15167), (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(parser)));
      break;
    case "look":
      return cljs.core.update_in.call(null, parser, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parser", "parser", -1543495310)], null), auto_whitespace_parser, ws_parser);
      break;
    case "nt":
      return parser;
      break;
    case "rep":
      return cljs.core.update_in.call(null, parser, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parser", "parser", -1543495310)], null), auto_whitespace_parser, ws_parser);
      break;
    case "star":
      return cljs.core.update_in.call(null, parser, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parser", "parser", -1543495310)], null), auto_whitespace_parser, ws_parser);
      break;
    case "string":
      if (cljs.core.truth_((new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser))) {
        return cljs.core.assoc.call(null, instaparse.combinators_source.cat.call(null, ws_parser, cljs.core.dissoc.call(null, parser, new cljs.core.Keyword(null, "red", "red", -969428204))), new cljs.core.Keyword(null, "red", "red", -969428204), (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser));
      } else {
        return instaparse.combinators_source.cat.call(null, ws_parser, parser);
      }
      break;
    case "regexp":
      if (cljs.core.truth_((new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser))) {
        return cljs.core.assoc.call(null, instaparse.combinators_source.cat.call(null, ws_parser, cljs.core.dissoc.call(null, parser, new cljs.core.Keyword(null, "red", "red", -969428204))), new cljs.core.Keyword(null, "red", "red", -969428204), (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser));
      } else {
        return instaparse.combinators_source.cat.call(null, ws_parser, parser);
      }
      break;
    case "plus":
      return cljs.core.update_in.call(null, parser, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parser", "parser", -1543495310)], null), auto_whitespace_parser, ws_parser);
      break;
    case "epsilon":
      return parser;
      break;
    case "string-ci":
      if (cljs.core.truth_((new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser))) {
        return cljs.core.assoc.call(null, instaparse.combinators_source.cat.call(null, ws_parser, cljs.core.dissoc.call(null, parser, new cljs.core.Keyword(null, "red", "red", -969428204))), new cljs.core.Keyword(null, "red", "red", -969428204), (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser));
      } else {
        return instaparse.combinators_source.cat.call(null, ws_parser, parser);
      }
      break;
    case "opt":
      return cljs.core.update_in.call(null, parser, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parser", "parser", -1543495310)], null), auto_whitespace_parser, ws_parser);
      break;
    default:
      throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser)));;
  }
};
instaparse.combinators_source.auto_whitespace = function auto_whitespace(grammar, start, grammar_ws, start_ws) {
  var ws_parser = instaparse.combinators_source.hide.call(null, instaparse.combinators_source.opt.call(null, instaparse.combinators_source.nt.call(null, start_ws)));
  var grammar_ws__$1 = cljs.core.assoc.call(null, grammar_ws, start_ws, instaparse.combinators_source.hide_tag.call(null, grammar_ws.call(null, start_ws)));
  var modified_grammar = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__4379__auto__ = function(ws_parser, grammar_ws__$1) {
      return function iter__15177(s__15178) {
        return new cljs.core.LazySeq(null, function(ws_parser, grammar_ws__$1) {
          return function() {
            var s__15178__$1 = s__15178;
            while (true) {
              var temp__4126__auto__ = cljs.core.seq.call(null, s__15178__$1);
              if (temp__4126__auto__) {
                var s__15178__$2 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__15178__$2)) {
                  var c__4377__auto__ = cljs.core.chunk_first.call(null, s__15178__$2);
                  var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                  var b__15180 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                  if (function() {
                    var i__15179 = 0;
                    while (true) {
                      if (i__15179 < size__4378__auto__) {
                        var vec__15183 = cljs.core._nth.call(null, c__4377__auto__, i__15179);
                        var nt = cljs.core.nth.call(null, vec__15183, 0, null);
                        var parser = cljs.core.nth.call(null, vec__15183, 1, null);
                        cljs.core.chunk_append.call(null, b__15180, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [nt, instaparse.combinators_source.auto_whitespace_parser.call(null, parser, ws_parser)], null));
                        var G__15185 = i__15179 + 1;
                        i__15179 = G__15185;
                        continue;
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15180), iter__15177.call(null, cljs.core.chunk_rest.call(null, s__15178__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15180), null);
                  }
                } else {
                  var vec__15184 = cljs.core.first.call(null, s__15178__$2);
                  var nt = cljs.core.nth.call(null, vec__15184, 0, null);
                  var parser = cljs.core.nth.call(null, vec__15184, 1, null);
                  return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [nt, instaparse.combinators_source.auto_whitespace_parser.call(null, parser, ws_parser)], null), iter__15177.call(null, cljs.core.rest.call(null, s__15178__$2)));
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(ws_parser, grammar_ws__$1), null, null);
      };
    }(ws_parser, grammar_ws__$1);
    return iter__4379__auto__.call(null, grammar);
  }());
  var final_grammar = cljs.core.assoc.call(null, modified_grammar, start, cljs.core.assoc.call(null, instaparse.combinators_source.cat.call(null, cljs.core.dissoc.call(null, modified_grammar.call(null, start), new cljs.core.Keyword(null, "red", "red", -969428204)), ws_parser), new cljs.core.Keyword(null, "red", "red", -969428204), (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(modified_grammar.call(null, start))));
  return cljs.core.merge.call(null, final_grammar, grammar_ws__$1);
};
goog.provide("cljs.looperscript.oldparser");
goog.require("cljs.core");
cljs.looperscript.oldparser.num_or_ratio = function num_or_ratio(s) {
  var temp__4124__auto__ = cljs.core.re_find.call(null, /([^\/]+)\/([^\/]+)/, s);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var vec__13207 = temp__4124__auto__;
    var _ = cljs.core.nth.call(null, vec__13207, 0, null);
    var n = cljs.core.nth.call(null, vec__13207, 1, null);
    var d = cljs.core.nth.call(null, vec__13207, 2, null);
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ratio", "ratio", -926560044), cljs.looperscript.oldparser.read_string.call(null, n), cljs.looperscript.oldparser.read_string.call(null, d)], null);
  } else {
    return cljs.looperscript.oldparser.read_string.call(null, s);
  }
};
cljs.looperscript.oldparser.string__GT_numbers = function string__GT_numbers(s) {
  return cljs.core.map.call(null, cljs.looperscript.oldparser.num_or_ratio, cljs.core.map.call(null, cljs.core.first, cljs.core.re_seq.call(null, /(-?[0-9.\/]+)/, s)));
};
cljs.looperscript.oldparser.process_rhythm_ratios = function process_rhythm_ratios(v) {
  var accum = cljs.core.PersistentVector.EMPTY;
  var rem = cljs.looperscript.oldparser.string__GT_numbers.call(null, v);
  var num = 1;
  var den = 1;
  while (true) {
    if (cljs.core.empty_QMARK_.call(null, rem)) {
      return accum;
    } else {
      var n = cljs.core.first.call(null, rem);
      if (cljs.core.vector_QMARK_.call(null, n)) {
        var vec__13209 = n;
        var _ = cljs.core.nth.call(null, vec__13209, 0, null);
        var nu = cljs.core.nth.call(null, vec__13209, 1, null);
        var de = cljs.core.nth.call(null, vec__13209, 2, null);
        var G__13210 = accum;
        var G__13211 = cljs.core.rest.call(null, rem);
        var G__13212 = nu * num;
        var G__13213 = de * den;
        accum = G__13210;
        rem = G__13211;
        num = G__13212;
        den = G__13213;
        continue;
      } else {
        var G__13214 = cljs.core.conj.call(null, accum, num / den * n);
        var G__13215 = cljs.core.rest.call(null, rem);
        var G__13216 = num;
        var G__13217 = den;
        accum = G__13214;
        rem = G__13215;
        num = G__13216;
        den = G__13217;
        continue;
      }
    }
    break;
  }
};
cljs.looperscript.oldparser.update_rhythm_BANG_ = function update_rhythm_BANG_() {
  var rhythm_text = dom.value.call(null, dom.by_id.call(null, "rhythm-text"));
  var new_rhythm = cljs.looperscript.oldparser.process_rhythm_ratios.call(null, rhythm_text);
  if (0 < cljs.core.count.call(null, new_rhythm)) {
    return cljs.core.reset_BANG_.call(null, cljs.looperscript.oldparser.rhythm, new_rhythm);
  } else {
    return null;
  }
};
cljs.looperscript.oldparser.token__GT_ratio = function token__GT_ratio(s) {
  var temp__4124__auto__ = cljs.core.re_seq.call(null, /([0-9.-]+)\/([0-9.-]+)/, s);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var r = temp__4124__auto__;
    var vec__13219 = cljs.core.first.call(null, r);
    var _ = cljs.core.nth.call(null, vec__13219, 0, null);
    var n = cljs.core.nth.call(null, vec__13219, 1, null);
    var d = cljs.core.nth.call(null, vec__13219, 2, null);
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ratio", "ratio", -926560044), cljs.looperscript.oldparser.read_string.call(null, n), cljs.looperscript.oldparser.read_string.call(null, d)], null);
  } else {
    return null;
  }
};
cljs.looperscript.oldparser.token__GT_number = function token__GT_number(s) {
  var temp__4124__auto__ = cljs.core.re_seq.call(null, /[0-9.-]+/, s);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var n = temp__4124__auto__;
    return cljs.looperscript.oldparser.read_string.call(null, cljs.core.first.call(null, n));
  } else {
    return null;
  }
};
cljs.looperscript.oldparser.process_sound_token = function process_sound_token(s) {
  return cljs.core.some.call(null, function(p1__13220_SHARP_) {
    return p1__13220_SHARP_.call(null, s);
  }, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [audio.drum_codes, cljs.looperscript.oldparser.token__GT_ratio, cljs.looperscript.oldparser.token__GT_number], null));
};
cljs.looperscript.oldparser.string__GT_sounds = function string__GT_sounds(s) {
  return cljs.core.map.call(null, cljs.looperscript.oldparser.process_sound_token, cljs.core.re_seq.call(null, /[kshdbr]|[0-9.\/-]+/, s));
};
cljs.looperscript.oldparser.update_sounds_BANG_ = function update_sounds_BANG_() {
  var sound_text = dom.value.call(null, dom.by_id.call(null, "sound-text"));
  var new_sounds = cljs.looperscript.oldparser.string__GT_sounds.call(null, sound_text);
  if (0 < cljs.core.count.call(null, new_sounds)) {
    return cljs.core.reset_BANG_.call(null, cljs.looperscript.oldparser.sounds, new_sounds);
  } else {
    return null;
  }
};
cljs.looperscript.oldparser.update_volumes_BANG_ = function update_volumes_BANG_() {
  var volume_text = dom.value.call(null, dom.by_id.call(null, "volume-text"));
  var new_volumes = cljs.looperscript.oldparser.string__GT_numbers.call(null, volume_text);
  if (0 < cljs.core.count.call(null, new_volumes)) {
    return cljs.core.reset_BANG_.call(null, cljs.looperscript.oldparser.volumes, new_volumes);
  } else {
    return null;
  }
};
cljs.looperscript.oldparser.update_parts_BANG_ = function update_parts_BANG_() {
  cljs.looperscript.oldparser.update_rhythm_BANG_.call(null);
  cljs.looperscript.oldparser.update_sounds_BANG_.call(null);
  return cljs.looperscript.oldparser.update_volumes_BANG_.call(null);
};
goog.provide("instaparse.print");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
instaparse.print.paren_for_tags = function paren_for_tags(tag_set, hidden_QMARK_, parser) {
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = cljs.core.not.call(null, hidden_QMARK_);
    if (and__3628__auto__) {
      return tag_set.call(null, parser.call(null, new cljs.core.Keyword(null, "tag", "tag", -1290361223)));
    } else {
      return and__3628__auto__;
    }
  }())) {
    return "(" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.combinators__GT_str.call(null, parser, false)) + ")";
  } else {
    return instaparse.print.combinators__GT_str.call(null, parser, false);
  }
};
instaparse.print.paren_for_compound = cljs.core.partial.call(null, instaparse.print.paren_for_tags, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "cat", "cat", -1457810207), null, new cljs.core.Keyword(null, "ord", "ord", 1142548323), null, new cljs.core.Keyword(null, "alt", "alt", -3214426), null], null), null));
instaparse.print.regexp_replace = function regexp_replace(s) {
  var G__15074 = s;
  switch(G__15074) {
    case "\n":
      return "\\n";
      break;
    case "\b":
      return "\\b";
      break;
    case "\f":
      return "\\f";
      break;
    case "\r":
      return "\\r";
      break;
    case "\t":
      return "\\t";
      break;
    default:
      return s;
  }
};
instaparse.print.regexp__GT_str = function regexp__GT_str(r) {
  return clojure.string.replace.call(null, '#"' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.subs.call(null, r.source, 1)) + '"', /[\s]/, instaparse.print.regexp_replace);
};
instaparse.print.combinators__GT_str = function() {
  var combinators__GT_str = null;
  var combinators__GT_str__1 = function(p) {
    return combinators__GT_str.call(null, p, false);
  };
  var combinators__GT_str__2 = function(p__15076, hidden_QMARK_) {
    var map__15081 = p__15076;
    var map__15081__$1 = cljs.core.seq_QMARK_.call(null, map__15081) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15081) : map__15081;
    var p = map__15081__$1;
    var tag = cljs.core.get.call(null, map__15081__$1, new cljs.core.Keyword(null, "tag", "tag", -1290361223));
    var parsers = cljs.core.get.call(null, map__15081__$1, new cljs.core.Keyword(null, "parsers", "parsers", -804353827));
    var parser2 = cljs.core.get.call(null, map__15081__$1, new cljs.core.Keyword(null, "parser2", "parser2", 1013754688));
    var parser1 = cljs.core.get.call(null, map__15081__$1, new cljs.core.Keyword(null, "parser1", "parser1", -439601422));
    var parser = cljs.core.get.call(null, map__15081__$1, new cljs.core.Keyword(null, "parser", "parser", -1543495310));
    if (cljs.core.truth_(function() {
      var and__3628__auto__ = cljs.core.not.call(null, hidden_QMARK_);
      if (and__3628__auto__) {
        return(new cljs.core.Keyword(null, "hide", "hide", -596913169)).cljs$core$IFn$_invoke$arity$1(p);
      } else {
        return and__3628__auto__;
      }
    }())) {
      return "\x3c" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(combinators__GT_str.call(null, p, true)) + "\x3e";
    } else {
      var G__15082 = tag instanceof cljs.core.Keyword ? tag.fqn : null;
      switch(G__15082) {
        case "neg":
          return "!" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_compound.call(null, hidden_QMARK_, parser));
          break;
        case "cat":
          return clojure.string.join.call(null, " ", cljs.core.map.call(null, cljs.core.partial.call(null, instaparse.print.paren_for_tags, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ord", "ord", 1142548323), null, new cljs.core.Keyword(null, "alt", "alt", -3214426), null], null), null), hidden_QMARK_), parsers));
          break;
        case "ord":
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_tags.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "alt", "alt", -3214426), null], null), null), hidden_QMARK_, parser1)) + " / " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_tags.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "alt", 
          "alt", -3214426), null], null), null), hidden_QMARK_, parser2));
          break;
        case "alt":
          return clojure.string.join.call(null, " | ", cljs.core.map.call(null, cljs.core.partial.call(null, instaparse.print.paren_for_tags, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ord", "ord", 1142548323), null], null), null), hidden_QMARK_), parsers));
          break;
        case "look":
          return "\x26" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_compound.call(null, hidden_QMARK_, parser));
          break;
        case "nt":
          return cljs.core.subs.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "keyword", "keyword", 811389747)).cljs$core$IFn$_invoke$arity$1(p)), 1);
          break;
        case "rep":
          if (cljs.core.not_EQ_.call(null, (new cljs.core.Keyword(null, "min", "min", 444991522)).cljs$core$IFn$_invoke$arity$1(p), (new cljs.core.Keyword(null, "max", "max", 61366548)).cljs$core$IFn$_invoke$arity$1(p))) {
            return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_compound.call(null, hidden_QMARK_, parser)) + "{" + cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "min", "min", 444991522)).cljs$core$IFn$_invoke$arity$1(p)) + "," + cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "max", "max", 61366548)).cljs$core$IFn$_invoke$arity$1(p)) + "}";
          } else {
            return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_compound.call(null, hidden_QMARK_, parser)) + "{" + cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "min", "min", 444991522)).cljs$core$IFn$_invoke$arity$1(p)) + "}";
          }
          break;
        case "star":
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_compound.call(null, hidden_QMARK_, parser)) + "*";
          break;
        case "string":
          var sb__4581__auto__ = new goog.string.StringBuffer;
          var _STAR_print_fn_STAR_15083_15086 = cljs.core._STAR_print_fn_STAR_;
          try {
            cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_fn_STAR_15083_15086, sb__4581__auto__, G__15082, map__15081, map__15081__$1, p, tag, parsers, parser2, parser1, parser) {
              return function(x__4582__auto__) {
                return sb__4581__auto__.append(x__4582__auto__);
              };
            }(_STAR_print_fn_STAR_15083_15086, sb__4581__auto__, G__15082, map__15081, map__15081__$1, p, tag, parsers, parser2, parser1, parser);
            cljs.core.pr.call(null, (new cljs.core.Keyword(null, "string", "string", -1989541586)).cljs$core$IFn$_invoke$arity$1(p));
          } finally {
            cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_15083_15086;
          }
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4581__auto__);
          break;
        case "regexp":
          return instaparse.print.regexp__GT_str.call(null, (new cljs.core.Keyword(null, "regexp", "regexp", -541372782)).cljs$core$IFn$_invoke$arity$1(p));
          break;
        case "plus":
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_compound.call(null, hidden_QMARK_, parser)) + "+";
          break;
        case "epsilon":
          return "\u03b5";
          break;
        case "string-ci":
          var sb__4581__auto__ = new goog.string.StringBuffer;
          var _STAR_print_fn_STAR_15084_15087 = cljs.core._STAR_print_fn_STAR_;
          try {
            cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_fn_STAR_15084_15087, sb__4581__auto__, G__15082, map__15081, map__15081__$1, p, tag, parsers, parser2, parser1, parser) {
              return function(x__4582__auto__) {
                return sb__4581__auto__.append(x__4582__auto__);
              };
            }(_STAR_print_fn_STAR_15084_15087, sb__4581__auto__, G__15082, map__15081, map__15081__$1, p, tag, parsers, parser2, parser1, parser);
            cljs.core.pr.call(null, (new cljs.core.Keyword(null, "string", "string", -1989541586)).cljs$core$IFn$_invoke$arity$1(p));
          } finally {
            cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_15084_15087;
          }
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4581__auto__);
          break;
        case "opt":
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.paren_for_compound.call(null, hidden_QMARK_, parser)) + "?";
          break;
        default:
          throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag));;
      }
    }
  };
  combinators__GT_str = function(p__15076, hidden_QMARK_) {
    switch(arguments.length) {
      case 1:
        return combinators__GT_str__1.call(this, p__15076);
      case 2:
        return combinators__GT_str__2.call(this, p__15076, hidden_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  combinators__GT_str.cljs$core$IFn$_invoke$arity$1 = combinators__GT_str__1;
  combinators__GT_str.cljs$core$IFn$_invoke$arity$2 = combinators__GT_str__2;
  return combinators__GT_str;
}();
instaparse.print.rule__GT_str = function rule__GT_str(terminal, parser) {
  if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "reduction-type", "reduction-type", -488293450)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser)), new cljs.core.Keyword(null, "raw", "raw", 1604651272))) {
    return "\x3c" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.name.call(null, terminal)) + "\x3e \x3d " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.combinators__GT_str.call(null, parser));
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.name.call(null, terminal)) + " \x3d " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.print.combinators__GT_str.call(null, parser));
  }
};
instaparse.print.Parser__GT_str = function Parser__GT_str(p__15088) {
  var map__15098 = p__15088;
  var map__15098__$1 = cljs.core.seq_QMARK_.call(null, map__15098) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15098) : map__15098;
  var grammar = cljs.core.get.call(null, map__15098__$1, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267));
  var start = cljs.core.get.call(null, map__15098__$1, new cljs.core.Keyword(null, "start-production", "start-production", 687546537));
  return clojure.string.join.call(null, "\n", cljs.core.cons.call(null, instaparse.print.rule__GT_str.call(null, start, grammar.call(null, start)), function() {
    var iter__4379__auto__ = function(map__15098, map__15098__$1, grammar, start) {
      return function iter__15099(s__15100) {
        return new cljs.core.LazySeq(null, function(map__15098, map__15098__$1, grammar, start) {
          return function() {
            var s__15100__$1 = s__15100;
            while (true) {
              var temp__4126__auto__ = cljs.core.seq.call(null, s__15100__$1);
              if (temp__4126__auto__) {
                var s__15100__$2 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__15100__$2)) {
                  var c__4377__auto__ = cljs.core.chunk_first.call(null, s__15100__$2);
                  var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                  var b__15102 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                  if (function() {
                    var i__15101 = 0;
                    while (true) {
                      if (i__15101 < size__4378__auto__) {
                        var vec__15105 = cljs.core._nth.call(null, c__4377__auto__, i__15101);
                        var terminal = cljs.core.nth.call(null, vec__15105, 0, null);
                        var parser = cljs.core.nth.call(null, vec__15105, 1, null);
                        if (cljs.core.not_EQ_.call(null, terminal, start)) {
                          cljs.core.chunk_append.call(null, b__15102, instaparse.print.rule__GT_str.call(null, terminal, parser));
                          var G__15107 = i__15101 + 1;
                          i__15101 = G__15107;
                          continue;
                        } else {
                          var G__15108 = i__15101 + 1;
                          i__15101 = G__15108;
                          continue;
                        }
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15102), iter__15099.call(null, cljs.core.chunk_rest.call(null, s__15100__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15102), null);
                  }
                } else {
                  var vec__15106 = cljs.core.first.call(null, s__15100__$2);
                  var terminal = cljs.core.nth.call(null, vec__15106, 0, null);
                  var parser = cljs.core.nth.call(null, vec__15106, 1, null);
                  if (cljs.core.not_EQ_.call(null, terminal, start)) {
                    return cljs.core.cons.call(null, instaparse.print.rule__GT_str.call(null, terminal, parser), iter__15099.call(null, cljs.core.rest.call(null, s__15100__$2)));
                  } else {
                    var G__15109 = cljs.core.rest.call(null, s__15100__$2);
                    s__15100__$1 = G__15109;
                    continue;
                  }
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(map__15098, map__15098__$1, grammar, start), null, null);
      };
    }(map__15098, map__15098__$1, grammar, start);
    return iter__4379__auto__.call(null, grammar);
  }()));
};
goog.provide("instaparse.failure");
goog.require("cljs.core");
goog.require("instaparse.print");
goog.require("instaparse.print");
instaparse.failure.index__GT_line_column = function index__GT_line_column(index, text) {
  var line = 1;
  var col = 1;
  var counter = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, index, counter)) {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "line", "line", 212345235), line, new cljs.core.Keyword(null, "column", "column", 2078222095), col], null);
    } else {
      if (cljs.core._EQ_.call(null, "\n", cljs.core.get.call(null, text, counter))) {
        var G__14860 = line + 1;
        var G__14861 = 1;
        var G__14862 = counter + 1;
        line = G__14860;
        col = G__14861;
        counter = G__14862;
        continue;
      } else {
        var G__14863 = line;
        var G__14864 = col + 1;
        var G__14865 = counter + 1;
        line = G__14863;
        col = G__14864;
        counter = G__14865;
        continue;
      }
    }
    break;
  }
};
instaparse.failure.newline_chars = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["\n", null, "\r", null], null), null);
instaparse.failure.line_seq = function line_seq(s) {
  if (cljs.core.empty_QMARK_.call(null, s)) {
    return null;
  } else {
    return cljs.core.map.call(null, cljs.core.partial.call(null, cljs.core.apply, cljs.core.str), cljs.core.filter.call(null, function(p1__14866_SHARP_) {
      return cljs.core.not.call(null, instaparse.failure.newline_chars.call(null, cljs.core.first.call(null, p1__14866_SHARP_)));
    }, cljs.core.partition_by.call(null, instaparse.failure.newline_chars, s)));
  }
};
instaparse.failure.get_line = function get_line(n, text) {
  return cljs.core.nth.call(null, instaparse.failure.line_seq.call(null, text), n - 1);
};
instaparse.failure.marker = function marker(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    if (n <= 1) {
      return "^";
    } else {
      return cljs.core.apply.call(null, cljs.core.str, cljs.core.concat.call(null, cljs.core.repeat.call(null, n - 1, " "), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["^"], null)));
    }
  } else {
    return null;
  }
};
instaparse.failure.augment_failure = function augment_failure(failure, text) {
  var lc = instaparse.failure.index__GT_line_column.call(null, (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(failure), text);
  return cljs.core.merge.call(null, failure, lc, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "text", "text", -1790561697), instaparse.failure.get_line.call(null, (new cljs.core.Keyword(null, "line", "line", 212345235)).cljs$core$IFn$_invoke$arity$1(lc), text)], null));
};
instaparse.failure.print_reason = function print_reason(r) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "NOT", "NOT", -1689245341)).cljs$core$IFn$_invoke$arity$1(r))) {
    cljs.core.print.call(null, "NOT ");
    return cljs.core.println.call(null, (new cljs.core.Keyword(null, "NOT", "NOT", -1689245341)).cljs$core$IFn$_invoke$arity$1(r));
  } else {
    if (r instanceof java.util.regex.Pattern) {
      return cljs.core.println.call(null, instaparse.print.regexp__GT_str.call(null, r));
    } else {
      return cljs.core.prn.call(null, r);
    }
  }
};
instaparse.failure.pprint_failure = function pprint_failure(p__14867) {
  var map__14877 = p__14867;
  var map__14877__$1 = cljs.core.seq_QMARK_.call(null, map__14877) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14877) : map__14877;
  var reason = cljs.core.get.call(null, map__14877__$1, new cljs.core.Keyword(null, "reason", "reason", -2070751759));
  var text = cljs.core.get.call(null, map__14877__$1, new cljs.core.Keyword(null, "text", "text", -1790561697));
  var column = cljs.core.get.call(null, map__14877__$1, new cljs.core.Keyword(null, "column", "column", 2078222095));
  var line = cljs.core.get.call(null, map__14877__$1, new cljs.core.Keyword(null, "line", "line", 212345235));
  cljs.core.println.call(null, "Parse error at line", line, ", column", column, ":\n");
  cljs.core.println.call(null, text);
  cljs.core.println.call(null, instaparse.failure.marker.call(null, column));
  var full_reasons = cljs.core.distinct.call(null, cljs.core.map.call(null, new cljs.core.Keyword(null, "expecting", "expecting", -57706705), cljs.core.filter.call(null, new cljs.core.Keyword(null, "full", "full", 436801220), reason)));
  var partial_reasons = cljs.core.distinct.call(null, cljs.core.map.call(null, new cljs.core.Keyword(null, "expecting", "expecting", -57706705), cljs.core.filter.call(null, cljs.core.complement.call(null, new cljs.core.Keyword(null, "full", "full", 436801220)), reason)));
  var total = cljs.core.count.call(null, full_reasons) + cljs.core.count.call(null, partial_reasons);
  if (total === 0) {
  } else {
    if (cljs.core._EQ_.call(null, 1, total)) {
      cljs.core.println.call(null, "Expected:");
    } else {
      cljs.core.println.call(null, "Expected one of:");
    }
  }
  var seq__14878_14886 = cljs.core.seq.call(null, full_reasons);
  var chunk__14879_14887 = null;
  var count__14880_14888 = 0;
  var i__14881_14889 = 0;
  while (true) {
    if (i__14881_14889 < count__14880_14888) {
      var r_14890 = cljs.core._nth.call(null, chunk__14879_14887, i__14881_14889);
      cljs.core.pr.call(null, r_14890);
      cljs.core.println.call(null, " (followed by end-of-string)");
      var G__14891 = seq__14878_14886;
      var G__14892 = chunk__14879_14887;
      var G__14893 = count__14880_14888;
      var G__14894 = i__14881_14889 + 1;
      seq__14878_14886 = G__14891;
      chunk__14879_14887 = G__14892;
      count__14880_14888 = G__14893;
      i__14881_14889 = G__14894;
      continue;
    } else {
      var temp__4126__auto___14895 = cljs.core.seq.call(null, seq__14878_14886);
      if (temp__4126__auto___14895) {
        var seq__14878_14896__$1 = temp__4126__auto___14895;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14878_14896__$1)) {
          var c__4410__auto___14897 = cljs.core.chunk_first.call(null, seq__14878_14896__$1);
          var G__14898 = cljs.core.chunk_rest.call(null, seq__14878_14896__$1);
          var G__14899 = c__4410__auto___14897;
          var G__14900 = cljs.core.count.call(null, c__4410__auto___14897);
          var G__14901 = 0;
          seq__14878_14886 = G__14898;
          chunk__14879_14887 = G__14899;
          count__14880_14888 = G__14900;
          i__14881_14889 = G__14901;
          continue;
        } else {
          var r_14902 = cljs.core.first.call(null, seq__14878_14896__$1);
          cljs.core.pr.call(null, r_14902);
          cljs.core.println.call(null, " (followed by end-of-string)");
          var G__14903 = cljs.core.next.call(null, seq__14878_14896__$1);
          var G__14904 = null;
          var G__14905 = 0;
          var G__14906 = 0;
          seq__14878_14886 = G__14903;
          chunk__14879_14887 = G__14904;
          count__14880_14888 = G__14905;
          i__14881_14889 = G__14906;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var seq__14882 = cljs.core.seq.call(null, partial_reasons);
  var chunk__14883 = null;
  var count__14884 = 0;
  var i__14885 = 0;
  while (true) {
    if (i__14885 < count__14884) {
      var r = cljs.core._nth.call(null, chunk__14883, i__14885);
      instaparse.failure.print_reason.call(null, r);
      var G__14907 = seq__14882;
      var G__14908 = chunk__14883;
      var G__14909 = count__14884;
      var G__14910 = i__14885 + 1;
      seq__14882 = G__14907;
      chunk__14883 = G__14908;
      count__14884 = G__14909;
      i__14885 = G__14910;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__14882);
      if (temp__4126__auto__) {
        var seq__14882__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14882__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__14882__$1);
          var G__14911 = cljs.core.chunk_rest.call(null, seq__14882__$1);
          var G__14912 = c__4410__auto__;
          var G__14913 = cljs.core.count.call(null, c__4410__auto__);
          var G__14914 = 0;
          seq__14882 = G__14911;
          chunk__14883 = G__14912;
          count__14884 = G__14913;
          i__14885 = G__14914;
          continue;
        } else {
          var r = cljs.core.first.call(null, seq__14882__$1);
          instaparse.failure.print_reason.call(null, r);
          var G__14915 = cljs.core.next.call(null, seq__14882__$1);
          var G__14916 = null;
          var G__14917 = 0;
          var G__14918 = 0;
          seq__14882 = G__14915;
          chunk__14883 = G__14916;
          count__14884 = G__14917;
          i__14885 = G__14918;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
goog.provide("instaparse.gll");
goog.require("cljs.core");
goog.require("instaparse.combinators_source");
goog.require("instaparse.print");
goog.require("instaparse.print");
goog.require("instaparse.combinators_source");
goog.require("instaparse.reduction");
goog.require("instaparse.reduction");
goog.require("instaparse.failure");
goog.require("instaparse.failure");
goog.require("instaparse.auto_flatten_seq");
goog.require("instaparse.auto_flatten_seq");
instaparse.gll.ISegment = function() {
  var obj14629 = {};
  return obj14629;
}();
instaparse.gll.subsegment = function subsegment(this$, start_index, end_index_minus_one) {
  if (function() {
    var and__3628__auto__ = this$;
    if (and__3628__auto__) {
      return this$.instaparse$gll$ISegment$subsegment$arity$3;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return this$.instaparse$gll$ISegment$subsegment$arity$3(this$, start_index, end_index_minus_one);
  } else {
    var x__4277__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3640__auto__ = instaparse.gll.subsegment[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = instaparse.gll.subsegment["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISegment.subsegment", this$);
        }
      }
    }().call(null, this$, start_index, end_index_minus_one);
  }
};
instaparse.gll.toString = function toString(this$) {
  if (function() {
    var and__3628__auto__ = this$;
    if (and__3628__auto__) {
      return this$.instaparse$gll$ISegment$toString$arity$1;
    } else {
      return and__3628__auto__;
    }
  }()) {
    return this$.instaparse$gll$ISegment$toString$arity$1(this$);
  } else {
    var x__4277__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3640__auto__ = instaparse.gll.toString[goog.typeOf(x__4277__auto__)];
      if (or__3640__auto__) {
        return or__3640__auto__;
      } else {
        var or__3640__auto____$1 = instaparse.gll.toString["_"];
        if (or__3640__auto____$1) {
          return or__3640__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISegment.toString", this$);
        }
      }
    }().call(null, this$);
  }
};
instaparse.gll.Segment = function(text, offset, count) {
  this.text = text;
  this.offset = offset;
  this.count = count;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
instaparse.gll.Segment.cljs$lang$type = true;
instaparse.gll.Segment.cljs$lang$ctorStr = "instaparse.gll/Segment";
instaparse.gll.Segment.cljs$lang$ctorPrWriter = function(this__4217__auto__, writer__4218__auto__, opt__4219__auto__) {
  return cljs.core._write.call(null, writer__4218__auto__, "instaparse.gll/Segment");
};
instaparse.gll.Segment.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.count;
};
instaparse.gll.Segment.prototype.instaparse$gll$ISegment$ = true;
instaparse.gll.Segment.prototype.instaparse$gll$ISegment$subsegment$arity$3 = function(this$, start, end) {
  var self__ = this;
  var this$__$1 = this;
  return new instaparse.gll.Segment(self__.text, self__.offset + start, end - start);
};
instaparse.gll.Segment.prototype.instaparse$gll$ISegment$toString$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.subs.call(null, self__.text, self__.offset, self__.offset + self__.count);
};
instaparse.gll.__GT_Segment = function __GT_Segment(text, offset, count) {
  return new instaparse.gll.Segment(text, offset, count);
};
instaparse.gll.get_parser = function get_parser(grammar, p) {
  return cljs.core.get.call(null, grammar, p, p);
};
instaparse.gll._parse = function _parse(parser, index, tramp) {
  var G__14631 = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser).fqn : null;
  switch(G__14631) {
    case "neg":
      return instaparse.gll.negative_lookahead_parse.call(null, parser, index, tramp);
      break;
    case "cat":
      return instaparse.gll.cat_parse.call(null, parser, index, tramp);
      break;
    case "ord":
      return instaparse.gll.ordered_alt_parse.call(null, parser, index, tramp);
      break;
    case "alt":
      return instaparse.gll.alt_parse.call(null, parser, index, tramp);
      break;
    case "look":
      return instaparse.gll.lookahead_parse.call(null, parser, index, tramp);
      break;
    case "nt":
      return instaparse.gll.non_terminal_parse.call(null, parser, index, tramp);
      break;
    case "rep":
      return instaparse.gll.rep_parse.call(null, parser, index, tramp);
      break;
    case "star":
      return instaparse.gll.star_parse.call(null, parser, index, tramp);
      break;
    case "string":
      return instaparse.gll.string_parse.call(null, parser, index, tramp);
      break;
    case "regexp":
      return instaparse.gll.regexp_parse.call(null, parser, index, tramp);
      break;
    case "plus":
      return instaparse.gll.plus_parse.call(null, parser, index, tramp);
      break;
    case "epsilon":
      return instaparse.gll.epsilon_parse.call(null, parser, index, tramp);
      break;
    case "string-ci":
      return instaparse.gll.string_case_insensitive_parse.call(null, parser, index, tramp);
      break;
    case "opt":
      return instaparse.gll.opt_parse.call(null, parser, index, tramp);
      break;
    default:
      throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser)));;
  }
};
instaparse.gll._full_parse = function _full_parse(parser, index, tramp) {
  var G__14634 = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser).fqn : null;
  switch(G__14634) {
    case "neg":
      return instaparse.gll.negative_lookahead_parse.call(null, parser, index, tramp);
      break;
    case "cat":
      return instaparse.gll.cat_full_parse.call(null, parser, index, tramp);
      break;
    case "ord":
      return instaparse.gll.ordered_alt_full_parse.call(null, parser, index, tramp);
      break;
    case "alt":
      return instaparse.gll.alt_full_parse.call(null, parser, index, tramp);
      break;
    case "look":
      return instaparse.gll.lookahead_full_parse.call(null, parser, index, tramp);
      break;
    case "nt":
      return instaparse.gll.non_terminal_full_parse.call(null, parser, index, tramp);
      break;
    case "rep":
      return instaparse.gll.rep_full_parse.call(null, parser, index, tramp);
      break;
    case "star":
      return instaparse.gll.star_full_parse.call(null, parser, index, tramp);
      break;
    case "string":
      return instaparse.gll.string_full_parse.call(null, parser, index, tramp);
      break;
    case "regexp":
      return instaparse.gll.regexp_full_parse.call(null, parser, index, tramp);
      break;
    case "plus":
      return instaparse.gll.plus_full_parse.call(null, parser, index, tramp);
      break;
    case "epsilon":
      return instaparse.gll.epsilon_full_parse.call(null, parser, index, tramp);
      break;
    case "string-ci":
      return instaparse.gll.string_case_insensitive_full_parse.call(null, parser, index, tramp);
      break;
    case "opt":
      return instaparse.gll.opt_full_parse.call(null, parser, index, tramp);
      break;
    default:
      throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser)));;
  }
};
instaparse.gll.Failure = function(index, reason, __meta, __extmap) {
  this.index = index;
  this.reason = reason;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
instaparse.gll.Failure.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4236__auto__, k__4237__auto__) {
  var self__ = this;
  var this__4236__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4236__auto____$1, k__4237__auto__, null);
};
instaparse.gll.Failure.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4238__auto__, k14637, else__4239__auto__) {
  var self__ = this;
  var this__4238__auto____$1 = this;
  var G__14639 = k14637 instanceof cljs.core.Keyword ? k14637.fqn : null;
  switch(G__14639) {
    case "reason":
      return self__.reason;
      break;
    case "index":
      return self__.index;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k14637, else__4239__auto__);
  }
};
instaparse.gll.Failure.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4250__auto__, writer__4251__auto__, opts__4252__auto__) {
  var self__ = this;
  var this__4250__auto____$1 = this;
  var pr_pair__4253__auto__ = function(this__4250__auto____$1) {
    return function(keyval__4254__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4251__auto__, cljs.core.pr_writer, "", " ", "", opts__4252__auto__, keyval__4254__auto__);
    };
  }(this__4250__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4251__auto__, pr_pair__4253__auto__, "#instaparse.gll.Failure{", ", ", "}", opts__4252__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "index", "index", -1531685915), self__.index], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "reason", "reason", -2070751759), self__.reason], null)], null), self__.__extmap));
};
instaparse.gll.Failure.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4234__auto__) {
  var self__ = this;
  var this__4234__auto____$1 = this;
  return self__.__meta;
};
instaparse.gll.Failure.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4230__auto__) {
  var self__ = this;
  var this__4230__auto____$1 = this;
  return new instaparse.gll.Failure(self__.index, self__.reason, self__.__meta, self__.__extmap, self__.__hash);
};
instaparse.gll.Failure.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4240__auto__) {
  var self__ = this;
  var this__4240__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
instaparse.gll.Failure.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4231__auto__) {
  var self__ = this;
  var this__4231__auto____$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_imap.call(null, this__4231__auto____$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
instaparse.gll.Failure.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4232__auto__, other__4233__auto__) {
  var self__ = this;
  var this__4232__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = other__4233__auto__;
    if (cljs.core.truth_(and__3628__auto__)) {
      return this__4232__auto____$1.constructor === other__4233__auto__.constructor && cljs.core.equiv_map.call(null, this__4232__auto____$1, other__4233__auto__);
    } else {
      return and__3628__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
instaparse.gll.Failure.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4245__auto__, k__4246__auto__) {
  var self__ = this;
  var this__4245__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "index", "index", -1531685915), null, new cljs.core.Keyword(null, "reason", "reason", -2070751759), null], null), null), k__4246__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4245__auto____$1), self__.__meta), k__4246__auto__);
  } else {
    return new instaparse.gll.Failure(self__.index, self__.reason, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4246__auto__)), null);
  }
};
instaparse.gll.Failure.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4243__auto__, k__4244__auto__, G__14636) {
  var self__ = this;
  var this__4243__auto____$1 = this;
  var pred__14640 = cljs.core.keyword_identical_QMARK_;
  var expr__14641 = k__4244__auto__;
  if (cljs.core.truth_(pred__14640.call(null, new cljs.core.Keyword(null, "index", "index", -1531685915), expr__14641))) {
    return new instaparse.gll.Failure(G__14636, self__.reason, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__14640.call(null, new cljs.core.Keyword(null, "reason", "reason", -2070751759), expr__14641))) {
      return new instaparse.gll.Failure(self__.index, G__14636, self__.__meta, self__.__extmap, null);
    } else {
      return new instaparse.gll.Failure(self__.index, self__.reason, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4244__auto__, G__14636), null);
    }
  }
};
instaparse.gll.Failure.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4248__auto__) {
  var self__ = this;
  var this__4248__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "index", "index", -1531685915), self__.index], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "reason", "reason", -2070751759), self__.reason], null)], null), self__.__extmap));
};
instaparse.gll.Failure.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4235__auto__, G__14636) {
  var self__ = this;
  var this__4235__auto____$1 = this;
  return new instaparse.gll.Failure(self__.index, self__.reason, G__14636, self__.__extmap, self__.__hash);
};
instaparse.gll.Failure.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4241__auto__, entry__4242__auto__) {
  var self__ = this;
  var this__4241__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4242__auto__)) {
    return cljs.core._assoc.call(null, this__4241__auto____$1, cljs.core._nth.call(null, entry__4242__auto__, 0), cljs.core._nth.call(null, entry__4242__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4241__auto____$1, entry__4242__auto__);
  }
};
instaparse.gll.Failure.cljs$lang$type = true;
instaparse.gll.Failure.cljs$lang$ctorPrSeq = function(this__4270__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "instaparse.gll/Failure");
};
instaparse.gll.Failure.cljs$lang$ctorPrWriter = function(this__4270__auto__, writer__4271__auto__) {
  return cljs.core._write.call(null, writer__4271__auto__, "instaparse.gll/Failure");
};
instaparse.gll.__GT_Failure = function __GT_Failure(index, reason) {
  return new instaparse.gll.Failure(index, reason);
};
instaparse.gll.map__GT_Failure = function map__GT_Failure(G__14638) {
  return new instaparse.gll.Failure((new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(G__14638), (new cljs.core.Keyword(null, "reason", "reason", -2070751759)).cljs$core$IFn$_invoke$arity$1(G__14638), null, cljs.core.dissoc.call(null, G__14638, new cljs.core.Keyword(null, "index", "index", -1531685915), new cljs.core.Keyword(null, "reason", "reason", -2070751759)));
};
instaparse.gll.string__GT_segment = function string__GT_segment(s) {
  return new instaparse.gll.Segment(s, 0, cljs.core.count.call(null, s));
};
instaparse.gll.Tramp = function(grammar, text, segment, fail_index, node_builder, stack, next_stack, generation, negative_listeners, msg_cache, nodes, success, failure, __meta, __extmap) {
  this.grammar = grammar;
  this.text = text;
  this.segment = segment;
  this.fail_index = fail_index;
  this.node_builder = node_builder;
  this.stack = stack;
  this.next_stack = next_stack;
  this.generation = generation;
  this.negative_listeners = negative_listeners;
  this.msg_cache = msg_cache;
  this.nodes = nodes;
  this.success = success;
  this.failure = failure;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 13) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
instaparse.gll.Tramp.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4236__auto__, k__4237__auto__) {
  var self__ = this;
  var this__4236__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4236__auto____$1, k__4237__auto__, null);
};
instaparse.gll.Tramp.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4238__auto__, k14645, else__4239__auto__) {
  var self__ = this;
  var this__4238__auto____$1 = this;
  var G__14647 = k14645 instanceof cljs.core.Keyword ? k14645.fqn : null;
  switch(G__14647) {
    case "msg-cache":
      return self__.msg_cache;
      break;
    case "negative-listeners":
      return self__.negative_listeners;
      break;
    case "generation":
      return self__.generation;
      break;
    case "failure":
      return self__.failure;
      break;
    case "fail-index":
      return self__.fail_index;
      break;
    case "grammar":
      return self__.grammar;
      break;
    case "success":
      return self__.success;
      break;
    case "nodes":
      return self__.nodes;
      break;
    case "node-builder":
      return self__.node_builder;
      break;
    case "segment":
      return self__.segment;
      break;
    case "stack":
      return self__.stack;
      break;
    case "next-stack":
      return self__.next_stack;
      break;
    case "text":
      return self__.text;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k14645, else__4239__auto__);
  }
};
instaparse.gll.Tramp.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4250__auto__, writer__4251__auto__, opts__4252__auto__) {
  var self__ = this;
  var this__4250__auto____$1 = this;
  var pr_pair__4253__auto__ = function(this__4250__auto____$1) {
    return function(keyval__4254__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4251__auto__, cljs.core.pr_writer, "", " ", "", opts__4252__auto__, keyval__4254__auto__);
    };
  }(this__4250__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4251__auto__, pr_pair__4253__auto__, "#instaparse.gll.Tramp{", ", ", "}", opts__4252__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), self__.grammar], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "text", "text", -1790561697), self__.text], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "segment", "segment", -964921196), self__.segment], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "fail-index", "fail-index", 248726923), self__.fail_index], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "node-builder", "node-builder", -1956562605), self__.node_builder], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "stack", "stack", -793405930), self__.stack], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "next-stack", "next-stack", -481930728), self__.next_stack], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "generation", "generation", -2132542044), self__.generation], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "negative-listeners", "negative-listeners", 55241092), self__.negative_listeners], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "msg-cache", "msg-cache", -733775070), self__.msg_cache], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "nodes", "nodes", -2099585805), self__.nodes], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "success", "success", 1890645906), self__.success], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "failure", "failure", 720415879), self__.failure], null)], null), self__.__extmap));
};
instaparse.gll.Tramp.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4234__auto__) {
  var self__ = this;
  var this__4234__auto____$1 = this;
  return self__.__meta;
};
instaparse.gll.Tramp.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4230__auto__) {
  var self__ = this;
  var this__4230__auto____$1 = this;
  return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, self__.__hash);
};
instaparse.gll.Tramp.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4240__auto__) {
  var self__ = this;
  var this__4240__auto____$1 = this;
  return 13 + cljs.core.count.call(null, self__.__extmap);
};
instaparse.gll.Tramp.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4231__auto__) {
  var self__ = this;
  var this__4231__auto____$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_imap.call(null, this__4231__auto____$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
instaparse.gll.Tramp.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4232__auto__, other__4233__auto__) {
  var self__ = this;
  var this__4232__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = other__4233__auto__;
    if (cljs.core.truth_(and__3628__auto__)) {
      return this__4232__auto____$1.constructor === other__4233__auto__.constructor && cljs.core.equiv_map.call(null, this__4232__auto____$1, other__4233__auto__);
    } else {
      return and__3628__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
instaparse.gll.Tramp.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4245__auto__, k__4246__auto__) {
  var self__ = this;
  var this__4245__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [new cljs.core.Keyword(null, "msg-cache", "msg-cache", -733775070), null, new cljs.core.Keyword(null, "negative-listeners", "negative-listeners", 55241092), null, new cljs.core.Keyword(null, "generation", "generation", -2132542044), null, new cljs.core.Keyword(null, "failure", "failure", 720415879), null, new cljs.core.Keyword(null, "fail-index", "fail-index", 248726923), null, 
  new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), null, new cljs.core.Keyword(null, "success", "success", 1890645906), null, new cljs.core.Keyword(null, "nodes", "nodes", -2099585805), null, new cljs.core.Keyword(null, "node-builder", "node-builder", -1956562605), null, new cljs.core.Keyword(null, "segment", "segment", -964921196), null, new cljs.core.Keyword(null, "stack", "stack", -793405930), null, new cljs.core.Keyword(null, "next-stack", "next-stack", -481930728), null, new cljs.core.Keyword(null, 
  "text", "text", -1790561697), null], null), null), k__4246__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4245__auto____$1), self__.__meta), k__4246__auto__);
  } else {
    return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4246__auto__)), null);
  }
};
instaparse.gll.Tramp.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4243__auto__, k__4244__auto__, G__14644) {
  var self__ = this;
  var this__4243__auto____$1 = this;
  var pred__14648 = cljs.core.keyword_identical_QMARK_;
  var expr__14649 = k__4244__auto__;
  if (cljs.core.truth_(pred__14648.call(null, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), expr__14649))) {
    return new instaparse.gll.Tramp(G__14644, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__14648.call(null, new cljs.core.Keyword(null, "text", "text", -1790561697), expr__14649))) {
      return new instaparse.gll.Tramp(self__.grammar, G__14644, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__14648.call(null, new cljs.core.Keyword(null, "segment", "segment", -964921196), expr__14649))) {
        return new instaparse.gll.Tramp(self__.grammar, self__.text, G__14644, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__14648.call(null, new cljs.core.Keyword(null, "fail-index", "fail-index", 248726923), expr__14649))) {
          return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, G__14644, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__14648.call(null, new cljs.core.Keyword(null, "node-builder", "node-builder", -1956562605), expr__14649))) {
            return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, G__14644, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
          } else {
            if (cljs.core.truth_(pred__14648.call(null, new cljs.core.Keyword(null, "stack", "stack", -793405930), expr__14649))) {
              return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, G__14644, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
            } else {
              if (cljs.core.truth_(pred__14648.call(null, new cljs.core.Keyword(null, "next-stack", "next-stack", -481930728), expr__14649))) {
                return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, G__14644, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
              } else {
                if (cljs.core.truth_(pred__14648.call(null, new cljs.core.Keyword(null, "generation", "generation", -2132542044), expr__14649))) {
                  return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, G__14644, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
                } else {
                  if (cljs.core.truth_(pred__14648.call(null, new cljs.core.Keyword(null, "negative-listeners", "negative-listeners", 55241092), expr__14649))) {
                    return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, G__14644, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
                  } else {
                    if (cljs.core.truth_(pred__14648.call(null, new cljs.core.Keyword(null, "msg-cache", "msg-cache", -733775070), expr__14649))) {
                      return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, G__14644, self__.nodes, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
                    } else {
                      if (cljs.core.truth_(pred__14648.call(null, new cljs.core.Keyword(null, "nodes", "nodes", -2099585805), expr__14649))) {
                        return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, G__14644, self__.success, self__.failure, self__.__meta, self__.__extmap, null);
                      } else {
                        if (cljs.core.truth_(pred__14648.call(null, new cljs.core.Keyword(null, "success", "success", 1890645906), expr__14649))) {
                          return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, G__14644, self__.failure, self__.__meta, self__.__extmap, null);
                        } else {
                          if (cljs.core.truth_(pred__14648.call(null, new cljs.core.Keyword(null, "failure", "failure", 720415879), expr__14649))) {
                            return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, G__14644, self__.__meta, self__.__extmap, null);
                          } else {
                            return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4244__auto__, G__14644), null);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
instaparse.gll.Tramp.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4248__auto__) {
  var self__ = this;
  var this__4248__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), self__.grammar], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "text", "text", -1790561697), self__.text], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "segment", "segment", -964921196), self__.segment], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "fail-index", "fail-index", 248726923), self__.fail_index], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "node-builder", "node-builder", -1956562605), self__.node_builder], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "stack", "stack", -793405930), self__.stack], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "next-stack", "next-stack", -481930728), self__.next_stack], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "generation", "generation", -2132542044), self__.generation], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "negative-listeners", "negative-listeners", 55241092), self__.negative_listeners], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "msg-cache", "msg-cache", -733775070), self__.msg_cache], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "nodes", "nodes", -2099585805), self__.nodes], null), 
  new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "success", "success", 1890645906), self__.success], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "failure", "failure", 720415879), self__.failure], null)], null), self__.__extmap));
};
instaparse.gll.Tramp.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4235__auto__, G__14644) {
  var self__ = this;
  var this__4235__auto____$1 = this;
  return new instaparse.gll.Tramp(self__.grammar, self__.text, self__.segment, self__.fail_index, self__.node_builder, self__.stack, self__.next_stack, self__.generation, self__.negative_listeners, self__.msg_cache, self__.nodes, self__.success, self__.failure, G__14644, self__.__extmap, self__.__hash);
};
instaparse.gll.Tramp.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4241__auto__, entry__4242__auto__) {
  var self__ = this;
  var this__4241__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4242__auto__)) {
    return cljs.core._assoc.call(null, this__4241__auto____$1, cljs.core._nth.call(null, entry__4242__auto__, 0), cljs.core._nth.call(null, entry__4242__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4241__auto____$1, entry__4242__auto__);
  }
};
instaparse.gll.Tramp.cljs$lang$type = true;
instaparse.gll.Tramp.cljs$lang$ctorPrSeq = function(this__4270__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "instaparse.gll/Tramp");
};
instaparse.gll.Tramp.cljs$lang$ctorPrWriter = function(this__4270__auto__, writer__4271__auto__) {
  return cljs.core._write.call(null, writer__4271__auto__, "instaparse.gll/Tramp");
};
instaparse.gll.__GT_Tramp = function __GT_Tramp(grammar, text, segment, fail_index, node_builder, stack, next_stack, generation, negative_listeners, msg_cache, nodes, success, failure) {
  return new instaparse.gll.Tramp(grammar, text, segment, fail_index, node_builder, stack, next_stack, generation, negative_listeners, msg_cache, nodes, success, failure);
};
instaparse.gll.map__GT_Tramp = function map__GT_Tramp(G__14646) {
  return new instaparse.gll.Tramp((new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(G__14646), (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(G__14646), (new cljs.core.Keyword(null, "segment", "segment", -964921196)).cljs$core$IFn$_invoke$arity$1(G__14646), (new cljs.core.Keyword(null, "fail-index", "fail-index", 248726923)).cljs$core$IFn$_invoke$arity$1(G__14646), (new cljs.core.Keyword(null, "node-builder", "node-builder", 
  -1956562605)).cljs$core$IFn$_invoke$arity$1(G__14646), (new cljs.core.Keyword(null, "stack", "stack", -793405930)).cljs$core$IFn$_invoke$arity$1(G__14646), (new cljs.core.Keyword(null, "next-stack", "next-stack", -481930728)).cljs$core$IFn$_invoke$arity$1(G__14646), (new cljs.core.Keyword(null, "generation", "generation", -2132542044)).cljs$core$IFn$_invoke$arity$1(G__14646), (new cljs.core.Keyword(null, "negative-listeners", "negative-listeners", 55241092)).cljs$core$IFn$_invoke$arity$1(G__14646), 
  (new cljs.core.Keyword(null, "msg-cache", "msg-cache", -733775070)).cljs$core$IFn$_invoke$arity$1(G__14646), (new cljs.core.Keyword(null, "nodes", "nodes", -2099585805)).cljs$core$IFn$_invoke$arity$1(G__14646), (new cljs.core.Keyword(null, "success", "success", 1890645906)).cljs$core$IFn$_invoke$arity$1(G__14646), (new cljs.core.Keyword(null, "failure", "failure", 720415879)).cljs$core$IFn$_invoke$arity$1(G__14646), null, cljs.core.dissoc.call(null, G__14646, new cljs.core.Keyword(null, "grammar", 
  "grammar", 1881328267), new cljs.core.Keyword(null, "text", "text", -1790561697), new cljs.core.Keyword(null, "segment", "segment", -964921196), new cljs.core.Keyword(null, "fail-index", "fail-index", 248726923), new cljs.core.Keyword(null, "node-builder", "node-builder", -1956562605), new cljs.core.Keyword(null, "stack", "stack", -793405930), new cljs.core.Keyword(null, "next-stack", "next-stack", -481930728), new cljs.core.Keyword(null, "generation", "generation", -2132542044), new cljs.core.Keyword(null, 
  "negative-listeners", "negative-listeners", 55241092), new cljs.core.Keyword(null, "msg-cache", "msg-cache", -733775070), new cljs.core.Keyword(null, "nodes", "nodes", -2099585805), new cljs.core.Keyword(null, "success", "success", 1890645906), new cljs.core.Keyword(null, "failure", "failure", 720415879)));
};
instaparse.gll.make_tramp = function() {
  var make_tramp = null;
  var make_tramp__2 = function(grammar, text) {
    return make_tramp.call(null, grammar, text, instaparse.gll.string__GT_segment.call(null, text), -1, null);
  };
  var make_tramp__3 = function(grammar, text, segment) {
    return make_tramp.call(null, grammar, text, segment, -1, null);
  };
  var make_tramp__4 = function(grammar, text, fail_index, node_builder) {
    return make_tramp.call(null, grammar, text, instaparse.gll.string__GT_segment.call(null, text), fail_index, node_builder);
  };
  var make_tramp__5 = function(grammar, text, segment, fail_index, node_builder) {
    return new instaparse.gll.Tramp(grammar, text, segment, fail_index, node_builder, cljs.core.PersistentVector.EMPTY, cljs.core.PersistentVector.EMPTY, 0, cljs.core.PersistentVector.EMPTY, cljs.core.PersistentArrayMap.EMPTY, cljs.core.PersistentArrayMap.EMPTY, null, new instaparse.gll.Failure(0, cljs.core.PersistentVector.EMPTY));
  };
  make_tramp = function(grammar, text, segment, fail_index, node_builder) {
    switch(arguments.length) {
      case 2:
        return make_tramp__2.call(this, grammar, text);
      case 3:
        return make_tramp__3.call(this, grammar, text, segment);
      case 4:
        return make_tramp__4.call(this, grammar, text, segment, fail_index);
      case 5:
        return make_tramp__5.call(this, grammar, text, segment, fail_index, node_builder);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_tramp.cljs$core$IFn$_invoke$arity$2 = make_tramp__2;
  make_tramp.cljs$core$IFn$_invoke$arity$3 = make_tramp__3;
  make_tramp.cljs$core$IFn$_invoke$arity$4 = make_tramp__4;
  make_tramp.cljs$core$IFn$_invoke$arity$5 = make_tramp__5;
  return make_tramp;
}();
instaparse.gll.make_success = function make_success(result, index) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "result", "result", 1415092211), result, new cljs.core.Keyword(null, "index", "index", -1531685915), index], null);
};
instaparse.gll.total_success_QMARK_ = function total_success_QMARK_(tramp, s) {
  return cljs.core._EQ_.call(null, cljs.core.count.call(null, tramp.text), (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(s));
};
instaparse.gll.Node = function(listeners, full_listeners, results, full_results, __meta, __extmap) {
  this.listeners = listeners;
  this.full_listeners = full_listeners;
  this.results = results;
  this.full_results = full_results;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 4) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
instaparse.gll.Node.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4236__auto__, k__4237__auto__) {
  var self__ = this;
  var this__4236__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4236__auto____$1, k__4237__auto__, null);
};
instaparse.gll.Node.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4238__auto__, k14653, else__4239__auto__) {
  var self__ = this;
  var this__4238__auto____$1 = this;
  var G__14655 = k14653 instanceof cljs.core.Keyword ? k14653.fqn : null;
  switch(G__14655) {
    case "full-results":
      return self__.full_results;
      break;
    case "results":
      return self__.results;
      break;
    case "full-listeners":
      return self__.full_listeners;
      break;
    case "listeners":
      return self__.listeners;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k14653, else__4239__auto__);
  }
};
instaparse.gll.Node.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4250__auto__, writer__4251__auto__, opts__4252__auto__) {
  var self__ = this;
  var this__4250__auto____$1 = this;
  var pr_pair__4253__auto__ = function(this__4250__auto____$1) {
    return function(keyval__4254__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4251__auto__, cljs.core.pr_writer, "", " ", "", opts__4252__auto__, keyval__4254__auto__);
    };
  }(this__4250__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4251__auto__, pr_pair__4253__auto__, "#instaparse.gll.Node{", ", ", "}", opts__4252__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "listeners", "listeners", 394544445), self__.listeners], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "full-listeners", "full-listeners", 50621827), self__.full_listeners], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "results", "results", -1134170113), self__.results], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "full-results", "full-results", -1500225407), self__.full_results], null)], null), self__.__extmap));
};
instaparse.gll.Node.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4234__auto__) {
  var self__ = this;
  var this__4234__auto____$1 = this;
  return self__.__meta;
};
instaparse.gll.Node.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4230__auto__) {
  var self__ = this;
  var this__4230__auto____$1 = this;
  return new instaparse.gll.Node(self__.listeners, self__.full_listeners, self__.results, self__.full_results, self__.__meta, self__.__extmap, self__.__hash);
};
instaparse.gll.Node.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4240__auto__) {
  var self__ = this;
  var this__4240__auto____$1 = this;
  return 4 + cljs.core.count.call(null, self__.__extmap);
};
instaparse.gll.Node.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4231__auto__) {
  var self__ = this;
  var this__4231__auto____$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_imap.call(null, this__4231__auto____$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
instaparse.gll.Node.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4232__auto__, other__4233__auto__) {
  var self__ = this;
  var this__4232__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = other__4233__auto__;
    if (cljs.core.truth_(and__3628__auto__)) {
      return this__4232__auto____$1.constructor === other__4233__auto__.constructor && cljs.core.equiv_map.call(null, this__4232__auto____$1, other__4233__auto__);
    } else {
      return and__3628__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
instaparse.gll.Node.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4245__auto__, k__4246__auto__) {
  var self__ = this;
  var this__4245__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "full-results", "full-results", -1500225407), null, new cljs.core.Keyword(null, "full-listeners", "full-listeners", 50621827), null, new cljs.core.Keyword(null, "listeners", "listeners", 394544445), null, new cljs.core.Keyword(null, "results", "results", -1134170113), null], null), null), k__4246__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4245__auto____$1), self__.__meta), k__4246__auto__);
  } else {
    return new instaparse.gll.Node(self__.listeners, self__.full_listeners, self__.results, self__.full_results, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4246__auto__)), null);
  }
};
instaparse.gll.Node.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4243__auto__, k__4244__auto__, G__14652) {
  var self__ = this;
  var this__4243__auto____$1 = this;
  var pred__14656 = cljs.core.keyword_identical_QMARK_;
  var expr__14657 = k__4244__auto__;
  if (cljs.core.truth_(pred__14656.call(null, new cljs.core.Keyword(null, "listeners", "listeners", 394544445), expr__14657))) {
    return new instaparse.gll.Node(G__14652, self__.full_listeners, self__.results, self__.full_results, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__14656.call(null, new cljs.core.Keyword(null, "full-listeners", "full-listeners", 50621827), expr__14657))) {
      return new instaparse.gll.Node(self__.listeners, G__14652, self__.results, self__.full_results, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__14656.call(null, new cljs.core.Keyword(null, "results", "results", -1134170113), expr__14657))) {
        return new instaparse.gll.Node(self__.listeners, self__.full_listeners, G__14652, self__.full_results, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__14656.call(null, new cljs.core.Keyword(null, "full-results", "full-results", -1500225407), expr__14657))) {
          return new instaparse.gll.Node(self__.listeners, self__.full_listeners, self__.results, G__14652, self__.__meta, self__.__extmap, null);
        } else {
          return new instaparse.gll.Node(self__.listeners, self__.full_listeners, self__.results, self__.full_results, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4244__auto__, G__14652), null);
        }
      }
    }
  }
};
instaparse.gll.Node.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4248__auto__) {
  var self__ = this;
  var this__4248__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "listeners", "listeners", 394544445), self__.listeners], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "full-listeners", "full-listeners", 50621827), self__.full_listeners], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "results", "results", -1134170113), self__.results], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "full-results", "full-results", -1500225407), self__.full_results], null)], null), self__.__extmap));
};
instaparse.gll.Node.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4235__auto__, G__14652) {
  var self__ = this;
  var this__4235__auto____$1 = this;
  return new instaparse.gll.Node(self__.listeners, self__.full_listeners, self__.results, self__.full_results, G__14652, self__.__extmap, self__.__hash);
};
instaparse.gll.Node.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4241__auto__, entry__4242__auto__) {
  var self__ = this;
  var this__4241__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4242__auto__)) {
    return cljs.core._assoc.call(null, this__4241__auto____$1, cljs.core._nth.call(null, entry__4242__auto__, 0), cljs.core._nth.call(null, entry__4242__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4241__auto____$1, entry__4242__auto__);
  }
};
instaparse.gll.Node.cljs$lang$type = true;
instaparse.gll.Node.cljs$lang$ctorPrSeq = function(this__4270__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "instaparse.gll/Node");
};
instaparse.gll.Node.cljs$lang$ctorPrWriter = function(this__4270__auto__, writer__4271__auto__) {
  return cljs.core._write.call(null, writer__4271__auto__, "instaparse.gll/Node");
};
instaparse.gll.__GT_Node = function __GT_Node(listeners, full_listeners, results, full_results) {
  return new instaparse.gll.Node(listeners, full_listeners, results, full_results);
};
instaparse.gll.map__GT_Node = function map__GT_Node(G__14654) {
  return new instaparse.gll.Node((new cljs.core.Keyword(null, "listeners", "listeners", 394544445)).cljs$core$IFn$_invoke$arity$1(G__14654), (new cljs.core.Keyword(null, "full-listeners", "full-listeners", 50621827)).cljs$core$IFn$_invoke$arity$1(G__14654), (new cljs.core.Keyword(null, "results", "results", -1134170113)).cljs$core$IFn$_invoke$arity$1(G__14654), (new cljs.core.Keyword(null, "full-results", "full-results", -1500225407)).cljs$core$IFn$_invoke$arity$1(G__14654), null, cljs.core.dissoc.call(null, 
  G__14654, new cljs.core.Keyword(null, "listeners", "listeners", 394544445), new cljs.core.Keyword(null, "full-listeners", "full-listeners", 50621827), new cljs.core.Keyword(null, "results", "results", -1134170113), new cljs.core.Keyword(null, "full-results", "full-results", -1500225407)));
};
instaparse.gll.make_node = function make_node() {
  return new instaparse.gll.Node(cljs.core.PersistentVector.EMPTY, cljs.core.PersistentVector.EMPTY, cljs.core.PersistentHashSet.EMPTY, cljs.core.PersistentHashSet.EMPTY);
};
instaparse.gll.push_stack = function push_stack(tramp, item) {
  return tramp.stack = cljs.core.conj.call(null, tramp.stack, item);
};
instaparse.gll.push_message = function push_message(tramp, listener, result) {
  var cache = tramp.msg_cache;
  var i = (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(result);
  var k = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [listener, i], null);
  var c = cljs.core.get.call(null, cache, k, 0);
  var f = function(cache, i, k, c) {
    return function() {
      return listener.call(null, result);
    };
  }(cache, i, k, c);
  if (c > tramp.generation) {
    tramp.next_stack = cljs.core.conj.call(null, tramp.next_stack, f);
  } else {
    tramp.stack = cljs.core.conj.call(null, tramp.stack, f);
  }
  return tramp.msg_cache = cljs.core.assoc.call(null, tramp.msg_cache, k, c + 1);
};
instaparse.gll.listener_exists_QMARK_ = function listener_exists_QMARK_(tramp, node_key) {
  var nodes = tramp.nodes;
  var temp__4126__auto__ = nodes.call(null, node_key);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var node = temp__4126__auto__;
    return cljs.core.count.call(null, node.listeners) > 0;
  } else {
    return null;
  }
};
instaparse.gll.full_listener_exists_QMARK_ = function full_listener_exists_QMARK_(tramp, node_key) {
  var nodes = tramp.nodes;
  var temp__4126__auto__ = nodes.call(null, node_key);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var node = temp__4126__auto__;
    return cljs.core.count.call(null, node.full_listeners) > 0 || cljs.core.count.call(null, node.listeners) > 0;
  } else {
    return null;
  }
};
instaparse.gll.result_exists_QMARK_ = function result_exists_QMARK_(tramp, node_key) {
  var nodes = tramp.nodes;
  var temp__4126__auto__ = nodes.call(null, node_key);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var node = temp__4126__auto__;
    return cljs.core.count.call(null, node.full_results) > 0 || cljs.core.count.call(null, node.results) > 0;
  } else {
    return null;
  }
};
instaparse.gll.full_result_exists_QMARK_ = function full_result_exists_QMARK_(tramp, node_key) {
  var nodes = tramp.nodes;
  var temp__4126__auto__ = nodes.call(null, node_key);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var node = temp__4126__auto__;
    return cljs.core.count.call(null, node.full_results) > 0;
  } else {
    return null;
  }
};
instaparse.gll.node_get = function node_get(tramp, node_key) {
  var nodes = tramp.nodes;
  var temp__4124__auto__ = nodes.call(null, node_key);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var node = temp__4124__auto__;
    return node;
  } else {
    var node = instaparse.gll.make_node.call(null);
    tramp.nodes = cljs.core.assoc.call(null, tramp.nodes, node_key, node);
    return node;
  }
};
instaparse.gll.safe_with_meta = function safe_with_meta(obj, metamap) {
  if (function() {
    var G__14661 = obj;
    if (G__14661) {
      var bit__4304__auto__ = G__14661.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4304__auto__ || G__14661.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__14661.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__14661);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__14661);
    }
  }()) {
    return cljs.core.with_meta.call(null, obj, metamap);
  } else {
    return obj;
  }
};
instaparse.gll.push_result = function push_result(tramp, node_key, result) {
  var node = instaparse.gll.node_get.call(null, tramp, node_key);
  var parser = node_key.call(null, 1);
  var result__$1 = cljs.core.truth_((new cljs.core.Keyword(null, "hide", "hide", -596913169)).cljs$core$IFn$_invoke$arity$1(parser)) ? cljs.core.assoc.call(null, result, new cljs.core.Keyword(null, "result", "result", 1415092211), null) : result;
  var result__$2 = function() {
    var temp__4124__auto__ = (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(parser);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var reduction_function = temp__4124__auto__;
      return instaparse.gll.make_success.call(null, instaparse.gll.safe_with_meta.call(null, instaparse.reduction.apply_reduction.call(null, reduction_function, (new cljs.core.Keyword(null, "result", "result", 1415092211)).cljs$core$IFn$_invoke$arity$1(result__$1)), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("instaparse.gll", "start-index", "instaparse.gll/start-index", 404653620), node_key.call(null, 0), new cljs.core.Keyword("instaparse.gll", "end-index", "instaparse.gll/end-index", 
      -1851404441), (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(result__$1)], null)), (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(result__$1));
    } else {
      return result__$1;
    }
  }();
  var total_QMARK_ = instaparse.gll.total_success_QMARK_.call(null, tramp, result__$2);
  var results = total_QMARK_ ? node.full_results : node.results;
  if (cljs.core.not.call(null, results.call(null, result__$2))) {
    if (total_QMARK_) {
      node.full_results = cljs.core.conj.call(null, node.full_results, result__$2);
    } else {
      node.results = cljs.core.conj.call(null, node.results, result__$2);
    }
    var seq__14670_14678 = cljs.core.seq.call(null, node.listeners);
    var chunk__14671_14679 = null;
    var count__14672_14680 = 0;
    var i__14673_14681 = 0;
    while (true) {
      if (i__14673_14681 < count__14672_14680) {
        var listener_14682 = cljs.core._nth.call(null, chunk__14671_14679, i__14673_14681);
        instaparse.gll.push_message.call(null, tramp, listener_14682, result__$2);
        var G__14683 = seq__14670_14678;
        var G__14684 = chunk__14671_14679;
        var G__14685 = count__14672_14680;
        var G__14686 = i__14673_14681 + 1;
        seq__14670_14678 = G__14683;
        chunk__14671_14679 = G__14684;
        count__14672_14680 = G__14685;
        i__14673_14681 = G__14686;
        continue;
      } else {
        var temp__4126__auto___14687 = cljs.core.seq.call(null, seq__14670_14678);
        if (temp__4126__auto___14687) {
          var seq__14670_14688__$1 = temp__4126__auto___14687;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14670_14688__$1)) {
            var c__4410__auto___14689 = cljs.core.chunk_first.call(null, seq__14670_14688__$1);
            var G__14690 = cljs.core.chunk_rest.call(null, seq__14670_14688__$1);
            var G__14691 = c__4410__auto___14689;
            var G__14692 = cljs.core.count.call(null, c__4410__auto___14689);
            var G__14693 = 0;
            seq__14670_14678 = G__14690;
            chunk__14671_14679 = G__14691;
            count__14672_14680 = G__14692;
            i__14673_14681 = G__14693;
            continue;
          } else {
            var listener_14694 = cljs.core.first.call(null, seq__14670_14688__$1);
            instaparse.gll.push_message.call(null, tramp, listener_14694, result__$2);
            var G__14695 = cljs.core.next.call(null, seq__14670_14688__$1);
            var G__14696 = null;
            var G__14697 = 0;
            var G__14698 = 0;
            seq__14670_14678 = G__14695;
            chunk__14671_14679 = G__14696;
            count__14672_14680 = G__14697;
            i__14673_14681 = G__14698;
            continue;
          }
        } else {
        }
      }
      break;
    }
    if (total_QMARK_) {
      var seq__14674 = cljs.core.seq.call(null, node.full_listeners);
      var chunk__14675 = null;
      var count__14676 = 0;
      var i__14677 = 0;
      while (true) {
        if (i__14677 < count__14676) {
          var listener = cljs.core._nth.call(null, chunk__14675, i__14677);
          instaparse.gll.push_message.call(null, tramp, listener, result__$2);
          var G__14699 = seq__14674;
          var G__14700 = chunk__14675;
          var G__14701 = count__14676;
          var G__14702 = i__14677 + 1;
          seq__14674 = G__14699;
          chunk__14675 = G__14700;
          count__14676 = G__14701;
          i__14677 = G__14702;
          continue;
        } else {
          var temp__4126__auto__ = cljs.core.seq.call(null, seq__14674);
          if (temp__4126__auto__) {
            var seq__14674__$1 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__14674__$1)) {
              var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__14674__$1);
              var G__14703 = cljs.core.chunk_rest.call(null, seq__14674__$1);
              var G__14704 = c__4410__auto__;
              var G__14705 = cljs.core.count.call(null, c__4410__auto__);
              var G__14706 = 0;
              seq__14674 = G__14703;
              chunk__14675 = G__14704;
              count__14676 = G__14705;
              i__14677 = G__14706;
              continue;
            } else {
              var listener = cljs.core.first.call(null, seq__14674__$1);
              instaparse.gll.push_message.call(null, tramp, listener, result__$2);
              var G__14707 = cljs.core.next.call(null, seq__14674__$1);
              var G__14708 = null;
              var G__14709 = 0;
              var G__14710 = 0;
              seq__14674 = G__14707;
              chunk__14675 = G__14708;
              count__14676 = G__14709;
              i__14677 = G__14710;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    } else {
      return null;
    }
  } else {
    return null;
  }
};
instaparse.gll.push_listener = function push_listener(tramp, node_key, listener) {
  var listener_already_exists_QMARK_ = instaparse.gll.listener_exists_QMARK_.call(null, tramp, node_key);
  var node = instaparse.gll.node_get.call(null, tramp, node_key);
  node.listeners = cljs.core.conj.call(null, node.listeners, listener);
  var seq__14719_14727 = cljs.core.seq.call(null, node.results);
  var chunk__14720_14728 = null;
  var count__14721_14729 = 0;
  var i__14722_14730 = 0;
  while (true) {
    if (i__14722_14730 < count__14721_14729) {
      var result_14731 = cljs.core._nth.call(null, chunk__14720_14728, i__14722_14730);
      instaparse.gll.push_message.call(null, tramp, listener, result_14731);
      var G__14732 = seq__14719_14727;
      var G__14733 = chunk__14720_14728;
      var G__14734 = count__14721_14729;
      var G__14735 = i__14722_14730 + 1;
      seq__14719_14727 = G__14732;
      chunk__14720_14728 = G__14733;
      count__14721_14729 = G__14734;
      i__14722_14730 = G__14735;
      continue;
    } else {
      var temp__4126__auto___14736 = cljs.core.seq.call(null, seq__14719_14727);
      if (temp__4126__auto___14736) {
        var seq__14719_14737__$1 = temp__4126__auto___14736;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14719_14737__$1)) {
          var c__4410__auto___14738 = cljs.core.chunk_first.call(null, seq__14719_14737__$1);
          var G__14739 = cljs.core.chunk_rest.call(null, seq__14719_14737__$1);
          var G__14740 = c__4410__auto___14738;
          var G__14741 = cljs.core.count.call(null, c__4410__auto___14738);
          var G__14742 = 0;
          seq__14719_14727 = G__14739;
          chunk__14720_14728 = G__14740;
          count__14721_14729 = G__14741;
          i__14722_14730 = G__14742;
          continue;
        } else {
          var result_14743 = cljs.core.first.call(null, seq__14719_14737__$1);
          instaparse.gll.push_message.call(null, tramp, listener, result_14743);
          var G__14744 = cljs.core.next.call(null, seq__14719_14737__$1);
          var G__14745 = null;
          var G__14746 = 0;
          var G__14747 = 0;
          seq__14719_14727 = G__14744;
          chunk__14720_14728 = G__14745;
          count__14721_14729 = G__14746;
          i__14722_14730 = G__14747;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var seq__14723_14748 = cljs.core.seq.call(null, node.full_results);
  var chunk__14724_14749 = null;
  var count__14725_14750 = 0;
  var i__14726_14751 = 0;
  while (true) {
    if (i__14726_14751 < count__14725_14750) {
      var result_14752 = cljs.core._nth.call(null, chunk__14724_14749, i__14726_14751);
      instaparse.gll.push_message.call(null, tramp, listener, result_14752);
      var G__14753 = seq__14723_14748;
      var G__14754 = chunk__14724_14749;
      var G__14755 = count__14725_14750;
      var G__14756 = i__14726_14751 + 1;
      seq__14723_14748 = G__14753;
      chunk__14724_14749 = G__14754;
      count__14725_14750 = G__14755;
      i__14726_14751 = G__14756;
      continue;
    } else {
      var temp__4126__auto___14757 = cljs.core.seq.call(null, seq__14723_14748);
      if (temp__4126__auto___14757) {
        var seq__14723_14758__$1 = temp__4126__auto___14757;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14723_14758__$1)) {
          var c__4410__auto___14759 = cljs.core.chunk_first.call(null, seq__14723_14758__$1);
          var G__14760 = cljs.core.chunk_rest.call(null, seq__14723_14758__$1);
          var G__14761 = c__4410__auto___14759;
          var G__14762 = cljs.core.count.call(null, c__4410__auto___14759);
          var G__14763 = 0;
          seq__14723_14748 = G__14760;
          chunk__14724_14749 = G__14761;
          count__14725_14750 = G__14762;
          i__14726_14751 = G__14763;
          continue;
        } else {
          var result_14764 = cljs.core.first.call(null, seq__14723_14758__$1);
          instaparse.gll.push_message.call(null, tramp, listener, result_14764);
          var G__14765 = cljs.core.next.call(null, seq__14723_14758__$1);
          var G__14766 = null;
          var G__14767 = 0;
          var G__14768 = 0;
          seq__14723_14748 = G__14765;
          chunk__14724_14749 = G__14766;
          count__14725_14750 = G__14767;
          i__14726_14751 = G__14768;
          continue;
        }
      } else {
      }
    }
    break;
  }
  if (cljs.core.not.call(null, listener_already_exists_QMARK_)) {
    return instaparse.gll.push_stack.call(null, tramp, function(listener_already_exists_QMARK_, node) {
      return function() {
        return instaparse.gll._parse.call(null, node_key.call(null, 1), node_key.call(null, 0), tramp);
      };
    }(listener_already_exists_QMARK_, node));
  } else {
    return null;
  }
};
instaparse.gll.push_full_listener = function push_full_listener(tramp, node_key, listener) {
  var full_listener_already_exists_QMARK_ = instaparse.gll.full_listener_exists_QMARK_.call(null, tramp, node_key);
  var node = instaparse.gll.node_get.call(null, tramp, node_key);
  node.full_listeners = cljs.core.conj.call(null, node.full_listeners, listener);
  var seq__14773_14777 = cljs.core.seq.call(null, node.full_results);
  var chunk__14774_14778 = null;
  var count__14775_14779 = 0;
  var i__14776_14780 = 0;
  while (true) {
    if (i__14776_14780 < count__14775_14779) {
      var result_14781 = cljs.core._nth.call(null, chunk__14774_14778, i__14776_14780);
      instaparse.gll.push_message.call(null, tramp, listener, result_14781);
      var G__14782 = seq__14773_14777;
      var G__14783 = chunk__14774_14778;
      var G__14784 = count__14775_14779;
      var G__14785 = i__14776_14780 + 1;
      seq__14773_14777 = G__14782;
      chunk__14774_14778 = G__14783;
      count__14775_14779 = G__14784;
      i__14776_14780 = G__14785;
      continue;
    } else {
      var temp__4126__auto___14786 = cljs.core.seq.call(null, seq__14773_14777);
      if (temp__4126__auto___14786) {
        var seq__14773_14787__$1 = temp__4126__auto___14786;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14773_14787__$1)) {
          var c__4410__auto___14788 = cljs.core.chunk_first.call(null, seq__14773_14787__$1);
          var G__14789 = cljs.core.chunk_rest.call(null, seq__14773_14787__$1);
          var G__14790 = c__4410__auto___14788;
          var G__14791 = cljs.core.count.call(null, c__4410__auto___14788);
          var G__14792 = 0;
          seq__14773_14777 = G__14789;
          chunk__14774_14778 = G__14790;
          count__14775_14779 = G__14791;
          i__14776_14780 = G__14792;
          continue;
        } else {
          var result_14793 = cljs.core.first.call(null, seq__14773_14787__$1);
          instaparse.gll.push_message.call(null, tramp, listener, result_14793);
          var G__14794 = cljs.core.next.call(null, seq__14773_14787__$1);
          var G__14795 = null;
          var G__14796 = 0;
          var G__14797 = 0;
          seq__14773_14777 = G__14794;
          chunk__14774_14778 = G__14795;
          count__14775_14779 = G__14796;
          i__14776_14780 = G__14797;
          continue;
        }
      } else {
      }
    }
    break;
  }
  if (cljs.core.not.call(null, full_listener_already_exists_QMARK_)) {
    return instaparse.gll.push_stack.call(null, tramp, function(full_listener_already_exists_QMARK_, node) {
      return function() {
        return instaparse.gll._full_parse.call(null, node_key.call(null, 1), node_key.call(null, 0), tramp);
      };
    }(full_listener_already_exists_QMARK_, node));
  } else {
    return null;
  }
};
instaparse.gll.push_negative_listener = function push_negative_listener(tramp, negative_listener) {
  return tramp.negative_listeners = cljs.core.conj.call(null, tramp.negative_listeners, negative_listener);
};
instaparse.gll.fail = function fail(tramp, node_key, index, reason) {
  tramp.failure = function(failure) {
    var current_index = (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(failure);
    var G__14799 = cljs.core.compare.call(null, index, current_index);
    switch(G__14799) {
      case 1:
        return new instaparse.gll.Failure(index, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [reason], null));
        break;
      case 0:
        return new instaparse.gll.Failure(index, cljs.core.conj.call(null, (new cljs.core.Keyword(null, "reason", "reason", -2070751759)).cljs$core$IFn$_invoke$arity$1(failure), reason));
        break;
      case -1:
        return failure;
        break;
      default:
        throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.compare.call(null, index, current_index)));;
    }
  }.call(null, tramp.failure);
  if (cljs.core._EQ_.call(null, index, tramp.fail_index)) {
    return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, instaparse.gll.build_node_with_meta.call(null, tramp.node_builder, new cljs.core.Keyword("instaparse", "failure", "instaparse/failure", 1422918607), cljs.core.subs.call(null, tramp.text, index), index, cljs.core.count.call(null, tramp.text)), cljs.core.count.call(null, tramp.text)));
  } else {
    return null;
  }
};
instaparse.gll.step = function step(tramp) {
  var top = cljs.core.peek.call(null, tramp.stack);
  tramp.stack = cljs.core.pop.call(null, tramp.stack);
  return top.call(null);
};
instaparse.gll.run = function() {
  var run = null;
  var run__1 = function(tramp) {
    return run.call(null, tramp, null);
  };
  var run__2 = function(tramp, found_result_QMARK_) {
    while (true) {
      var stack = tramp.stack;
      if (cljs.core.truth_(tramp.success)) {
        return new cljs.core.LazySeq(null, function(tramp, found_result_QMARK_, stack) {
          return function() {
            return cljs.core.cons.call(null, (new cljs.core.Keyword(null, "result", "result", 1415092211)).cljs$core$IFn$_invoke$arity$1(tramp.success), function() {
              tramp.success = null;
              return run.call(null, tramp, true);
            }());
          };
        }(tramp, found_result_QMARK_, stack), null, null);
      } else {
        if (cljs.core.count.call(null, stack) > 0) {
          instaparse.gll.step.call(null, tramp);
          var G__14801 = tramp;
          var G__14802 = found_result_QMARK_;
          tramp = G__14801;
          found_result_QMARK_ = G__14802;
          continue;
        } else {
          if (cljs.core.count.call(null, tramp.negative_listeners) > 0) {
            var listener = cljs.core.peek.call(null, tramp.negative_listeners);
            listener.call(null);
            tramp.negative_listeners = cljs.core.pop.call(null, tramp.negative_listeners);
            var G__14803 = tramp;
            var G__14804 = found_result_QMARK_;
            tramp = G__14803;
            found_result_QMARK_ = G__14804;
            continue;
          } else {
            if (cljs.core.truth_(found_result_QMARK_)) {
              var next_stack = tramp.next_stack;
              tramp.stack = next_stack;
              tramp.next_stack = cljs.core.PersistentVector.EMPTY;
              tramp.generation = tramp.generation + 1;
              var G__14805 = tramp;
              var G__14806 = null;
              tramp = G__14805;
              found_result_QMARK_ = G__14806;
              continue;
            } else {
              return null;
            }
          }
        }
      }
      break;
    }
  };
  run = function(tramp, found_result_QMARK_) {
    switch(arguments.length) {
      case 1:
        return run__1.call(this, tramp);
      case 2:
        return run__2.call(this, tramp, found_result_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  run.cljs$core$IFn$_invoke$arity$1 = run__1;
  run.cljs$core$IFn$_invoke$arity$2 = run__2;
  return run;
}();
instaparse.gll.NodeListener = function NodeListener(node_key, tramp) {
  return function(result) {
    return instaparse.gll.push_result.call(null, tramp, node_key, result);
  };
};
instaparse.gll.LookListener = function LookListener(node_key, tramp) {
  return function(result) {
    return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, null, node_key.call(null, 0)));
  };
};
instaparse.gll.CatListener = function CatListener(results_so_far, parser_sequence, node_key, tramp) {
  return function(result) {
    var map__14808 = result;
    var map__14808__$1 = cljs.core.seq_QMARK_.call(null, map__14808) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14808) : map__14808;
    var parsed_result = cljs.core.get.call(null, map__14808__$1, new cljs.core.Keyword(null, "result", "result", 1415092211));
    var continue_index = cljs.core.get.call(null, map__14808__$1, new cljs.core.Keyword(null, "index", "index", -1531685915));
    var new_results_so_far = instaparse.auto_flatten_seq.conj_flat.call(null, results_so_far, parsed_result);
    if (cljs.core.seq.call(null, parser_sequence)) {
      return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [continue_index, cljs.core.first.call(null, parser_sequence)], null), CatListener.call(null, new_results_so_far, cljs.core.next.call(null, parser_sequence), node_key, tramp));
    } else {
      return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, new_results_so_far, continue_index));
    }
  };
};
instaparse.gll.CatFullListener = function CatFullListener(results_so_far, parser_sequence, node_key, tramp) {
  return function(result) {
    var map__14810 = result;
    var map__14810__$1 = cljs.core.seq_QMARK_.call(null, map__14810) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14810) : map__14810;
    var parsed_result = cljs.core.get.call(null, map__14810__$1, new cljs.core.Keyword(null, "result", "result", 1415092211));
    var continue_index = cljs.core.get.call(null, map__14810__$1, new cljs.core.Keyword(null, "index", "index", -1531685915));
    var new_results_so_far = instaparse.auto_flatten_seq.conj_flat.call(null, results_so_far, parsed_result);
    if (instaparse.reduction.singleton_QMARK_.call(null, parser_sequence)) {
      return instaparse.gll.push_full_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [continue_index, cljs.core.first.call(null, parser_sequence)], null), CatFullListener.call(null, new_results_so_far, cljs.core.next.call(null, parser_sequence), node_key, tramp));
    } else {
      if (cljs.core.seq.call(null, parser_sequence)) {
        return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [continue_index, cljs.core.first.call(null, parser_sequence)], null), CatFullListener.call(null, new_results_so_far, cljs.core.next.call(null, parser_sequence), node_key, tramp));
      } else {
        return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, new_results_so_far, continue_index));
      }
    }
  };
};
instaparse.gll.PlusListener = function PlusListener(results_so_far, parser, prev_index, node_key, tramp) {
  return function(result) {
    var map__14812 = result;
    var map__14812__$1 = cljs.core.seq_QMARK_.call(null, map__14812) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14812) : map__14812;
    var parsed_result = cljs.core.get.call(null, map__14812__$1, new cljs.core.Keyword(null, "result", "result", 1415092211));
    var continue_index = cljs.core.get.call(null, map__14812__$1, new cljs.core.Keyword(null, "index", "index", -1531685915));
    if (cljs.core._EQ_.call(null, continue_index, prev_index)) {
      if (cljs.core.count.call(null, results_so_far) === 0) {
        return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, null, continue_index));
      } else {
        return null;
      }
    } else {
      var new_results_so_far = instaparse.auto_flatten_seq.conj_flat.call(null, results_so_far, parsed_result);
      instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [continue_index, parser], null), PlusListener.call(null, new_results_so_far, parser, continue_index, node_key, tramp));
      return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, new_results_so_far, continue_index));
    }
  };
};
instaparse.gll.PlusFullListener = function PlusFullListener(results_so_far, parser, prev_index, node_key, tramp) {
  return function(result) {
    var map__14814 = result;
    var map__14814__$1 = cljs.core.seq_QMARK_.call(null, map__14814) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14814) : map__14814;
    var parsed_result = cljs.core.get.call(null, map__14814__$1, new cljs.core.Keyword(null, "result", "result", 1415092211));
    var continue_index = cljs.core.get.call(null, map__14814__$1, new cljs.core.Keyword(null, "index", "index", -1531685915));
    if (cljs.core._EQ_.call(null, continue_index, prev_index)) {
      if (cljs.core.count.call(null, results_so_far) === 0) {
        return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, null, continue_index));
      } else {
        return null;
      }
    } else {
      var new_results_so_far = instaparse.auto_flatten_seq.conj_flat.call(null, results_so_far, parsed_result);
      if (cljs.core._EQ_.call(null, continue_index, cljs.core.count.call(null, (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(tramp)))) {
        return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, new_results_so_far, continue_index));
      } else {
        return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [continue_index, parser], null), PlusFullListener.call(null, new_results_so_far, parser, continue_index, node_key, tramp));
      }
    }
  };
};
instaparse.gll.RepListener = function RepListener(results_so_far, parser, m, n, prev_index, node_key, tramp) {
  return function(result) {
    var map__14816 = result;
    var map__14816__$1 = cljs.core.seq_QMARK_.call(null, map__14816) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14816) : map__14816;
    var parsed_result = cljs.core.get.call(null, map__14816__$1, new cljs.core.Keyword(null, "result", "result", 1415092211));
    var continue_index = cljs.core.get.call(null, map__14816__$1, new cljs.core.Keyword(null, "index", "index", -1531685915));
    var new_results_so_far = instaparse.auto_flatten_seq.conj_flat.call(null, results_so_far, parsed_result);
    if (m <= cljs.core.count.call(null, new_results_so_far) && cljs.core.count.call(null, new_results_so_far) <= n) {
      instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, new_results_so_far, continue_index));
    } else {
    }
    if (cljs.core.count.call(null, new_results_so_far) < n) {
      return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [continue_index, parser], null), RepListener.call(null, new_results_so_far, parser, m, n, continue_index, node_key, tramp));
    } else {
      return null;
    }
  };
};
instaparse.gll.RepFullListener = function RepFullListener(results_so_far, parser, m, n, prev_index, node_key, tramp) {
  return function(result) {
    var map__14818 = result;
    var map__14818__$1 = cljs.core.seq_QMARK_.call(null, map__14818) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14818) : map__14818;
    var parsed_result = cljs.core.get.call(null, map__14818__$1, new cljs.core.Keyword(null, "result", "result", 1415092211));
    var continue_index = cljs.core.get.call(null, map__14818__$1, new cljs.core.Keyword(null, "index", "index", -1531685915));
    var new_results_so_far = instaparse.auto_flatten_seq.conj_flat.call(null, results_so_far, parsed_result);
    if (cljs.core._EQ_.call(null, continue_index, cljs.core.count.call(null, (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(tramp)))) {
      if (m <= cljs.core.count.call(null, new_results_so_far) && cljs.core.count.call(null, new_results_so_far) <= n) {
        return instaparse.gll.push_result.call(null, tramp, node_key, instaparse.gll.make_success.call(null, new_results_so_far, continue_index));
      } else {
        return null;
      }
    } else {
      if (cljs.core.count.call(null, new_results_so_far) < n) {
        return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [continue_index, parser], null), RepFullListener.call(null, new_results_so_far, parser, m, n, continue_index, node_key, tramp));
      } else {
        return null;
      }
    }
  };
};
instaparse.gll.TopListener = function TopListener(tramp) {
  return function(result) {
    return tramp.success = result;
  };
};
instaparse.gll.string_parse = function string_parse(this$, index, tramp) {
  var string = (new cljs.core.Keyword(null, "string", "string", -1989541586)).cljs$core$IFn$_invoke$arity$1(this$);
  var text = tramp.text;
  var end = function() {
    var x__3954__auto__ = cljs.core.count.call(null, text);
    var y__3955__auto__ = index + cljs.core.count.call(null, string);
    return x__3954__auto__ < y__3955__auto__ ? x__3954__auto__ : y__3955__auto__;
  }();
  var head = cljs.core.subs.call(null, text, index, end);
  if (cljs.core._EQ_.call(null, string, head)) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, string, end));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "string", "string", -1989541586), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), string], null));
  }
};
instaparse.gll.string_full_parse = function string_full_parse(this$, index, tramp) {
  var string = (new cljs.core.Keyword(null, "string", "string", -1989541586)).cljs$core$IFn$_invoke$arity$1(this$);
  var text = tramp.text;
  var end = function() {
    var x__3954__auto__ = cljs.core.count.call(null, text);
    var y__3955__auto__ = index + cljs.core.count.call(null, string);
    return x__3954__auto__ < y__3955__auto__ ? x__3954__auto__ : y__3955__auto__;
  }();
  var head = cljs.core.subs.call(null, text, index, end);
  if (cljs.core._EQ_.call(null, end, cljs.core.count.call(null, text)) && cljs.core._EQ_.call(null, string, head)) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, string, end));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "string", "string", -1989541586), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), string, new cljs.core.Keyword(null, "full", "full", 436801220), true], null));
  }
};
instaparse.gll.equals_ignore_case = function equals_ignore_case(s1, s2) {
  return cljs.core._EQ_.call(null, s1.toUpperCase(), s2.toUpperCase());
};
instaparse.gll.string_case_insensitive_parse = function string_case_insensitive_parse(this$, index, tramp) {
  var string = (new cljs.core.Keyword(null, "string", "string", -1989541586)).cljs$core$IFn$_invoke$arity$1(this$);
  var text = tramp.text;
  var end = function() {
    var x__3954__auto__ = cljs.core.count.call(null, text);
    var y__3955__auto__ = index + cljs.core.count.call(null, string);
    return x__3954__auto__ < y__3955__auto__ ? x__3954__auto__ : y__3955__auto__;
  }();
  var head = cljs.core.subs.call(null, text, index, end);
  if (instaparse.gll.equals_ignore_case.call(null, string, head)) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, string, end));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "string", "string", -1989541586), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), string], null));
  }
};
instaparse.gll.string_case_insensitive_full_parse = function string_case_insensitive_full_parse(this$, index, tramp) {
  var string = (new cljs.core.Keyword(null, "string", "string", -1989541586)).cljs$core$IFn$_invoke$arity$1(this$);
  var text = tramp.text;
  var end = function() {
    var x__3954__auto__ = cljs.core.count.call(null, text);
    var y__3955__auto__ = index + cljs.core.count.call(null, string);
    return x__3954__auto__ < y__3955__auto__ ? x__3954__auto__ : y__3955__auto__;
  }();
  var head = cljs.core.subs.call(null, text, index, end);
  if (cljs.core._EQ_.call(null, end, cljs.core.count.call(null, text)) && instaparse.gll.equals_ignore_case.call(null, string, head)) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, string, end));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "string", "string", -1989541586), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), string, new cljs.core.Keyword(null, "full", "full", 436801220), true], null));
  }
};
instaparse.gll.re_match_at_front = function re_match_at_front(regexp, text) {
  var re = new RegExp(regexp.source, "g");
  var m = re.exec(text);
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = m;
    if (cljs.core.truth_(and__3628__auto__)) {
      return m.index === 0;
    } else {
      return and__3628__auto__;
    }
  }())) {
    return cljs.core.first.call(null, m);
  } else {
    return null;
  }
};
instaparse.gll.regexp_parse = function regexp_parse(this$, index, tramp) {
  var regexp = (new cljs.core.Keyword(null, "regexp", "regexp", -541372782)).cljs$core$IFn$_invoke$arity$1(this$);
  var text = tramp.segment;
  var substring = instaparse.gll.toString.call(null, instaparse.gll.subsegment.call(null, text, index, cljs.core.count.call(null, text)));
  var match = instaparse.gll.re_match_at_front.call(null, regexp, substring);
  if (cljs.core.truth_(match)) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, match, index + cljs.core.count.call(null, match)));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "regexp", "regexp", -541372782), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), regexp], null));
  }
};
instaparse.gll.regexp_full_parse = function regexp_full_parse(this$, index, tramp) {
  var regexp = (new cljs.core.Keyword(null, "regexp", "regexp", -541372782)).cljs$core$IFn$_invoke$arity$1(this$);
  var text = (new cljs.core.Keyword(null, "segment", "segment", -964921196)).cljs$core$IFn$_invoke$arity$1(tramp);
  var substring = instaparse.gll.toString.call(null, instaparse.gll.subsegment.call(null, text, index, cljs.core.count.call(null, text)));
  var match = instaparse.gll.re_match_at_front.call(null, regexp, substring);
  var desired_length = cljs.core.count.call(null, text) - index;
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = match;
    if (cljs.core.truth_(and__3628__auto__)) {
      return cljs.core._EQ_.call(null, cljs.core.count.call(null, match), desired_length);
    } else {
      return and__3628__auto__;
    }
  }())) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, match, cljs.core.count.call(null, text)));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "regexp", "regexp", -541372782), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), regexp, new cljs.core.Keyword(null, "full", "full", 436801220), true], null));
  }
};
var empty_cat_result_14819 = instaparse.auto_flatten_seq.EMPTY;
instaparse.gll.cat_parse = function(empty_cat_result_14819) {
  return function cat_parse(this$, index, tramp) {
    var parsers = (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(this$);
    return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, cljs.core.first.call(null, parsers)], null), instaparse.gll.CatListener.call(null, empty_cat_result_14819, cljs.core.next.call(null, parsers), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
  };
}(empty_cat_result_14819);
instaparse.gll.cat_full_parse = function(empty_cat_result_14819) {
  return function cat_full_parse(this$, index, tramp) {
    var parsers = (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(this$);
    return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, cljs.core.first.call(null, parsers)], null), instaparse.gll.CatFullListener.call(null, empty_cat_result_14819, cljs.core.next.call(null, parsers), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
  };
}(empty_cat_result_14819);
instaparse.gll.plus_parse = function(empty_cat_result_14819) {
  return function plus_parse(this$, index, tramp) {
    var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
    return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.PlusListener.call(null, empty_cat_result_14819, parser, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
  };
}(empty_cat_result_14819);
instaparse.gll.plus_full_parse = function(empty_cat_result_14819) {
  return function plus_full_parse(this$, index, tramp) {
    var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
    return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.PlusFullListener.call(null, empty_cat_result_14819, parser, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
  };
}(empty_cat_result_14819);
instaparse.gll.rep_parse = function(empty_cat_result_14819) {
  return function rep_parse(this$, index, tramp) {
    var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
    var m = (new cljs.core.Keyword(null, "min", "min", 444991522)).cljs$core$IFn$_invoke$arity$1(this$);
    var n = (new cljs.core.Keyword(null, "max", "max", 61366548)).cljs$core$IFn$_invoke$arity$1(this$);
    if (m === 0) {
      instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
      if (n >= 1) {
        return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.RepListener.call(null, empty_cat_result_14819, parser, 1, n, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
      } else {
        return null;
      }
    } else {
      return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.RepListener.call(null, empty_cat_result_14819, parser, m, n, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
    }
  };
}(empty_cat_result_14819);
instaparse.gll.rep_full_parse = function(empty_cat_result_14819) {
  return function rep_full_parse(this$, index, tramp) {
    var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
    var m = (new cljs.core.Keyword(null, "min", "min", 444991522)).cljs$core$IFn$_invoke$arity$1(this$);
    var n = (new cljs.core.Keyword(null, "max", "max", 61366548)).cljs$core$IFn$_invoke$arity$1(this$);
    if (m === 0) {
      instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
      if (n >= 1) {
        return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.RepFullListener.call(null, empty_cat_result_14819, parser, 1, n, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
      } else {
        return null;
      }
    } else {
      return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.RepFullListener.call(null, empty_cat_result_14819, parser, m, n, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
    }
  };
}(empty_cat_result_14819);
instaparse.gll.star_parse = function(empty_cat_result_14819) {
  return function star_parse(this$, index, tramp) {
    var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
    instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.PlusListener.call(null, empty_cat_result_14819, parser, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
  };
}(empty_cat_result_14819);
instaparse.gll.star_full_parse = function(empty_cat_result_14819) {
  return function star_full_parse(this$, index, tramp) {
    var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
    if (cljs.core._EQ_.call(null, index, cljs.core.count.call(null, (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(tramp)))) {
      return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
    } else {
      return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.PlusFullListener.call(null, empty_cat_result_14819, parser, index, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
    }
  };
}(empty_cat_result_14819);
instaparse.gll.alt_parse = function alt_parse(this$, index, tramp) {
  var parsers = (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(this$);
  var seq__14824 = cljs.core.seq.call(null, parsers);
  var chunk__14825 = null;
  var count__14826 = 0;
  var i__14827 = 0;
  while (true) {
    if (i__14827 < count__14826) {
      var parser = cljs.core._nth.call(null, chunk__14825, i__14827);
      instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
      var G__14828 = seq__14824;
      var G__14829 = chunk__14825;
      var G__14830 = count__14826;
      var G__14831 = i__14827 + 1;
      seq__14824 = G__14828;
      chunk__14825 = G__14829;
      count__14826 = G__14830;
      i__14827 = G__14831;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__14824);
      if (temp__4126__auto__) {
        var seq__14824__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14824__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__14824__$1);
          var G__14832 = cljs.core.chunk_rest.call(null, seq__14824__$1);
          var G__14833 = c__4410__auto__;
          var G__14834 = cljs.core.count.call(null, c__4410__auto__);
          var G__14835 = 0;
          seq__14824 = G__14832;
          chunk__14825 = G__14833;
          count__14826 = G__14834;
          i__14827 = G__14835;
          continue;
        } else {
          var parser = cljs.core.first.call(null, seq__14824__$1);
          instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
          var G__14836 = cljs.core.next.call(null, seq__14824__$1);
          var G__14837 = null;
          var G__14838 = 0;
          var G__14839 = 0;
          seq__14824 = G__14836;
          chunk__14825 = G__14837;
          count__14826 = G__14838;
          i__14827 = G__14839;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
instaparse.gll.alt_full_parse = function alt_full_parse(this$, index, tramp) {
  var parsers = (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(this$);
  var seq__14844 = cljs.core.seq.call(null, parsers);
  var chunk__14845 = null;
  var count__14846 = 0;
  var i__14847 = 0;
  while (true) {
    if (i__14847 < count__14846) {
      var parser = cljs.core._nth.call(null, chunk__14845, i__14847);
      instaparse.gll.push_full_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
      var G__14848 = seq__14844;
      var G__14849 = chunk__14845;
      var G__14850 = count__14846;
      var G__14851 = i__14847 + 1;
      seq__14844 = G__14848;
      chunk__14845 = G__14849;
      count__14846 = G__14850;
      i__14847 = G__14851;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__14844);
      if (temp__4126__auto__) {
        var seq__14844__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14844__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__14844__$1);
          var G__14852 = cljs.core.chunk_rest.call(null, seq__14844__$1);
          var G__14853 = c__4410__auto__;
          var G__14854 = cljs.core.count.call(null, c__4410__auto__);
          var G__14855 = 0;
          seq__14844 = G__14852;
          chunk__14845 = G__14853;
          count__14846 = G__14854;
          i__14847 = G__14855;
          continue;
        } else {
          var parser = cljs.core.first.call(null, seq__14844__$1);
          instaparse.gll.push_full_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
          var G__14856 = cljs.core.next.call(null, seq__14844__$1);
          var G__14857 = null;
          var G__14858 = 0;
          var G__14859 = 0;
          seq__14844 = G__14856;
          chunk__14845 = G__14857;
          count__14846 = G__14858;
          i__14847 = G__14859;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
instaparse.gll.ordered_alt_parse = function ordered_alt_parse(this$, index, tramp) {
  var parser1 = (new cljs.core.Keyword(null, "parser1", "parser1", -439601422)).cljs$core$IFn$_invoke$arity$1(this$);
  var parser2 = (new cljs.core.Keyword(null, "parser2", "parser2", 1013754688)).cljs$core$IFn$_invoke$arity$1(this$);
  var node_key_parser1 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser1], null);
  var node_key_parser2 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser2], null);
  var listener = instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp);
  instaparse.gll.push_listener.call(null, tramp, node_key_parser1, listener);
  return instaparse.gll.push_negative_listener.call(null, tramp, function(parser1, parser2, node_key_parser1, node_key_parser2, listener) {
    return function() {
      return instaparse.gll.push_listener.call(null, tramp, node_key_parser2, listener);
    };
  }(parser1, parser2, node_key_parser1, node_key_parser2, listener));
};
instaparse.gll.ordered_alt_full_parse = function ordered_alt_full_parse(this$, index, tramp) {
  var parser1 = (new cljs.core.Keyword(null, "parser1", "parser1", -439601422)).cljs$core$IFn$_invoke$arity$1(this$);
  var parser2 = (new cljs.core.Keyword(null, "parser2", "parser2", 1013754688)).cljs$core$IFn$_invoke$arity$1(this$);
  var node_key_parser1 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser1], null);
  var node_key_parser2 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser2], null);
  var listener = instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp);
  instaparse.gll.push_full_listener.call(null, tramp, node_key_parser1, listener);
  return instaparse.gll.push_negative_listener.call(null, tramp, function(parser1, parser2, node_key_parser1, node_key_parser2, listener) {
    return function() {
      return instaparse.gll.push_full_listener.call(null, tramp, node_key_parser2, listener);
    };
  }(parser1, parser2, node_key_parser1, node_key_parser2, listener));
};
instaparse.gll.opt_parse = function opt_parse(this$, index, tramp) {
  var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
  instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
  return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
};
instaparse.gll.opt_full_parse = function opt_full_parse(this$, index, tramp) {
  var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
  instaparse.gll.push_full_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
  if (cljs.core._EQ_.call(null, index, cljs.core.count.call(null, (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(tramp)))) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "optional", "optional", 2053951509), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), new cljs.core.Keyword(null, "end-of-string", "end-of-string", 1567354241)], null));
  }
};
instaparse.gll.non_terminal_parse = function non_terminal_parse(this$, index, tramp) {
  var parser = instaparse.gll.get_parser.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(tramp), (new cljs.core.Keyword(null, "keyword", "keyword", 811389747)).cljs$core$IFn$_invoke$arity$1(this$));
  return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
};
instaparse.gll.non_terminal_full_parse = function non_terminal_full_parse(this$, index, tramp) {
  var parser = instaparse.gll.get_parser.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(tramp), (new cljs.core.Keyword(null, "keyword", "keyword", 811389747)).cljs$core$IFn$_invoke$arity$1(this$));
  return instaparse.gll.push_full_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.NodeListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
};
instaparse.gll.lookahead_parse = function lookahead_parse(this$, index, tramp) {
  var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
  return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null), instaparse.gll.LookListener.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), tramp));
};
instaparse.gll.lookahead_full_parse = function lookahead_full_parse(this$, index, tramp) {
  if (cljs.core._EQ_.call(null, index, cljs.core.count.call(null, (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(tramp)))) {
    return instaparse.gll.lookahead_parse.call(null, this$, index, tramp);
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "lookahead", "lookahead", -400102393), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), new cljs.core.Keyword(null, "end-of-string", "end-of-string", 1567354241)], null));
  }
};
instaparse.gll.negative_lookahead_parse = function negative_lookahead_parse(this$, index, tramp) {
  var parser = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(this$);
  var node_key = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, parser], null);
  if (cljs.core.truth_(instaparse.gll.result_exists_QMARK_.call(null, tramp, node_key))) {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "negative-lookahead", "negative-lookahead", 874382387)], null));
  } else {
    instaparse.gll.push_listener.call(null, tramp, node_key, function() {
      var fail_send = new cljs.core.Delay(function(parser, node_key) {
        return function() {
          return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "negative-lookahead", "negative-lookahead", 874382387), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "NOT", "NOT", 
          -1689245341), instaparse.print.combinators__GT_str.call(null, parser)], null)], null));
        };
      }(parser, node_key), null);
      return function(fail_send, parser, node_key) {
        return function(result) {
          return cljs.core.force.call(null, fail_send);
        };
      }(fail_send, parser, node_key);
    }());
    return instaparse.gll.push_negative_listener.call(null, tramp, function(parser, node_key) {
      return function() {
        if (cljs.core.not.call(null, instaparse.gll.result_exists_QMARK_.call(null, tramp, node_key))) {
          return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
        } else {
          return null;
        }
      };
    }(parser, node_key));
  }
};
instaparse.gll.epsilon_parse = function epsilon_parse(this$, index, tramp) {
  return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
};
instaparse.gll.epsilon_full_parse = function epsilon_full_parse(this$, index, tramp) {
  if (cljs.core._EQ_.call(null, index, cljs.core.count.call(null, (new cljs.core.Keyword(null, "text", "text", -1790561697)).cljs$core$IFn$_invoke$arity$1(tramp)))) {
    return instaparse.gll.push_result.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), instaparse.gll.make_success.call(null, null, index));
  } else {
    return instaparse.gll.fail.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, this$], null), index, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "Epsilon", "Epsilon", 133418452), new cljs.core.Keyword(null, "expecting", "expecting", -57706705), new cljs.core.Keyword(null, "end-of-string", "end-of-string", 1567354241)], null));
  }
};
instaparse.gll.start_parser = function start_parser(tramp, parser, partial_QMARK_) {
  if (cljs.core.truth_(partial_QMARK_)) {
    return instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, parser], null), instaparse.gll.TopListener.call(null, tramp));
  } else {
    return instaparse.gll.push_full_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, parser], null), instaparse.gll.TopListener.call(null, tramp));
  }
};
instaparse.gll.parses = function parses(grammar, start, text, partial_QMARK_) {
  var tramp = instaparse.gll.make_tramp.call(null, grammar, text);
  var parser = instaparse.combinators_source.nt.call(null, start);
  instaparse.gll.start_parser.call(null, tramp, parser, partial_QMARK_);
  var temp__4124__auto__ = instaparse.gll.run.call(null, tramp);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var all_parses = temp__4124__auto__;
    return all_parses;
  } else {
    return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, instaparse.failure.augment_failure.call(null, tramp.failure, text));
  }
};
instaparse.gll.parse = function parse(grammar, start, text, partial_QMARK_) {
  var tramp = instaparse.gll.make_tramp.call(null, grammar, text);
  var parser = instaparse.combinators_source.nt.call(null, start);
  instaparse.gll.start_parser.call(null, tramp, parser, partial_QMARK_);
  var temp__4124__auto__ = instaparse.gll.run.call(null, tramp);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var all_parses = temp__4124__auto__;
    return cljs.core.first.call(null, all_parses);
  } else {
    return instaparse.failure.augment_failure.call(null, tramp.failure, text);
  }
};
instaparse.gll.build_node_with_meta = function build_node_with_meta(node_builder, tag, content, start, end) {
  return cljs.core.with_meta.call(null, node_builder.call(null, tag, content), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("instaparse.gll", "start-index", "instaparse.gll/start-index", 404653620), start, new cljs.core.Keyword("instaparse.gll", "end-index", "instaparse.gll/end-index", -1851404441), end], null));
};
instaparse.gll.build_total_failure_node = function build_total_failure_node(node_builder, start, text) {
  var build_failure_node = instaparse.gll.build_node_with_meta.call(null, node_builder, new cljs.core.Keyword("instaparse", "failure", "instaparse/failure", 1422918607), text, 0, cljs.core.count.call(null, text));
  var build_start_node = instaparse.gll.build_node_with_meta.call(null, node_builder, start, build_failure_node, 0, cljs.core.count.call(null, text));
  return build_start_node;
};
instaparse.gll.parses_total_after_fail = function parses_total_after_fail(grammar, start, text, fail_index, partial_QMARK_, node_builder) {
  var tramp = instaparse.gll.make_tramp.call(null, grammar, text, fail_index, node_builder);
  var parser = instaparse.combinators_source.nt.call(null, start);
  instaparse.gll.start_parser.call(null, tramp, parser, partial_QMARK_);
  var temp__4124__auto__ = instaparse.gll.run.call(null, tramp);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var all_parses = temp__4124__auto__;
    return all_parses;
  } else {
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, instaparse.gll.build_total_failure_node.call(null, node_builder, start, text));
  }
};
instaparse.gll.merge_meta = function merge_meta(obj, metamap) {
  return cljs.core.with_meta.call(null, obj, cljs.core.merge.call(null, metamap, cljs.core.meta.call(null, obj)));
};
instaparse.gll.parses_total = function parses_total(grammar, start, text, partial_QMARK_, node_builder) {
  var all_parses = instaparse.gll.parses.call(null, grammar, start, text, partial_QMARK_);
  if (cljs.core.seq.call(null, all_parses)) {
    return all_parses;
  } else {
    return instaparse.gll.merge_meta.call(null, instaparse.gll.parses_total_after_fail.call(null, grammar, start, text, (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, all_parses)), partial_QMARK_, node_builder), cljs.core.meta.call(null, all_parses));
  }
};
instaparse.gll.parse_total_after_fail = function parse_total_after_fail(grammar, start, text, fail_index, partial_QMARK_, node_builder) {
  var tramp = instaparse.gll.make_tramp.call(null, grammar, text, fail_index, node_builder);
  var parser = instaparse.combinators_source.nt.call(null, start);
  instaparse.gll.start_parser.call(null, tramp, parser, partial_QMARK_);
  var temp__4124__auto__ = instaparse.gll.run.call(null, tramp);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var all_parses = temp__4124__auto__;
    return cljs.core.first.call(null, all_parses);
  } else {
    return instaparse.gll.build_total_failure_node.call(null, node_builder, start, text);
  }
};
instaparse.gll.parse_total = function parse_total(grammar, start, text, partial_QMARK_, node_builder) {
  var result = instaparse.gll.parse.call(null, grammar, start, text, partial_QMARK_);
  if (!(result instanceof instaparse.gll.Failure)) {
    return result;
  } else {
    return instaparse.gll.merge_meta.call(null, instaparse.gll.parse_total_after_fail.call(null, grammar, start, text, (new cljs.core.Keyword(null, "index", "index", -1531685915)).cljs$core$IFn$_invoke$arity$1(result), partial_QMARK_, node_builder), result);
  }
};
goog.provide("instaparse.transform");
goog.require("cljs.core");
goog.require("instaparse.gll");
instaparse.transform.map_preserving_meta = function map_preserving_meta(f, l) {
  return cljs.core.with_meta.call(null, cljs.core.map.call(null, f, l), cljs.core.meta.call(null, l));
};
instaparse.transform.merge_meta = function merge_meta(obj, metamap) {
  if (function() {
    var G__15052 = obj;
    if (G__15052) {
      var bit__4304__auto__ = G__15052.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4304__auto__ || G__15052.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__15052.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__15052);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__15052);
    }
  }()) {
    return instaparse.gll.merge_meta.call(null, obj, metamap);
  } else {
    return obj;
  }
};
instaparse.transform.enlive_transform = function enlive_transform(transform_map, parse_tree) {
  var transform = transform_map.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parse_tree));
  if (cljs.core.truth_(transform)) {
    return instaparse.transform.merge_meta.call(null, cljs.core.apply.call(null, transform, cljs.core.map.call(null, cljs.core.partial.call(null, enlive_transform, transform_map), (new cljs.core.Keyword(null, "content", "content", 15833224)).cljs$core$IFn$_invoke$arity$1(parse_tree))), cljs.core.meta.call(null, parse_tree));
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parse_tree))) {
      return cljs.core.assoc.call(null, parse_tree, new cljs.core.Keyword(null, "content", "content", 15833224), cljs.core.map.call(null, cljs.core.partial.call(null, enlive_transform, transform_map), (new cljs.core.Keyword(null, "content", "content", 15833224)).cljs$core$IFn$_invoke$arity$1(parse_tree)));
    } else {
      return parse_tree;
    }
  }
};
instaparse.transform.hiccup_transform = function hiccup_transform(transform_map, parse_tree) {
  var transform = transform_map.call(null, cljs.core.first.call(null, parse_tree));
  if (cljs.core.truth_(transform)) {
    return instaparse.transform.merge_meta.call(null, cljs.core.apply.call(null, transform, cljs.core.map.call(null, cljs.core.partial.call(null, hiccup_transform, transform_map), cljs.core.next.call(null, parse_tree))), cljs.core.meta.call(null, parse_tree));
  } else {
    if (cljs.core.sequential_QMARK_.call(null, parse_tree) && cljs.core.seq.call(null, parse_tree)) {
      return cljs.core.with_meta.call(null, cljs.core.into.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, parse_tree)], null), cljs.core.map.call(null, cljs.core.partial.call(null, hiccup_transform, transform_map), cljs.core.next.call(null, parse_tree))), cljs.core.meta.call(null, parse_tree));
    } else {
      return parse_tree;
    }
  }
};
instaparse.transform.transform = function transform(transform_map, parse_tree) {
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = cljs.core.map_QMARK_.call(null, parse_tree);
    if (and__3628__auto__) {
      return(new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parse_tree);
    } else {
      return and__3628__auto__;
    }
  }())) {
    return instaparse.transform.enlive_transform.call(null, transform_map, parse_tree);
  } else {
    if (cljs.core.vector_QMARK_.call(null, parse_tree) && cljs.core.first.call(null, parse_tree) instanceof cljs.core.Keyword) {
      return instaparse.transform.hiccup_transform.call(null, transform_map, parse_tree);
    } else {
      if (cljs.core.sequential_QMARK_.call(null, parse_tree)) {
        return instaparse.transform.map_preserving_meta.call(null, cljs.core.partial.call(null, transform, transform_map), parse_tree);
      } else {
        if (parse_tree instanceof instaparse.gll.Failure) {
          return parse_tree;
        } else {
          throw "Invalid parse-tree, not recognized as either enlive or hiccup format.";
        }
      }
    }
  }
};
goog.provide("instaparse.cfg");
goog.require("cljs.core");
goog.require("instaparse.gll");
goog.require("instaparse.reduction");
goog.require("instaparse.combinators_source");
goog.require("cljs.reader");
goog.require("cljs.reader");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("instaparse.gll");
goog.require("instaparse.reduction");
goog.require("instaparse.combinators_source");
instaparse.cfg._STAR_case_insensitive_literals_STAR_ = false;
instaparse.cfg.single_quoted_string = /'[^'\\]*(?:\\.[^'\\]*)*'/;
instaparse.cfg.single_quoted_regexp = /#'[^'\\]*(?:\\.[^'\\]*)*'/;
instaparse.cfg.double_quoted_string = /\"[^\"\\]*(?:\\.[^\"\\]*)*\"/;
instaparse.cfg.double_quoted_regexp = /#\"[^\"\\]*(?:\\.[^\"\\]*)*\"/;
instaparse.cfg.inside_comment = /(?:(?!(?:\(\*|\*\)))[\s\S])*/;
instaparse.cfg.ws = "[,\\s]*";
instaparse.cfg.opt_whitespace = instaparse.combinators_source.hide.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "opt-whitespace", "opt-whitespace", 1115207927)));
instaparse.cfg.cfg = instaparse.reduction.apply_standard_reductions.call(null, new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "neg", "neg", 1800032960), new cljs.core.Keyword(null, "cat", "cat", -1457810207), new cljs.core.Keyword(null, "ord", "ord", 1142548323), new cljs.core.Keyword(null, "rule-separator", "rule-separator", 1539322213), new cljs.core.Keyword(null, "alt", "alt", -3214426), new cljs.core.Keyword(null, 
"look", "look", -539441433), new cljs.core.Keyword(null, "rule", "rule", 729973257), new cljs.core.Keyword(null, "nt", "nt", -835425781), new cljs.core.Keyword(null, "hide-nt", "hide-nt", -228813845), new cljs.core.Keyword(null, "inside-comment", "inside-comment", 1258069708), new cljs.core.Keyword(null, "star", "star", 279424429), new cljs.core.Keyword(null, "string", "string", -1989541586), new cljs.core.Keyword(null, "rules", "rules", 1198912366), new cljs.core.Keyword(null, "hide", "hide", -596913169), 
new cljs.core.Keyword(null, "paren", "paren", -294107600), new cljs.core.Keyword(null, "alt-or-ord", "alt-or-ord", 310249425), new cljs.core.Keyword(null, "regexp", "regexp", -541372782), new cljs.core.Keyword(null, "factor", "factor", -2103172748), new cljs.core.Keyword(null, "comment", "comment", 532206069), new cljs.core.Keyword(null, "plus", "plus", 211540661), new cljs.core.Keyword(null, "epsilon", "epsilon", -730158570), new cljs.core.Keyword(null, "opt-whitespace", "opt-whitespace", 1115207927), 
new cljs.core.Keyword(null, "opt", "opt", -794706369)], [instaparse.combinators_source.cat.call(null, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "!")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "factor", "factor", -2103172748))), instaparse.combinators_source.plus.call(null, instaparse.combinators_source.cat.call(null, instaparse.cfg.opt_whitespace, instaparse.combinators_source.alt.call(null, 
instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "factor", "factor", -2103172748)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "look", "look", -539441433)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "neg", "neg", 1800032960))), instaparse.cfg.opt_whitespace)), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "cat", "cat", -1457810207)), instaparse.combinators_source.plus.call(null, 
instaparse.combinators_source.cat.call(null, instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "/")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "cat", "cat", -1457810207))))), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.string.call(null, ":"), instaparse.combinators_source.string.call(null, ":\x3d"), instaparse.combinators_source.string.call(null, 
"::\x3d"), instaparse.combinators_source.string.call(null, "\x3d")), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "cat", "cat", -1457810207)), instaparse.combinators_source.star.call(null, instaparse.combinators_source.cat.call(null, instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "|")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, 
new cljs.core.Keyword(null, "cat", "cat", -1457810207))))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "\x26")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "factor", "factor", -2103172748))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.alt.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, 
"nt", "nt", -835425781)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "hide-nt", "hide-nt", -228813845))), instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "rule-separator", "rule-separator", 1539322213))), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "alt-or-ord", "alt-or-ord", 310249425)), instaparse.combinators_source.hide.call(null, 
instaparse.combinators_source.alt.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "opt-whitespace", "opt-whitespace", 1115207927)), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "opt-whitespace", "opt-whitespace", 1115207927)), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.string.call(null, ";"), instaparse.combinators_source.string.call(null, ".")), instaparse.combinators_source.nt.call(null, 
new cljs.core.Keyword(null, "opt-whitespace", "opt-whitespace", 1115207927)))))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.neg.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "epsilon", "epsilon", -730158570))), instaparse.combinators_source.regexp.call(null, "[^, \\r\\t\\n\x3c\x3e(){}\\[\\]+*?:\x3d|'\"#\x26!;./]+")), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, 
"\x3c")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "nt", "nt", -835425781)), instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "\x3e"))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.regexp.call(null, instaparse.cfg.inside_comment), instaparse.combinators_source.star.call(null, instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, 
new cljs.core.Keyword(null, "comment", "comment", 532206069)), instaparse.combinators_source.regexp.call(null, instaparse.cfg.inside_comment)))), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.cat.call(null, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "{")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "alt-or-ord", "alt-or-ord", 310249425)), instaparse.cfg.opt_whitespace, 
instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "}"))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "factor", "factor", -2103172748)), instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "*")))), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.regexp.call(null, instaparse.cfg.single_quoted_string), 
instaparse.combinators_source.regexp.call(null, instaparse.cfg.double_quoted_string)), instaparse.combinators_source.hide_tag.call(null, instaparse.combinators_source.cat.call(null, instaparse.cfg.opt_whitespace, instaparse.combinators_source.plus.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "rule", "rule", 729973257))))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, 
"\x3c")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "alt-or-ord", "alt-or-ord", 310249425)), instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "\x3e"))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "(")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, 
new cljs.core.Keyword(null, "alt-or-ord", "alt-or-ord", 310249425)), instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, ")"))), instaparse.combinators_source.hide_tag.call(null, instaparse.combinators_source.alt.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "alt", "alt", -3214426)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "ord", "ord", 1142548323)))), instaparse.combinators_source.alt.call(null, 
instaparse.combinators_source.regexp.call(null, instaparse.cfg.single_quoted_regexp), instaparse.combinators_source.regexp.call(null, instaparse.cfg.double_quoted_regexp)), instaparse.combinators_source.hide_tag.call(null, instaparse.combinators_source.alt.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "nt", "nt", -835425781)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "string", "string", -1989541586)), instaparse.combinators_source.nt.call(null, 
new cljs.core.Keyword(null, "regexp", "regexp", -541372782)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "opt", "opt", -794706369)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "star", "star", 279424429)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "plus", "plus", 211540661)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "paren", "paren", -294107600)), instaparse.combinators_source.nt.call(null, 
new cljs.core.Keyword(null, "hide", "hide", -596913169)), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "epsilon", "epsilon", -730158570)))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.string.call(null, "(*"), instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "inside-comment", "inside-comment", 1258069708)), instaparse.combinators_source.string.call(null, "*)")), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, 
new cljs.core.Keyword(null, "factor", "factor", -2103172748)), instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "+"))), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.string.call(null, "Epsilon"), instaparse.combinators_source.string.call(null, "epsilon"), instaparse.combinators_source.string.call(null, "EPSILON"), instaparse.combinators_source.string.call(null, "eps"), instaparse.combinators_source.string.call(null, 
"\u03b5")), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.regexp.call(null, instaparse.cfg.ws), instaparse.combinators_source.star.call(null, instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "comment", "comment", 532206069)), instaparse.combinators_source.regexp.call(null, instaparse.cfg.ws)))), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.cat.call(null, instaparse.combinators_source.hide.call(null, 
instaparse.combinators_source.string.call(null, "[")), instaparse.cfg.opt_whitespace, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "alt-or-ord", "alt-or-ord", 310249425)), instaparse.cfg.opt_whitespace, instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "]"))), instaparse.combinators_source.cat.call(null, instaparse.combinators_source.nt.call(null, new cljs.core.Keyword(null, "factor", "factor", -2103172748)), instaparse.cfg.opt_whitespace, 
instaparse.combinators_source.hide.call(null, instaparse.combinators_source.string.call(null, "?"))))]));
instaparse.cfg.tag = cljs.core.first;
instaparse.cfg.contents = cljs.core.next;
instaparse.cfg.content = cljs.core.fnext;
instaparse.cfg.escape = function escape__$1(s) {
  var sq = cljs.core.seq.call(null, s);
  var v = cljs.core.PersistentVector.EMPTY;
  while (true) {
    var temp__4124__auto__ = cljs.core.first.call(null, sq);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var c = temp__4124__auto__;
      var G__14973 = c;
      switch(G__14973) {
        case "\\":
          var temp__4124__auto____$1 = cljs.core.second.call(null, sq);
          if (cljs.core.truth_(temp__4124__auto____$1)) {
            var c2 = temp__4124__auto____$1;
            if (cljs.core._EQ_.call(null, c2, "'")) {
              var G__14975 = cljs.core.drop.call(null, 2, sq);
              var G__14976 = cljs.core.conj.call(null, v, c2);
              sq = G__14975;
              v = G__14976;
              continue;
            } else {
              var G__14977 = cljs.core.drop.call(null, 2, sq);
              var G__14978 = cljs.core.conj.call(null, v, c, c2);
              sq = G__14977;
              v = G__14978;
              continue;
            }
          } else {
            throw "Encountered backslash character at end of string:" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s);
          }
          break;
        case '"':
          var G__14979 = cljs.core.next.call(null, sq);
          var G__14980 = cljs.core.conj.call(null, v, "\\", '"');
          sq = G__14979;
          v = G__14980;
          continue;
          break;
        default:
          var G__14981 = cljs.core.next.call(null, sq);
          var G__14982 = cljs.core.conj.call(null, v, c);
          sq = G__14981;
          v = G__14982;
          continue;
      }
    } else {
      return cljs.core.apply.call(null, cljs.core.str, v);
    }
    break;
  }
};
instaparse.cfg.safe_read_string = function safe_read_string(s) {
  return cljs.reader.read_string_STAR_.call(null, cljs.reader.push_back_reader.call(null, s), null);
};
instaparse.cfg.process_string = function process_string(s) {
  var stripped = cljs.core.subs.call(null, s, 1, cljs.core.count.call(null, s) - 1);
  var remove_escaped_single_quotes = instaparse.cfg.escape.call(null, stripped);
  var final_string = instaparse.cfg.safe_read_string.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(remove_escaped_single_quotes) + '"');
  return final_string;
};
instaparse.cfg.process_regexp = function process_regexp(s) {
  var stripped = cljs.core.subs.call(null, s, 2, cljs.core.count.call(null, s) - 1);
  var remove_escaped_single_quotes = instaparse.cfg.escape.call(null, stripped);
  var final_string = cljs.core.re_pattern.call(null, remove_escaped_single_quotes);
  return final_string;
};
instaparse.cfg.build_rule = function build_rule(tree) {
  while (true) {
    var G__14985 = instaparse.cfg.tag.call(null, tree) instanceof cljs.core.Keyword ? instaparse.cfg.tag.call(null, tree).fqn : null;
    switch(G__14985) {
      case "neg":
        return instaparse.combinators_source.neg.call(null, build_rule.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "cat":
        return cljs.core.apply.call(null, instaparse.combinators_source.cat, cljs.core.map.call(null, build_rule, instaparse.cfg.contents.call(null, tree)));
        break;
      case "ord":
        return cljs.core.apply.call(null, instaparse.combinators_source.ord, cljs.core.map.call(null, build_rule, instaparse.cfg.contents.call(null, tree)));
        break;
      case "alt":
        return cljs.core.apply.call(null, instaparse.combinators_source.alt, cljs.core.map.call(null, build_rule, instaparse.cfg.contents.call(null, tree)));
        break;
      case "look":
        return instaparse.combinators_source.look.call(null, build_rule.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "rule":
        var vec__14986 = instaparse.cfg.contents.call(null, tree);
        var nt = cljs.core.nth.call(null, vec__14986, 0, null);
        var alt_or_ord = cljs.core.nth.call(null, vec__14986, 1, null);
        if (cljs.core._EQ_.call(null, instaparse.cfg.tag.call(null, nt), new cljs.core.Keyword(null, "hide-nt", "hide-nt", -228813845))) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, instaparse.cfg.content.call(null, instaparse.cfg.content.call(null, nt))), instaparse.combinators_source.hide_tag.call(null, build_rule.call(null, alt_or_ord))], null);
        } else {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, instaparse.cfg.content.call(null, nt)), build_rule.call(null, alt_or_ord)], null);
        }
        break;
      case "nt":
        return instaparse.combinators_source.nt.call(null, cljs.core.keyword.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "star":
        return instaparse.combinators_source.star.call(null, build_rule.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "string":
        return(cljs.core.truth_(instaparse.cfg._STAR_case_insensitive_literals_STAR_) ? instaparse.combinators_source.string_ci : instaparse.combinators_source.string).call(null, instaparse.cfg.process_string.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "hide":
        return instaparse.combinators_source.hide.call(null, build_rule.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "paren":
        var G__14988 = instaparse.cfg.content.call(null, tree);
        tree = G__14988;
        continue;
        break;
      case "regexp":
        return instaparse.combinators_source.regexp.call(null, instaparse.cfg.process_regexp.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "plus":
        return instaparse.combinators_source.plus.call(null, build_rule.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      case "epsilon":
        return instaparse.combinators_source.Epsilon;
        break;
      case "opt":
        return instaparse.combinators_source.opt.call(null, build_rule.call(null, instaparse.cfg.content.call(null, tree)));
        break;
      default:
        throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(instaparse.cfg.tag.call(null, tree)));;
    }
    break;
  }
};
instaparse.cfg.seq_nt = function seq_nt(parser) {
  while (true) {
    var G__14990 = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser).fqn : null;
    switch(G__14990) {
      case "neg":
        var G__14992 = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser);
        parser = G__14992;
        continue;
        break;
      case "cat":
        return cljs.core.mapcat.call(null, seq_nt, (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(parser));
        break;
      case "ord":
        return cljs.core.mapcat.call(null, seq_nt, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "parser1", "parser1", -439601422)).cljs$core$IFn$_invoke$arity$1(parser), (new cljs.core.Keyword(null, "parser2", "parser2", 1013754688)).cljs$core$IFn$_invoke$arity$1(parser)], null));
        break;
      case "alt":
        return cljs.core.mapcat.call(null, seq_nt, (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(parser));
        break;
      case "look":
        var G__14993 = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser);
        parser = G__14993;
        continue;
        break;
      case "nt":
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "keyword", "keyword", 811389747)).cljs$core$IFn$_invoke$arity$1(parser)], null);
        break;
      case "rep":
        var G__14994 = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser);
        parser = G__14994;
        continue;
        break;
      case "star":
        var G__14995 = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser);
        parser = G__14995;
        continue;
        break;
      case "string":
        return cljs.core.PersistentVector.EMPTY;
        break;
      case "regexp":
        return cljs.core.PersistentVector.EMPTY;
        break;
      case "plus":
        var G__14996 = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser);
        parser = G__14996;
        continue;
        break;
      case "epsilon":
        return cljs.core.PersistentVector.EMPTY;
        break;
      case "string-ci":
        return cljs.core.PersistentVector.EMPTY;
        break;
      case "opt":
        var G__14997 = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(parser);
        parser = G__14997;
        continue;
        break;
      default:
        throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(parser)));;
    }
    break;
  }
};
instaparse.cfg.check_grammar = function check_grammar(grammar_map) {
  var valid_nts_15006 = cljs.core.set.call(null, cljs.core.keys.call(null, grammar_map));
  var seq__15002_15007 = cljs.core.seq.call(null, cljs.core.distinct.call(null, cljs.core.mapcat.call(null, instaparse.cfg.seq_nt, cljs.core.vals.call(null, grammar_map))));
  var chunk__15003_15008 = null;
  var count__15004_15009 = 0;
  var i__15005_15010 = 0;
  while (true) {
    if (i__15005_15010 < count__15004_15009) {
      var nt_15011 = cljs.core._nth.call(null, chunk__15003_15008, i__15005_15010);
      if (cljs.core.truth_(valid_nts_15006.call(null, nt_15011))) {
      } else {
        throw "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.subs.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(nt_15011), 1)) + "occurs on the right-hand side of your grammar, but not on the left";
      }
      var G__15012 = seq__15002_15007;
      var G__15013 = chunk__15003_15008;
      var G__15014 = count__15004_15009;
      var G__15015 = i__15005_15010 + 1;
      seq__15002_15007 = G__15012;
      chunk__15003_15008 = G__15013;
      count__15004_15009 = G__15014;
      i__15005_15010 = G__15015;
      continue;
    } else {
      var temp__4126__auto___15016 = cljs.core.seq.call(null, seq__15002_15007);
      if (temp__4126__auto___15016) {
        var seq__15002_15017__$1 = temp__4126__auto___15016;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__15002_15017__$1)) {
          var c__4410__auto___15018 = cljs.core.chunk_first.call(null, seq__15002_15017__$1);
          var G__15019 = cljs.core.chunk_rest.call(null, seq__15002_15017__$1);
          var G__15020 = c__4410__auto___15018;
          var G__15021 = cljs.core.count.call(null, c__4410__auto___15018);
          var G__15022 = 0;
          seq__15002_15007 = G__15019;
          chunk__15003_15008 = G__15020;
          count__15004_15009 = G__15021;
          i__15005_15010 = G__15022;
          continue;
        } else {
          var nt_15023 = cljs.core.first.call(null, seq__15002_15017__$1);
          if (cljs.core.truth_(valid_nts_15006.call(null, nt_15023))) {
          } else {
            throw "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.subs.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(nt_15023), 1)) + "occurs on the right-hand side of your grammar, but not on the left";
          }
          var G__15024 = cljs.core.next.call(null, seq__15002_15017__$1);
          var G__15025 = null;
          var G__15026 = 0;
          var G__15027 = 0;
          seq__15002_15007 = G__15024;
          chunk__15003_15008 = G__15025;
          count__15004_15009 = G__15026;
          i__15005_15010 = G__15027;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return grammar_map;
};
instaparse.cfg.build_parser = function build_parser(spec, output_format) {
  var rules = instaparse.gll.parse.call(null, instaparse.cfg.cfg, new cljs.core.Keyword(null, "rules", "rules", 1198912366), spec, false);
  if (rules instanceof instaparse.gll.Failure) {
    throw "Error parsing grammar specification:\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
      var sb__4581__auto__ = new goog.string.StringBuffer;
      var _STAR_print_fn_STAR_15029_15030 = cljs.core._STAR_print_fn_STAR_;
      try {
        cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_fn_STAR_15029_15030, sb__4581__auto__, rules) {
          return function(x__4582__auto__) {
            return sb__4581__auto__.append(x__4582__auto__);
          };
        }(_STAR_print_fn_STAR_15029_15030, sb__4581__auto__, rules);
        cljs.core.println.call(null, rules);
      } finally {
        cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_15029_15030;
      }
      return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4581__auto__);
    }());
  } else {
    var productions = cljs.core.map.call(null, instaparse.cfg.build_rule, rules);
    var start_production = cljs.core.first.call(null, cljs.core.first.call(null, productions));
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), instaparse.cfg.check_grammar.call(null, instaparse.reduction.apply_standard_reductions.call(null, output_format, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, productions))), new cljs.core.Keyword(null, "start-production", "start-production", 687546537), start_production, new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), output_format], null);
  }
};
instaparse.cfg.build_parser_from_combinators = function build_parser_from_combinators(grammar_map, output_format, start_production) {
  if (start_production == null) {
    throw "When you build a parser from a map of parser combinators, you must provide a start production using the :start keyword argument.";
  } else {
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), instaparse.cfg.check_grammar.call(null, instaparse.reduction.apply_standard_reductions.call(null, output_format, grammar_map)), new cljs.core.Keyword(null, "start-production", "start-production", 687546537), start_production, new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), output_format], null);
  }
};
instaparse.cfg.ebnf = function ebnf(spec) {
  if (cljs.core.truth_(cljs.core.re_find.call(null, /[:=]/, spec))) {
    var rules = instaparse.gll.parse.call(null, instaparse.cfg.cfg, new cljs.core.Keyword(null, "rules", "rules", 1198912366), spec, false);
    if (rules instanceof instaparse.gll.Failure) {
      throw "Error parsing grammar specification:\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
        var sb__4581__auto__ = new goog.string.StringBuffer;
        var _STAR_print_fn_STAR_15033_15035 = cljs.core._STAR_print_fn_STAR_;
        try {
          cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_fn_STAR_15033_15035, sb__4581__auto__, rules) {
            return function(x__4582__auto__) {
              return sb__4581__auto__.append(x__4582__auto__);
            };
          }(_STAR_print_fn_STAR_15033_15035, sb__4581__auto__, rules);
          cljs.core.println.call(null, rules);
        } finally {
          cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_15033_15035;
        }
        return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4581__auto__);
      }());
    } else {
      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, instaparse.cfg.build_rule, rules));
    }
  } else {
    var rhs = instaparse.gll.parse.call(null, instaparse.cfg.cfg, new cljs.core.Keyword(null, "alt-or-ord", "alt-or-ord", 310249425), spec, false);
    if (rhs instanceof instaparse.gll.Failure) {
      throw "Error parsing grammar specification:\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
        var sb__4581__auto__ = new goog.string.StringBuffer;
        var _STAR_print_fn_STAR_15034_15036 = cljs.core._STAR_print_fn_STAR_;
        try {
          cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_fn_STAR_15034_15036, sb__4581__auto__, rhs) {
            return function(x__4582__auto__) {
              return sb__4581__auto__.append(x__4582__auto__);
            };
          }(_STAR_print_fn_STAR_15034_15036, sb__4581__auto__, rhs);
          cljs.core.println.call(null, rhs);
        } finally {
          cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_15034_15036;
        }
        return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4581__auto__);
      }());
    } else {
      return instaparse.cfg.build_rule.call(null, cljs.core.first.call(null, rhs));
    }
  }
};
goog.provide("instaparse.abnf");
goog.require("cljs.core");
goog.require("instaparse.combinators_source");
goog.require("instaparse.combinators_source");
goog.require("instaparse.reduction");
goog.require("instaparse.reduction");
goog.require("instaparse.gll");
goog.require("instaparse.gll");
goog.require("instaparse.cfg");
goog.require("instaparse.cfg");
goog.require("instaparse.transform");
goog.require("instaparse.transform");
instaparse.abnf._STAR_case_insensitive_STAR_ = false;
instaparse.abnf.abnf_core = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "CRLF", "CRLF", 11418756), new cljs.core.Keyword(null, "HTAB", "HTAB", 11392612), new cljs.core.Keyword(null, "LWSP", "LWSP", 782998598), new cljs.core.Keyword(null, "LF", "LF", 1177033158), new cljs.core.Keyword(null, "VCHAR", "VCHAR", 1962437706), new cljs.core.Keyword(null, "DIGIT", "DIGIT", 341251338), new cljs.core.Keyword(null, "SP", "SP", 124290284), new cljs.core.Keyword(null, "HEXDIG", "HEXDIG", 
-200221072), new cljs.core.Keyword(null, "CTL", "CTL", -9995632), new cljs.core.Keyword(null, "DQUOTE", "DQUOTE", -571169808), new cljs.core.Keyword(null, "WSP", "WSP", -1046948716), new cljs.core.Keyword(null, "CR", "CR", -1654295403), new cljs.core.Keyword(null, "OCTET", "OCTET", -743420682), new cljs.core.Keyword(null, "ALPHA", "ALPHA", -1463859144), new cljs.core.Keyword(null, "CHAR", "CHAR", -1280338086), new cljs.core.Keyword(null, "BIT", "BIT", -1854474115)], [instaparse.combinators_source.string.call(null, 
"\r\n"), instaparse.combinators_source.string.call(null, "\t"), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.alt.call(null, instaparse.combinators_source.string.call(null, " "), instaparse.combinators_source.string.call(null, "\t")), instaparse.combinators_source.star.call(null, instaparse.combinators_source.cat.call(null, instaparse.combinators_source.string.call(null, "\r\n"), instaparse.combinators_source.alt.call(null, instaparse.combinators_source.string.call(null, 
" "), instaparse.combinators_source.string.call(null, "\t"))))), instaparse.combinators_source.string.call(null, "\n"), instaparse.combinators_source.regexp.call(null, "[\\u0021-\\u007E]"), instaparse.combinators_source.regexp.call(null, "[0-9]"), instaparse.combinators_source.string.call(null, " "), instaparse.combinators_source.regexp.call(null, "[0-9A-Fa-f]"), instaparse.combinators_source.regexp.call(null, "[\\u0000-\\u001F|\\u007F]"), instaparse.combinators_source.string.call(null, '"'), instaparse.combinators_source.alt.call(null, 
instaparse.combinators_source.string.call(null, " "), instaparse.combinators_source.string.call(null, "\t")), instaparse.combinators_source.string.call(null, "\r"), instaparse.combinators_source.regexp.call(null, "[\\u0000-\\u00FF]"), instaparse.combinators_source.regexp.call(null, "[a-zA-Z]"), instaparse.combinators_source.regexp.call(null, "[\\u0001-\\u007F]"), instaparse.combinators_source.regexp.call(null, "[01]")]);
instaparse.abnf.abnf_grammar = "\n\x3crulelist\x3e \x3d \x3copt-whitespace\x3e (rule | hide-tag-rule)+;\nrule \x3d rulename-left \x3cdefined-as\x3e alternation \x3copt-whitespace\x3e;\nhide-tag-rule \x3d hide-tag \x3cdefined-as\x3e alternation \x3copt-whitespace\x3e;\nrulename-left \x3d rulename;\nrulename-right \x3d rulename;\n\x3crulename\x3e \x3d #'[a-zA-Z][-a-zA-Z0-9]*';\n\x3chide-tag\x3e \x3d \x3c'\x3c' opt-whitespace\x3e rulename-left \x3copt-whitespace '\x3e'\x3e;\ndefined-as \x3d \x3copt-whitespace\x3e ('\x3d' | '\x3d/') \x3copt-whitespace\x3e;\nalternation \x3d concatenation (\x3copt-whitespace '/' opt-whitespace\x3e concatenation)*;\nconcatenation \x3d repetition (\x3cwhitespace\x3e repetition)*;\nrepetition \x3d [repeat] \x3copt-whitespace\x3e element;\nrepeat \x3d NUM | (NUM? '*' NUM?);\n\x3celement\x3e \x3d rulename-right | group | hide | option | char-val | num-val\n          | look | neg | regexp;\nlook \x3d \x3c'\x26' opt-whitespace\x3e element;\nneg \x3d \x3c'!' opt-whitespace\x3e element;\n\x3cgroup\x3e \x3d \x3c'(' opt-whitespace\x3e alternation \x3copt-whitespace ')'\x3e;\noption \x3d \x3c'[' opt-whitespace\x3e alternation \x3copt-whitespace ']'\x3e;\nhide \x3d \x3c'\x3c' opt-whitespace\x3e alternation \x3copt-whitespace '\x3e'\x3e;\nchar-val \x3d \x3c'\\u0022'\x3e #'[\\u0020-\\u0021\\u0023-\\u007E]'* \x3c'\\u0022'\x3e (* double-quoted strings *)\n         | \x3c'\\u0027'\x3e #'[\\u0020-\\u0026(-~]'* \x3c'\\u0027'\x3e;  (* single-quoted strings *)\n\x3cnum-val\x3e \x3d \x3c'%'\x3e (bin-val | dec-val | hex-val);\nbin-val \x3d \x3c'b'\x3e bin-char\n          [ (\x3c'.'\x3e bin-char)+ | ('-' bin-char) ];\nbin-char \x3d ('0' | '1')+;\ndec-val \x3d \x3c'd'\x3e dec-char\n          [ (\x3c'.'\x3e dec-char)+ | ('-' dec-char) ];\ndec-char \x3d DIGIT+;\nhex-val \x3d \x3c'x'\x3e hex-char\n          [ (\x3c'.'\x3e hex-char)+ | ('-' hex-char) ];\nhex-char \x3d HEXDIG+;\nNUM \x3d DIGIT+;\n\x3cDIGIT\x3e \x3d #'[0-9]';\n\x3cHEXDIG\x3e \x3d #'[0-9A-Fa-f]';\nopt-whitespace \x3d #'\\s*(?:;.*?(?:\\u000D?\\u000A\\s*|$))*';\nwhitespace \x3d #'\\s+(?:;.*?\\u000D?\\u000A\\s*)*';\nregexp \x3d #\"#'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\"\n       | #\"#\\\"[^\\\"\\\\]*(?:\\\\.[^\\\"\\\\]*)*\\\"\"\n";
instaparse.abnf.char_range = function char_range(char1, char2) {
  return instaparse.combinators_source.regexp.call(null, "[" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(char1) + "-" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(char2) + "]");
};
instaparse.abnf.get_char_combinator = function() {
  var get_char_combinator = null;
  var get_char_combinator__1 = function(num1) {
    return instaparse.combinators_source.string.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.char$.call(null, num1)));
  };
  var get_char_combinator__3 = function() {
    var G__14927__delegate = function(num1, num2, nums) {
      var v = cljs.core.vec.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [num1, num2], null), nums));
      if (cljs.core._EQ_.call(null, v.call(null, 1), "-")) {
        return instaparse.abnf.char_range.call(null, cljs.core.char$.call(null, v.call(null, 0)), cljs.core.char$.call(null, v.call(null, 2)));
      } else {
        return cljs.core.apply.call(null, instaparse.combinators_source.alt, function() {
          var iter__4379__auto__ = function(v) {
            return function iter__14923(s__14924) {
              return new cljs.core.LazySeq(null, function(v) {
                return function() {
                  var s__14924__$1 = s__14924;
                  while (true) {
                    var temp__4126__auto__ = cljs.core.seq.call(null, s__14924__$1);
                    if (temp__4126__auto__) {
                      var s__14924__$2 = temp__4126__auto__;
                      if (cljs.core.chunked_seq_QMARK_.call(null, s__14924__$2)) {
                        var c__4377__auto__ = cljs.core.chunk_first.call(null, s__14924__$2);
                        var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                        var b__14926 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                        if (function() {
                          var i__14925 = 0;
                          while (true) {
                            if (i__14925 < size__4378__auto__) {
                              var n = cljs.core._nth.call(null, c__4377__auto__, i__14925);
                              cljs.core.chunk_append.call(null, b__14926, instaparse.combinators_source.string.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.char$.call(null, n))));
                              var G__14928 = i__14925 + 1;
                              i__14925 = G__14928;
                              continue;
                            } else {
                              return true;
                            }
                            break;
                          }
                        }()) {
                          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14926), iter__14923.call(null, cljs.core.chunk_rest.call(null, s__14924__$2)));
                        } else {
                          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14926), null);
                        }
                      } else {
                        var n = cljs.core.first.call(null, s__14924__$2);
                        return cljs.core.cons.call(null, instaparse.combinators_source.string.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.char$.call(null, n))), iter__14923.call(null, cljs.core.rest.call(null, s__14924__$2)));
                      }
                    } else {
                      return null;
                    }
                    break;
                  }
                };
              }(v), null, null);
            };
          }(v);
          return iter__4379__auto__.call(null, v);
        }());
      }
    };
    var G__14927 = function(num1, num2, var_args) {
      var nums = null;
      if (arguments.length > 2) {
        nums = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__14927__delegate.call(this, num1, num2, nums);
    };
    G__14927.cljs$lang$maxFixedArity = 2;
    G__14927.cljs$lang$applyTo = function(arglist__14929) {
      var num1 = cljs.core.first(arglist__14929);
      arglist__14929 = cljs.core.next(arglist__14929);
      var num2 = cljs.core.first(arglist__14929);
      var nums = cljs.core.rest(arglist__14929);
      return G__14927__delegate(num1, num2, nums);
    };
    G__14927.cljs$core$IFn$_invoke$arity$variadic = G__14927__delegate;
    return G__14927;
  }();
  get_char_combinator = function(num1, num2, var_args) {
    var nums = var_args;
    switch(arguments.length) {
      case 1:
        return get_char_combinator__1.call(this, num1);
      default:
        return get_char_combinator__3.cljs$core$IFn$_invoke$arity$variadic(num1, num2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_char_combinator.cljs$lang$maxFixedArity = 2;
  get_char_combinator.cljs$lang$applyTo = get_char_combinator__3.cljs$lang$applyTo;
  get_char_combinator.cljs$core$IFn$_invoke$arity$1 = get_char_combinator__1;
  get_char_combinator.cljs$core$IFn$_invoke$arity$variadic = get_char_combinator__3.cljs$core$IFn$_invoke$arity$variadic;
  return get_char_combinator;
}();
instaparse.abnf.project = function project(m, ks) {
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
    var iter__4379__auto__ = function iter__14934(s__14935) {
      return new cljs.core.LazySeq(null, function() {
        var s__14935__$1 = s__14935;
        while (true) {
          var temp__4126__auto__ = cljs.core.seq.call(null, s__14935__$1);
          if (temp__4126__auto__) {
            var s__14935__$2 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__14935__$2)) {
              var c__4377__auto__ = cljs.core.chunk_first.call(null, s__14935__$2);
              var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
              var b__14937 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
              if (function() {
                var i__14936 = 0;
                while (true) {
                  if (i__14936 < size__4378__auto__) {
                    var k = cljs.core._nth.call(null, c__4377__auto__, i__14936);
                    if (cljs.core.contains_QMARK_.call(null, m, k)) {
                      cljs.core.chunk_append.call(null, b__14937, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, m.call(null, k)], null));
                      var G__14938 = i__14936 + 1;
                      i__14936 = G__14938;
                      continue;
                    } else {
                      var G__14939 = i__14936 + 1;
                      i__14936 = G__14939;
                      continue;
                    }
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14937), iter__14934.call(null, cljs.core.chunk_rest.call(null, s__14935__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14937), null);
              }
            } else {
              var k = cljs.core.first.call(null, s__14935__$2);
              if (cljs.core.contains_QMARK_.call(null, m, k)) {
                return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, m.call(null, k)], null), iter__14934.call(null, cljs.core.rest.call(null, s__14935__$2)));
              } else {
                var G__14940 = cljs.core.rest.call(null, s__14935__$2);
                s__14935__$1 = G__14940;
                continue;
              }
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4379__auto__.call(null, ks);
  }());
};
instaparse.abnf.merge_core = function merge_core(grammar_map) {
  return cljs.core.merge.call(null, instaparse.abnf.project.call(null, instaparse.abnf.abnf_core, cljs.core.distinct.call(null, cljs.core.mapcat.call(null, instaparse.cfg.seq_nt, cljs.core.vals.call(null, grammar_map)))), grammar_map);
};
instaparse.abnf.hide_tag_QMARK_ = function hide_tag_QMARK_(p) {
  return cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(p), instaparse.reduction.raw_non_terminal_reduction);
};
instaparse.abnf.alt_preserving_hide_tag = function alt_preserving_hide_tag(p1, p2) {
  var hide_tag_p1_QMARK_ = instaparse.abnf.hide_tag_QMARK_.call(null, p1);
  var hide_tag_p2_QMARK_ = instaparse.abnf.hide_tag_QMARK_.call(null, p2);
  if (hide_tag_p1_QMARK_ && hide_tag_p2_QMARK_) {
    return instaparse.combinators_source.hide_tag.call(null, instaparse.combinators_source.alt.call(null, cljs.core.dissoc.call(null, p1, new cljs.core.Keyword(null, "red", "red", -969428204)), cljs.core.dissoc.call(null, p2, new cljs.core.Keyword(null, "red", "red", -969428204))));
  } else {
    if (hide_tag_p1_QMARK_) {
      return instaparse.combinators_source.hide_tag.call(null, instaparse.combinators_source.alt.call(null, cljs.core.dissoc.call(null, p1, new cljs.core.Keyword(null, "red", "red", -969428204)), p2));
    } else {
      if (hide_tag_p2_QMARK_) {
        return instaparse.combinators_source.hide_tag.call(null, instaparse.combinators_source.alt.call(null, p1, cljs.core.dissoc.call(null, p2, new cljs.core.Keyword(null, "red", "red", -969428204))));
      } else {
        return instaparse.combinators_source.alt.call(null, p1, p2);
      }
    }
  }
};
instaparse.abnf.abnf_transformer = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "neg", "neg", 1800032960), new cljs.core.Keyword(null, "hide-tag-rule", "hide-tag-rule", 150267589), new cljs.core.Keyword(null, "look", "look", -539441433), new cljs.core.Keyword(null, "bin-char", "bin-char", -1662780697), new cljs.core.Keyword(null, "rule", "rule", 729973257), new cljs.core.Keyword(null, "rulename-right", "rulename-right", 1125609193), new cljs.core.Keyword(null, "NUM", "NUM", 
-218662260), new cljs.core.Keyword(null, "char-val", "char-val", 1408617933), new cljs.core.Keyword(null, "hide", "hide", -596913169), new cljs.core.Keyword(null, "option", "option", 65132272), new cljs.core.Keyword(null, "hex-char", "hex-char", 764443568), new cljs.core.Keyword(null, "bin-val", "bin-val", 1705209105), new cljs.core.Keyword(null, "dec-val", "dec-val", -1263870894), new cljs.core.Keyword(null, "concatenation", "concatenation", -951369614), new cljs.core.Keyword(null, "alternation", 
"alternation", -1162147630), new cljs.core.Keyword(null, "regexp", "regexp", -541372782), new cljs.core.Keyword(null, "repetition", "repetition", 1938392115), new cljs.core.Keyword(null, "rulename-left", "rulename-left", -1824251564), new cljs.core.Keyword(null, "repeat", "repeat", 832692087), new cljs.core.Keyword(null, "hex-val", "hex-val", 1267737401), new cljs.core.Keyword(null, "dec-char", "dec-char", -646625154)], [instaparse.combinators_source.neg, function(tag, rule) {
  return new cljs.core.PersistentArrayMap.fromArray([tag, instaparse.combinators_source.hide_tag.call(null, rule)], true, false);
}, instaparse.combinators_source.look, function() {
  var G__14945__delegate = function(cs) {
    return parseInt(cljs.core.apply.call(null, cljs.core.str, cs), 2);
  };
  var G__14945 = function(var_args) {
    var cs = null;
    if (arguments.length > 0) {
      cs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return G__14945__delegate.call(this, cs);
  };
  G__14945.cljs$lang$maxFixedArity = 0;
  G__14945.cljs$lang$applyTo = function(arglist__14946) {
    var cs = cljs.core.seq(arglist__14946);
    return G__14945__delegate(cs);
  };
  G__14945.cljs$core$IFn$_invoke$arity$variadic = G__14945__delegate;
  return G__14945;
}(), cljs.core.hash_map, function() {
  var G__14947__delegate = function(rest__14942_SHARP_) {
    if (cljs.core.truth_(instaparse.abnf._STAR_case_insensitive_STAR_)) {
      return instaparse.combinators_source.nt.call(null, cljs.core.keyword.call(null, clojure.string.upper_case.call(null, cljs.core.apply.call(null, cljs.core.str, rest__14942_SHARP_))));
    } else {
      return instaparse.combinators_source.nt.call(null, cljs.core.keyword.call(null, cljs.core.apply.call(null, cljs.core.str, rest__14942_SHARP_)));
    }
  };
  var G__14947 = function(var_args) {
    var rest__14942_SHARP_ = null;
    if (arguments.length > 0) {
      rest__14942_SHARP_ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return G__14947__delegate.call(this, rest__14942_SHARP_);
  };
  G__14947.cljs$lang$maxFixedArity = 0;
  G__14947.cljs$lang$applyTo = function(arglist__14948) {
    var rest__14942_SHARP_ = cljs.core.seq(arglist__14948);
    return G__14947__delegate(rest__14942_SHARP_);
  };
  G__14947.cljs$core$IFn$_invoke$arity$variadic = G__14947__delegate;
  return G__14947;
}(), function() {
  var G__14949__delegate = function(rest__14943_SHARP_) {
    return parseInt(cljs.core.apply.call(null, cljs.core.str, rest__14943_SHARP_));
  };
  var G__14949 = function(var_args) {
    var rest__14943_SHARP_ = null;
    if (arguments.length > 0) {
      rest__14943_SHARP_ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return G__14949__delegate.call(this, rest__14943_SHARP_);
  };
  G__14949.cljs$lang$maxFixedArity = 0;
  G__14949.cljs$lang$applyTo = function(arglist__14950) {
    var rest__14943_SHARP_ = cljs.core.seq(arglist__14950);
    return G__14949__delegate(rest__14943_SHARP_);
  };
  G__14949.cljs$core$IFn$_invoke$arity$variadic = G__14949__delegate;
  return G__14949;
}(), function() {
  var G__14951__delegate = function(cs) {
    return instaparse.combinators_source.string_ci.call(null, cljs.core.apply.call(null, cljs.core.str, cs));
  };
  var G__14951 = function(var_args) {
    var cs = null;
    if (arguments.length > 0) {
      cs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return G__14951__delegate.call(this, cs);
  };
  G__14951.cljs$lang$maxFixedArity = 0;
  G__14951.cljs$lang$applyTo = function(arglist__14952) {
    var cs = cljs.core.seq(arglist__14952);
    return G__14951__delegate(cs);
  };
  G__14951.cljs$core$IFn$_invoke$arity$variadic = G__14951__delegate;
  return G__14951;
}(), instaparse.combinators_source.hide, instaparse.combinators_source.opt, function() {
  var G__14953__delegate = function(cs) {
    return parseInt(cljs.core.apply.call(null, cljs.core.str, cs), 16);
  };
  var G__14953 = function(var_args) {
    var cs = null;
    if (arguments.length > 0) {
      cs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return G__14953__delegate.call(this, cs);
  };
  G__14953.cljs$lang$maxFixedArity = 0;
  G__14953.cljs$lang$applyTo = function(arglist__14954) {
    var cs = cljs.core.seq(arglist__14954);
    return G__14953__delegate(cs);
  };
  G__14953.cljs$core$IFn$_invoke$arity$variadic = G__14953__delegate;
  return G__14953;
}(), instaparse.abnf.get_char_combinator, instaparse.abnf.get_char_combinator, instaparse.combinators_source.cat, instaparse.combinators_source.alt, cljs.core.comp.call(null, instaparse.combinators_source.regexp, instaparse.cfg.process_regexp), function() {
  var G__14955 = null;
  var G__14955__1 = function(element) {
    return element;
  };
  var G__14955__2 = function(repeat, element) {
    if (cljs.core.empty_QMARK_.call(null, repeat)) {
      return instaparse.combinators_source.star.call(null, element);
    } else {
      if (cljs.core._EQ_.call(null, cljs.core.count.call(null, repeat), 2)) {
        return instaparse.combinators_source.rep.call(null, (new cljs.core.Keyword(null, "low", "low", -1601362409)).cljs$core$IFn$_invoke$arity$1(repeat), (new cljs.core.Keyword(null, "high", "high", 2027297808)).cljs$core$IFn$_invoke$arity$1(repeat), element);
      } else {
        if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "low", "low", -1601362409)).cljs$core$IFn$_invoke$arity$1(repeat), 1)) {
          return instaparse.combinators_source.plus.call(null, element);
        } else {
          if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "high", "high", 2027297808)).cljs$core$IFn$_invoke$arity$1(repeat), 1)) {
            return instaparse.combinators_source.opt.call(null, element);
          } else {
            return instaparse.combinators_source.rep.call(null, function() {
              var or__3640__auto__ = (new cljs.core.Keyword(null, "low", "low", -1601362409)).cljs$core$IFn$_invoke$arity$1(repeat);
              if (cljs.core.truth_(or__3640__auto__)) {
                return or__3640__auto__;
              } else {
                return 0;
              }
            }(), function() {
              var or__3640__auto__ = (new cljs.core.Keyword(null, "high", "high", 2027297808)).cljs$core$IFn$_invoke$arity$1(repeat);
              if (cljs.core.truth_(or__3640__auto__)) {
                return or__3640__auto__;
              } else {
                return Infinity;
              }
            }(), element);
          }
        }
      }
    }
  };
  G__14955 = function(repeat, element) {
    switch(arguments.length) {
      case 1:
        return G__14955__1.call(this, repeat);
      case 2:
        return G__14955__2.call(this, repeat, element);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14955.cljs$core$IFn$_invoke$arity$1 = G__14955__1;
  G__14955.cljs$core$IFn$_invoke$arity$2 = G__14955__2;
  return G__14955;
}(), function() {
  var G__14956__delegate = function(rest__14941_SHARP_) {
    if (cljs.core.truth_(instaparse.abnf._STAR_case_insensitive_STAR_)) {
      return cljs.core.keyword.call(null, clojure.string.upper_case.call(null, cljs.core.apply.call(null, cljs.core.str, rest__14941_SHARP_)));
    } else {
      return cljs.core.keyword.call(null, cljs.core.apply.call(null, cljs.core.str, rest__14941_SHARP_));
    }
  };
  var G__14956 = function(var_args) {
    var rest__14941_SHARP_ = null;
    if (arguments.length > 0) {
      rest__14941_SHARP_ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return G__14956__delegate.call(this, rest__14941_SHARP_);
  };
  G__14956.cljs$lang$maxFixedArity = 0;
  G__14956.cljs$lang$applyTo = function(arglist__14957) {
    var rest__14941_SHARP_ = cljs.core.seq(arglist__14957);
    return G__14956__delegate(rest__14941_SHARP_);
  };
  G__14956.cljs$core$IFn$_invoke$arity$variadic = G__14956__delegate;
  return G__14956;
}(), function() {
  var G__14958__delegate = function(items) {
    var G__14944 = cljs.core.count.call(null, items);
    switch(G__14944) {
      case 1:
        if (cljs.core._EQ_.call(null, cljs.core.first.call(null, items), "*")) {
          return cljs.core.PersistentArrayMap.EMPTY;
        } else {
          return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "low", "low", -1601362409), cljs.core.first.call(null, items), new cljs.core.Keyword(null, "high", "high", 2027297808), cljs.core.first.call(null, items)], null);
        }
        break;
      case 2:
        if (cljs.core._EQ_.call(null, cljs.core.first.call(null, items), "*")) {
          return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "high", "high", 2027297808), cljs.core.second.call(null, items)], null);
        } else {
          return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "low", "low", -1601362409), cljs.core.first.call(null, items)], null);
        }
        break;
      case 3:
        return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "low", "low", -1601362409), cljs.core.first.call(null, items), new cljs.core.Keyword(null, "high", "high", 2027297808), cljs.core.nth.call(null, items, 2)], null);
        break;
      default:
        throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.count.call(null, items)));;
    }
  };
  var G__14958 = function(var_args) {
    var items = null;
    if (arguments.length > 0) {
      items = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return G__14958__delegate.call(this, items);
  };
  G__14958.cljs$lang$maxFixedArity = 0;
  G__14958.cljs$lang$applyTo = function(arglist__14960) {
    var items = cljs.core.seq(arglist__14960);
    return G__14958__delegate(items);
  };
  G__14958.cljs$core$IFn$_invoke$arity$variadic = G__14958__delegate;
  return G__14958;
}(), instaparse.abnf.get_char_combinator, function() {
  var G__14961__delegate = function(cs) {
    return parseInt(cljs.core.apply.call(null, cljs.core.str, cs));
  };
  var G__14961 = function(var_args) {
    var cs = null;
    if (arguments.length > 0) {
      cs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return G__14961__delegate.call(this, cs);
  };
  G__14961.cljs$lang$maxFixedArity = 0;
  G__14961.cljs$lang$applyTo = function(arglist__14962) {
    var cs = cljs.core.seq(arglist__14962);
    return G__14961__delegate(cs);
  };
  G__14961.cljs$core$IFn$_invoke$arity$variadic = G__14961__delegate;
  return G__14961;
}()]);
instaparse.abnf.abnf_parser = instaparse.reduction.apply_standard_reductions.call(null, new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), instaparse.cfg.ebnf.call(null, instaparse.abnf.abnf_grammar));
instaparse.abnf.rules__GT_grammar_map = function rules__GT_grammar_map(rules) {
  return instaparse.abnf.merge_core.call(null, cljs.core.apply.call(null, cljs.core.merge_with, instaparse.abnf.alt_preserving_hide_tag, rules));
};
instaparse.abnf.abnf = function abnf(spec) {
  if (cljs.core.truth_(cljs.core.re_find.call(null, /=/, spec))) {
    var rule_tree = instaparse.gll.parse.call(null, instaparse.abnf.abnf_parser, new cljs.core.Keyword(null, "rulelist", "rulelist", -1871218473), spec, false);
    if (rule_tree instanceof instaparse.gll.Failure) {
      throw "Error parsing grammar specification:\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
        var sb__4581__auto__ = new goog.string.StringBuffer;
        var _STAR_print_fn_STAR_14965_14967 = cljs.core._STAR_print_fn_STAR_;
        try {
          cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_fn_STAR_14965_14967, sb__4581__auto__, rule_tree) {
            return function(x__4582__auto__) {
              return sb__4581__auto__.append(x__4582__auto__);
            };
          }(_STAR_print_fn_STAR_14965_14967, sb__4581__auto__, rule_tree);
          cljs.core.println.call(null, rule_tree);
        } finally {
          cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_14965_14967;
        }
        return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4581__auto__);
      }());
    } else {
      return instaparse.abnf.rules__GT_grammar_map.call(null, instaparse.transform.transform.call(null, instaparse.abnf.abnf_transformer, rule_tree));
    }
  } else {
    var rhs_tree = instaparse.gll.parse.call(null, instaparse.abnf.abnf_parser, new cljs.core.Keyword(null, "alternation", "alternation", -1162147630), spec, false);
    if (rhs_tree instanceof instaparse.gll.Failure) {
      throw "Error parsing grammar specification:\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
        var sb__4581__auto__ = new goog.string.StringBuffer;
        var _STAR_print_fn_STAR_14966_14968 = cljs.core._STAR_print_fn_STAR_;
        try {
          cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_fn_STAR_14966_14968, sb__4581__auto__, rhs_tree) {
            return function(x__4582__auto__) {
              return sb__4581__auto__.append(x__4582__auto__);
            };
          }(_STAR_print_fn_STAR_14966_14968, sb__4581__auto__, rhs_tree);
          cljs.core.println.call(null, rhs_tree);
        } finally {
          cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_14966_14968;
        }
        return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4581__auto__);
      }());
    } else {
      return instaparse.transform.transform.call(null, instaparse.abnf.abnf_transformer, rhs_tree);
    }
  }
};
instaparse.abnf.build_parser = function build_parser(spec, output_format) {
  var rule_tree = instaparse.gll.parse.call(null, instaparse.abnf.abnf_parser, new cljs.core.Keyword(null, "rulelist", "rulelist", -1871218473), spec, false);
  if (rule_tree instanceof instaparse.gll.Failure) {
    throw "Error parsing grammar specification:\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
      var sb__4581__auto__ = new goog.string.StringBuffer;
      var _STAR_print_fn_STAR_14970_14971 = cljs.core._STAR_print_fn_STAR_;
      try {
        cljs.core._STAR_print_fn_STAR_ = function(_STAR_print_fn_STAR_14970_14971, sb__4581__auto__, rule_tree) {
          return function(x__4582__auto__) {
            return sb__4581__auto__.append(x__4582__auto__);
          };
        }(_STAR_print_fn_STAR_14970_14971, sb__4581__auto__, rule_tree);
        cljs.core.println.call(null, rule_tree);
      } finally {
        cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_14970_14971;
      }
      return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4581__auto__);
    }());
  } else {
    var rules = instaparse.transform.transform.call(null, instaparse.abnf.abnf_transformer, rule_tree);
    var grammar_map = instaparse.abnf.rules__GT_grammar_map.call(null, rules);
    var start_production = cljs.core.first.call(null, cljs.core.first.call(null, cljs.core.first.call(null, rules)));
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), instaparse.cfg.check_grammar.call(null, instaparse.reduction.apply_standard_reductions.call(null, output_format, grammar_map)), new cljs.core.Keyword(null, "start-production", "start-production", 687546537), start_production, new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), output_format], null);
  }
};
goog.provide("cljs.looperscript.audio");
goog.require("cljs.core");
cljs.looperscript.audio.ctx = new AudioContext;
cljs.looperscript.audio.pending_sounds = cljs.core.atom.call(null, cljs.core.PersistentHashSet.EMPTY);
cljs.looperscript.audio.drums = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["kick", "snare", "hat", "sidestick", "ride-bell", "ride"], null);
cljs.looperscript.audio.drum_codes = new cljs.core.PersistentArrayMap(null, 6, ["k", "kick", "s", "snare", "h", "hat", "d", "sidestick", "b", "ride-bell", "r", "ride"], null);
cljs.looperscript.audio.buffers = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cljs.looperscript.audio.sample_folder = "/media/webaudio/sample/mp3s/";
cljs.looperscript.audio.on_decode = function on_decode(buffer, fname) {
  cljs.core.swap_BANG_.call(null, cljs.looperscript.audio.buffers, cljs.core.assoc, fname, buffer);
  return console.log("loaded", fname, cljs.core.rand_int.call(null, 99));
};
cljs.looperscript.audio.on_mp3_load = function on_mp3_load(req, fname) {
  return cljs.looperscript.audio.ctx.decodeAudioData(req.response, function(p1__13071_SHARP_) {
    return cljs.looperscript.audio.on_decode.call(null, p1__13071_SHARP_, fname);
  });
};
cljs.looperscript.audio.load_file = function load_file(fname) {
  var req = new XMLHttpRequest;
  var full_name = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.looperscript.audio.sample_folder) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(fname) + ".mp3";
  req.open("GET", full_name);
  req["responseType"] = "arraybuffer";
  req["onload"] = function(req, full_name) {
    return function() {
      return cljs.looperscript.audio.on_mp3_load.call(null, req, fname);
    };
  }(req, full_name);
  return req.send();
};
cljs.looperscript.audio.load_some_drums = function load_some_drums() {
  var seq__13076 = cljs.core.seq.call(null, cljs.looperscript.audio.drums);
  var chunk__13077 = null;
  var count__13078 = 0;
  var i__13079 = 0;
  while (true) {
    if (i__13079 < count__13078) {
      var d = cljs.core._nth.call(null, chunk__13077, i__13079);
      cljs.looperscript.audio.load_file.call(null, d);
      var G__13080 = seq__13076;
      var G__13081 = chunk__13077;
      var G__13082 = count__13078;
      var G__13083 = i__13079 + 1;
      seq__13076 = G__13080;
      chunk__13077 = G__13081;
      count__13078 = G__13082;
      i__13079 = G__13083;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__13076);
      if (temp__4126__auto__) {
        var seq__13076__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13076__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__13076__$1);
          var G__13084 = cljs.core.chunk_rest.call(null, seq__13076__$1);
          var G__13085 = c__4410__auto__;
          var G__13086 = cljs.core.count.call(null, c__4410__auto__);
          var G__13087 = 0;
          seq__13076 = G__13084;
          chunk__13077 = G__13085;
          count__13078 = G__13086;
          i__13079 = G__13087;
          continue;
        } else {
          var d = cljs.core.first.call(null, seq__13076__$1);
          cljs.looperscript.audio.load_file.call(null, d);
          var G__13088 = cljs.core.next.call(null, seq__13076__$1);
          var G__13089 = null;
          var G__13090 = 0;
          var G__13091 = 0;
          seq__13076 = G__13088;
          chunk__13077 = G__13089;
          count__13078 = G__13090;
          i__13079 = G__13091;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.looperscript.audio.play_sound = function play_sound(fname, start_time, vol) {
  var buf_s = cljs.looperscript.audio.ctx.createBufferSource();
  var gain = cljs.looperscript.audio.ctx.createGain();
  buf_s["buffer"] = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.looperscript.audio.buffers), fname);
  gain["gain"]["value"] = vol;
  buf_s.connect(gain);
  gain.connect(cljs.looperscript.audio.ctx["destination"]);
  return buf_s.start(start_time);
};
cljs.looperscript.audio.kill_sounds = function kill_sounds() {
  var seq__13096_13100 = cljs.core.seq.call(null, cljs.core.deref.call(null, cljs.looperscript.audio.pending_sounds));
  var chunk__13097_13101 = null;
  var count__13098_13102 = 0;
  var i__13099_13103 = 0;
  while (true) {
    if (i__13099_13103 < count__13098_13102) {
      var s_13104 = cljs.core._nth.call(null, chunk__13097_13101, i__13099_13103);
      s_13104.stop();
      var G__13105 = seq__13096_13100;
      var G__13106 = chunk__13097_13101;
      var G__13107 = count__13098_13102;
      var G__13108 = i__13099_13103 + 1;
      seq__13096_13100 = G__13105;
      chunk__13097_13101 = G__13106;
      count__13098_13102 = G__13107;
      i__13099_13103 = G__13108;
      continue;
    } else {
      var temp__4126__auto___13109 = cljs.core.seq.call(null, seq__13096_13100);
      if (temp__4126__auto___13109) {
        var seq__13096_13110__$1 = temp__4126__auto___13109;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13096_13110__$1)) {
          var c__4410__auto___13111 = cljs.core.chunk_first.call(null, seq__13096_13110__$1);
          var G__13112 = cljs.core.chunk_rest.call(null, seq__13096_13110__$1);
          var G__13113 = c__4410__auto___13111;
          var G__13114 = cljs.core.count.call(null, c__4410__auto___13111);
          var G__13115 = 0;
          seq__13096_13100 = G__13112;
          chunk__13097_13101 = G__13113;
          count__13098_13102 = G__13114;
          i__13099_13103 = G__13115;
          continue;
        } else {
          var s_13116 = cljs.core.first.call(null, seq__13096_13110__$1);
          s_13116.stop();
          var G__13117 = cljs.core.next.call(null, seq__13096_13110__$1);
          var G__13118 = null;
          var G__13119 = 0;
          var G__13120 = 0;
          seq__13096_13100 = G__13117;
          chunk__13097_13101 = G__13118;
          count__13098_13102 = G__13119;
          i__13099_13103 = G__13120;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return cljs.core.reset_BANG_.call(null, cljs.looperscript.audio.pending_sounds, cljs.core.PersistentHashSet.EMPTY);
};
cljs.looperscript.audio.play_tone = function play_tone(freq, start_time, dur, vol) {
  var osc = cljs.looperscript.audio.ctx.createOscillator();
  var gain = cljs.looperscript.audio.ctx.createGain();
  osc["type"] = "sawtooth";
  osc["frequency"]["value"] = freq;
  gain["gain"]["value"] = .1 * vol;
  osc.connect(gain);
  gain.connect(cljs.looperscript.audio.ctx["destination"]);
  osc.start(start_time);
  return osc.stop(start_time + dur);
};
goog.provide("instaparse.viz");
goog.require("cljs.core");
instaparse.viz.span = function span(tree) {
  var m = cljs.core.meta.call(null, tree);
  var s = (new cljs.core.Keyword("instaparse.gll", "start-index", "instaparse.gll/start-index", 404653620)).cljs$core$IFn$_invoke$arity$1(m);
  var e = (new cljs.core.Keyword("instaparse.gll", "end-index", "instaparse.gll/end-index", -1851404441)).cljs$core$IFn$_invoke$arity$1(m);
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = s;
    if (cljs.core.truth_(and__3628__auto__)) {
      return e;
    } else {
      return and__3628__auto__;
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [s, e], null);
  } else {
    return null;
  }
};
goog.provide("instaparse.repeat");
goog.require("cljs.core");
goog.require("instaparse.combinators_source");
goog.require("instaparse.auto_flatten_seq");
goog.require("instaparse.viz");
goog.require("instaparse.gll");
goog.require("instaparse.reduction");
goog.require("instaparse.auto_flatten_seq");
goog.require("instaparse.failure");
goog.require("instaparse.combinators_source");
goog.require("instaparse.gll");
goog.require("instaparse.failure");
goog.require("instaparse.reduction");
goog.require("instaparse.viz");
instaparse.repeat.empty_result_QMARK_ = function empty_result_QMARK_(result) {
  return cljs.core.vector_QMARK_.call(null, result) && cljs.core._EQ_.call(null, cljs.core.count.call(null, result), 1) || cljs.core.map_QMARK_.call(null, result) && cljs.core.contains_QMARK_.call(null, result, new cljs.core.Keyword(null, "tag", "tag", -1290361223)) && cljs.core.empty_QMARK_.call(null, cljs.core.get.call(null, result, new cljs.core.Keyword(null, "content", "content", 15833224))) || cljs.core.empty_QMARK_.call(null, result);
};
instaparse.repeat.failure_signal = instaparse.gll.__GT_Failure.call(null, null, null);
instaparse.repeat.get_end = function() {
  var get_end = null;
  var get_end__1 = function(parse) {
    var vec__14565 = instaparse.viz.span.call(null, parse);
    var start = cljs.core.nth.call(null, vec__14565, 0, null);
    var end = cljs.core.nth.call(null, vec__14565, 1, null);
    if (cljs.core.truth_(end)) {
      return cljs.core.long$.call(null, end);
    } else {
      return cljs.core.count.call(null, parse);
    }
  };
  var get_end__2 = function(parse, index) {
    var vec__14566 = instaparse.viz.span.call(null, parse);
    var start = cljs.core.nth.call(null, vec__14566, 0, null);
    var end = cljs.core.nth.call(null, vec__14566, 1, null);
    if (cljs.core.truth_(end)) {
      return cljs.core.long$.call(null, end);
    } else {
      return index + cljs.core.count.call(null, parse);
    }
  };
  get_end = function(parse, index) {
    switch(arguments.length) {
      case 1:
        return get_end__1.call(this, parse);
      case 2:
        return get_end__2.call(this, parse, index);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_end.cljs$core$IFn$_invoke$arity$1 = get_end__1;
  get_end.cljs$core$IFn$_invoke$arity$2 = get_end__2;
  return get_end;
}();
instaparse.repeat.parse_from_index = function parse_from_index(grammar, initial_parser, text, segment, index) {
  var tramp = instaparse.gll.make_tramp.call(null, grammar, text, segment);
  instaparse.gll.push_listener.call(null, tramp, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [index, initial_parser], null), instaparse.gll.TopListener.call(null, tramp));
  return instaparse.gll.run.call(null, tramp);
};
instaparse.repeat.select_parse = function select_parse(grammar, initial_parser, text, segment, index, parses) {
  var length = cljs.core.count.call(null, text);
  var parses__$1 = cljs.core.seq.call(null, parses);
  while (true) {
    if (parses__$1) {
      var parse = cljs.core.first.call(null, parses__$1);
      var vec__14568 = instaparse.viz.span.call(null, parse);
      var start = cljs.core.nth.call(null, vec__14568, 0, null);
      var end = cljs.core.nth.call(null, vec__14568, 1, null);
      var end__$1 = cljs.core.truth_(end) ? end : index + cljs.core.count.call(null, parse);
      if (cljs.core._EQ_.call(null, end__$1, length)) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [parse, end__$1, null], null);
      } else {
        var temp__4124__auto__ = cljs.core.seq.call(null, instaparse.repeat.parse_from_index.call(null, grammar, initial_parser, text, segment, end__$1));
        if (temp__4124__auto__) {
          var follow_ups = temp__4124__auto__;
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [parse, end__$1, follow_ups], null);
        } else {
          var G__14569 = cljs.core.next.call(null, parses__$1);
          parses__$1 = G__14569;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
instaparse.repeat.repeat_parse_hiccup = function() {
  var repeat_parse_hiccup = null;
  var repeat_parse_hiccup__5 = function(grammar, initial_parser, root_tag, text, segment) {
    return repeat_parse_hiccup.call(null, grammar, initial_parser, root_tag, text, segment, 0);
  };
  var repeat_parse_hiccup__6 = function(grammar, initial_parser, root_tag, text, segment, index) {
    var length = cljs.core.count.call(null, text);
    var first_result = instaparse.repeat.parse_from_index.call(null, grammar, initial_parser, text, segment, index);
    var index__$1 = cljs.core.long$.call(null, index);
    var parses = instaparse.auto_flatten_seq.auto_flatten_seq.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [root_tag], null));
    var G__14575 = instaparse.repeat.select_parse.call(null, grammar, initial_parser, text, segment, index__$1, first_result);
    var vec__14576 = G__14575;
    var parse = cljs.core.nth.call(null, vec__14576, 0, null);
    var end = cljs.core.nth.call(null, vec__14576, 1, null);
    var follow_ups = cljs.core.nth.call(null, vec__14576, 2, null);
    var selection = vec__14576;
    var index__$2 = index__$1;
    var parses__$1 = parses;
    var G__14575__$1 = G__14575;
    while (true) {
      var index__$3 = index__$2;
      var parses__$2 = parses__$1;
      var vec__14577 = G__14575__$1;
      var parse__$1 = cljs.core.nth.call(null, vec__14577, 0, null);
      var end__$1 = cljs.core.nth.call(null, vec__14577, 1, null);
      var follow_ups__$1 = cljs.core.nth.call(null, vec__14577, 2, null);
      var selection__$1 = vec__14577;
      if (selection__$1 == null) {
        return instaparse.repeat.failure_signal;
      } else {
        if (cljs.core._EQ_.call(null, index__$3, end__$1)) {
          return instaparse.repeat.failure_signal;
        } else {
          if (follow_ups__$1 == null) {
            return instaparse.gll.safe_with_meta.call(null, instaparse.auto_flatten_seq.convert_afs_to_vec.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, parses__$2, parse__$1)), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optimize", "optimize", -1912349448), new cljs.core.Keyword(null, "memory", "memory", -1449401430), new cljs.core.Keyword("instaparse.gll", "start-index", "instaparse.gll/start-index", 404653620), 0, new cljs.core.Keyword("instaparse.gll", 
            "end-index", "instaparse.gll/end-index", -1851404441), length], null));
          } else {
            var G__14578 = cljs.core.long$.call(null, end__$1);
            var G__14579 = instaparse.auto_flatten_seq.conj_flat.call(null, parses__$2, parse__$1);
            var G__14580 = instaparse.repeat.select_parse.call(null, grammar, initial_parser, text, segment, end__$1, follow_ups__$1);
            index__$2 = G__14578;
            parses__$1 = G__14579;
            G__14575__$1 = G__14580;
            continue;
          }
        }
      }
      break;
    }
  };
  repeat_parse_hiccup = function(grammar, initial_parser, root_tag, text, segment, index) {
    switch(arguments.length) {
      case 5:
        return repeat_parse_hiccup__5.call(this, grammar, initial_parser, root_tag, text, segment);
      case 6:
        return repeat_parse_hiccup__6.call(this, grammar, initial_parser, root_tag, text, segment, index);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat_parse_hiccup.cljs$core$IFn$_invoke$arity$5 = repeat_parse_hiccup__5;
  repeat_parse_hiccup.cljs$core$IFn$_invoke$arity$6 = repeat_parse_hiccup__6;
  return repeat_parse_hiccup;
}();
instaparse.repeat.repeat_parse_enlive = function() {
  var repeat_parse_enlive = null;
  var repeat_parse_enlive__5 = function(grammar, initial_parser, root_tag, text, segment) {
    return repeat_parse_enlive.call(null, grammar, initial_parser, root_tag, text, segment, 0);
  };
  var repeat_parse_enlive__6 = function(grammar, initial_parser, root_tag, text, segment, index) {
    var length = cljs.core.count.call(null, text);
    var first_result = instaparse.repeat.parse_from_index.call(null, grammar, initial_parser, text, segment, index);
    var index__$1 = cljs.core.long$.call(null, index);
    var parses = instaparse.auto_flatten_seq.EMPTY;
    var G__14586 = instaparse.repeat.select_parse.call(null, grammar, initial_parser, text, segment, index__$1, first_result);
    var vec__14587 = G__14586;
    var parse = cljs.core.nth.call(null, vec__14587, 0, null);
    var end = cljs.core.nth.call(null, vec__14587, 1, null);
    var follow_ups = cljs.core.nth.call(null, vec__14587, 2, null);
    var selection = vec__14587;
    var index__$2 = index__$1;
    var parses__$1 = parses;
    var G__14586__$1 = G__14586;
    while (true) {
      var index__$3 = index__$2;
      var parses__$2 = parses__$1;
      var vec__14588 = G__14586__$1;
      var parse__$1 = cljs.core.nth.call(null, vec__14588, 0, null);
      var end__$1 = cljs.core.nth.call(null, vec__14588, 1, null);
      var follow_ups__$1 = cljs.core.nth.call(null, vec__14588, 2, null);
      var selection__$1 = vec__14588;
      if (selection__$1 == null) {
        return instaparse.repeat.failure_signal;
      } else {
        if (cljs.core._EQ_.call(null, index__$3, end__$1)) {
          return instaparse.repeat.failure_signal;
        } else {
          if (follow_ups__$1 == null) {
            return instaparse.gll.safe_with_meta.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), root_tag, new cljs.core.Keyword(null, "content", "content", 15833224), cljs.core.seq.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, parses__$2, parse__$1))], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optimize", "optimize", -1912349448), new cljs.core.Keyword(null, "memory", "memory", -1449401430), 
            new cljs.core.Keyword("instaparse.gll", "start-index", "instaparse.gll/start-index", 404653620), 0, new cljs.core.Keyword("instaparse.gll", "end-index", "instaparse.gll/end-index", -1851404441), length], null));
          } else {
            var G__14589 = cljs.core.long$.call(null, end__$1);
            var G__14590 = instaparse.auto_flatten_seq.conj_flat.call(null, parses__$2, parse__$1);
            var G__14591 = instaparse.repeat.select_parse.call(null, grammar, initial_parser, text, segment, end__$1, follow_ups__$1);
            index__$2 = G__14589;
            parses__$1 = G__14590;
            G__14586__$1 = G__14591;
            continue;
          }
        }
      }
      break;
    }
  };
  repeat_parse_enlive = function(grammar, initial_parser, root_tag, text, segment, index) {
    switch(arguments.length) {
      case 5:
        return repeat_parse_enlive__5.call(this, grammar, initial_parser, root_tag, text, segment);
      case 6:
        return repeat_parse_enlive__6.call(this, grammar, initial_parser, root_tag, text, segment, index);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat_parse_enlive.cljs$core$IFn$_invoke$arity$5 = repeat_parse_enlive__5;
  repeat_parse_enlive.cljs$core$IFn$_invoke$arity$6 = repeat_parse_enlive__6;
  return repeat_parse_enlive;
}();
instaparse.repeat.repeat_parse_no_tag = function() {
  var repeat_parse_no_tag = null;
  var repeat_parse_no_tag__4 = function(grammar, initial_parser, text, segment) {
    return repeat_parse_no_tag.call(null, grammar, initial_parser, text, segment, 0);
  };
  var repeat_parse_no_tag__5 = function(grammar, initial_parser, text, segment, index) {
    var length = cljs.core.count.call(null, text);
    var first_result = instaparse.repeat.parse_from_index.call(null, grammar, initial_parser, text, segment, index);
    var index__$1 = cljs.core.long$.call(null, index);
    var parses = instaparse.auto_flatten_seq.EMPTY;
    var G__14597 = instaparse.repeat.select_parse.call(null, grammar, initial_parser, text, segment, index__$1, first_result);
    var vec__14598 = G__14597;
    var parse = cljs.core.nth.call(null, vec__14598, 0, null);
    var end = cljs.core.nth.call(null, vec__14598, 1, null);
    var follow_ups = cljs.core.nth.call(null, vec__14598, 2, null);
    var selection = vec__14598;
    var index__$2 = index__$1;
    var parses__$1 = parses;
    var G__14597__$1 = G__14597;
    while (true) {
      var index__$3 = index__$2;
      var parses__$2 = parses__$1;
      var vec__14599 = G__14597__$1;
      var parse__$1 = cljs.core.nth.call(null, vec__14599, 0, null);
      var end__$1 = cljs.core.nth.call(null, vec__14599, 1, null);
      var follow_ups__$1 = cljs.core.nth.call(null, vec__14599, 2, null);
      var selection__$1 = vec__14599;
      if (selection__$1 == null) {
        return instaparse.repeat.failure_signal;
      } else {
        if (cljs.core._EQ_.call(null, index__$3, end__$1)) {
          return instaparse.repeat.failure_signal;
        } else {
          if (follow_ups__$1 == null) {
            return instaparse.gll.safe_with_meta.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, parses__$2, parse__$1), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optimize", "optimize", -1912349448), new cljs.core.Keyword(null, "memory", "memory", -1449401430), new cljs.core.Keyword("instaparse.gll", "start-index", "instaparse.gll/start-index", 404653620), 0, new cljs.core.Keyword("instaparse.gll", "end-index", "instaparse.gll/end-index", -1851404441), length], 
            null));
          } else {
            var G__14600 = cljs.core.long$.call(null, end__$1);
            var G__14601 = instaparse.auto_flatten_seq.conj_flat.call(null, parses__$2, parse__$1);
            var G__14602 = instaparse.repeat.select_parse.call(null, grammar, initial_parser, text, segment, end__$1, follow_ups__$1);
            index__$2 = G__14600;
            parses__$1 = G__14601;
            G__14597__$1 = G__14602;
            continue;
          }
        }
      }
      break;
    }
  };
  repeat_parse_no_tag = function(grammar, initial_parser, text, segment, index) {
    switch(arguments.length) {
      case 4:
        return repeat_parse_no_tag__4.call(this, grammar, initial_parser, text, segment);
      case 5:
        return repeat_parse_no_tag__5.call(this, grammar, initial_parser, text, segment, index);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat_parse_no_tag.cljs$core$IFn$_invoke$arity$4 = repeat_parse_no_tag__4;
  repeat_parse_no_tag.cljs$core$IFn$_invoke$arity$5 = repeat_parse_no_tag__5;
  return repeat_parse_no_tag;
}();
instaparse.repeat.repeat_parse = function() {
  var repeat_parse = null;
  var repeat_parse__4 = function(grammar, initial_parser, output_format, text) {
    return instaparse.repeat.repeat_parse_no_tag.call(null, grammar, initial_parser, text, instaparse.gll.string__GT_segment.call(null, text));
  };
  var repeat_parse__5 = function(grammar, initial_parser, output_format, root_tag, text) {
    if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), null, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), null], null), null)).call(null, output_format))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), null, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), null], null), null), new cljs.core.Symbol(null, "output-format", "output-format", -185851149, null)))));
    }
    if (cljs.core._EQ_.call(null, output_format, new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238))) {
      return instaparse.repeat.repeat_parse_hiccup.call(null, grammar, initial_parser, root_tag, text, instaparse.gll.string__GT_segment.call(null, text));
    } else {
      if (cljs.core._EQ_.call(null, output_format, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921))) {
        return instaparse.repeat.repeat_parse_enlive.call(null, grammar, initial_parser, root_tag, text, instaparse.gll.string__GT_segment.call(null, text));
      } else {
        return null;
      }
    }
  };
  repeat_parse = function(grammar, initial_parser, output_format, root_tag, text) {
    switch(arguments.length) {
      case 4:
        return repeat_parse__4.call(this, grammar, initial_parser, output_format, root_tag);
      case 5:
        return repeat_parse__5.call(this, grammar, initial_parser, output_format, root_tag, text);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat_parse.cljs$core$IFn$_invoke$arity$4 = repeat_parse__4;
  repeat_parse.cljs$core$IFn$_invoke$arity$5 = repeat_parse__5;
  return repeat_parse;
}();
instaparse.repeat.repeat_parse_with_header = function repeat_parse_with_header(grammar, header_parser, repeating_parser, output_format, root_tag, text) {
  var segment = instaparse.gll.string__GT_segment.call(null, text);
  var length = cljs.core.count.call(null, text);
  var header_results = instaparse.repeat.parse_from_index.call(null, grammar, header_parser, text, segment, 0);
  if (cljs.core.truth_(function() {
    var or__3640__auto__ = cljs.core.empty_QMARK_.call(null, header_results);
    if (or__3640__auto__) {
      return or__3640__auto__;
    } else {
      return(new cljs.core.Keyword(null, "hide", "hide", -596913169)).cljs$core$IFn$_invoke$arity$1(header_parser);
    }
  }())) {
    return instaparse.repeat.failure_signal;
  } else {
    var header_result = cljs.core.apply.call(null, cljs.core.max_key, instaparse.repeat.get_end, header_results);
    var end = instaparse.repeat.get_end.call(null, header_result);
    var repeat_result = instaparse.repeat.repeat_parse_no_tag.call(null, grammar, (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(repeating_parser), text, segment, end);
    var span_meta = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "optimize", "optimize", -1912349448), new cljs.core.Keyword(null, "memory", "memory", -1449401430), new cljs.core.Keyword("instaparse.gll", "start-index", "instaparse.gll/start-index", 404653620), 0, new cljs.core.Keyword("instaparse.gll", "end-index", "instaparse.gll/end-index", -1851404441), length], null);
    if (repeat_result instanceof instaparse.gll.Failure || cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(repeating_parser), new cljs.core.Keyword(null, "star", "star", 279424429)) && instaparse.repeat.empty_result_QMARK_.call(null, repeat_result)) {
      return instaparse.repeat.failure_signal;
    } else {
      var G__14604 = output_format instanceof cljs.core.Keyword ? output_format.fqn : null;
      switch(G__14604) {
        case "hiccup":
          return instaparse.gll.safe_with_meta.call(null, instaparse.auto_flatten_seq.convert_afs_to_vec.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.auto_flatten_seq.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [root_tag], null)), header_result), repeat_result)), span_meta);
          break;
        case "enlive":
          return instaparse.gll.safe_with_meta.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), root_tag, new cljs.core.Keyword(null, "content", "content", 15833224), instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.EMPTY, header_result), repeat_result)], null), span_meta);
          break;
        default:
          return instaparse.gll.safe_with_meta.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.conj_flat.call(null, instaparse.auto_flatten_seq.EMPTY, header_result), repeat_result), span_meta);
      }
    }
  }
};
instaparse.repeat.try_repeating_parse_strategy_with_header = function try_repeating_parse_strategy_with_header(grammar, text, start_production, start_rule, output_format) {
  var parsers = (new cljs.core.Keyword(null, "parsers", "parsers", -804353827)).cljs$core$IFn$_invoke$arity$1(start_rule);
  var repeating_parser = cljs.core.last.call(null, parsers);
  if (cljs.core.not.call(null, function() {
    var and__3628__auto__ = cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(start_rule), new cljs.core.Keyword(null, "cat", "cat", -1457810207));
    if (and__3628__auto__) {
      var and__3628__auto____$1 = (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "star", "star", 279424429), null, new cljs.core.Keyword(null, "plus", "plus", 211540661), null], null), null)).call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(repeating_parser));
      if (cljs.core.truth_(and__3628__auto____$1)) {
        return cljs.core.not.call(null, (new cljs.core.Keyword(null, "hide", "hide", -596913169)).cljs$core$IFn$_invoke$arity$1(repeating_parser)) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "hide", "hide", -596913169)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(repeating_parser)));
      } else {
        return and__3628__auto____$1;
      }
    } else {
      return and__3628__auto__;
    }
  }())) {
    return instaparse.repeat.failure_signal;
  } else {
    var header_parser = cljs.core.apply.call(null, instaparse.combinators_source.cat, cljs.core.butlast.call(null, parsers));
    if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(start_rule), instaparse.reduction.raw_non_terminal_reduction)) {
      return instaparse.repeat.repeat_parse_with_header.call(null, grammar, header_parser, repeating_parser, null, start_production, text);
    } else {
      return instaparse.repeat.repeat_parse_with_header.call(null, grammar, header_parser, repeating_parser, output_format, start_production, text);
    }
  }
};
instaparse.repeat.try_repeating_parse_strategy = function try_repeating_parse_strategy(parser, text, start_production) {
  var grammar = (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser);
  var output_format = (new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)).cljs$core$IFn$_invoke$arity$1(parser);
  var start_rule = cljs.core.get.call(null, grammar, start_production);
  if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "hide", "hide", -596913169)).cljs$core$IFn$_invoke$arity$1(start_rule), true)) {
    return instaparse.repeat.failure_signal;
  } else {
    if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "red", "red", -969428204)).cljs$core$IFn$_invoke$arity$1(start_rule), instaparse.reduction.raw_non_terminal_reduction)) {
      if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(start_rule), new cljs.core.Keyword(null, "star", "star", 279424429))) {
        return instaparse.repeat.repeat_parse.call(null, grammar, (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(start_rule), output_format, text);
      } else {
        if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(start_rule), new cljs.core.Keyword(null, "plus", "plus", 211540661))) {
          var result = instaparse.repeat.repeat_parse.call(null, grammar, (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(start_rule), output_format, text);
          if (instaparse.repeat.empty_result_QMARK_.call(null, result)) {
            return instaparse.repeat.failure_signal;
          } else {
            return result;
          }
        } else {
          return instaparse.repeat.try_repeating_parse_strategy_with_header.call(null, grammar, text, start_production, start_rule, output_format);
        }
      }
    } else {
      if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(start_rule), new cljs.core.Keyword(null, "star", "star", 279424429))) {
        return instaparse.repeat.repeat_parse.call(null, grammar, (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(start_rule), output_format, start_production, text);
      } else {
        if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(start_rule), new cljs.core.Keyword(null, "plus", "plus", 211540661))) {
          var result = instaparse.repeat.repeat_parse.call(null, grammar, (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(start_rule), output_format, start_production, text);
          if (instaparse.repeat.empty_result_QMARK_.call(null, result)) {
            return instaparse.repeat.failure_signal;
          } else {
            return result;
          }
        } else {
          return instaparse.repeat.try_repeating_parse_strategy_with_header.call(null, grammar, text, start_production, start_rule, output_format);
        }
      }
    }
  }
};
instaparse.repeat.used_memory_optimization_QMARK_ = function used_memory_optimization_QMARK_(tree) {
  return cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "memory", "memory", -1449401430), (new cljs.core.Keyword(null, "optimize", "optimize", -1912349448)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, tree)));
};
goog.provide("instaparse.core");
goog.require("cljs.core");
goog.require("instaparse.transform");
goog.require("instaparse.combinators_source");
goog.require("instaparse.abnf");
goog.require("instaparse.gll");
goog.require("instaparse.print");
goog.require("instaparse.cfg");
goog.require("instaparse.reduction");
goog.require("instaparse.transform");
goog.require("instaparse.cfg");
goog.require("instaparse.abnf");
goog.require("instaparse.failure");
goog.require("instaparse.print");
goog.require("instaparse.combinators_source");
goog.require("instaparse.gll");
goog.require("instaparse.failure");
goog.require("instaparse.reduction");
goog.require("instaparse.repeat");
goog.require("instaparse.repeat");
instaparse.core._STAR_default_output_format_STAR_ = new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238);
instaparse.core.set_default_output_format_BANG_ = function set_default_output_format_BANG_(type) {
  if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), null, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), null], null), null)).call(null, type))) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), null, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), null], null), null), new cljs.core.Symbol(null, "type", "type", -1480165421, null)))));
  }
  return instaparse.core._STAR_default_output_format_STAR_ = type;
};
instaparse.core._STAR_default_input_format_STAR_ = new cljs.core.Keyword(null, "ebnf", "ebnf", 31967825);
instaparse.core.set_default_input_format_BANG_ = function set_default_input_format_BANG_(type) {
  if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ebnf", "ebnf", 31967825), null, new cljs.core.Keyword(null, "abnf", "abnf", -152462052), null], null), null)).call(null, type))) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ebnf", "ebnf", 31967825), null, new cljs.core.Keyword(null, "abnf", "abnf", -152462052), null], null), null), new cljs.core.Symbol(null, "type", "type", -1480165421, null)))));
  }
  return instaparse.core._STAR_default_input_format_STAR_ = type;
};
instaparse.core.unhide_parser = function unhide_parser(parser, unhide) {
  var G__14533 = unhide;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "all", "all", 892129742), G__14533)) {
    return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), instaparse.combinators_source.unhide_all.call(null, (new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)).cljs$core$IFn$_invoke$arity$1(parser), (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser)));
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "tags", "tags", 1771418977), G__14533)) {
      return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), instaparse.combinators_source.unhide_tags.call(null, (new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)).cljs$core$IFn$_invoke$arity$1(parser), (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser)));
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "content", "content", 15833224), G__14533)) {
        return cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), instaparse.combinators_source.unhide_all_content.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser)));
      } else {
        if (cljs.core._EQ_.call(null, null, G__14533)) {
          return parser;
        } else {
          throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(unhide));
        }
      }
    }
  }
};
instaparse.core.parse = function() {
  var parse__delegate = function(parser, text, p__14534) {
    var map__14536 = p__14534;
    var map__14536__$1 = cljs.core.seq_QMARK_.call(null, map__14536) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14536) : map__14536;
    var options = map__14536__$1;
    if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [null, null, new cljs.core.Keyword(null, "tags", "tags", 1771418977), null, new cljs.core.Keyword(null, "content", "content", 15833224), null, new cljs.core.Keyword(null, "all", "all", 892129742), null], null), null), cljs.core.get.call(null, options, new cljs.core.Keyword(null, "unhide", "unhide", -413983695)))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [null, null, new cljs.core.Keyword(null, "tags", "tags", 1771418977), null, new cljs.core.Keyword(null, "content", "content", 15833224), null, new cljs.core.Keyword(null, "all", "all", 892129742), null], null), null), cljs.core.list(new cljs.core.Symbol(null, 
      "get", "get", -971253014, null), new cljs.core.Symbol(null, "options", "options", 1740170016, null), new cljs.core.Keyword(null, "unhide", "unhide", -413983695))))));
    }
    if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [null, null, new cljs.core.Keyword(null, "memory", "memory", -1449401430), null], null), null), cljs.core.get.call(null, options, new cljs.core.Keyword(null, "optimize", "optimize", -1912349448)))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [null, null, new cljs.core.Keyword(null, "memory", "memory", -1449401430), null], null), null), cljs.core.list(new cljs.core.Symbol(null, "get", "get", -971253014, null), new cljs.core.Symbol(null, "options", "options", 
      1740170016, null), new cljs.core.Keyword(null, "optimize", "optimize", -1912349448))))));
    }
    var start_production = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "start", "start", -355208981), (new cljs.core.Keyword(null, "start-production", "start-production", 687546537)).cljs$core$IFn$_invoke$arity$1(parser));
    var partial_QMARK_ = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "partial", "partial", 241141745), false);
    var optimize_QMARK_ = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "optimize", "optimize", -1912349448), false);
    var unhide = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "unhide", "unhide", -413983695));
    var parser__$1 = instaparse.core.unhide_parser.call(null, parser, unhide);
    if (cljs.core.truth_((new cljs.core.Keyword(null, "total", "total", 1916810418)).cljs$core$IFn$_invoke$arity$1(options))) {
      return instaparse.gll.parse_total.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser__$1), start_production, text, partial_QMARK_, instaparse.reduction.node_builders.call(null, (new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)).cljs$core$IFn$_invoke$arity$1(parser__$1)));
    } else {
      if (cljs.core.truth_(function() {
        var and__3628__auto__ = optimize_QMARK_;
        if (cljs.core.truth_(and__3628__auto__)) {
          return cljs.core.not.call(null, partial_QMARK_);
        } else {
          return and__3628__auto__;
        }
      }())) {
        var result = instaparse.repeat.try_repeating_parse_strategy.call(null, parser__$1, text, start_production);
        if (cljs.core.truth_(instaparse.core.failure_QMARK_.call(null, result))) {
          return instaparse.gll.parse.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser__$1), start_production, text, partial_QMARK_);
        } else {
          return result;
        }
      } else {
        return instaparse.gll.parse.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser__$1), start_production, text, partial_QMARK_);
      }
    }
  };
  var parse = function(parser, text, var_args) {
    var p__14534 = null;
    if (arguments.length > 2) {
      p__14534 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return parse__delegate.call(this, parser, text, p__14534);
  };
  parse.cljs$lang$maxFixedArity = 2;
  parse.cljs$lang$applyTo = function(arglist__14537) {
    var parser = cljs.core.first(arglist__14537);
    arglist__14537 = cljs.core.next(arglist__14537);
    var text = cljs.core.first(arglist__14537);
    var p__14534 = cljs.core.rest(arglist__14537);
    return parse__delegate(parser, text, p__14534);
  };
  parse.cljs$core$IFn$_invoke$arity$variadic = parse__delegate;
  return parse;
}();
instaparse.core.parses = function() {
  var parses__delegate = function(parser, text, p__14538) {
    var map__14540 = p__14538;
    var map__14540__$1 = cljs.core.seq_QMARK_.call(null, map__14540) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14540) : map__14540;
    var options = map__14540__$1;
    if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [null, null, new cljs.core.Keyword(null, "tags", "tags", 1771418977), null, new cljs.core.Keyword(null, "content", "content", 15833224), null, new cljs.core.Keyword(null, "all", "all", 892129742), null], null), null), cljs.core.get.call(null, options, new cljs.core.Keyword(null, "unhide", "unhide", -413983695)))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [null, null, new cljs.core.Keyword(null, "tags", "tags", 1771418977), null, new cljs.core.Keyword(null, "content", "content", 15833224), null, new cljs.core.Keyword(null, "all", "all", 892129742), null], null), null), cljs.core.list(new cljs.core.Symbol(null, 
      "get", "get", -971253014, null), new cljs.core.Symbol(null, "options", "options", 1740170016, null), new cljs.core.Keyword(null, "unhide", "unhide", -413983695))))));
    }
    var start_production = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "start", "start", -355208981), (new cljs.core.Keyword(null, "start-production", "start-production", 687546537)).cljs$core$IFn$_invoke$arity$1(parser));
    var partial_QMARK_ = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "partial", "partial", 241141745), false);
    var unhide = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "unhide", "unhide", -413983695));
    var parser__$1 = instaparse.core.unhide_parser.call(null, parser, unhide);
    if (cljs.core.truth_((new cljs.core.Keyword(null, "total", "total", 1916810418)).cljs$core$IFn$_invoke$arity$1(options))) {
      return instaparse.gll.parses_total.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser__$1), start_production, text, partial_QMARK_, instaparse.reduction.node_builders.call(null, (new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)).cljs$core$IFn$_invoke$arity$1(parser__$1)));
    } else {
      return instaparse.gll.parses.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(parser__$1), start_production, text, partial_QMARK_);
    }
  };
  var parses = function(parser, text, var_args) {
    var p__14538 = null;
    if (arguments.length > 2) {
      p__14538 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return parses__delegate.call(this, parser, text, p__14538);
  };
  parses.cljs$lang$maxFixedArity = 2;
  parses.cljs$lang$applyTo = function(arglist__14541) {
    var parser = cljs.core.first(arglist__14541);
    arglist__14541 = cljs.core.next(arglist__14541);
    var text = cljs.core.first(arglist__14541);
    var p__14538 = cljs.core.rest(arglist__14541);
    return parses__delegate(parser, text, p__14538);
  };
  parses.cljs$core$IFn$_invoke$arity$variadic = parses__delegate;
  return parses;
}();
instaparse.core.Parser = function(grammar, start_production, output_format, __meta, __extmap) {
  this.grammar = grammar;
  this.start_production = start_production;
  this.output_format = output_format;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667595;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 3) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
instaparse.core.Parser.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4236__auto__, k__4237__auto__) {
  var self__ = this;
  var this__4236__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4236__auto____$1, k__4237__auto__, null);
};
instaparse.core.Parser.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4238__auto__, k14543, else__4239__auto__) {
  var self__ = this;
  var this__4238__auto____$1 = this;
  var G__14546 = k14543 instanceof cljs.core.Keyword ? k14543.fqn : null;
  switch(G__14546) {
    case "output-format":
      return self__.output_format;
      break;
    case "start-production":
      return self__.start_production;
      break;
    case "grammar":
      return self__.grammar;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k14543, else__4239__auto__);
  }
};
instaparse.core.Parser.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4250__auto__, writer__4251__auto__, opts__4252__auto__) {
  var self__ = this;
  var this__4250__auto____$1 = this;
  var pr_pair__4253__auto__ = function(this__4250__auto____$1) {
    return function(keyval__4254__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4251__auto__, cljs.core.pr_writer, "", " ", "", opts__4252__auto__, keyval__4254__auto__);
    };
  }(this__4250__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4251__auto__, pr_pair__4253__auto__, "#instaparse.core.Parser{", ", ", "}", opts__4252__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), self__.grammar], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "start-production", "start-production", 687546537), self__.start_production], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), self__.output_format], null)], null), self__.__extmap));
};
instaparse.core.Parser.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4234__auto__) {
  var self__ = this;
  var this__4234__auto____$1 = this;
  return self__.__meta;
};
instaparse.core.Parser.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4230__auto__) {
  var self__ = this;
  var this__4230__auto____$1 = this;
  return new instaparse.core.Parser(self__.grammar, self__.start_production, self__.output_format, self__.__meta, self__.__extmap, self__.__hash);
};
instaparse.core.Parser.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4240__auto__) {
  var self__ = this;
  var this__4240__auto____$1 = this;
  return 3 + cljs.core.count.call(null, self__.__extmap);
};
instaparse.core.Parser.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4231__auto__) {
  var self__ = this;
  var this__4231__auto____$1 = this;
  var h__4051__auto__ = self__.__hash;
  if (!(h__4051__auto__ == null)) {
    return h__4051__auto__;
  } else {
    var h__4051__auto____$1 = cljs.core.hash_imap.call(null, this__4231__auto____$1);
    self__.__hash = h__4051__auto____$1;
    return h__4051__auto____$1;
  }
};
instaparse.core.Parser.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4232__auto__, other__4233__auto__) {
  var self__ = this;
  var this__4232__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3628__auto__ = other__4233__auto__;
    if (cljs.core.truth_(and__3628__auto__)) {
      return this__4232__auto____$1.constructor === other__4233__auto__.constructor && cljs.core.equiv_map.call(null, this__4232__auto____$1, other__4233__auto__);
    } else {
      return and__3628__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
instaparse.core.Parser.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4245__auto__, k__4246__auto__) {
  var self__ = this;
  var this__4245__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "start-production", "start-production", 687546537), null, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), null, new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), null], null), null), k__4246__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4245__auto____$1), self__.__meta), k__4246__auto__);
  } else {
    return new instaparse.core.Parser(self__.grammar, self__.start_production, self__.output_format, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4246__auto__)), null);
  }
};
instaparse.core.Parser.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4243__auto__, k__4244__auto__, G__14542) {
  var self__ = this;
  var this__4243__auto____$1 = this;
  var pred__14547 = cljs.core.keyword_identical_QMARK_;
  var expr__14548 = k__4244__auto__;
  if (cljs.core.truth_(pred__14547.call(null, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), expr__14548))) {
    return new instaparse.core.Parser(G__14542, self__.start_production, self__.output_format, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__14547.call(null, new cljs.core.Keyword(null, "start-production", "start-production", 687546537), expr__14548))) {
      return new instaparse.core.Parser(self__.grammar, G__14542, self__.output_format, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__14547.call(null, new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), expr__14548))) {
        return new instaparse.core.Parser(self__.grammar, self__.start_production, G__14542, self__.__meta, self__.__extmap, null);
      } else {
        return new instaparse.core.Parser(self__.grammar, self__.start_production, self__.output_format, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4244__auto__, G__14542), null);
      }
    }
  }
};
instaparse.core.Parser.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4248__auto__) {
  var self__ = this;
  var this__4248__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), self__.grammar], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start-production", "start-production", 687546537), self__.start_production], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), self__.output_format], null)], null), self__.__extmap));
};
instaparse.core.Parser.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4235__auto__, G__14542) {
  var self__ = this;
  var this__4235__auto____$1 = this;
  return new instaparse.core.Parser(self__.grammar, self__.start_production, self__.output_format, G__14542, self__.__extmap, self__.__hash);
};
instaparse.core.Parser.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4241__auto__, entry__4242__auto__) {
  var self__ = this;
  var this__4241__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4242__auto__)) {
    return cljs.core._assoc.call(null, this__4241__auto____$1, cljs.core._nth.call(null, entry__4242__auto__, 0), cljs.core._nth.call(null, entry__4242__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4241__auto____$1, entry__4242__auto__);
  }
};
instaparse.core.Parser.prototype.call = function() {
  var G__14551 = null;
  var G__14551__2 = function(self__, text) {
    var self__ = this;
    var self____$1 = this;
    var parser = self____$1;
    return instaparse.core.parse.call(null, parser, text);
  };
  var G__14551__4 = function(self__, text, key1, val1) {
    var self__ = this;
    var self____$1 = this;
    var parser = self____$1;
    return instaparse.core.parse.call(null, parser, text, key1, val1);
  };
  var G__14551__6 = function(self__, text, key1, val1, key2, val2) {
    var self__ = this;
    var self____$1 = this;
    var parser = self____$1;
    return instaparse.core.parse.call(null, parser, text, key1, val1, key2, val2);
  };
  var G__14551__8 = function(self__, text, key1, val1, key2, val2, key3, val3) {
    var self__ = this;
    var self____$1 = this;
    var parser = self____$1;
    return instaparse.core.parse.call(null, parser, text, key1, val1, key2, val2, key3, val3);
  };
  G__14551 = function(self__, text, key1, val1, key2, val2, key3, val3) {
    switch(arguments.length) {
      case 2:
        return G__14551__2.call(this, self__, text);
      case 4:
        return G__14551__4.call(this, self__, text, key1, val1);
      case 6:
        return G__14551__6.call(this, self__, text, key1, val1, key2, val2);
      case 8:
        return G__14551__8.call(this, self__, text, key1, val1, key2, val2, key3, val3);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14551.cljs$core$IFn$_invoke$arity$2 = G__14551__2;
  G__14551.cljs$core$IFn$_invoke$arity$4 = G__14551__4;
  G__14551.cljs$core$IFn$_invoke$arity$6 = G__14551__6;
  G__14551.cljs$core$IFn$_invoke$arity$8 = G__14551__8;
  return G__14551;
}();
instaparse.core.Parser.prototype.apply = function(self__, args14545) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14545)));
};
instaparse.core.Parser.prototype.cljs$core$IFn$_invoke$arity$1 = function(text) {
  var self__ = this;
  var parser = this;
  return instaparse.core.parse.call(null, parser, text);
};
instaparse.core.Parser.prototype.cljs$core$IFn$_invoke$arity$3 = function(text, key1, val1) {
  var self__ = this;
  var parser = this;
  return instaparse.core.parse.call(null, parser, text, key1, val1);
};
instaparse.core.Parser.prototype.cljs$core$IFn$_invoke$arity$5 = function(text, key1, val1, key2, val2) {
  var self__ = this;
  var parser = this;
  return instaparse.core.parse.call(null, parser, text, key1, val1, key2, val2);
};
instaparse.core.Parser.prototype.cljs$core$IFn$_invoke$arity$7 = function(text, key1, val1, key2, val2, key3, val3) {
  var self__ = this;
  var parser = this;
  return instaparse.core.parse.call(null, parser, text, key1, val1, key2, val2, key3, val3);
};
instaparse.core.Parser.cljs$lang$type = true;
instaparse.core.Parser.cljs$lang$ctorPrSeq = function(this__4270__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "instaparse.core/Parser");
};
instaparse.core.Parser.cljs$lang$ctorPrWriter = function(this__4270__auto__, writer__4271__auto__) {
  return cljs.core._write.call(null, writer__4271__auto__, "instaparse.core/Parser");
};
instaparse.core.__GT_Parser = function __GT_Parser(grammar, start_production, output_format) {
  return new instaparse.core.Parser(grammar, start_production, output_format);
};
instaparse.core.map__GT_Parser = function map__GT_Parser(G__14544) {
  return new instaparse.core.Parser((new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(G__14544), (new cljs.core.Keyword(null, "start-production", "start-production", 687546537)).cljs$core$IFn$_invoke$arity$1(G__14544), (new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)).cljs$core$IFn$_invoke$arity$1(G__14544), null, cljs.core.dissoc.call(null, G__14544, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), new cljs.core.Keyword(null, 
  "start-production", "start-production", 687546537), new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)));
};
instaparse.core.Parser.prototype.cljs$core$IPrintWithWriter$ = true;
instaparse.core.Parser.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(parser, writer, _) {
  var parser__$1 = this;
  return cljs.core._write.call(null, writer, instaparse.print.Parser__GT_str.call(null, parser__$1));
};
instaparse.core.parser = function() {
  var parser__delegate = function(grammar_specification, p__14552) {
    var map__14557 = p__14552;
    var map__14557__$1 = cljs.core.seq_QMARK_.call(null, map__14557) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14557) : map__14557;
    var options = map__14557__$1;
    if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [null, null, new cljs.core.Keyword(null, "ebnf", "ebnf", 31967825), null, new cljs.core.Keyword(null, "abnf", "abnf", -152462052), null], null), null), cljs.core.get.call(null, options, new cljs.core.Keyword(null, "input-format", "input-format", -422703481)))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [null, null, new cljs.core.Keyword(null, "ebnf", "ebnf", 31967825), null, new cljs.core.Keyword(null, "abnf", "abnf", -152462052), null], null), null), cljs.core.list(new cljs.core.Symbol(null, "get", "get", -971253014, 
      null), new cljs.core.Symbol(null, "options", "options", 1740170016, null), new cljs.core.Keyword(null, "input-format", "input-format", -422703481))))));
    }
    if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [null, null, new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), null, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), null], null), null), cljs.core.get.call(null, options, new cljs.core.Keyword(null, "output-format", "output-format", -1826382676)))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [null, null, new cljs.core.Keyword(null, "hiccup", "hiccup", 1218876238), null, new cljs.core.Keyword(null, "enlive", "enlive", 1679023921), null], null), null), cljs.core.list(new cljs.core.Symbol(null, "get", "get", -971253014, 
      null), new cljs.core.Symbol(null, "options", "options", 1740170016, null), new cljs.core.Keyword(null, "output-format", "output-format", -1826382676))))));
    }
    if (function() {
      var ws_parser = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "auto-whitespace", "auto-whitespace", 741152317));
      return ws_parser == null || cljs.core.contains_QMARK_.call(null, instaparse.core.standard_whitespace_parsers, ws_parser) || cljs.core.map_QMARK_.call(null, ws_parser) && cljs.core.contains_QMARK_.call(null, ws_parser, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)) && cljs.core.contains_QMARK_.call(null, ws_parser, new cljs.core.Keyword(null, "start-production", "start-production", 687546537));
    }()) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "let", "let", 358118826, null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ws-parser", "ws-parser", 937152647, null), cljs.core.list(new cljs.core.Symbol(null, "get", "get", -971253014, null), new cljs.core.Symbol(null, "options", "options", 1740170016, null), new cljs.core.Keyword(null, 
      "auto-whitespace", "auto-whitespace", 741152317))], null), cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "ws-parser", "ws-parser", 937152647, null)), cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.Symbol(null, "standard-whitespace-parsers", "standard-whitespace-parsers", -1387573457, null), new cljs.core.Symbol(null, 
      "ws-parser", "ws-parser", 937152647, null)), cljs.core.list(new cljs.core.Symbol(null, "and", "and", 668631710, null), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "ws-parser", "ws-parser", 937152647, null)), cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -1676812576, null), new cljs.core.Symbol(null, "ws-parser", "ws-parser", 937152647, null), new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)), cljs.core.list(new cljs.core.Symbol(null, 
      "contains?", "contains?", -1676812576, null), new cljs.core.Symbol(null, "ws-parser", "ws-parser", 937152647, null), new cljs.core.Keyword(null, "start-production", "start-production", 687546537))))))));
    }
    var input_format = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "input-format", "input-format", -422703481), instaparse.core._STAR_default_input_format_STAR_);
    var build_parser = function() {
      var G__14558 = input_format instanceof cljs.core.Keyword ? input_format.fqn : null;
      switch(G__14558) {
        case "ebnf":
          if (cljs.core.truth_(cljs.core.get.call(null, options, new cljs.core.Keyword(null, "string-ci", "string-ci", 374631805)))) {
            return function(G__14558, input_format, map__14557, map__14557__$1, options) {
              return function(spec, output_format) {
                var _STAR_case_insensitive_literals_STAR_14559 = instaparse.cfg._STAR_case_insensitive_literals_STAR_;
                try {
                  instaparse.cfg._STAR_case_insensitive_literals_STAR_ = true;
                  return instaparse.cfg.build_parser.call(null, spec, output_format);
                } finally {
                  instaparse.cfg._STAR_case_insensitive_literals_STAR_ = _STAR_case_insensitive_literals_STAR_14559;
                }
              };
            }(G__14558, input_format, map__14557, map__14557__$1, options);
          } else {
            return instaparse.cfg.build_parser;
          }
          break;
        case "abnf":
          return instaparse.abnf.build_parser;
          break;
        default:
          throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(input_format));;
      }
    }();
    var output_format = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "output-format", "output-format", -1826382676), instaparse.core._STAR_default_output_format_STAR_);
    var start = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "start", "start", -355208981), null);
    var built_parser = typeof grammar_specification === "string" ? function() {
      var parser__$1 = build_parser.call(null, grammar_specification, output_format);
      if (cljs.core.truth_(start)) {
        return instaparse.core.map__GT_Parser.call(null, cljs.core.assoc.call(null, parser__$1, new cljs.core.Keyword(null, "start-production", "start-production", 687546537), start));
      } else {
        return instaparse.core.map__GT_Parser.call(null, parser__$1);
      }
    }() : cljs.core.map_QMARK_.call(null, grammar_specification) ? function() {
      var parser__$1 = instaparse.cfg.build_parser_from_combinators.call(null, grammar_specification, output_format, start);
      return instaparse.core.map__GT_Parser.call(null, parser__$1);
    }() : cljs.core.vector_QMARK_.call(null, grammar_specification) ? function() {
      var start__$1 = cljs.core.truth_(start) ? start : grammar_specification.call(null, 0);
      var parser__$1 = instaparse.cfg.build_parser_from_combinators.call(null, cljs.core.apply.call(null, cljs.core.hash_map, grammar_specification), output_format, start__$1);
      return instaparse.core.map__GT_Parser.call(null, parser__$1);
    }() : null;
    var auto_whitespace = cljs.core.get.call(null, options, new cljs.core.Keyword(null, "auto-whitespace", "auto-whitespace", 741152317));
    var whitespace_parser = auto_whitespace instanceof cljs.core.Keyword ? cljs.core.get.call(null, instaparse.core.standard_whitespace_parsers, auto_whitespace) : auto_whitespace;
    var temp__4124__auto__ = whitespace_parser;
    if (cljs.core.truth_(temp__4124__auto__)) {
      var map__14560 = temp__4124__auto__;
      var map__14560__$1 = cljs.core.seq_QMARK_.call(null, map__14560) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14560) : map__14560;
      var ws_grammar = cljs.core.get.call(null, map__14560__$1, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267));
      var ws_start = cljs.core.get.call(null, map__14560__$1, new cljs.core.Keyword(null, "start-production", "start-production", 687546537));
      return cljs.core.assoc.call(null, built_parser, new cljs.core.Keyword(null, "grammar", "grammar", 1881328267), instaparse.combinators_source.auto_whitespace.call(null, (new cljs.core.Keyword(null, "grammar", "grammar", 1881328267)).cljs$core$IFn$_invoke$arity$1(built_parser), (new cljs.core.Keyword(null, "start-production", "start-production", 687546537)).cljs$core$IFn$_invoke$arity$1(built_parser), ws_grammar, ws_start));
    } else {
      return built_parser;
    }
  };
  var parser = function(grammar_specification, var_args) {
    var p__14552 = null;
    if (arguments.length > 1) {
      p__14552 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return parser__delegate.call(this, grammar_specification, p__14552);
  };
  parser.cljs$lang$maxFixedArity = 1;
  parser.cljs$lang$applyTo = function(arglist__14562) {
    var grammar_specification = cljs.core.first(arglist__14562);
    var p__14552 = cljs.core.rest(arglist__14562);
    return parser__delegate(grammar_specification, p__14552);
  };
  parser.cljs$core$IFn$_invoke$arity$variadic = parser__delegate;
  return parser;
}();
instaparse.core.failure_QMARK_ = function failure_QMARK_(result) {
  return result instanceof instaparse.gll.Failure || cljs.core.meta.call(null, result) instanceof instaparse.gll.Failure;
};
instaparse.core.get_failure = function get_failure(result) {
  if (result instanceof instaparse.gll.Failure) {
    return result;
  } else {
    if (cljs.core.meta.call(null, result) instanceof instaparse.gll.Failure) {
      return cljs.core.meta.call(null, result);
    } else {
      return null;
    }
  }
};
instaparse.core.transform = instaparse.transform.transform;
instaparse.core.standard_whitespace_parsers = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "standard", "standard", -1769206695), instaparse.core.parser.call(null, "whitespace \x3d #'\\s+'"), new cljs.core.Keyword(null, "comma", "comma", 1699024745), instaparse.core.parser.call(null, "whitespace \x3d #'[,\\s]+'")], null);
goog.provide("cljs.looperscript.interpret");
goog.require("cljs.core");
goog.require("cljs.reader");
goog.require("instaparse.core");
goog.require("instaparse.core");
goog.require("cljs.reader");
cljs.looperscript.interpret.string__GT_number = function string__GT_number(s) {
  return cljs.reader.read_string.call(null, function() {
    var temp__4124__auto__ = cljs.core.re_find.call(null, /-(^\.[0-9]+)/, s);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var n = temp__4124__auto__;
      return "-0" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.second.call(null, n));
    } else {
      var temp__4124__auto____$1 = cljs.core.re_find.call(null, /(^\.[0-9]+)/, s);
      if (cljs.core.truth_(temp__4124__auto____$1)) {
        var n = temp__4124__auto____$1;
        return "0" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.second.call(null, n));
      } else {
        var temp__4124__auto____$2 = cljs.core.re_find.call(null, /^0+([0-9][0-9.]+)/, s);
        if (cljs.core.truth_(temp__4124__auto____$2)) {
          var n = temp__4124__auto____$2;
          return cljs.core.last.call(null, n);
        } else {
          var temp__4124__auto____$3 = cljs.core.re_find.call(null, /^-0+([0-9.]+)/, s);
          if (cljs.core.truth_(temp__4124__auto____$3)) {
            var n = temp__4124__auto____$3;
            return "-" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.last.call(null, n));
          } else {
            return s;
          }
        }
      }
    }
  }());
};
cljs.looperscript.interpret.apply_ops = function apply_ops(n, ops) {
  return cljs.core.reduce.call(null, function(x, p__13123) {
    var vec__13124 = p__13123;
    var op = cljs.core.nth.call(null, vec__13124, 0, null);
    var v = cljs.core.nth.call(null, vec__13124, 1, null);
    if (cljs.core._EQ_.call(null, op, new cljs.core.Keyword(null, "*", "*", -1294732318))) {
      return x * v;
    } else {
      if (cljs.core._EQ_.call(null, op, new cljs.core.Keyword(null, "+", "+", 1913524883))) {
        return x + v;
      } else {
        return x;
      }
    }
  }, n, ops);
};
cljs.looperscript.interpret.choose_random1s = function choose_random1s(v) {
  return cljs.core.map.call(null, function(x) {
    if (cljs.core.vector_QMARK_.call(null, x) && cljs.core._EQ_.call(null, cljs.core.first.call(null, x), new cljs.core.Keyword(null, "random1", "random1", 2116694721))) {
      return cljs.core.rand_nth.call(null, cljs.core.rest.call(null, x));
    } else {
      return x;
    }
  }, v);
};
cljs.looperscript.interpret.parse_data = function() {
  var parse_data = null;
  var parse_data__1 = function(v) {
    return parse_data.call(null, v, cljs.core.PersistentVector.EMPTY);
  };
  var parse_data__2 = function(v, pre_ops) {
    var accum = cljs.core.PersistentVector.EMPTY;
    var rem = v;
    var ops = pre_ops;
    while (true) {
      if (cljs.core.empty_QMARK_.call(null, rem)) {
        return accum;
      } else {
        var x = cljs.core.first.call(null, rem);
        if (cljs.core.vector_QMARK_.call(null, x) && cljs.core._EQ_.call(null, cljs.core.first.call(null, x), new cljs.core.Keyword(null, "fraction", "fraction", 107940680))) {
          var G__13126 = accum;
          var G__13127 = cljs.core.rest.call(null, rem);
          var G__13128 = cljs.core.conj.call(null, ops, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "*", "*", -1294732318), cljs.core.second.call(null, x)], null));
          accum = G__13126;
          rem = G__13127;
          ops = G__13128;
          continue;
        } else {
          if (cljs.core.vector_QMARK_.call(null, x) && cljs.core._EQ_.call(null, cljs.core.first.call(null, x), new cljs.core.Keyword(null, "plus", "plus", 211540661))) {
            var G__13129 = accum;
            var G__13130 = cljs.core.rest.call(null, rem);
            var G__13131 = cljs.core.conj.call(null, ops, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "+", "+", 1913524883), cljs.core.second.call(null, x)], null));
            accum = G__13129;
            rem = G__13130;
            ops = G__13131;
            continue;
          } else {
            if (typeof x === "number") {
              var G__13132 = cljs.core.conj.call(null, accum, cljs.looperscript.interpret.apply_ops.call(null, x, ops));
              var G__13133 = cljs.core.rest.call(null, rem);
              var G__13134 = ops;
              accum = G__13132;
              rem = G__13133;
              ops = G__13134;
              continue;
            } else {
              if (cljs.core.vector_QMARK_.call(null, x) && cljs.core._EQ_.call(null, cljs.core.first.call(null, x), new cljs.core.Keyword(null, "random2", "random2", -402442624))) {
                var G__13135 = cljs.core.conj.call(null, accum, cljs.core.into.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "random2", "random2", -402442624)], null), cljs.core.map.call(null, function(accum, rem, ops, x) {
                  return function(p1__13125_SHARP_) {
                    return cljs.looperscript.interpret.apply_ops.call(null, p1__13125_SHARP_, ops);
                  };
                }(accum, rem, ops, x), cljs.core.rest.call(null, x))));
                var G__13136 = cljs.core.rest.call(null, rem);
                var G__13137 = ops;
                accum = G__13135;
                rem = G__13136;
                ops = G__13137;
                continue;
              } else {
                var G__13138 = cljs.core.conj.call(null, accum, x);
                var G__13139 = cljs.core.rest.call(null, rem);
                var G__13140 = ops;
                accum = G__13138;
                rem = G__13139;
                ops = G__13140;
                continue;
              }
            }
          }
        }
      }
      break;
    }
  };
  parse_data = function(v, pre_ops) {
    switch(arguments.length) {
      case 1:
        return parse_data__1.call(this, v);
      case 2:
        return parse_data__2.call(this, v, pre_ops);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parse_data.cljs$core$IFn$_invoke$arity$1 = parse_data__1;
  parse_data.cljs$core$IFn$_invoke$arity$2 = parse_data__2;
  return parse_data;
}();
cljs.looperscript.interpret.looper_parse = instaparse.core.parser.call(null, "s \x3d \x3cversion?\x3e \x3csp?\x3e part*\n      vec \x3d \x3c'['\x3e vec-code* (data-element | vec | sp) + \x3c']'\x3e\n      vec-code \x3d ('random1' | 'random2')\n      version \x3d \x3c'version'\x3e sp #'[0-9.]+'\n      part \x3d part-title \x3csp\x3e aspect*\n      \x3cpart-title\x3e \x3d \x3c'part'\x3e sp (!aspect-keyword #'[a-zA-Z0-9_.-]+')\n      aspect \x3d aspect-keyword data\n      aspect-keyword \x3d ('rhythm' | 'sounds' | 'volumes')\n      data \x3d data-element+\n      \x3cdata-element\x3e \x3d (ratio | fraction | plus | number | sp | vec | drum-code)\n      drum-code \x3d #'[bcdhkrs]'\n      plus \x3d \x3c'+'\x3e sp? number\n      fraction \x3d number \x3c'/'\x3e number\n      ratio \x3d number \x3c':'\x3e number\n      number \x3d #'-?([0-9]*\\.[0-9]*|[0-9]+)'\n      \x3csp\x3e \x3d \x3c#'[\\s,]+'\x3e");
cljs.looperscript.interpret.looper_transform = function looper_transform(parse_tree) {
  return instaparse.core.transform.call(null, cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "vec", "vec", -657847931), new cljs.core.Keyword(null, "number", "number", 1570378438), new cljs.core.Keyword(null, "fraction", "fraction", 107940680), new cljs.core.Keyword(null, "part", "part", 77757738), new cljs.core.Keyword(null, "s", "s", 1705939918), new cljs.core.Keyword(null, "ratio", "ratio", -926560044), new cljs.core.Keyword(null, "aspect-keyword", "aspect-keyword", 1878628821), 
  new cljs.core.Keyword(null, "vec-code", "vec-code", 652666651), new cljs.core.Keyword(null, "data", "data", -232669377)], [cljs.core.vector, cljs.looperscript.interpret.string__GT_number, function(n, d) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "fraction", "fraction", 107940680), n / d], null);
  }, function() {
    var G__13146__delegate = function(part_name, aspects) {
      return cljs.core.reduce.call(null, function(m, p__13144) {
        var vec__13145 = p__13144;
        var _ = cljs.core.nth.call(null, vec__13145, 0, null);
        var k = cljs.core.nth.call(null, vec__13145, 1, null);
        var v = cljs.core.nth.call(null, vec__13145, 2, null);
        return cljs.core.assoc.call(null, m, k, v);
      }, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), part_name], null), aspects);
    };
    var G__13146 = function(part_name, var_args) {
      var aspects = null;
      if (arguments.length > 1) {
        aspects = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__13146__delegate.call(this, part_name, aspects);
    };
    G__13146.cljs$lang$maxFixedArity = 1;
    G__13146.cljs$lang$applyTo = function(arglist__13147) {
      var part_name = cljs.core.first(arglist__13147);
      var aspects = cljs.core.rest(arglist__13147);
      return G__13146__delegate(part_name, aspects);
    };
    G__13146.cljs$core$IFn$_invoke$arity$variadic = G__13146__delegate;
    return G__13146;
  }(), cljs.core.vector, function(n, d) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ratio", "ratio", -926560044), n / d], null);
  }, cljs.core.keyword, cljs.core.keyword, function() {
    var G__13148__delegate = function(rest__13141_SHARP_) {
      return cljs.looperscript.interpret.parse_data.call(null, cljs.looperscript.interpret.choose_random1s.call(null, rest__13141_SHARP_));
    };
    var G__13148 = function(var_args) {
      var rest__13141_SHARP_ = null;
      if (arguments.length > 0) {
        rest__13141_SHARP_ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__13148__delegate.call(this, rest__13141_SHARP_);
    };
    G__13148.cljs$lang$maxFixedArity = 0;
    G__13148.cljs$lang$applyTo = function(arglist__13149) {
      var rest__13141_SHARP_ = cljs.core.seq(arglist__13149);
      return G__13148__delegate(rest__13141_SHARP_);
    };
    G__13148.cljs$core$IFn$_invoke$arity$variadic = G__13148__delegate;
    return G__13148;
  }()]), parse_tree);
};
goog.provide("cljs.looperscript.looperscript");
goog.require("cljs.core");
goog.require("cljs.reader");
goog.require("shoreleave.remotes.http_rpc");
goog.require("cljs.looperscript.audio");
goog.require("domina.xpath");
goog.require("domina");
goog.require("cljs.looperscript.interpret");
goog.require("hiccups.runtime");
goog.require("shoreleave.remotes.http_rpc");
goog.require("domina.events");
goog.require("domina");
goog.require("domina.events");
goog.require("cljs.looperscript.audio");
goog.require("domina.xpath");
goog.require("cljs.looperscript.interpret");
goog.require("cljs.reader");
goog.require("hiccups.runtime");
var L = cljs.looperscript.looperscript;
cljs.looperscript.looperscript.log = function() {
  var log__delegate = function(args) {
    return domina.append_BANG_.call(null, domina.by_id.call(null, "console"), cljs.core.apply.call(null, cljs.core.str, cljs.core.conj.call(null, cljs.core.vec.call(null, args), "\n")));
  };
  var log = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return log__delegate.call(this, args);
  };
  log.cljs$lang$maxFixedArity = 0;
  log.cljs$lang$applyTo = function(arglist__13150) {
    var args = cljs.core.seq(arglist__13150);
    return log__delegate(args);
  };
  log.cljs$core$IFn$_invoke$arity$variadic = log__delegate;
  return log;
}();
cljs.looperscript.looperscript.ctx = cljs.looperscript.audio.ctx;
cljs.looperscript.looperscript.rhythm = cljs.core.atom.call(null, cljs.looperscript.looperscript.nill);
cljs.looperscript.looperscript.sounds = cljs.core.atom.call(null, cljs.looperscript.looperscript.nill);
cljs.looperscript.looperscript.volumes = cljs.core.atom.call(null, cljs.looperscript.looperscript.nill);
cljs.looperscript.looperscript.note_queue = cljs.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
cljs.looperscript.looperscript.playing_interval = cljs.core.atom.call(null, cljs.looperscript.looperscript.nill);
cljs.looperscript.looperscript.queue_time_interval_seconds = 1;
cljs.looperscript.looperscript.queue_time_extra = .5;
cljs.looperscript.looperscript.default_loop_text = "part 1\nrhythm 30/240 2 3 1 2 1\nsounds k 0 s 3.14\nvolumes 1 0.3 0.3";
cljs.looperscript.looperscript.now = function now() {
  return cljs.looperscript.audio.ctx["currentTime"];
};
cljs.looperscript.looperscript.put_text_in_get = function put_text_in_get(s) {
  var preface = document.location.pathname;
  return history.pushState(new Object, "", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(preface) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s));
};
cljs.looperscript.looperscript.text__GT_link = function text__GT_link() {
  var text = escape(domina.value.call(null, domina.by_id.call(null, "looper-text")));
  return cljs.looperscript.looperscript.put_text_in_get.call(null, "?loop\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(text));
};
cljs.looperscript.looperscript.get_text_from_get = function get_text_from_get() {
  return unescape(document.location.search);
};
cljs.looperscript.looperscript.set_loop_text = function set_loop_text(s) {
  return domina.set_value_BANG_.call(null, domina.by_id.call(null, "looper-text"), s);
};
cljs.looperscript.looperscript.load_link__GT_text = function load_link__GT_text() {
  var get_text = cljs.core.re_find.call(null, /^\?loop=([\s\S]*)/, cljs.looperscript.looperscript.get_text_from_get.call(null));
  var loop_text = cljs.core.truth_(get_text) ? cljs.core.last.call(null, get_text) : cljs.looperscript.looperscript.default_loop_text;
  return cljs.looperscript.looperscript.set_loop_text.call(null, loop_text);
};
cljs.looperscript.looperscript.load_link__GT_text.call(null);
cljs.looperscript.looperscript.note__GT_freq = function note__GT_freq(n) {
  return 261.625565 * Math.pow.call(null, 2, n / 12);
};
cljs.looperscript.looperscript.ratio__GT_freq = function ratio__GT_freq(r) {
  return 261.625565 * r;
};
cljs.looperscript.looperscript.part_defaults = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "sounds", "sounds", 1244211385), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "drum-code", "drum-code", 2081814302), "h"], null)], null), new cljs.core.Keyword(null, "rhythm", "rhythm", 1037284533), new cljs.core.PersistentVector(null, 
1, 5, cljs.core.PersistentVector.EMPTY_NODE, [1], null), new cljs.core.Keyword(null, "volumes", "volumes", -889277072), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [1], null)], null);
cljs.looperscript.looperscript.update_parts_BANG_ = function update_parts_BANG_() {
  var parts_text = domina.value.call(null, domina.by_id.call(null, "looper-text"));
  var start_time = cljs.looperscript.looperscript.now.call(null);
  var part = cljs.core.first.call(null, function(parts_text, start_time) {
    return function(p1__13152_SHARP_) {
      console.log("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__13152_SHARP_));
      return p1__13152_SHARP_;
    };
  }(parts_text, start_time).call(null, cljs.looperscript.interpret.looper_transform.call(null, function(parts_text, start_time) {
    return function(p1__13151_SHARP_) {
      console.log("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__13151_SHARP_));
      return p1__13151_SHARP_;
    };
  }(parts_text, start_time).call(null, cljs.looperscript.interpret.looper_parse.call(null, parts_text)))));
  var parse_time = cljs.looperscript.looperscript.now.call(null) - start_time;
  cljs.looperscript.looperscript.log.call(null, part);
  cljs.looperscript.looperscript.log.call(null, "Parse time: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parse_time));
  var seq__13159 = cljs.core.seq.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.looperscript.looperscript.sounds, new cljs.core.Keyword(null, "sounds", "sounds", 1244211385)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.looperscript.looperscript.rhythm, new cljs.core.Keyword(null, "rhythm", "rhythm", 1037284533)], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.looperscript.looperscript.volumes, new cljs.core.Keyword(null, "volumes", "volumes", -889277072)], null)], null));
  var chunk__13160 = null;
  var count__13161 = 0;
  var i__13162 = 0;
  while (true) {
    if (i__13162 < count__13161) {
      var vec__13163 = cljs.core._nth.call(null, chunk__13160, i__13162);
      var a = cljs.core.nth.call(null, vec__13163, 0, null);
      var k = cljs.core.nth.call(null, vec__13163, 1, null);
      cljs.core.reset_BANG_.call(null, a, cljs.core.get.call(null, part, k, cljs.core.get.call(null, cljs.looperscript.looperscript.part_defaults, k)));
      var G__13165 = seq__13159;
      var G__13166 = chunk__13160;
      var G__13167 = count__13161;
      var G__13168 = i__13162 + 1;
      seq__13159 = G__13165;
      chunk__13160 = G__13166;
      count__13161 = G__13167;
      i__13162 = G__13168;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__13159);
      if (temp__4126__auto__) {
        var seq__13159__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13159__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__13159__$1);
          var G__13169 = cljs.core.chunk_rest.call(null, seq__13159__$1);
          var G__13170 = c__4410__auto__;
          var G__13171 = cljs.core.count.call(null, c__4410__auto__);
          var G__13172 = 0;
          seq__13159 = G__13169;
          chunk__13160 = G__13170;
          count__13161 = G__13171;
          i__13162 = G__13172;
          continue;
        } else {
          var vec__13164 = cljs.core.first.call(null, seq__13159__$1);
          var a = cljs.core.nth.call(null, vec__13164, 0, null);
          var k = cljs.core.nth.call(null, vec__13164, 1, null);
          cljs.core.reset_BANG_.call(null, a, cljs.core.get.call(null, part, k, cljs.core.get.call(null, cljs.looperscript.looperscript.part_defaults, k)));
          var G__13173 = cljs.core.next.call(null, seq__13159__$1);
          var G__13174 = null;
          var G__13175 = 0;
          var G__13176 = 0;
          seq__13159 = G__13173;
          chunk__13160 = G__13174;
          count__13161 = G__13175;
          i__13162 = G__13176;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.looperscript.looperscript.next_note_fn = function next_note_fn() {
  var cycle_len = cljs.core.truth_(cljs.core.deref.call(null, cljs.looperscript.looperscript.rhythm)) ? cljs.core.count.call(null, cljs.core.deref.call(null, cljs.looperscript.looperscript.rhythm)) : 3 + cljs.core.rand_int.call(null, 8);
  var sound_cycle = cljs.core.truth_(cljs.core.deref.call(null, cljs.looperscript.looperscript.sounds)) ? cljs.core.deref.call(null, cljs.looperscript.looperscript.sounds) : function() {
    var iter__4379__auto__ = function(cycle_len) {
      return function iter__13185(s__13186) {
        return new cljs.core.LazySeq(null, function(cycle_len) {
          return function() {
            var s__13186__$1 = s__13186;
            while (true) {
              var temp__4126__auto__ = cljs.core.seq.call(null, s__13186__$1);
              if (temp__4126__auto__) {
                var s__13186__$2 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__13186__$2)) {
                  var c__4377__auto__ = cljs.core.chunk_first.call(null, s__13186__$2);
                  var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                  var b__13188 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                  if (function() {
                    var i__13187 = 0;
                    while (true) {
                      if (i__13187 < size__4378__auto__) {
                        var i = cljs.core._nth.call(null, c__4377__auto__, i__13187);
                        cljs.core.chunk_append.call(null, b__13188, cljs.core.rand_nth.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.looperscript.audio.buffers))));
                        var G__13193 = i__13187 + 1;
                        i__13187 = G__13193;
                        continue;
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13188), iter__13185.call(null, cljs.core.chunk_rest.call(null, s__13186__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13188), null);
                  }
                } else {
                  var i = cljs.core.first.call(null, s__13186__$2);
                  return cljs.core.cons.call(null, cljs.core.rand_nth.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.looperscript.audio.buffers))), iter__13185.call(null, cljs.core.rest.call(null, s__13186__$2)));
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(cycle_len), null, null);
      };
    }(cycle_len);
    return iter__4379__auto__.call(null, cljs.core.range.call(null, cycle_len));
  }();
  var dur_cycle = cljs.core.truth_(cljs.core.deref.call(null, cljs.looperscript.looperscript.rhythm)) ? cljs.core.deref.call(null, cljs.looperscript.looperscript.rhythm) : function() {
    var iter__4379__auto__ = function(cycle_len, sound_cycle) {
      return function iter__13189(s__13190) {
        return new cljs.core.LazySeq(null, function(cycle_len, sound_cycle) {
          return function() {
            var s__13190__$1 = s__13190;
            while (true) {
              var temp__4126__auto__ = cljs.core.seq.call(null, s__13190__$1);
              if (temp__4126__auto__) {
                var s__13190__$2 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, s__13190__$2)) {
                  var c__4377__auto__ = cljs.core.chunk_first.call(null, s__13190__$2);
                  var size__4378__auto__ = cljs.core.count.call(null, c__4377__auto__);
                  var b__13192 = cljs.core.chunk_buffer.call(null, size__4378__auto__);
                  if (function() {
                    var i__13191 = 0;
                    while (true) {
                      if (i__13191 < size__4378__auto__) {
                        var i = cljs.core._nth.call(null, c__4377__auto__, i__13191);
                        cljs.core.chunk_append.call(null, b__13192, cljs.core.rand_nth.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2, 3], null)));
                        var G__13194 = i__13191 + 1;
                        i__13191 = G__13194;
                        continue;
                      } else {
                        return true;
                      }
                      break;
                    }
                  }()) {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13192), iter__13189.call(null, cljs.core.chunk_rest.call(null, s__13190__$2)));
                  } else {
                    return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13192), null);
                  }
                } else {
                  var i = cljs.core.first.call(null, s__13190__$2);
                  return cljs.core.cons.call(null, cljs.core.rand_nth.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2, 3], null)), iter__13189.call(null, cljs.core.rest.call(null, s__13190__$2)));
                }
              } else {
                return null;
              }
              break;
            }
          };
        }(cycle_len, sound_cycle), null, null);
      };
    }(cycle_len, sound_cycle);
    return iter__4379__auto__.call(null, cljs.core.range.call(null, cycle_len));
  }();
  var vol_cycle = cljs.core.truth_(cljs.core.deref.call(null, cljs.looperscript.looperscript.volumes)) ? cljs.core.deref.call(null, cljs.looperscript.looperscript.volumes) : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [1], null);
  var dur_len = cljs.core.count.call(null, dur_cycle);
  var vol_len = cljs.core.count.call(null, vol_cycle);
  var sound_len = cljs.core.count.call(null, sound_cycle);
  var pos = cljs.core.atom.call(null, 0);
  return function(cycle_len, sound_cycle, dur_cycle, vol_cycle, dur_len, vol_len, sound_len, pos) {
    return function() {
      var res = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "dur", "dur", 1464522452), cljs.core.nth.call(null, dur_cycle, cljs.core.mod.call(null, cljs.core.deref.call(null, pos), dur_len)), new cljs.core.Keyword(null, "sound", "sound", -2127407070), cljs.core.nth.call(null, sound_cycle, cljs.core.mod.call(null, cljs.core.deref.call(null, pos), sound_len)), new cljs.core.Keyword(null, "vol", "vol", -502960578), cljs.core.nth.call(null, vol_cycle, cljs.core.mod.call(null, 
      cljs.core.deref.call(null, pos), vol_len))], null);
      cljs.core.swap_BANG_.call(null, pos, cljs.core.inc);
      return res;
    };
  }(cycle_len, sound_cycle, dur_cycle, vol_cycle, dur_len, vol_len, sound_len, pos);
};
cljs.looperscript.looperscript.kill_playing_interval = function kill_playing_interval() {
  if (cljs.core.truth_(cljs.core.deref.call(null, cljs.looperscript.looperscript.playing_interval))) {
    clearInterval(cljs.core.deref.call(null, cljs.looperscript.looperscript.playing_interval));
    return cljs.core.reset_BANG_.call(null, cljs.looperscript.looperscript.playing_interval, cljs.looperscript.looperscript.nill);
  } else {
    return null;
  }
};
cljs.looperscript.looperscript.stop = function stop() {
  cljs.looperscript.looperscript.kill_playing_interval.call(null);
  return cljs.looperscript.audio.kill_sounds.call(null);
};
cljs.looperscript.looperscript.maybe_random2 = function maybe_random2(x) {
  if (cljs.core.vector_QMARK_.call(null, x) && cljs.core._EQ_.call(null, cljs.core.first.call(null, x), new cljs.core.Keyword(null, "random2", "random2", -402442624))) {
    return cljs.core.rand_nth.call(null, cljs.core.rest.call(null, x));
  } else {
    return x;
  }
};
cljs.looperscript.looperscript.play = function play() {
  cljs.looperscript.looperscript.stop.call(null);
  cljs.looperscript.looperscript.update_parts_BANG_.call(null);
  var next_note = cljs.looperscript.looperscript.next_note_fn.call(null);
  var time_pos = cljs.core.atom.call(null, 0 + cljs.looperscript.looperscript.ctx["currentTime"]);
  var queue_notes = function(next_note, time_pos) {
    return function() {
      var now = cljs.looperscript.looperscript.ctx["currentTime"];
      var end_time = now + cljs.looperscript.looperscript.queue_time_extra + cljs.looperscript.looperscript.queue_time_interval_seconds;
      while (true) {
        if (cljs.core.deref.call(null, time_pos) < end_time) {
          var n_13197 = next_note.call(null);
          var dur_13198 = (new cljs.core.Keyword(null, "dur", "dur", 1464522452)).cljs$core$IFn$_invoke$arity$1(n_13197);
          var sound_13199 = (new cljs.core.Keyword(null, "sound", "sound", -2127407070)).cljs$core$IFn$_invoke$arity$1(n_13197);
          var vol_13200 = (new cljs.core.Keyword(null, "vol", "vol", -502960578)).cljs$core$IFn$_invoke$arity$1(n_13197);
          var vec__13196_13201 = cljs.core.map.call(null, cljs.looperscript.looperscript.maybe_random2, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [dur_13198, sound_13199, vol_13200], null));
          var dur_13202__$1 = cljs.core.nth.call(null, vec__13196_13201, 0, null);
          var sound_13203__$1 = cljs.core.nth.call(null, vec__13196_13201, 1, null);
          var vol_13204__$1 = cljs.core.nth.call(null, vec__13196_13201, 2, null);
          var sound_13205__$2 = typeof sound_13203__$1 === "number" ? cljs.looperscript.looperscript.note__GT_freq.call(null, sound_13203__$1) : cljs.core.vector_QMARK_.call(null, sound_13203__$1) && cljs.core._EQ_.call(null, cljs.core.first.call(null, sound_13203__$1), new cljs.core.Keyword(null, "ratio", "ratio", -926560044)) ? cljs.looperscript.looperscript.ratio__GT_freq.call(null, cljs.core.second.call(null, sound_13203__$1)) : cljs.core.vector_QMARK_.call(null, sound_13203__$1) && cljs.core._EQ_.call(null, 
          cljs.core.first.call(null, sound_13203__$1), new cljs.core.Keyword(null, "drum-code", "drum-code", 2081814302)) ? cljs.looperscript.audio.drum_codes.call(null, cljs.core.second.call(null, sound_13203__$1)) : sound_13203__$1;
          if (typeof sound_13205__$2 === "number") {
            cljs.looperscript.audio.play_tone.call(null, sound_13205__$2, cljs.core.deref.call(null, time_pos), dur_13202__$1, vol_13204__$1);
          } else {
            cljs.looperscript.audio.play_sound.call(null, sound_13205__$2, cljs.core.deref.call(null, time_pos), vol_13204__$1);
          }
          cljs.core.swap_BANG_.call(null, time_pos, cljs.core._PLUS_, dur_13202__$1);
          continue;
        } else {
          return null;
        }
        break;
      }
    };
  }(next_note, time_pos);
  queue_notes.call(null);
  return cljs.core.reset_BANG_.call(null, cljs.looperscript.looperscript.playing_interval, setInterval(queue_notes, cljs.looperscript.looperscript.queue_time_interval_seconds * 1E3));
};
domina.events.listen_BANG_.call(null, domina.by_id.call(null, "play"), new cljs.core.Keyword(null, "click", "click", 1912301393), function(e) {
  return cljs.looperscript.looperscript.play.call(null);
});
domina.events.listen_BANG_.call(null, domina.by_id.call(null, "stop"), new cljs.core.Keyword(null, "click", "click", 1912301393), function(e) {
  return cljs.looperscript.looperscript.stop.call(null);
});
domina.events.listen_BANG_.call(null, domina.by_id.call(null, "link"), new cljs.core.Keyword(null, "click", "click", 1912301393), function(e) {
  return cljs.looperscript.looperscript.text__GT_link.call(null);
});
cljs.looperscript.audio.load_some_drums.call(null);
console.log("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.looperscript.interpret.parse_data.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, 2, 3], null))));
goog.provide("cljs.looperscript.sounds");
goog.require("cljs.core");
cljs.looperscript.sounds.ctx = new AudioContext;
cljs.looperscript.sounds.pending_sounds = cljs.core.atom.call(null, cljs.core.PersistentHashSet.EMPTY);
cljs.looperscript.sounds.drums = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, ["kick", "snare", "hat", "sidestick", "ride-bell", "ride"], null);
cljs.looperscript.sounds.drum_codes = new cljs.core.PersistentArrayMap(null, 6, ["k", "kick", "s", "snare", "h", "hat", "d", "sidestick", "b", "ride-bell", "r", "ride"], null);
cljs.looperscript.sounds.buffers = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cljs.looperscript.sounds.sample_folder = "/media/webaudio/sample/mp3s/";
cljs.looperscript.sounds.on_decode = function on_decode(buffer, fname) {
  cljs.core.swap_BANG_.call(null, cljs.looperscript.sounds.buffers, cljs.core.assoc, fname, buffer);
  return console.log("loaded", fname, cljs.core.rand_int.call(null, 99));
};
cljs.looperscript.sounds.on_mp3_load = function on_mp3_load(req, fname) {
  return cljs.looperscript.sounds.ctx.decodeAudioData(req.response, function(p1__13221_SHARP_) {
    return cljs.looperscript.sounds.on_decode.call(null, p1__13221_SHARP_, fname);
  });
};
cljs.looperscript.sounds.load_file = function load_file(fname) {
  var req = new XMLHttpRequest;
  var full_name = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.looperscript.sounds.sample_folder) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(fname) + ".mp3";
  req.open("GET", full_name);
  req["responseType"] = "arraybuffer";
  req["onload"] = function(req, full_name) {
    return function() {
      return cljs.looperscript.sounds.on_mp3_load.call(null, req, fname);
    };
  }(req, full_name);
  return req.send();
};
cljs.looperscript.sounds.load_some_drums = function load_some_drums() {
  var seq__13226 = cljs.core.seq.call(null, cljs.looperscript.sounds.drums);
  var chunk__13227 = null;
  var count__13228 = 0;
  var i__13229 = 0;
  while (true) {
    if (i__13229 < count__13228) {
      var d = cljs.core._nth.call(null, chunk__13227, i__13229);
      cljs.looperscript.sounds.load_file.call(null, d);
      var G__13230 = seq__13226;
      var G__13231 = chunk__13227;
      var G__13232 = count__13228;
      var G__13233 = i__13229 + 1;
      seq__13226 = G__13230;
      chunk__13227 = G__13231;
      count__13228 = G__13232;
      i__13229 = G__13233;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__13226);
      if (temp__4126__auto__) {
        var seq__13226__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13226__$1)) {
          var c__4410__auto__ = cljs.core.chunk_first.call(null, seq__13226__$1);
          var G__13234 = cljs.core.chunk_rest.call(null, seq__13226__$1);
          var G__13235 = c__4410__auto__;
          var G__13236 = cljs.core.count.call(null, c__4410__auto__);
          var G__13237 = 0;
          seq__13226 = G__13234;
          chunk__13227 = G__13235;
          count__13228 = G__13236;
          i__13229 = G__13237;
          continue;
        } else {
          var d = cljs.core.first.call(null, seq__13226__$1);
          cljs.looperscript.sounds.load_file.call(null, d);
          var G__13238 = cljs.core.next.call(null, seq__13226__$1);
          var G__13239 = null;
          var G__13240 = 0;
          var G__13241 = 0;
          seq__13226 = G__13238;
          chunk__13227 = G__13239;
          count__13228 = G__13240;
          i__13229 = G__13241;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.looperscript.sounds.play_sound = function play_sound(fname, start_time, vol) {
  var buf_s = cljs.looperscript.sounds.ctx.createBufferSource();
  var gain = cljs.looperscript.sounds.ctx.createGain();
  buf_s["buffer"] = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.looperscript.sounds.buffers), fname);
  gain["gain"]["value"] = vol;
  buf_s.connect(gain);
  gain.connect(cljs.looperscript.sounds.ctx["destination"]);
  return buf_s.start(start_time);
};
cljs.looperscript.sounds.kill_sounds = function kill_sounds() {
  var seq__13246_13250 = cljs.core.seq.call(null, cljs.core.deref.call(null, cljs.looperscript.sounds.pending_sounds));
  var chunk__13247_13251 = null;
  var count__13248_13252 = 0;
  var i__13249_13253 = 0;
  while (true) {
    if (i__13249_13253 < count__13248_13252) {
      var s_13254 = cljs.core._nth.call(null, chunk__13247_13251, i__13249_13253);
      s_13254.stop();
      var G__13255 = seq__13246_13250;
      var G__13256 = chunk__13247_13251;
      var G__13257 = count__13248_13252;
      var G__13258 = i__13249_13253 + 1;
      seq__13246_13250 = G__13255;
      chunk__13247_13251 = G__13256;
      count__13248_13252 = G__13257;
      i__13249_13253 = G__13258;
      continue;
    } else {
      var temp__4126__auto___13259 = cljs.core.seq.call(null, seq__13246_13250);
      if (temp__4126__auto___13259) {
        var seq__13246_13260__$1 = temp__4126__auto___13259;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13246_13260__$1)) {
          var c__4410__auto___13261 = cljs.core.chunk_first.call(null, seq__13246_13260__$1);
          var G__13262 = cljs.core.chunk_rest.call(null, seq__13246_13260__$1);
          var G__13263 = c__4410__auto___13261;
          var G__13264 = cljs.core.count.call(null, c__4410__auto___13261);
          var G__13265 = 0;
          seq__13246_13250 = G__13262;
          chunk__13247_13251 = G__13263;
          count__13248_13252 = G__13264;
          i__13249_13253 = G__13265;
          continue;
        } else {
          var s_13266 = cljs.core.first.call(null, seq__13246_13260__$1);
          s_13266.stop();
          var G__13267 = cljs.core.next.call(null, seq__13246_13260__$1);
          var G__13268 = null;
          var G__13269 = 0;
          var G__13270 = 0;
          seq__13246_13250 = G__13267;
          chunk__13247_13251 = G__13268;
          count__13248_13252 = G__13269;
          i__13249_13253 = G__13270;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return cljs.core.reset_BANG_.call(null, cljs.looperscript.sounds.pending_sounds, cljs.core.PersistentHashSet.EMPTY);
};
cljs.looperscript.sounds.note__GT_freq = function note__GT_freq(n) {
  return 261.625565 * Math.pow.call(null, 2, n / 12);
};
cljs.looperscript.sounds.ratio__GT_freq = function ratio__GT_freq(p__13271) {
  var vec__13273 = p__13271;
  var _ = cljs.core.nth.call(null, vec__13273, 0, null);
  var n = cljs.core.nth.call(null, vec__13273, 1, null);
  var d = cljs.core.nth.call(null, vec__13273, 2, null);
  return 261.625565 * (n / d);
};
cljs.looperscript.sounds.play_tone = function play_tone(freq, start_time, dur, vol) {
  var osc = cljs.looperscript.sounds.ctx.createOscillator();
  var gain = cljs.looperscript.sounds.ctx.createGain();
  osc["type"] = "sawtooth";
  osc["frequency"]["value"] = freq;
  gain["gain"]["value"] = .1 * vol;
  osc.connect(gain);
  gain.connect(cljs.looperscript.sounds.ctx["destination"]);
  osc.start(start_time);
  return osc.stop(start_time + dur);
};
