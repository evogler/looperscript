{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {profiled taoensso.tufte}, :excludes #{}, :name taoensso.tufte, :imports nil, :requires {enc taoensso.encore, taoensso.encore taoensso.encore, impl taoensso.tufte.impl, taoensso.tufte.impl taoensso.tufte.impl}, :cljs.spec/speced-vars [], :uses {IdStats taoensso.tufte.impl, Stats taoensso.tufte.impl, Clock taoensso.tufte.impl}, :defs {valid-run-level {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 58, :column 16, :end-line 58, :end-column 31, :static true, :arglists (quote ([x]))}, :name taoensso.tufte/valid-run-level, :variadic false, :file "resources/public/js/taoensso/tufte.cljc", :end-column 31, :static true, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, may-profile? {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 148, :column 43, :end-line 148, :end-column 55, :tag boolean, :arglists (quote ([level] [level ns])), :doc "Returns true iff level and ns are runtime unfiltered.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([level] [level ns]), :arglists ([level] [level ns]), :arglists-meta (nil nil)}}, :name taoensso.tufte/may-profile?, :variadic false, :file "resources/public/js/taoensso/tufte.cljc", :end-column 55, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([level] [level ns]), :arglists ([level] [level ns]), :arglists-meta (nil nil)}, :method-params ([level] [level ns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :ret-tag boolean, :end-line 148, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists ([level] [level ns]), :doc "Returns true iff level and ns are runtime unfiltered."}, defnp {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 693, :column 11, :end-line 693, :end-column 16, :macro true, :arglists (quote ([name doc-string? attr-map? [params*] prepost-map? body] [name doc-string? attr-map? ([params*] prepost-map? body) + attr-map?])), :doc "Like `defn` but wraps fn bodies with `p` macro.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env sigs)], :arglists ([&form &env & sigs]), :arglists-meta (nil)}}, :name taoensso.tufte/defnp, :variadic true, :file "resources/public/js/taoensso/tufte.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env sigs)], :arglists ([&form &env & sigs]), :arglists-meta (nil)}, :method-params [(&form &env sigs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 693, :macro true, :end-line 693, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & sigs]), :doc "Like `defn` but wraps fn bodies with `p` macro."}, handlers_ {:name taoensso.tufte/handlers_, :file "resources/public/js/taoensso/tufte.cljc", :line 167, :column 1, :end-line 167, :end-column 20, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 167, :column 11, :end-line 167, :end-column 20}, :doc "{<handler-id> <handler-fn>}", :tag any}, fnp {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 676, :column 11, :end-line 676, :end-column 14, :macro true, :arglists (quote ([name? [params*] prepost-map? body] [name? ([params*] prepost-map? body) +])), :doc "Like `fn` but wraps fn bodies with `p` macro.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env sigs)], :arglists ([&form &env & sigs]), :arglists-meta (nil)}}, :name taoensso.tufte/fnp, :variadic true, :file "resources/public/js/taoensso/tufte.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env sigs)], :arglists ([&form &env & sigs]), :arglists-meta (nil)}, :method-params [(&form &env sigs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 676, :macro true, :end-line 676, :max-fixed-arity 2, :fn-var false, :arglists ([&form &env & sigs]), :doc "Like `fn` but wraps fn bodies with `p` macro."}, set-ns-pattern! {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 97, :column 7, :end-line 97, :end-column 22, :arglists (quote ([ns-pattern])), :doc "Sets root binding of namespace filter.\n  See `compile-ns-filter` docstring for details on `ns-pattern` arg."}, :name taoensso.tufte/set-ns-pattern!, :variadic false, :file "resources/public/js/taoensso/tufte.cljc", :end-column 22, :method-params ([ns-pattern]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ns-pattern])), :doc "Sets root binding of namespace filter.\n  See `compile-ns-filter` docstring for details on `ns-pattern` arg."}, with-min-level {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 80, :column 11, :end-line 80, :end-column 25, :macro true, :arglists (quote ([level & body])), :doc "Executes body with dynamic minimum profiling level, e/o #{0 1 2 3 4 5 6}.\n    0 => Enable  all profiling.\n    6 => Disable all profiling.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env level body)], :arglists ([&form &env level & body]), :arglists-meta (nil)}}, :name taoensso.tufte/with-min-level, :variadic true, :file "resources/public/js/taoensso/tufte.cljc", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env level body)], :arglists ([&form &env level & body]), :arglists-meta (nil)}, :method-params [(&form &env level body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 80, :macro true, :end-line 80, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env level & body]), :doc "Executes body with dynamic minimum profiling level, e/o #{0 1 2 3 4 5 6}.\n    0 => Enable  all profiling.\n    6 => Disable all profiling."}, add-basic-println-handler! {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 212, :column 7, :end-line 212, :end-column 33, :arglists (quote ([{:keys [ns-pattern], :or {ns-pattern "*"}}])), :doc "Adds a simple handler that logs `profile` stats output with `println`."}, :name taoensso.tufte/add-basic-println-handler!, :variadic false, :file "resources/public/js/taoensso/tufte.cljc", :end-column 33, :method-params ([p__35144]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 212, :end-line 212, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [ns-pattern], :or {ns-pattern "*"}}])), :doc "Adds a simple handler that logs `profile` stats output with `println`."}, *min-level* {:meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 68, :column 17, :end-line 68, :end-column 28, :dynamic true}, :name taoensso.tufte/*min-level*, :file "resources/public/js/taoensso/tufte.cljc", :end-column 28, :column 1, :dynamic true, :line 68, :end-line 68, :tag number, :doc "e/o #{0 1 2 3 4 5 6}"}, *ns-filter* {:meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 95, :column 16, :end-line 95, :end-column 27, :dynamic true}, :name taoensso.tufte/*ns-filter*, :file "resources/public/js/taoensso/tufte.cljc", :end-column 27, :column 1, :dynamic true, :line 95, :end-line 95, :tag any, :doc "(fn [?ns] -> truthy)."}, compile-ns-filter {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 433, :column 7, :end-line 433, :end-column 24, :arglists (quote ([ns-pattern])), :doc "Returns (fn [?ns]) -> truthy. Some example patterns:\n    \"foo.bar\", \"foo.bar.*\", #{\"foo\" \"bar\"},\n    {:whitelist [\"foo.bar.*\"] :blacklist [\"baz.*\"]}"}, :name taoensso.tufte/compile-ns-filter, :variadic false, :file "resources/public/js/taoensso/tufte.cljc", :end-column 24, :method-params ([ns-pattern]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 433, :end-line 433, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ns-pattern])), :doc "Returns (fn [?ns]) -> truthy. Some example patterns:\n    \"foo.bar\", \"foo.bar.*\", #{\"foo\" \"bar\"},\n    {:whitelist [\"foo.bar.*\"] :blacklist [\"baz.*\"]}"}, format-stats {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 578, :column 7, :end-line 578, :end-column 19, :arglists (quote ([stats] [stats sort-fn])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([stats] [stats sort-fn]), :arglists ([stats] [stats sort-fn]), :arglists-meta (nil nil)}}, :name taoensso.tufte/format-stats, :variadic false, :file "resources/public/js/taoensso/tufte.cljc", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([stats] [stats sort-fn]), :arglists ([stats] [stats sort-fn]), :arglists-meta (nil nil)}, :method-params ([stats] [stats sort-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 578, :end-line 578, :max-fixed-arity 2, :fn-var true, :arglists ([stats] [stats sort-fn])}, map->HandlerVal {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 165, :column 12, :end-line 165, :end-column 22, :internal-ctor true, :factory :map, :arglists (quote ([G__35135]))}, :name taoensso.tufte/map->HandlerVal, :variadic false, :file "resources/public/js/taoensso/tufte.cljc", :end-column 22, :method-params ([G__35135]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 165, :end-line 165, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__35135]))}, invalid-run-level-msg {:meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 55, :column 24, :end-line 55, :end-column 45, :const true, :private true}, :private true, :name taoensso.tufte/invalid-run-level-msg, :file "resources/public/js/taoensso/tufte.cljc", :end-column 45, :const-expr {:op :constant, :env {:context :expr}, :form "Invalid Tufte profiling level: should be int e/o #{0 1 2 3 4 5}", :tag string}, :column 1, :const true, :line 55, :end-line 55, :tag string}, HandlerVal {:num-fields 8, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name taoensso.tufte/HandlerVal, :file "resources/public/js/taoensso/tufte.cljc", :end-column 22, :type true, :column 12, :internal-ctor true, :line 165, :record true, :end-line 165, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, merge-stats {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 442, :column 7, :end-line 442, :end-column 18, :arglists (quote ([s1 s2])), :doc "Merges stats maps from multiple runs or threads.\n  Automatically identifies and merges concurrent time windows."}, :name taoensso.tufte/merge-stats, :variadic false, :file "resources/public/js/taoensso/tufte.cljc", :end-column 18, :method-params ([s1 s2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 442, :end-line 442, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s1 s2])), :doc "Merges stats maps from multiple runs or threads.\n  Automatically identifies and merges concurrent time windows."}, valid-run-level? {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 52, :column 7, :end-line 52, :end-column 23, :arglists (quote ([x]))}, :name taoensso.tufte/valid-run-level?, :variadic false, :file "resources/public/js/taoensso/tufte.cljc", :end-column 23, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, valid-min-level? {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 53, :column 7, :end-line 53, :end-column 23, :arglists (quote ([x]))}, :name taoensso.tufte/valid-min-level?, :variadic false, :file "resources/public/js/taoensso/tufte.cljc", :end-column 23, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, set-min-level! {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 69, :column 14, :end-line 69, :end-column 28, :arglists (quote ([level])), :doc "Sets root binding of minimum profiling level, e/o #{0 1 2 3 4 5 6}.\n    0 => Enable  all profiling.\n    6 => Disable all profiling."}, :name taoensso.tufte/set-min-level!, :variadic false, :file "resources/public/js/taoensso/tufte.cljc", :end-column 28, :method-params ([level]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists (quote ([level])), :doc "Sets root binding of minimum profiling level, e/o #{0 1 2 3 4 5 6}.\n    0 => Enable  all profiling.\n    6 => Disable all profiling."}, valid-min-level {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 64, :column 16, :end-line 64, :end-column 31, :static true, :arglists (quote ([x]))}, :name taoensso.tufte/valid-min-level, :variadic false, :file "resources/public/js/taoensso/tufte.cljc", :end-column 31, :static true, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, stats-accumulator {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 529, :column 7, :end-line 529, :end-column 24, :arglists (quote ([])), :doc "Experimental, subject to change!\n  Small util to help merge stats maps from multiple runs or threads.\n  Returns a stateful fn with arities:\n    ([stats]) ; Accumulates the given stats (you may call this from any thread)\n    ([])      ; Deref: returns the merged value of all accumulated stats"}, :name taoensso.tufte/stats-accumulator, :variadic false, :file "resources/public/js/taoensso/tufte.cljc", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 529, :end-line 529, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Experimental, subject to change!\n  Small util to help merge stats maps from multiple runs or threads.\n  Returns a stateful fn with arities:\n    ([stats]) ; Accumulates the given stats (you may call this from any thread)\n    ([])      ; Deref: returns the merged value of all accumulated stats"}, with-ns-pattern {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 105, :column 11, :end-line 105, :end-column 26, :macro true, :arglists (quote ([ns-pattern & body])), :doc "Executes body with dynamic namespace filter.\n  See `compile-ns-filter` docstring for details on `ns-pattern` arg.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env ns-pattern body)], :arglists ([&form &env ns-pattern & body]), :arglists-meta (nil)}}, :name taoensso.tufte/with-ns-pattern, :variadic true, :file "resources/public/js/taoensso/tufte.cljc", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env ns-pattern body)], :arglists ([&form &env ns-pattern & body]), :arglists-meta (nil)}, :method-params [(&form &env ns-pattern body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 105, :macro true, :end-line 105, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env ns-pattern & body]), :doc "Executes body with dynamic namespace filter.\n  See `compile-ns-filter` docstring for details on `ns-pattern` arg."}, accumulate-stats {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 546, :column 7, :end-line 546, :end-column 23, :arglists (quote ([stats-accumulator [profiled-result profiled-?stats]])), :doc "Experimental, subject to change!"}, :name taoensso.tufte/accumulate-stats, :variadic false, :file "resources/public/js/taoensso/tufte.cljc", :end-column 23, :method-params ([stats-accumulator p__35156]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 546, :end-line 546, :max-fixed-arity 2, :fn-var true, :arglists (quote ([stats-accumulator [profiled-result profiled-?stats]])), :doc "Experimental, subject to change!"}, profiling? {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 230, :column 7, :end-line 230, :end-column 17, :arglists (quote ([])), :doc "Returns e/o #{nil :thread :dynamic}."}, :name taoensso.tufte/profiling?, :variadic false, :file "resources/public/js/taoensso/tufte.cljc", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 230, :end-line 230, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Returns e/o #{nil :thread :dynamic}."}, start-profiling-thread! {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 235, :column 7, :end-line 235, :end-column 30, :arglists (quote ([])), :doc "Warning: this is a low-level primitive. Prefer higher-level macros\n  like `profile` when possible.\n\n  NB: must be accompanied by a call to `stop-profiling-thread!`\n  (e.g. using `try`/`finally`)."}, :name taoensso.tufte/start-profiling-thread!, :variadic false, :file "resources/public/js/taoensso/tufte.cljc", :end-column 30, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 235, :end-line 235, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Warning: this is a low-level primitive. Prefer higher-level macros\n  like `profile` when possible.\n\n  NB: must be accompanied by a call to `stop-profiling-thread!`\n  (e.g. using `try`/`finally`)."}, add-handler! {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 168, :column 7, :end-line 168, :end-column 19, :arglists (quote ([handler-id handler-fn] [handler-id ns-pattern handler-fn])), :doc "Use this to register interest in stats output produced by `profile` calls.\n  Each registered `handler-fn` will be called as:\n\n    (handler-fn {:ns-str _ :level _ :?id _ :?data _ :stats _ :stats-str_ _})\n\n  Map args:\n    :ns-str     - Namespace string where `profile` call took place\n    :level      - Level e/o #{0 1 2 3 4 5}, given in `(profile {:level _} ...)`\n    :?id        - Optional id,              given in `(profile {:id    _} ...)`\n    :?data      - Optional arb data,        given in `(profile {:data  _} ...)`\n    :stats      - Stats map as in `(second (profiled ...))`\n    :stats-str_ - `(delay (format-stats stats))`\n\n  Error handling (NB):\n    Handler errors will be silently swallowed. Please `try`/`catch` and\n    appropriately deal with (e.g. log) possible errors *within* `handler-fn`.\n\n  Async/blocking:\n    `handler-fn` should ideally be non-blocking, or reasonably cheap. Handler\n     dispatch occurs through a 1-thread 1k-buffer dropping queue.\n\n  Ns filtering:\n    Provide an optional `ns-pattern` arg to only call handler for matching\n    namespaces. See `compile-ns-filter` docstring for details on `ns-pattern`.\n\n  Handler ideas:\n    Save to a db, log, `put!` to an appropriate `core.async` channel, filter,\n    aggregate, use for a realtime analytics dashboard, examine for outliers\n    or unexpected output, ...", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([handler-id handler-fn] [handler-id ns-pattern handler-fn]), :arglists ([handler-id handler-fn] [handler-id ns-pattern handler-fn]), :arglists-meta (nil nil)}}, :name taoensso.tufte/add-handler!, :variadic false, :file "resources/public/js/taoensso/tufte.cljc", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([handler-id handler-fn] [handler-id ns-pattern handler-fn]), :arglists ([handler-id handler-fn] [handler-id ns-pattern handler-fn]), :arglists-meta (nil nil)}, :method-params ([handler-id handler-fn] [handler-id ns-pattern handler-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 168, :end-line 168, :max-fixed-arity 3, :fn-var true, :arglists ([handler-id handler-fn] [handler-id ns-pattern handler-fn]), :doc "Use this to register interest in stats output produced by `profile` calls.\n  Each registered `handler-fn` will be called as:\n\n    (handler-fn {:ns-str _ :level _ :?id _ :?data _ :stats _ :stats-str_ _})\n\n  Map args:\n    :ns-str     - Namespace string where `profile` call took place\n    :level      - Level e/o #{0 1 2 3 4 5}, given in `(profile {:level _} ...)`\n    :?id        - Optional id,              given in `(profile {:id    _} ...)`\n    :?data      - Optional arb data,        given in `(profile {:data  _} ...)`\n    :stats      - Stats map as in `(second (profiled ...))`\n    :stats-str_ - `(delay (format-stats stats))`\n\n  Error handling (NB):\n    Handler errors will be silently swallowed. Please `try`/`catch` and\n    appropriately deal with (e.g. log) possible errors *within* `handler-fn`.\n\n  Async/blocking:\n    `handler-fn` should ideally be non-blocking, or reasonably cheap. Handler\n     dispatch occurs through a 1-thread 1k-buffer dropping queue.\n\n  Ns filtering:\n    Provide an optional `ns-pattern` arg to only call handler for matching\n    namespaces. See `compile-ns-filter` docstring for details on `ns-pattern`.\n\n  Handler ideas:\n    Save to a db, log, `put!` to an appropriate `core.async` channel, filter,\n    aggregate, use for a realtime analytics dashboard, examine for outliers\n    or unexpected output, ..."}, accounted-time {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 519, :column 7, :end-line 519, :end-column 21, :arglists (quote ([stats]))}, :name taoensso.tufte/accounted-time, :variadic false, :file "resources/public/js/taoensso/tufte.cljc", :end-column 21, :method-params ([stats]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 519, :end-line 519, :max-fixed-arity 1, :fn-var true, :arglists (quote ([stats]))}, invalid-min-level-msg {:meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 56, :column 24, :end-line 56, :end-column 45, :const true, :private true}, :private true, :name taoensso.tufte/invalid-min-level-msg, :file "resources/public/js/taoensso/tufte.cljc", :end-column 45, :const-expr {:op :constant, :env {:context :expr}, :form "Invalid minimum Tufte profiling level: should be int e/o #{0 1 2 3 4 5 6}", :tag string}, :column 1, :const true, :line 56, :end-line 56, :tag string}, remove-handler! {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 209, :column 7, :end-line 209, :end-column 22, :arglists (quote ([handler-id]))}, :name taoensso.tufte/remove-handler!, :variadic false, :file "resources/public/js/taoensso/tufte.cljc", :end-column 22, :method-params ([handler-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 209, :end-line 209, :max-fixed-arity 1, :fn-var true, :arglists (quote ([handler-id]))}, stop-profiling-thread! {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 245, :column 7, :end-line 245, :end-column 29, :arglists (quote ([])), :doc "Warning: this is a low-level primitive."}, :name taoensso.tufte/stop-profiling-thread!, :variadic false, :file "resources/public/js/taoensso/tufte.cljc", :end-column 29, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 245, :end-line 245, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Warning: this is a low-level primitive."}, fn-sigs {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 658, :column 8, :end-line 658, :end-column 15, :private true, :arglists (quote ([def? fn-name sigs]))}, :private true, :name taoensso.tufte/fn-sigs, :variadic false, :file "resources/public/js/taoensso/tufte.cljc", :end-column 15, :method-params ([def? fn-name sigs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 658, :end-line 658, :max-fixed-arity 3, :fn-var true, :arglists (quote ([def? fn-name sigs]))}, chance {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 439, :column 7, :end-line 439, :end-column 13, :arglists (quote ([p])), :doc "Returns true with 0<`p`<1 probability."}, :name taoensso.tufte/chance, :variadic false, :file "resources/public/js/taoensso/tufte.cljc", :end-column 13, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 439, :end-line 439, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Returns true with 0<`p`<1 probability."}, -compile-ns-filter {:name taoensso.tufte/-compile-ns-filter, :file "resources/public/js/taoensso/tufte.cljc", :line 93, :column 1, :end-line 93, :end-column 24, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 93, :column 6, :end-line 93, :end-column 24}, :tag any}, ft {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 570, :column 8, :end-line 570, :end-column 10, :private true, :arglists (quote ([nanosecs]))}, :private true, :name taoensso.tufte/ft, :variadic false, :file "resources/public/js/taoensso/tufte.cljc", :end-column 10, :method-params ([nanosecs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 570, :end-line 570, :max-fixed-arity 1, :fn-var true, :arglists (quote ([nanosecs]))}, ->HandlerVal {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 165, :column 12, :end-line 165, :end-column 22, :internal-ctor true, :factory :positional, :arglists (quote ([ns-str level ?id ?data stats stats-str_ ?file ?line]))}, :name taoensso.tufte/->HandlerVal, :variadic false, :file "resources/public/js/taoensso/tufte.cljc", :end-column 22, :method-params ([ns-str level ?id ?data stats stats-str_ ?file ?line]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 165, :end-line 165, :max-fixed-arity 8, :fn-var true, :arglists (quote ([ns-str level ?id ?data stats stats-str_ ?file ?line]))}, perc {:protocol-inline nil, :meta {:file "/Users/Eric/Workspace/looperscript/resources/public/js/taoensso/tufte.cljc", :line 567, :column 8, :end-line 567, :end-column 12, :private true, :arglists (quote ([n d]))}, :private true, :name taoensso.tufte/perc, :variadic false, :file "resources/public/js/taoensso/tufte.cljc", :end-column 12, :method-params ([n d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 567, :end-line 567, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n d]))}}, :cljs.spec/registry-ref [], :require-macros {taoensso.tufte taoensso.tufte, enc taoensso.encore, taoensso.encore taoensso.encore, impl taoensso.tufte.impl, taoensso.tufte.impl taoensso.tufte.impl}, :cljs.analyzer/constants {:seen #{:time% :min :given cljs.core/binding stats :mean :else :ns-pattern :stats-str_ :time cljs.core/defn taoensso.tufte/*min-level* :?file :n-calls :type :ns-str stats-str_ :level taoensso.tufte/-compile-ns-filter taoensso.tufte/p ?file :dynamic :thread :max taoensso.tufte/*ns-filter* :id ns-str cljs.core/fn level :basic-println :?data :?line :mad :?id :def taoensso.tufte/valid-min-level :stats ?data ?line ?id}, :order [:given :type cljs.core/binding taoensso.tufte/*min-level* taoensso.tufte/valid-min-level taoensso.tufte/*ns-filter* taoensso.tufte/-compile-ns-filter :ns-str :level :?id :?data :stats :stats-str_ :?file :?line ns-str level ?id ?data stats stats-str_ ?file ?line :ns-pattern :basic-println :dynamic :thread :else :id :n-calls :min :max :mad :mean :time% :time taoensso.tufte/p :def cljs.core/fn cljs.core/defn]}, :doc "A simple, fast, monitoring profiler for Clojure/Script.\n\n  Usage: wrap+name interesting body exprs with the `p` macro. Then activate\n  profiling of these wrapped exprs using the `profiled` or `profile` macros:\n\n    (profiled {} (p :my-fn (my-fn))) ; Returns [<body-result> <?stats-map>]\n    (profile  {} (p :my-fn (my-fn))) ; Returns  <body-result>, dispatches\n                                     ; ?stats-map to any registered handlers.\n\n  Extensive facilities are provided for compile-time elision and runtime\n  filtering.\n\n  See the relevant docstrings for more info:\n    `p`, `profiled`, `profile`, `add-handler!` ; Core API\n\n    (p        [opts & body] [id & body]) ; e.g. `(p ::my-pid (do-work))`\n    (profiled [opts & body])             ; e.g. `(profiled {:level 2} (my-fn))`\n    (profile  [opts & body])             ; e.g. `(profiled {:level 2} (my-fn))`\n\n    (add-handler! [handler-id ns-pattern handler-fn])\n\n  How/where to use this library:\n    Tufte is highly optimized: even without elision, you can usually leave\n    profiling code in production (e.g. for sampled profiling, or to detect\n    unusual performance behaviour). Tufte's stats maps are well suited to\n    programmatic inspection + analysis."}