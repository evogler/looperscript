REFACTOR:
  -modules:
    -tree-traverser
    -note-scheduler
    -looperscript ui stuff
    -Q: where to put event hook for live syntax / graphics?
QUESTIONS:
  -multiple aspects refering to same cycle? (probably means cache results of actual fn)
UPCOMING STEPS:
  -!! change (flatten) in vec-fns to preserve vectors that should be intact
  -write tests (!!!)
  -find a way to kill the whole thing if it runs for too long
  -voice leading functions of some sort
  -arrays for overtones!
  -fix infinite loops on 0-length vectors
  -fine-tune (update)'s note replacement timing
  -make update more thoughtful. different modes:
    -?DGAF: just start the part from (now)
    -quick (probably default): make one pass over a part's time to figure out
        how to modulo time & other aspect list lengths.
        This will be 100% correct if time doesn't have functions.
    -full: grind through next-note-fn's until they catch up
  -make -part completely turn off a part
  -handle identical part names
  -fix parameterless functions to not require space before closing parens
  -toggle setinterval length based on document.hasfocus
  -memoization
  -proper params. as well as bpm, setting for latency.
  -standardize mode concept. (e.g.'s: tuning, hz)
    -push/pop modes?
  -peek ahead at next note's time to properly calculate note durs re. time+
  -preparse input in background
  -parser versions
  -abstract node pipeline for playing notes
  -proper handling of bpm changes
  -universal pulse mapping (e.g. to match a recording)
  -code folding?
  -handle complex rhythms inside vector functions (including modifiers?)
  -reverse order of modifier application?
  -REPL to test fns!
  -pass modifier state to each modifier-fn?
  -show errors somewhere! (& bug instaparse guy about bug)
  -maybe make it easier to specify when functions are expecting rhythms (which may be nestd)
LANGUAGE FEATURES:
  -modifiers that hook in in more ways? (controlling flow of input values, changing
   time after accumulation, creating loops?...)
  -try-repeatedly (try x times or until pred is matched (or score is maximized))
    -especially for use with coprime
  -legato/staccato!
  -quantize! (hello?!)
    -to any rhythm? with any percent? with a maxiumum offset?
  -sections defined within part, and then each aspect is defined per section
  -triggers (when time hits !, pitch moves)
    -triggers have ids and are shared across a bus
  -shared repo(?) for motives, fragments, and functions.
  -functions for defining abstract values over time (e.g. ramp, interp..)
  -history of everything that's been played? functions to refer back to these?
  -time functions based on actual time (and/or date?)
  -parts with separate rhythm controlling steps
  -first-class nested rhythmic layers to allow functions in lower layers.
  -syntactical sugar for chords
  -arbitrary nos of multiple cycles to alter aspect (e.g. not just <p> and <tr>)
    -plus and times type layers, at the least.
  -random but avoid what the note something else is currently playing
  -random for modes
  -specify filtering of multi-aspects for modes?
  -let
  -variables / quotes / aliasing (hopefully less hacky than {$a:} from looper
    -same definition for multiple parts with differences notated
    -dataflow / spreadsheetish approach?
  -chord changes?
    -chords? voice leading?
    -pitches as intervals of chords!!! (this could be a whole language!)
    -chords specified on lattice
  -logical operators (AND / OR 2 rhythms)
  -parts overlapping / covering eachother up (e.g. a fill interrupts a groove)
  -continuous-note mode
  -adsr
    -envelopes within aspect of single note
  -map any tuning system to integers (or possibly to non-integers as well!!)
  -move just intonation around lattice e.g. (just 3 -1)
  -express note as product of partials
  -gradual changes over time (e.g. ramps)
SECTION-LEVEL LANGUAGE IDEAS:
  -divide source file into
    -global param & configuration (default)
    -aspects (floating definitions of parts)
    -parts (already defined, set of aspects with defaults available)
    -section
      -groups of parts?
      -maybe sections is length plus each part and where to start in the part?
      -default program behavior is just go forever if sections aren't defined?
TECH STEPS:
  -mp3 caching!
  -lzma.js for GET
  -check out more of web audio, especially LFO
  -iOS compatibility library!
  -explore limits of mobile webapp background consistency
  -user upload samples?
  -reuse nodes when applicable?
  -webGL
  -web workers for background threads to not interfere with webaudio?
INTERFACE:
  -tutorial mode!!!!!!
  -show current beat
  -daytime / nighttime mode / offer several skins
  -advanced unpause: resume previous sounds
  -options panel?
  -keypress commands for things like mute
  -query currently playing functions / get current results of random fns
FURTHER STEPS:
  -user samples / more samples
  -step through loop by user input
  -tap tempo? tap tempo to indicate form of mp3?
  -play along with mp3?
  -(possibly separate noteon & noteoff for better performance during tempo changes?)
  -further synth controls - minispec for describing synth properties
  -templating for interface
  -visual interfaces (esp. on/off grid)
  -big-button phone interfaces
  -graphical / animated representations of loops; webGL tie in!
  -MIDI and/or screen keyboard play-along (with intonation)
  -record playback to loop form (to capture randoms)
  -record to WAV/MP3
  -output to staff notation (maybe in browser, in real-time?)
  -split into more modular libraries, to use looper also with overtone


DONE:
-functioning REPL!
-chords!
-get random library & allow seeding
-rests, at least somewhat
-fix calling actual functions [e.g. ((cycle))]
-chord inversion practice function
